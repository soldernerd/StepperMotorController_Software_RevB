

Microchip Technology PIC18 LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Feb 24 23:26:01 2019

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	18F47J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBIGRAMll,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=2
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=2
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=2
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=2
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=2
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	text122,global,reloc=2,class=CODE,delta=1
   143                           	psect	text123,global,reloc=2,class=CODE,delta=1
   144                           	psect	text124,global,reloc=2,class=CODE,delta=1
   145                           	psect	text125,global,reloc=2,class=CODE,delta=1
   146                           	psect	text126,global,reloc=2,class=CODE,delta=1
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	text128,global,reloc=2,class=CODE,delta=1
   149                           	psect	text129,global,reloc=2,class=CODE,delta=1
   150                           	psect	text130,global,reloc=2,class=CODE,delta=1
   151                           	psect	text131,global,reloc=2,class=CODE,delta=1
   152                           	psect	text132,global,reloc=2,class=CODE,delta=1
   153                           	psect	text133,global,reloc=2,class=CODE,delta=1
   154                           	psect	text134,global,reloc=2,class=CODE,delta=1
   155                           	psect	text135,global,reloc=2,class=CODE,delta=1
   156                           	psect	text136,global,reloc=2,class=CODE,delta=1
   157                           	psect	text137,global,reloc=2,class=CODE,delta=1
   158                           	psect	text138,global,reloc=2,class=CODE,delta=1
   159                           	psect	text139,global,reloc=2,class=CODE,delta=1
   160                           	psect	text140,global,reloc=2,class=CODE,delta=1
   161                           	psect	text141,global,reloc=2,class=CODE,delta=1
   162                           	psect	text142,global,reloc=2,class=CODE,delta=1
   163                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=2
   164                           	psect	text144,global,reloc=2,class=CODE,delta=1
   165                           	psect	text145,global,reloc=2,class=CODE,delta=1
   166                           	psect	text146,global,reloc=2,class=CODE,delta=1
   167                           	psect	text147,global,reloc=2,class=CODE,delta=1
   168                           	psect	text148,global,reloc=2,class=CODE,delta=1
   169                           	psect	text149,global,reloc=2,class=CODE,delta=1
   170                           	psect	text150,global,reloc=2,class=CODE,delta=1
   171                           	psect	text151,global,reloc=2,class=CODE,delta=1
   172                           	psect	text152,global,reloc=2,class=CODE,delta=1
   173                           	psect	text153,global,reloc=2,class=CODE,delta=1
   174                           	psect	text154,global,reloc=2,class=CODE,delta=1
   175                           	psect	text155,global,reloc=2,class=CODE,delta=1
   176                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   177                           	psect	text157,global,reloc=2,class=CODE,delta=1
   178                           	psect	text158,global,reloc=2,class=CODE,delta=1
   179                           	psect	text159,global,reloc=2,class=CODE,delta=1
   180                           	psect	text160,global,reloc=2,class=CODE,delta=1
   181                           	psect	text161,global,reloc=2,class=CODE,delta=1
   182                           	psect	text162,global,reloc=2,class=CODE,delta=1
   183                           	psect	text163,global,reloc=2,class=CODE,delta=1
   184                           	psect	text164,global,reloc=2,class=CODE,delta=1
   185                           	psect	text165,global,reloc=2,class=CODE,delta=1
   186                           	psect	text166,global,reloc=2,class=CODE,delta=1
   187                           	psect	text167,global,reloc=2,class=CODE,delta=1
   188                           	psect	text168,global,reloc=2,class=CODE,delta=1
   189                           	psect	text169,global,reloc=2,class=CODE,delta=1
   190                           	psect	text170,global,reloc=2,class=CODE,delta=1
   191                           	psect	text171,global,reloc=2,class=CODE,delta=1
   192                           	psect	text172,global,reloc=2,class=CODE,delta=1
   193                           	psect	text173,global,reloc=2,class=CODE,delta=1
   194                           	psect	text174,global,reloc=2,class=CODE,delta=1
   195                           	psect	text175,global,reloc=2,class=CODE,delta=1
   196                           	psect	text176,global,reloc=2,class=CODE,delta=1
   197                           	psect	text177,global,reloc=2,class=CODE,delta=1
   198                           	psect	text178,global,reloc=2,class=CODE,delta=1
   199                           	psect	text179,global,reloc=2,class=CODE,delta=1
   200                           	psect	text180,global,reloc=2,class=CODE,delta=1
   201                           	psect	text181,global,reloc=2,class=CODE,delta=1
   202                           	psect	text182,global,reloc=2,class=CODE,delta=1
   203                           	psect	text183,global,reloc=2,class=CODE,delta=1
   204                           	psect	text184,global,reloc=2,class=CODE,delta=1
   205                           	psect	text185,global,reloc=2,class=CODE,delta=1
   206                           	psect	text186,global,reloc=2,class=CODE,delta=1
   207                           	psect	text187,global,reloc=2,class=CODE,delta=1
   208                           	psect	text188,global,reloc=2,class=CODE,delta=1
   209                           	psect	text189,global,reloc=2,class=CODE,delta=1
   210                           	psect	text190,global,reloc=2,class=CODE,delta=1
   211                           	psect	text191,global,reloc=2,class=CODE,delta=1
   212                           	psect	text192,global,reloc=2,class=CODE,delta=1
   213                           	psect	text193,global,reloc=2,class=CODE,delta=1
   214                           	psect	text194,global,reloc=2,class=CODE,delta=1
   215                           	psect	text195,global,reloc=2,class=CODE,delta=1
   216                           	psect	text196,global,reloc=2,class=CODE,delta=1
   217                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   218                           	psect	text197,global,reloc=2,class=CODE,delta=1
   219                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   220                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   221                           	dabs	1,0x600,512,_msd_buffer
   222                           	dabs	1,0xD00,48,_BDT
   223                           	dabs	1,0xD40,31,_msd_cbw
   224                           	dabs	1,0xD80,13,_msd_csw
   225                           	dabs	1,0xD38,8,_CtrlTrfData
   226                           	dabs	1,0xD30,8,_SetupPkt
   227  0000                     
   228                           ; Version 2.00
   229                           ; Generated 27/05/2018 GMT
   230                           ; 
   231                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   232                           ; All rights reserved.
   233                           ; 
   234                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   235                           ; 
   236                           ; Redistribution and use in source and binary forms, with or without modification, are
   237                           ; permitted provided that the following conditions are met:
   238                           ; 
   239                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   240                           ;        conditions and the following disclaimer.
   241                           ; 
   242                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   243                           ;        of conditions and the following disclaimer in the documentation and/or other
   244                           ;        materials provided with the distribution.
   245                           ; 
   246                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   247                           ;        software without specific prior written permission.
   248                           ; 
   249                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   250                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   251                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   252                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   253                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   254                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   255                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   256                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   257                           ; 
   258                           ; 
   259                           ; Code-generator required, PIC18F47J53 Definitions
   260                           ; 
   261                           ; SFR Addresses
   262  0000                     
   263                           	psect	idataBANK1
   264  013C04                     __pidataBANK1:
   265                           	opt stack 0
   266                           
   267                           ;initializer for _LUN
   268  013C04  AC                 	db	low _ExternalFlash_MediaInitialize
   269  013C05  41                 	db	high _ExternalFlash_MediaInitialize
   270  013C06  01                 	db	low (_ExternalFlash_MediaInitialize shr (0+16))
   271  013C07  8E                 	db	low _ExternalFlash_CapacityRead
   272  013C08  42                 	db	high _ExternalFlash_CapacityRead
   273  013C09  01                 	db	low (_ExternalFlash_CapacityRead shr (0+16))
   274  013C0A  0A                 	db	low _ExternalFlash_SectorSizeRead
   275  013C0B  43                 	db	high _ExternalFlash_SectorSizeRead
   276  013C0C  01                 	db	low (_ExternalFlash_SectorSizeRead shr (0+16))
   277  013C0D  36                 	db	low _ExternalFlash_MediaDetect
   278  013C0E  43                 	db	high _ExternalFlash_MediaDetect
   279  013C0F  01                 	db	low (_ExternalFlash_MediaDetect shr (0+16))
   280  013C10  BE                 	db	low _ExternalFlash_SectorRead
   281  013C11  3D                 	db	high _ExternalFlash_SectorRead
   282  013C12  01                 	db	low (_ExternalFlash_SectorRead shr (0+16))
   283  013C13  54                 	db	low _ExternalFlash_WriteProtectStateGet
   284  013C14  43                 	db	high _ExternalFlash_WriteProtectStateGet
   285  013C15  01                 	db	low (_ExternalFlash_WriteProtectStateGet shr (0+16))
   286  013C16  8A                 	db	low _ExternalFlash_SectorWrite
   287  013C17  3D                 	db	high _ExternalFlash_SectorWrite
   288  013C18  01                 	db	low (_ExternalFlash_SectorWrite shr (0+16))
   289  013C19  00                 	db	0
   290  013C1A  00                 	db	0
   291  013C1B  00                 	db	0
   292  013C1C  00                 	db	0
   293  013C1D  00                 	db	0
   294  013C1E  00                 	db	0
   295  013C1F  00                 	db	0
   296  013C20  00                 	db	0
   297                           
   298                           ;initializer for i2c_display_init@F6908
   299  013C21  3A                 	db	58
   300  013C22  1E                 	db	30
   301  013C23  39                 	db	57
   302  013C24  0C                 	db	12
   303  013C25  74                 	db	116
   304  013C26  5C                 	db	92
   305  013C27  6D                 	db	109
   306  013C28  0C                 	db	12
   307  013C29  01                 	db	1
   308                           
   309                           ;initializer for __i2c_display_send_init_sequence@F6905
   310  013C2A  3A                 	db	58
   311  013C2B  1E                 	db	30
   312  013C2C  39                 	db	57
   313  013C2D  0C                 	db	12
   314  013C2E  74                 	db	116
   315  013C2F  5C                 	db	92
   316  013C30  6D                 	db	109
   317  013C31  0C                 	db	12
   318  013C32  01                 	db	1
   319                           
   320                           ;initializer for _configFile_name
   321  013C33  43                 	db	67
   322  013C34  4F                 	db	79
   323  013C35  4E                 	db	78
   324  013C36  46                 	db	70
   325  013C37  49                 	db	73
   326  013C38  47                 	db	71
   327  013C39  20                 	db	32
   328  013C3A  20                 	db	32
   329                           
   330                           ;initializer for _configFile_extention
   331  013C3B  54                 	db	84
   332  013C3C  58                 	db	88
   333  013C3D  54                 	db	84
   334                           
   335                           	psect	idataBANK2
   336  013356                     __pidataBANK2:
   337                           	opt stack 0
   338                           
   339                           ;initializer for _tx_buf
   340  013356  01                 	db	1
   341  013357  02                 	db	2
   342  013358  03                 	db	3
   343  013359  04                 	db	4
   344  01335A  05                 	db	5
   345  01335B  06                 	db	6
   346  01335C  07                 	db	7
   347  01335D  08                 	db	8
   348                           
   349                           ;initializer for _display_content
   350  01335E  2A                 	db	42
   351  01335F  20                 	db	32
   352  013360  20                 	db	32
   353  013361  53                 	db	83
   354  013362  74                 	db	116
   355  013363  65                 	db	101
   356  013364  70                 	db	112
   357  013365  70                 	db	112
   358  013366  65                 	db	101
   359  013367  72                 	db	114
   360  013368  20                 	db	32
   361  013369  4D                 	db	77
   362  01336A  6F                 	db	111
   363  01336B  74                 	db	116
   364  01336C  6F                 	db	111
   365  01336D  72                 	db	114
   366  01336E  20                 	db	32
   367  01336F  20                 	db	32
   368  013370  20                 	db	32
   369  013371  2A                 	db	42
   370  013372  2A                 	db	42
   371  013373  20                 	db	32
   372  013374  20                 	db	32
   373  013375  20                 	db	32
   374  013376  20                 	db	32
   375  013377  43                 	db	67
   376  013378  6F                 	db	111
   377  013379  6E                 	db	110
   378  01337A  74                 	db	116
   379  01337B  72                 	db	114
   380  01337C  6F                 	db	111
   381  01337D  6C                 	db	108
   382  01337E  6C                 	db	108
   383  01337F  65                 	db	101
   384  013380  72                 	db	114
   385  013381  20                 	db	32
   386  013382  20                 	db	32
   387  013383  20                 	db	32
   388  013384  20                 	db	32
   389  013385  2A                 	db	42
   390  013386  2A                 	db	42
   391  013387  20                 	db	32
   392  013388  20                 	db	32
   393  013389  20                 	db	32
   394  01338A  20                 	db	32
   395  01338B  20                 	db	32
   396  01338C  20                 	db	32
   397  01338D  20                 	db	32
   398  01338E  20                 	db	32
   399  01338F  20                 	db	32
   400  013390  20                 	db	32
   401  013391  20                 	db	32
   402  013392  20                 	db	32
   403  013393  20                 	db	32
   404  013394  20                 	db	32
   405  013395  20                 	db	32
   406  013396  20                 	db	32
   407  013397  20                 	db	32
   408  013398  20                 	db	32
   409  013399  2A                 	db	42
   410  01339A  2A                 	db	42
   411  01339B  20                 	db	32
   412  01339C  20                 	db	32
   413  01339D  73                 	db	115
   414  01339E  6F                 	db	111
   415  01339F  6C                 	db	108
   416  0133A0  64                 	db	100
   417  0133A1  65                 	db	101
   418  0133A2  72                 	db	114
   419  0133A3  6E                 	db	110
   420  0133A4  65                 	db	101
   421  0133A5  72                 	db	114
   422  0133A6  64                 	db	100
   423  0133A7  2E                 	db	46
   424  0133A8  63                 	db	99
   425  0133A9  6F                 	db	111
   426  0133AA  6D                 	db	109
   427  0133AB  20                 	db	32
   428  0133AC  20                 	db	32
   429  0133AD  2A                 	db	42
   430                           
   431                           	psect	mediumconst
   432  009092                     __pmediumconst:
   433                           	opt stack 0
   434  009092  00                 	db	0
   435  009093                     _motor_speed_lookup:
   436                           	opt stack 0
   437  009093  0008               	dw	8
   438  009095  000C               	dw	12
   439  009097  0010               	dw	16
   440  009099  0013               	dw	19
   441  00909B  0016               	dw	22
   442  00909D  0019               	dw	25
   443  00909F  001C               	dw	28
   444  0090A1  001E               	dw	30
   445  0090A3  0021               	dw	33
   446  0090A5  0023               	dw	35
   447  0090A7  0026               	dw	38
   448  0090A9  0028               	dw	40
   449  0090AB  002A               	dw	42
   450  0090AD  002C               	dw	44
   451  0090AF  002E               	dw	46
   452  0090B1  0030               	dw	48
   453  0090B3  0032               	dw	50
   454  0090B5  0034               	dw	52
   455  0090B7  0036               	dw	54
   456  0090B9  0038               	dw	56
   457  0090BB  003A               	dw	58
   458  0090BD  003C               	dw	60
   459  0090BF  003D               	dw	61
   460  0090C1  003F               	dw	63
   461  0090C3  0041               	dw	65
   462  0090C5  0043               	dw	67
   463  0090C7  0045               	dw	69
   464  0090C9  0046               	dw	70
   465  0090CB  0048               	dw	72
   466  0090CD  0049               	dw	73
   467  0090CF  004B               	dw	75
   468  0090D1  004D               	dw	77
   469  0090D3  004E               	dw	78
   470  0090D5  0050               	dw	80
   471  0090D7  0051               	dw	81
   472  0090D9  0053               	dw	83
   473  0090DB  0054               	dw	84
   474  0090DD  0056               	dw	86
   475  0090DF  0057               	dw	87
   476  0090E1  0059               	dw	89
   477  0090E3  005A               	dw	90
   478  0090E5  005C               	dw	92
   479  0090E7  005D               	dw	93
   480  0090E9  005F               	dw	95
   481  0090EB  0060               	dw	96
   482  0090ED  0062               	dw	98
   483  0090EF  0063               	dw	99
   484  0090F1  0064               	dw	100
   485  0090F3  0066               	dw	102
   486  0090F5  0067               	dw	103
   487  0090F7  0069               	dw	105
   488  0090F9  006A               	dw	106
   489  0090FB  006C               	dw	108
   490  0090FD  006D               	dw	109
   491  0090FF  006E               	dw	110
   492  009101  0070               	dw	112
   493  009103  0071               	dw	113
   494  009105  0072               	dw	114
   495  009107  0073               	dw	115
   496  009109  0074               	dw	116
   497  00910B  0076               	dw	118
   498  00910D  0078               	dw	120
   499  00910F  0079               	dw	121
   500  009111  007A               	dw	122
   501  009113  007B               	dw	123
   502  009115  007D               	dw	125
   503  009117  007E               	dw	126
   504  009119  007F               	dw	127
   505  00911B  0082               	dw	130
   506  00911D  0085               	dw	133
   507  00911F  0087               	dw	135
   508  009121  008A               	dw	138
   509  009123  008C               	dw	140
   510  009125  008F               	dw	143
   511  009127  0091               	dw	145
   512  009129  0092               	dw	146
   513  00912B  0094               	dw	148
   514  00912D  0098               	dw	152
   515  00912F  009A               	dw	154
   516  009131  009C               	dw	156
   517  009133  009E               	dw	158
   518  009135  00A1               	dw	161
   519  009137  00A3               	dw	163
   520  009139  00A5               	dw	165
   521  00913B  00A7               	dw	167
   522  00913D  00AA               	dw	170
   523  00913F  00AC               	dw	172
   524  009141  00AF               	dw	175
   525  009143  00B2               	dw	178
   526  009145  00B4               	dw	180
   527  009147  00B7               	dw	183
   528  009149  00B8               	dw	184
   529  00914B  00BA               	dw	186
   530  00914D  00BC               	dw	188
   531  00914F  00BE               	dw	190
   532  009151  00C0               	dw	192
   533  009153  00C3               	dw	195
   534  009155  00C4               	dw	196
   535  009157  00C6               	dw	198
   536  009159  00C8               	dw	200
   537  00915B  00CA               	dw	202
   538  00915D  00CC               	dw	204
   539  00915F  00CE               	dw	206
   540  009161  00D0               	dw	208
   541  009163  00D2               	dw	210
   542  009165  00D4               	dw	212
   543  009167  00D6               	dw	214
   544  009169  00D8               	dw	216
   545  00916B  00D9               	dw	217
   546  00916D  00DB               	dw	219
   547  00916F  00DD               	dw	221
   548  009171  00DF               	dw	223
   549  009173  00E1               	dw	225
   550  009175  00E2               	dw	226
   551  009177  00E5               	dw	229
   552  009179  00E7               	dw	231
   553  00917B  00E8               	dw	232
   554  00917D  00EA               	dw	234
   555  00917F  00EC               	dw	236
   556  009181  00EE               	dw	238
   557  009183  00EF               	dw	239
   558  009185  00F2               	dw	242
   559  009187  00F3               	dw	243
   560  009189  00F5               	dw	245
   561  00918B  00F7               	dw	247
   562  00918D  00F8               	dw	248
   563  00918F  00FB               	dw	251
   564  009191  00FD               	dw	253
   565  009193  0100               	dw	256
   566  009195  0103               	dw	259
   567  009197  0104               	dw	260
   568  009199  0107               	dw	263
   569  00919B  010A               	dw	266
   570  00919D  010C               	dw	268
   571  00919F  010F               	dw	271
   572  0091A1  0112               	dw	274
   573  0091A3  0114               	dw	276
   574  0091A5  0117               	dw	279
   575  0091A7  0119               	dw	281
   576  0091A9  011C               	dw	284
   577  0091AB  011E               	dw	286
   578  0091AD  0121               	dw	289
   579  0091AF  0123               	dw	291
   580  0091B1  0125               	dw	293
   581  0091B3  0129               	dw	297
   582  0091B5  012B               	dw	299
   583  0091B7  012C               	dw	300
   584  0091B9  012E               	dw	302
   585  0091BB  0132               	dw	306
   586  0091BD  0134               	dw	308
   587  0091BF  0136               	dw	310
   588  0091C1  0138               	dw	312
   589  0091C3  013B               	dw	315
   590  0091C5  013D               	dw	317
   591  0091C7  013F               	dw	319
   592  0091C9  0143               	dw	323
   593  0091CB  0146               	dw	326
   594  0091CD  0148               	dw	328
   595  0091CF  014A               	dw	330
   596  0091D1  014C               	dw	332
   597  0091D3  014F               	dw	335
   598  0091D5  0151               	dw	337
   599  0091D7  0154               	dw	340
   600  0091D9  0156               	dw	342
   601  0091DB  0159               	dw	345
   602  0091DD  015B               	dw	347
   603  0091DF  015E               	dw	350
   604  0091E1  0160               	dw	352
   605  0091E3  0163               	dw	355
   606  0091E5  0166               	dw	358
   607  0091E7  0169               	dw	361
   608  0091E9  016B               	dw	363
   609  0091EB  016E               	dw	366
   610  0091ED  0171               	dw	369
   611  0091EF  0174               	dw	372
   612  0091F1  0177               	dw	375
   613  0091F3  017A               	dw	378
   614  0091F5  017D               	dw	381
   615  0091F7  0180               	dw	384
   616  0091F9  0183               	dw	387
   617  0091FB  0187               	dw	391
   618  0091FD  018A               	dw	394
   619  0091FF  018D               	dw	397
   620  009201  0191               	dw	401
   621  009203  0194               	dw	404
   622  009205  0198               	dw	408
   623  009207  019B               	dw	411
   624  009209  019F               	dw	415
   625  00920B  01A3               	dw	419
   626  00920D  01A6               	dw	422
   627  00920F  01AA               	dw	426
   628  009211  01AE               	dw	430
   629  009213  01B2               	dw	434
   630  009215  01B6               	dw	438
   631  009217  01BA               	dw	442
   632  009219  01BE               	dw	446
   633  00921B  01C3               	dw	451
   634  00921D  01C7               	dw	455
   635  00921F  01CC               	dw	460
   636  009221  01D0               	dw	464
   637  009223  01D5               	dw	469
   638  009225  01D9               	dw	473
   639  009227  01DE               	dw	478
   640  009229  01E3               	dw	483
   641  00922B  01E8               	dw	488
   642  00922D  01ED               	dw	493
   643  00922F  01F3               	dw	499
   644  009231  01F8               	dw	504
   645  009233  01FE               	dw	510
   646  009235  0203               	dw	515
   647  009237  0209               	dw	521
   648  009239  020F               	dw	527
   649  00923B  0215               	dw	533
   650  00923D  021B               	dw	539
   651  00923F  0221               	dw	545
   652  009241  0227               	dw	551
   653  009243  022E               	dw	558
   654  009245  0235               	dw	565
   655  009247  023C               	dw	572
   656  009249  0243               	dw	579
   657  00924B  024A               	dw	586
   658  00924D  0251               	dw	593
   659  00924F  0259               	dw	601
   660  009251  0261               	dw	609
   661  009253  0269               	dw	617
   662  009255  0271               	dw	625
   663  009257  0279               	dw	633
   664  009259  0282               	dw	642
   665  00925B  028B               	dw	651
   666  00925D  0294               	dw	660
   667  00925F  029E               	dw	670
   668  009261  02A7               	dw	679
   669  009263  02B1               	dw	689
   670  009265  02BC               	dw	700
   671  009267  02C6               	dw	710
   672  009269  02D1               	dw	721
   673  00926B  02DC               	dw	732
   674  00926D  02DC               	dw	732
   675  00926F  02DF               	dw	735
   676  009271  02E2               	dw	738
   677  009273  02E5               	dw	741
   678  009275  02E8               	dw	744
   679  009277  02EB               	dw	747
   680  009279  02EE               	dw	750
   681  00927B  02F1               	dw	753
   682  00927D  02F4               	dw	756
   683  00927F  02F7               	dw	759
   684  009281  02FA               	dw	762
   685  009283  02FD               	dw	765
   686  009285  0300               	dw	768
   687  009287  0304               	dw	772
   688  009289  0307               	dw	775
   689  00928B  030A               	dw	778
   690  00928D  030D               	dw	781
   691  00928F  0311               	dw	785
   692  009291  0314               	dw	788
   693  009293  0317               	dw	791
   694  009295  031A               	dw	794
   695  009297  031E               	dw	798
   696  009299  0321               	dw	801
   697  00929B  0325               	dw	805
   698  00929D  0328               	dw	808
   699  00929F  032C               	dw	812
   700  0092A1  032F               	dw	815
   701  0092A3  0333               	dw	819
   702  0092A5  0336               	dw	822
   703  0092A7  033A               	dw	826
   704  0092A9  033E               	dw	830
   705  0092AB  0341               	dw	833
   706  0092AD  0345               	dw	837
   707  0092AF  0349               	dw	841
   708  0092B1  034D               	dw	845
   709  0092B3  0350               	dw	848
   710  0092B5  0354               	dw	852
   711  0092B7  0358               	dw	856
   712  0092B9  035C               	dw	860
   713  0092BB  0360               	dw	864
   714  0092BD  0364               	dw	868
   715  0092BF  0368               	dw	872
   716  0092C1  036C               	dw	876
   717  0092C3  0370               	dw	880
   718  0092C5  0374               	dw	884
   719  0092C7  0379               	dw	889
   720  0092C9  037D               	dw	893
   721  0092CB  0381               	dw	897
   722  0092CD  0385               	dw	901
   723  0092CF  038A               	dw	906
   724  0092D1  038E               	dw	910
   725  0092D3  0393               	dw	915
   726  0092D5  0397               	dw	919
   727  0092D7  039C               	dw	924
   728  0092D9  03A0               	dw	928
   729  0092DB  03A5               	dw	933
   730  0092DD  03AA               	dw	938
   731  0092DF  03AE               	dw	942
   732  0092E1  03B3               	dw	947
   733  0092E3  03B8               	dw	952
   734  0092E5  03BD               	dw	957
   735  0092E7  03C2               	dw	962
   736  0092E9  03C6               	dw	966
   737  0092EB  03CC               	dw	972
   738  0092ED  03D1               	dw	977
   739  0092EF  03D6               	dw	982
   740  0092F1  03DB               	dw	987
   741  0092F3  03E0               	dw	992
   742  0092F5  03E5               	dw	997
   743  0092F7  03EB               	dw	1003
   744  0092F9  03F0               	dw	1008
   745  0092FB  03F6               	dw	1014
   746  0092FD  03FB               	dw	1019
   747  0092FF  0401               	dw	1025
   748  009301  0406               	dw	1030
   749  009303  040C               	dw	1036
   750  009305  0412               	dw	1042
   751  009307  0417               	dw	1047
   752  009309  041D               	dw	1053
   753  00930B  0423               	dw	1059
   754  00930D  0429               	dw	1065
   755  00930F  042F               	dw	1071
   756  009311  0436               	dw	1078
   757  009313  043C               	dw	1084
   758  009315  0442               	dw	1090
   759  009317  0448               	dw	1096
   760  009319  044F               	dw	1103
   761  00931B  0455               	dw	1109
   762  00931D  045C               	dw	1116
   763  00931F  0463               	dw	1123
   764  009321  046A               	dw	1130
   765  009323  0470               	dw	1136
   766  009325  0477               	dw	1143
   767  009327  047E               	dw	1150
   768  009329  0485               	dw	1157
   769  00932B  048D               	dw	1165
   770  00932D  0494               	dw	1172
   771  00932F  049B               	dw	1179
   772  009331  04A3               	dw	1187
   773  009333  04AA               	dw	1194
   774  009335  04B2               	dw	1202
   775  009337  04BA               	dw	1210
   776  009339  04C2               	dw	1218
   777  00933B  04C9               	dw	1225
   778  00933D  04D2               	dw	1234
   779  00933F  04DA               	dw	1242
   780  009341  04E2               	dw	1250
   781  009343  04EA               	dw	1258
   782  009345  04F3               	dw	1267
   783  009347  04FC               	dw	1276
   784  009349  0504               	dw	1284
   785  00934B  050D               	dw	1293
   786  00934D  0516               	dw	1302
   787  00934F  051F               	dw	1311
   788  009351  0528               	dw	1320
   789  009353  0532               	dw	1330
   790  009355  053B               	dw	1339
   791  009357  0545               	dw	1349
   792  009359  054F               	dw	1359
   793  00935B  0559               	dw	1369
   794  00935D  0563               	dw	1379
   795  00935F  056D               	dw	1389
   796  009361  0577               	dw	1399
   797  009363  0582               	dw	1410
   798  009365  058C               	dw	1420
   799  009367  0597               	dw	1431
   800  009369  05A2               	dw	1442
   801  00936B  05AD               	dw	1453
   802  00936D  05B9               	dw	1465
   803  00936F  05C4               	dw	1476
   804  009371  05D0               	dw	1488
   805  009373  05DC               	dw	1500
   806  009375  05E8               	dw	1512
   807  009377  05F4               	dw	1524
   808  009379  0601               	dw	1537
   809  00937B  060E               	dw	1550
   810  00937D  061A               	dw	1562
   811  00937F  0628               	dw	1576
   812  009381  0635               	dw	1589
   813  009383  0643               	dw	1603
   814  009385  0650               	dw	1616
   815  009387  065E               	dw	1630
   816  009389  066D               	dw	1645
   817  00938B  067B               	dw	1659
   818  00938D  068A               	dw	1674
   819  00938F  0699               	dw	1689
   820  009391  06A9               	dw	1705
   821  009393  06B8               	dw	1720
   822  009395  06C8               	dw	1736
   823  009397  06D8               	dw	1752
   824  009399  06E9               	dw	1769
   825  00939B  06FA               	dw	1786
   826  00939D  070B               	dw	1803
   827  00939F  071C               	dw	1820
   828  0093A1  072E               	dw	1838
   829  0093A3  0740               	dw	1856
   830  0093A5  0753               	dw	1875
   831  0093A7  0766               	dw	1894
   832  0093A9  0779               	dw	1913
   833  0093AB  078D               	dw	1933
   834  0093AD  07A1               	dw	1953
   835  0093AF  07B6               	dw	1974
   836  0093B1  07CB               	dw	1995
   837  0093B3  07E0               	dw	2016
   838  0093B5  07F6               	dw	2038
   839  0093B7  080C               	dw	2060
   840  0093B9  0823               	dw	2083
   841  0093BB  083B               	dw	2107
   842  0093BD  0853               	dw	2131
   843  0093BF  086B               	dw	2155
   844  0093C1  0884               	dw	2180
   845  0093C3  089E               	dw	2206
   846  0093C5  08B8               	dw	2232
   847  0093C7  08D3               	dw	2259
   848  0093C9  08EF               	dw	2287
   849  0093CB  090B               	dw	2315
   850  0093CD  0928               	dw	2344
   851  0093CF  0945               	dw	2373
   852  0093D1  0964               	dw	2404
   853  0093D3  0983               	dw	2435
   854  0093D5  09A3               	dw	2467
   855  0093D7  09C4               	dw	2500
   856  0093D9  09E6               	dw	2534
   857  0093DB  0A08               	dw	2568
   858  0093DD  0A2C               	dw	2604
   859  0093DF  0A51               	dw	2641
   860  0093E1  0A77               	dw	2679
   861  0093E3  0A9D               	dw	2717
   862  0093E5  0AC5               	dw	2757
   863  0093E7  0AEF               	dw	2799
   864  0093E9  0B19               	dw	2841
   865  0093EB  0B45               	dw	2885
   866  0093ED  0B72               	dw	2930
   867  0093EF  0B72               	dw	2930
   868  0093F1  0B7D               	dw	2941
   869  0093F3  0B89               	dw	2953
   870  0093F5  0B94               	dw	2964
   871  0093F7  0BA0               	dw	2976
   872  0093F9  0BAC               	dw	2988
   873  0093FB  0BB8               	dw	3000
   874  0093FD  0BC4               	dw	3012
   875  0093FF  0BD0               	dw	3024
   876  009401  0BDC               	dw	3036
   877  009403  0BE9               	dw	3049
   878  009405  0BF5               	dw	3061
   879  009407  0C02               	dw	3074
   880  009409  0C0E               	dw	3086
   881  00940B  0C1B               	dw	3099
   882  00940D  0C28               	dw	3112
   883  00940F  0C35               	dw	3125
   884  009411  0C42               	dw	3138
   885  009413  0C4F               	dw	3151
   886  009415  0C5D               	dw	3165
   887  009417  0C6A               	dw	3178
   888  009419  0C77               	dw	3191
   889  00941B  0C85               	dw	3205
   890  00941D  0C93               	dw	3219
   891  00941F  0CA1               	dw	3233
   892  009421  0CAF               	dw	3247
   893  009423  0CBD               	dw	3261
   894  009425  0CCB               	dw	3275
   895  009427  0CD9               	dw	3289
   896  009429  0CE8               	dw	3304
   897  00942B  0CF7               	dw	3319
   898  00942D  0D05               	dw	3333
   899  00942F  0D14               	dw	3348
   900  009431  0D23               	dw	3363
   901  009433  0D32               	dw	3378
   902  009435  0D42               	dw	3394
   903  009437  0D51               	dw	3409
   904  009439  0D61               	dw	3425
   905  00943B  0D70               	dw	3440
   906  00943D  0D80               	dw	3456
   907  00943F  0D90               	dw	3472
   908  009441  0DA0               	dw	3488
   909  009443  0DB1               	dw	3505
   910  009445  0DC1               	dw	3521
   911  009447  0DD2               	dw	3538
   912  009449  0DE3               	dw	3555
   913  00944B  0DF3               	dw	3571
   914  00944D  0E05               	dw	3589
   915  00944F  0E16               	dw	3606
   916  009451  0E27               	dw	3623
   917  009453  0E39               	dw	3641
   918  009455  0E4B               	dw	3659
   919  009457  0E5C               	dw	3676
   920  009459  0E6F               	dw	3695
   921  00945B  0E81               	dw	3713
   922  00945D  0E93               	dw	3731
   923  00945F  0EA6               	dw	3750
   924  009461                     __end_of_motor_speed_lookup:
   925                           	opt stack 0
   926  009461                     _motor_steps_lookup:
   927                           	opt stack 0
   928  009461  0001               	dw	1
   929  009463  0002               	dw	2
   930  009465  0003               	dw	3
   931  009467  0004               	dw	4
   932  009469  0005               	dw	5
   933  00946B  0006               	dw	6
   934  00946D  0007               	dw	7
   935  00946F  0008               	dw	8
   936  009471  0009               	dw	9
   937  009473  000A               	dw	10
   938  009475  000B               	dw	11
   939  009477  000C               	dw	12
   940  009479  000D               	dw	13
   941  00947B  000E               	dw	14
   942  00947D  000F               	dw	15
   943  00947F  0010               	dw	16
   944  009481  0011               	dw	17
   945  009483  0012               	dw	18
   946  009485  0013               	dw	19
   947  009487  0014               	dw	20
   948  009489  0015               	dw	21
   949  00948B  0016               	dw	22
   950  00948D  0017               	dw	23
   951  00948F  0018               	dw	24
   952  009491  0019               	dw	25
   953  009493  001A               	dw	26
   954  009495  001B               	dw	27
   955  009497  001C               	dw	28
   956  009499  001D               	dw	29
   957  00949B  001E               	dw	30
   958  00949D  001F               	dw	31
   959  00949F  0020               	dw	32
   960  0094A1  0021               	dw	33
   961  0094A3  0022               	dw	34
   962  0094A5  0023               	dw	35
   963  0094A7  0024               	dw	36
   964  0094A9  0025               	dw	37
   965  0094AB  0026               	dw	38
   966  0094AD  0027               	dw	39
   967  0094AF  0028               	dw	40
   968  0094B1  0029               	dw	41
   969  0094B3  002A               	dw	42
   970  0094B5  002B               	dw	43
   971  0094B7  002C               	dw	44
   972  0094B9  002D               	dw	45
   973  0094BB  002E               	dw	46
   974  0094BD  002F               	dw	47
   975  0094BF  0030               	dw	48
   976  0094C1  0031               	dw	49
   977  0094C3  0032               	dw	50
   978  0094C5  0033               	dw	51
   979  0094C7  0034               	dw	52
   980  0094C9  0035               	dw	53
   981  0094CB  0036               	dw	54
   982  0094CD  0037               	dw	55
   983  0094CF  0038               	dw	56
   984  0094D1  0039               	dw	57
   985  0094D3  003A               	dw	58
   986  0094D5  003B               	dw	59
   987  0094D7  003C               	dw	60
   988  0094D9  003D               	dw	61
   989  0094DB  003E               	dw	62
   990  0094DD  003F               	dw	63
   991  0094DF  0040               	dw	64
   992  0094E1  0041               	dw	65
   993  0094E3  0042               	dw	66
   994  0094E5  0043               	dw	67
   995  0094E7  0045               	dw	69
   996  0094E9  0047               	dw	71
   997  0094EB  0049               	dw	73
   998  0094ED  004B               	dw	75
   999  0094EF  004D               	dw	77
  1000  0094F1  004F               	dw	79
  1001  0094F3  0051               	dw	81
  1002  0094F5  0053               	dw	83
  1003  0094F7  0055               	dw	85
  1004  0094F9  0057               	dw	87
  1005  0094FB  0059               	dw	89
  1006  0094FD  005B               	dw	91
  1007  0094FF  005D               	dw	93
  1008  009501  005F               	dw	95
  1009  009503  0061               	dw	97
  1010  009505  0063               	dw	99
  1011  009507  0065               	dw	101
  1012  009509  0067               	dw	103
  1013  00950B  0069               	dw	105
  1014  00950D  006B               	dw	107
  1015  00950F  006E               	dw	110
  1016  009511  0070               	dw	112
  1017  009513  0073               	dw	115
  1018  009515  0075               	dw	117
  1019  009517  0077               	dw	119
  1020  009519  0079               	dw	121
  1021  00951B  007B               	dw	123
  1022  00951D  007D               	dw	125
  1023  00951F  007F               	dw	127
  1024  009521  0081               	dw	129
  1025  009523  0083               	dw	131
  1026  009525  0085               	dw	133
  1027  009527  0087               	dw	135
  1028  009529  0089               	dw	137
  1029  00952B  008B               	dw	139
  1030  00952D  008D               	dw	141
  1031  00952F  008F               	dw	143
  1032  009531  0091               	dw	145
  1033  009533  0093               	dw	147
  1034  009535  0095               	dw	149
  1035  009537  0097               	dw	151
  1036  009539  0099               	dw	153
  1037  00953B  009B               	dw	155
  1038  00953D  009D               	dw	157
  1039  00953F  009F               	dw	159
  1040  009541  00A1               	dw	161
  1041  009543  00A3               	dw	163
  1042  009545  00A5               	dw	165
  1043  009547  00A7               	dw	167
  1044  009549  00A9               	dw	169
  1045  00954B  00AB               	dw	171
  1046  00954D  00AD               	dw	173
  1047  00954F  00AF               	dw	175
  1048  009551  00B1               	dw	177
  1049  009553  00B3               	dw	179
  1050  009555  00B5               	dw	181
  1051  009557  00B7               	dw	183
  1052  009559  00B9               	dw	185
  1053  00955B  00BB               	dw	187
  1054  00955D  00BD               	dw	189
  1055  00955F  00C0               	dw	192
  1056  009561  00C3               	dw	195
  1057  009563  00C6               	dw	198
  1058  009565  00C9               	dw	201
  1059  009567  00CC               	dw	204
  1060  009569  00CF               	dw	207
  1061  00956B  00D2               	dw	210
  1062  00956D  00D5               	dw	213
  1063  00956F  00D8               	dw	216
  1064  009571  00DB               	dw	219
  1065  009573  00DE               	dw	222
  1066  009575  00E1               	dw	225
  1067  009577  00E4               	dw	228
  1068  009579  00E7               	dw	231
  1069  00957B  00EA               	dw	234
  1070  00957D  00ED               	dw	237
  1071  00957F  00F0               	dw	240
  1072  009581  00F3               	dw	243
  1073  009583  00F6               	dw	246
  1074  009585  00F9               	dw	249
  1075  009587  00FC               	dw	252
  1076  009589  00FF               	dw	255
  1077  00958B  0102               	dw	258
  1078  00958D  0105               	dw	261
  1079  00958F  0108               	dw	264
  1080  009591  010B               	dw	267
  1081  009593  010E               	dw	270
  1082  009595  0111               	dw	273
  1083  009597  0114               	dw	276
  1084  009599  0117               	dw	279
  1085  00959B  011A               	dw	282
  1086  00959D  011D               	dw	285
  1087  00959F  0120               	dw	288
  1088  0095A1  0123               	dw	291
  1089  0095A3  0126               	dw	294
  1090  0095A5  012A               	dw	298
  1091  0095A7  012D               	dw	301
  1092  0095A9  0130               	dw	304
  1093  0095AB  0133               	dw	307
  1094  0095AD  0137               	dw	311
  1095  0095AF  013A               	dw	314
  1096  0095B1  013E               	dw	318
  1097  0095B3  0142               	dw	322
  1098  0095B5  0145               	dw	325
  1099  0095B7  0149               	dw	329
  1100  0095B9  014D               	dw	333
  1101  0095BB  0151               	dw	337
  1102  0095BD  0155               	dw	341
  1103  0095BF  0159               	dw	345
  1104  0095C1  015D               	dw	349
  1105  0095C3  0161               	dw	353
  1106  0095C5  0166               	dw	358
  1107  0095C7  016A               	dw	362
  1108  0095C9  016E               	dw	366
  1109  0095CB  0173               	dw	371
  1110  0095CD  0178               	dw	376
  1111  0095CF  017D               	dw	381
  1112  0095D1  0182               	dw	386
  1113  0095D3  0187               	dw	391
  1114  0095D5  018C               	dw	396
  1115  0095D7  0191               	dw	401
  1116  0095D9  0196               	dw	406
  1117  0095DB  019C               	dw	412
  1118  0095DD  01A1               	dw	417
  1119  0095DF  01A7               	dw	423
  1120  0095E1  01AD               	dw	429
  1121  0095E3  01B3               	dw	435
  1122  0095E5  01B9               	dw	441
  1123  0095E7  01BF               	dw	447
  1124  0095E9  01C6               	dw	454
  1125  0095EB  01CC               	dw	460
  1126  0095ED  01D3               	dw	467
  1127  0095EF  01DA               	dw	474
  1128  0095F1  01E1               	dw	481
  1129  0095F3  01E8               	dw	488
  1130  0095F5  01F0               	dw	496
  1131  0095F7  01F7               	dw	503
  1132  0095F9  01FF               	dw	511
  1133  0095FB  0207               	dw	519
  1134  0095FD  020F               	dw	527
  1135  0095FF  0218               	dw	536
  1136  009601  0221               	dw	545
  1137  009603  022A               	dw	554
  1138  009605  0233               	dw	563
  1139  009607  023D               	dw	573
  1140  009609  0247               	dw	583
  1141  00960B  0251               	dw	593
  1142  00960D  025C               	dw	604
  1143  00960F  0267               	dw	615
  1144  009611  0272               	dw	626
  1145  009613  027E               	dw	638
  1146  009615  028A               	dw	650
  1147  009617  0297               	dw	663
  1148  009619  02A4               	dw	676
  1149  00961B  02B2               	dw	690
  1150  00961D  02C0               	dw	704
  1151  00961F  02CF               	dw	719
  1152  009621  02DF               	dw	735
  1153  009623  02EF               	dw	751
  1154  009625  02FF               	dw	767
  1155  009627  0311               	dw	785
  1156  009629  0323               	dw	803
  1157  00962B  0336               	dw	822
  1158  00962D  0349               	dw	841
  1159  00962F  035E               	dw	862
  1160  009631  0373               	dw	883
  1161  009633  0389               	dw	905
  1162  009635  03A1               	dw	929
  1163  009637  03B9               	dw	953
  1164  009639  03D3               	dw	979
  1165  00963B  03DD               	dw	989
  1166  00963D  03E4               	dw	996
  1167  00963F  03EA               	dw	1002
  1168  009641  03F1               	dw	1009
  1169  009643  03F8               	dw	1016
  1170  009645  03FF               	dw	1023
  1171  009647  0406               	dw	1030
  1172  009649  040D               	dw	1037
  1173  00964B  0415               	dw	1045
  1174  00964D  041C               	dw	1052
  1175  00964F  0424               	dw	1060
  1176  009651  042B               	dw	1067
  1177  009653  0433               	dw	1075
  1178  009655  043B               	dw	1083
  1179  009657  0442               	dw	1090
  1180  009659  044A               	dw	1098
  1181  00965B  0452               	dw	1106
  1182  00965D  045A               	dw	1114
  1183  00965F  0463               	dw	1123
  1184  009661  046B               	dw	1131
  1185  009663  0474               	dw	1140
  1186  009665  047C               	dw	1148
  1187  009667  0485               	dw	1157
  1188  009669  048E               	dw	1166
  1189  00966B  0496               	dw	1174
  1190  00966D  049F               	dw	1183
  1191  00966F  04A9               	dw	1193
  1192  009671  04B2               	dw	1202
  1193  009673  04BB               	dw	1211
  1194  009675  04C5               	dw	1221
  1195  009677  04CE               	dw	1230
  1196  009679  04D8               	dw	1240
  1197  00967B  04E2               	dw	1250
  1198  00967D  04EC               	dw	1260
  1199  00967F  04F6               	dw	1270
  1200  009681  0500               	dw	1280
  1201  009683  050B               	dw	1291
  1202  009685  0515               	dw	1301
  1203  009687  0520               	dw	1312
  1204  009689  052B               	dw	1323
  1205  00968B  0536               	dw	1334
  1206  00968D  0541               	dw	1345
  1207  00968F  054C               	dw	1356
  1208  009691  0558               	dw	1368
  1209  009693  0564               	dw	1380
  1210  009695  056F               	dw	1391
  1211  009697  057B               	dw	1403
  1212  009699  0587               	dw	1415
  1213  00969B  0594               	dw	1428
  1214  00969D  05A0               	dw	1440
  1215  00969F  05AD               	dw	1453
  1216  0096A1  05BA               	dw	1466
  1217  0096A3  05C7               	dw	1479
  1218  0096A5  05D4               	dw	1492
  1219  0096A7  05E2               	dw	1506
  1220  0096A9  05EF               	dw	1519
  1221  0096AB  05FD               	dw	1533
  1222  0096AD  060B               	dw	1547
  1223  0096AF  0619               	dw	1561
  1224  0096B1  0628               	dw	1576
  1225  0096B3  0637               	dw	1591
  1226  0096B5  0646               	dw	1606
  1227  0096B7  0655               	dw	1621
  1228  0096B9  0664               	dw	1636
  1229  0096BB  0674               	dw	1652
  1230  0096BD  0684               	dw	1668
  1231  0096BF  0694               	dw	1684
  1232  0096C1  06A4               	dw	1700
  1233  0096C3  06B5               	dw	1717
  1234  0096C5  06C6               	dw	1734
  1235  0096C7  06D7               	dw	1751
  1236  0096C9  06E9               	dw	1769
  1237  0096CB  06FA               	dw	1786
  1238  0096CD  070C               	dw	1804
  1239  0096CF  071F               	dw	1823
  1240  0096D1  0731               	dw	1841
  1241  0096D3  0744               	dw	1860
  1242  0096D5  0758               	dw	1880
  1243  0096D7  076B               	dw	1899
  1244  0096D9  077F               	dw	1919
  1245  0096DB  0793               	dw	1939
  1246  0096DD  07A8               	dw	1960
  1247  0096DF  07BD               	dw	1981
  1248  0096E1  07D2               	dw	2002
  1249  0096E3  07E8               	dw	2024
  1250  0096E5  07FE               	dw	2046
  1251  0096E7  0815               	dw	2069
  1252  0096E9  082C               	dw	2092
  1253  0096EB  0843               	dw	2115
  1254  0096ED  085B               	dw	2139
  1255  0096EF  0873               	dw	2163
  1256  0096F1  088B               	dw	2187
  1257  0096F3  08A5               	dw	2213
  1258  0096F5  08BE               	dw	2238
  1259  0096F7  08D8               	dw	2264
  1260  0096F9  08F2               	dw	2290
  1261  0096FB  090D               	dw	2317
  1262  0096FD  0929               	dw	2345
  1263  0096FF  0945               	dw	2373
  1264  009701  0961               	dw	2401
  1265  009703  097E               	dw	2430
  1266  009705  099C               	dw	2460
  1267  009707  09BA               	dw	2490
  1268  009709  09D9               	dw	2521
  1269  00970B  09F9               	dw	2553
  1270  00970D  0A19               	dw	2585
  1271  00970F  0A39               	dw	2617
  1272  009711  0A5B               	dw	2651
  1273  009713  0A7D               	dw	2685
  1274  009715  0A9F               	dw	2719
  1275  009717  0AC3               	dw	2755
  1276  009719  0AE7               	dw	2791
  1277  00971B  0B0C               	dw	2828
  1278  00971D  0B31               	dw	2865
  1279  00971F  0B58               	dw	2904
  1280  009721  0B7F               	dw	2943
  1281  009723  0BA7               	dw	2983
  1282  009725  0BD0               	dw	3024
  1283  009727  0BFA               	dw	3066
  1284  009729  0C25               	dw	3109
  1285  00972B  0C51               	dw	3153
  1286  00972D  0C7E               	dw	3198
  1287  00972F  0CAB               	dw	3243
  1288  009731  0CDA               	dw	3290
  1289  009733  0D0A               	dw	3338
  1290  009735  0D3B               	dw	3387
  1291  009737  0D6D               	dw	3437
  1292  009739  0DA0               	dw	3488
  1293  00973B  0DD4               	dw	3540
  1294  00973D  0E0A               	dw	3594
  1295  00973F  0E41               	dw	3649
  1296  009741  0E79               	dw	3705
  1297  009743  0EB3               	dw	3763
  1298  009745  0EEE               	dw	3822
  1299  009747  0F2A               	dw	3882
  1300  009749  0F68               	dw	3944
  1301  00974B  0FA8               	dw	4008
  1302  00974D  0FE9               	dw	4073
  1303  00974F  102C               	dw	4140
  1304  009751  1070               	dw	4208
  1305  009753  10B6               	dw	4278
  1306  009755  10FE               	dw	4350
  1307  009757  1148               	dw	4424
  1308  009759  1194               	dw	4500
  1309  00975B  11E2               	dw	4578
  1310  00975D  1232               	dw	4658
  1311  00975F  1285               	dw	4741
  1312  009761  12D9               	dw	4825
  1313  009763  1330               	dw	4912
  1314  009765  1389               	dw	5001
  1315  009767  13E5               	dw	5093
  1316  009769  1444               	dw	5188
  1317  00976B  14A5               	dw	5285
  1318  00976D  1509               	dw	5385
  1319  00976F  1570               	dw	5488
  1320  009771  15DA               	dw	5594
  1321  009773  1647               	dw	5703
  1322  009775  16B8               	dw	5816
  1323  009777  172B               	dw	5931
  1324  009779  17A3               	dw	6051
  1325  00977B  181E               	dw	6174
  1326  00977D  189D               	dw	6301
  1327  00977F  1921               	dw	6433
  1328  009781  19A8               	dw	6568
  1329  009783  1A34               	dw	6708
  1330  009785  1AC4               	dw	6852
  1331  009787  1B5A               	dw	7002
  1332  009789  1BF4               	dw	7156
  1333  00978B  1C94               	dw	7316
  1334  00978D  1D39               	dw	7481
  1335  00978F  1DE4               	dw	7652
  1336  009791  1E95               	dw	7829
  1337  009793  1F4C               	dw	8012
  1338  009795  200A               	dw	8202
  1339  009797  20CE               	dw	8398
  1340  009799  219A               	dw	8602
  1341  00979B  226E               	dw	8814
  1342  00979D  234A               	dw	9034
  1343  00979F  242E               	dw	9262
  1344  0097A1  251B               	dw	9499
  1345  0097A3  2612               	dw	9746
  1346  0097A5  2712               	dw	10002
  1347  0097A7  281D               	dw	10269
  1348  0097A9  2932               	dw	10546
  1349  0097AB  2A53               	dw	10835
  1350  0097AD  2B81               	dw	11137
  1351  0097AF  2CBB               	dw	11451
  1352  0097B1  2E03               	dw	11779
  1353  0097B3  2F5A               	dw	12122
  1354  0097B5  30C0               	dw	12480
  1355  0097B7  3236               	dw	12854
  1356  0097B9  33BD               	dw	13245
  1357  0097BB  3557               	dw	13655
  1358  0097BD  35F5               	dw	13813
  1359  0097BF  3661               	dw	13921
  1360  0097C1  36CD               	dw	14029
  1361  0097C3  373B               	dw	14139
  1362  0097C5  37AA               	dw	14250
  1363  0097C7  381B               	dw	14363
  1364  0097C9  388C               	dw	14476
  1365  0097CB  3900               	dw	14592
  1366  0097CD  3974               	dw	14708
  1367  0097CF  39EA               	dw	14826
  1368  0097D1  3A62               	dw	14946
  1369  0097D3  3ADB               	dw	15067
  1370  0097D5  3B55               	dw	15189
  1371  0097D7  3BD1               	dw	15313
  1372  0097D9  3C4E               	dw	15438
  1373  0097DB  3CCD               	dw	15565
  1374  0097DD  3D4E               	dw	15694
  1375  0097DF  3DD0               	dw	15824
  1376  0097E1  3E54               	dw	15956
  1377  0097E3  3EDA               	dw	16090
  1378  0097E5  3F61               	dw	16225
  1379  0097E7  3FEA               	dw	16362
  1380  0097E9  4074               	dw	16500
  1381  0097EB  4101               	dw	16641
  1382  0097ED  418F               	dw	16783
  1383  0097EF  421F               	dw	16927
  1384  0097F1  42B1               	dw	17073
  1385  0097F3  4345               	dw	17221
  1386  0097F5  43DB               	dw	17371
  1387  0097F7  4473               	dw	17523
  1388  0097F9  450D               	dw	17677
  1389  0097FB  45A9               	dw	17833
  1390  0097FD  4647               	dw	17991
  1391  0097FF  46E7               	dw	18151
  1392  009801  4789               	dw	18313
  1393  009803  482E               	dw	18478
  1394  009805  48D5               	dw	18645
  1395  009807  497E               	dw	18814
  1396  009809  4A29               	dw	18985
  1397  00980B  4AD7               	dw	19159
  1398  00980D  4B87               	dw	19335
  1399  00980F  4C3A               	dw	19514
  1400  009811  4CEF               	dw	19695
  1401  009813  4DA6               	dw	19878
  1402  009815  4E61               	dw	20065
  1403  009817  4F1E               	dw	20254
  1404  009819  4FDD               	dw	20445
  1405  00981B  50A0               	dw	20640
  1406  00981D  5165               	dw	20837
  1407  00981F  522D               	dw	21037
  1408  009821  52F8               	dw	21240
  1409  009823  53C6               	dw	21446
  1410  009825  5497               	dw	21655
  1411  009827  556B               	dw	21867
  1412  009829  5642               	dw	22082
  1413  00982B  571C               	dw	22300
  1414  00982D  57FA               	dw	22522
  1415  00982F                     __end_of_motor_steps_lookup:
  1416                           	opt stack 0
  1417  00982F                     _motor_postscaler_lookup:
  1418                           	opt stack 0
  1419  00982F  0C                 	db	12
  1420  009830  07                 	db	7
  1421  009831  05                 	db	5
  1422  009832  04                 	db	4
  1423  009833  04                 	db	4
  1424  009834  03                 	db	3
  1425  009835  03                 	db	3
  1426  009836  03                 	db	3
  1427  009837  02                 	db	2
  1428  009838  02                 	db	2
  1429  009839  02                 	db	2
  1430  00983A  02                 	db	2
  1431  00983B  02                 	db	2
  1432  00983C  02                 	db	2
  1433  00983D  01                 	db	1
  1434  00983E  01                 	db	1
  1435  00983F  01                 	db	1
  1436  009840  01                 	db	1
  1437  009841  01                 	db	1
  1438  009842  01                 	db	1
  1439  009843  01                 	db	1
  1440  009844  01                 	db	1
  1441  009845  01                 	db	1
  1442  009846  01                 	db	1
  1443  009847  01                 	db	1
  1444  009848  01                 	db	1
  1445  009849  01                 	db	1
  1446  00984A  01                 	db	1
  1447  00984B  01                 	db	1
  1448  00984C  01                 	db	1
  1449  00984D  01                 	db	1
  1450  00984E  01                 	db	1
  1451  00984F  01                 	db	1
  1452  009850  01                 	db	1
  1453  009851  01                 	db	1
  1454  009852  01                 	db	1
  1455  009853  01                 	db	1
  1456  009854  01                 	db	1
  1457  009855  01                 	db	1
  1458  009856  01                 	db	1
  1459  009857  01                 	db	1
  1460  009858  01                 	db	1
  1461  009859  01                 	db	1
  1462  00985A  01                 	db	1
  1463  00985B  01                 	db	1
  1464  00985C  01                 	db	1
  1465  00985D  01                 	db	1
  1466  00985E  01                 	db	1
  1467  00985F  01                 	db	1
  1468  009860  01                 	db	1
  1469  009861  01                 	db	1
  1470  009862  01                 	db	1
  1471  009863  01                 	db	1
  1472  009864  01                 	db	1
  1473  009865  01                 	db	1
  1474  009866  01                 	db	1
  1475  009867  01                 	db	1
  1476  009868  01                 	db	1
  1477  009869  01                 	db	1
  1478  00986A  01                 	db	1
  1479  00986B  01                 	db	1
  1480  00986C  01                 	db	1
  1481  00986D  01                 	db	1
  1482  00986E  01                 	db	1
  1483  00986F  01                 	db	1
  1484  009870  01                 	db	1
  1485  009871  01                 	db	1
  1486  009872  01                 	db	1
  1487  009873  01                 	db	1
  1488  009874  01                 	db	1
  1489  009875  01                 	db	1
  1490  009876  01                 	db	1
  1491  009877  01                 	db	1
  1492  009878  01                 	db	1
  1493  009879  01                 	db	1
  1494  00987A  01                 	db	1
  1495  00987B  01                 	db	1
  1496  00987C  01                 	db	1
  1497  00987D  01                 	db	1
  1498  00987E  01                 	db	1
  1499  00987F  01                 	db	1
  1500  009880  01                 	db	1
  1501  009881  01                 	db	1
  1502  009882  01                 	db	1
  1503  009883  01                 	db	1
  1504  009884  01                 	db	1
  1505  009885  01                 	db	1
  1506  009886  01                 	db	1
  1507  009887  01                 	db	1
  1508  009888  01                 	db	1
  1509  009889  01                 	db	1
  1510  00988A  00                 	db	0
  1511  00988B  00                 	db	0
  1512  00988C  00                 	db	0
  1513  00988D  00                 	db	0
  1514  00988E  00                 	db	0
  1515  00988F  00                 	db	0
  1516  009890  00                 	db	0
  1517  009891  00                 	db	0
  1518  009892  00                 	db	0
  1519  009893  00                 	db	0
  1520  009894  00                 	db	0
  1521  009895  00                 	db	0
  1522  009896  00                 	db	0
  1523  009897  00                 	db	0
  1524  009898  00                 	db	0
  1525  009899  00                 	db	0
  1526  00989A  00                 	db	0
  1527  00989B  00                 	db	0
  1528  00989C  00                 	db	0
  1529  00989D  00                 	db	0
  1530  00989E  00                 	db	0
  1531  00989F  00                 	db	0
  1532  0098A0  00                 	db	0
  1533  0098A1  00                 	db	0
  1534  0098A2  00                 	db	0
  1535  0098A3  00                 	db	0
  1536  0098A4  00                 	db	0
  1537  0098A5  00                 	db	0
  1538  0098A6  00                 	db	0
  1539  0098A7  00                 	db	0
  1540  0098A8  00                 	db	0
  1541  0098A9  00                 	db	0
  1542  0098AA  00                 	db	0
  1543  0098AB  00                 	db	0
  1544  0098AC  00                 	db	0
  1545  0098AD  00                 	db	0
  1546  0098AE  00                 	db	0
  1547  0098AF  00                 	db	0
  1548  0098B0  00                 	db	0
  1549  0098B1  00                 	db	0
  1550  0098B2  00                 	db	0
  1551  0098B3  00                 	db	0
  1552  0098B4  00                 	db	0
  1553  0098B5  00                 	db	0
  1554  0098B6  00                 	db	0
  1555  0098B7  00                 	db	0
  1556  0098B8  00                 	db	0
  1557  0098B9  00                 	db	0
  1558  0098BA  00                 	db	0
  1559  0098BB  00                 	db	0
  1560  0098BC  00                 	db	0
  1561  0098BD  00                 	db	0
  1562  0098BE  00                 	db	0
  1563  0098BF  00                 	db	0
  1564  0098C0  00                 	db	0
  1565  0098C1  00                 	db	0
  1566  0098C2  00                 	db	0
  1567  0098C3  00                 	db	0
  1568  0098C4  00                 	db	0
  1569  0098C5  00                 	db	0
  1570  0098C6  00                 	db	0
  1571  0098C7  00                 	db	0
  1572  0098C8  00                 	db	0
  1573  0098C9  00                 	db	0
  1574  0098CA  00                 	db	0
  1575  0098CB  00                 	db	0
  1576  0098CC  00                 	db	0
  1577  0098CD  00                 	db	0
  1578  0098CE  00                 	db	0
  1579  0098CF  00                 	db	0
  1580  0098D0  00                 	db	0
  1581  0098D1  00                 	db	0
  1582  0098D2  00                 	db	0
  1583  0098D3  00                 	db	0
  1584  0098D4  00                 	db	0
  1585  0098D5  00                 	db	0
  1586  0098D6  00                 	db	0
  1587  0098D7  00                 	db	0
  1588  0098D8  00                 	db	0
  1589  0098D9  00                 	db	0
  1590  0098DA  00                 	db	0
  1591  0098DB  00                 	db	0
  1592  0098DC  00                 	db	0
  1593  0098DD  00                 	db	0
  1594  0098DE  00                 	db	0
  1595  0098DF  00                 	db	0
  1596  0098E0  00                 	db	0
  1597  0098E1  00                 	db	0
  1598  0098E2  00                 	db	0
  1599  0098E3  00                 	db	0
  1600  0098E4  00                 	db	0
  1601  0098E5  00                 	db	0
  1602  0098E6  00                 	db	0
  1603  0098E7  00                 	db	0
  1604  0098E8  00                 	db	0
  1605  0098E9  00                 	db	0
  1606  0098EA  00                 	db	0
  1607  0098EB  00                 	db	0
  1608  0098EC  00                 	db	0
  1609  0098ED  00                 	db	0
  1610  0098EE  00                 	db	0
  1611  0098EF  00                 	db	0
  1612  0098F0  00                 	db	0
  1613  0098F1  00                 	db	0
  1614  0098F2  00                 	db	0
  1615  0098F3  00                 	db	0
  1616  0098F4  00                 	db	0
  1617  0098F5  00                 	db	0
  1618  0098F6  00                 	db	0
  1619  0098F7  00                 	db	0
  1620  0098F8  00                 	db	0
  1621  0098F9  00                 	db	0
  1622  0098FA  00                 	db	0
  1623  0098FB  00                 	db	0
  1624  0098FC  00                 	db	0
  1625  0098FD  00                 	db	0
  1626  0098FE  00                 	db	0
  1627  0098FF  00                 	db	0
  1628  009900  00                 	db	0
  1629  009901  00                 	db	0
  1630  009902  00                 	db	0
  1631  009903  00                 	db	0
  1632  009904  00                 	db	0
  1633  009905  00                 	db	0
  1634  009906  00                 	db	0
  1635  009907  00                 	db	0
  1636  009908  00                 	db	0
  1637  009909  00                 	db	0
  1638  00990A  00                 	db	0
  1639  00990B  00                 	db	0
  1640  00990C  00                 	db	0
  1641  00990D  00                 	db	0
  1642  00990E  00                 	db	0
  1643  00990F  00                 	db	0
  1644  009910  00                 	db	0
  1645  009911  00                 	db	0
  1646  009912  00                 	db	0
  1647  009913  00                 	db	0
  1648  009914  00                 	db	0
  1649  009915  00                 	db	0
  1650  009916  00                 	db	0
  1651  009917  00                 	db	0
  1652  009918  00                 	db	0
  1653  009919  00                 	db	0
  1654  00991A  00                 	db	0
  1655  00991B  00                 	db	0
  1656  00991C  00                 	db	0
  1657  00991D  00                 	db	0
  1658  00991E  00                 	db	0
  1659  00991F  00                 	db	0
  1660  009920  00                 	db	0
  1661  009921  00                 	db	0
  1662  009922  00                 	db	0
  1663  009923  00                 	db	0
  1664  009924  00                 	db	0
  1665  009925  00                 	db	0
  1666  009926  00                 	db	0
  1667  009927  00                 	db	0
  1668  009928  00                 	db	0
  1669  009929  00                 	db	0
  1670  00992A  00                 	db	0
  1671  00992B  00                 	db	0
  1672  00992C  00                 	db	0
  1673  00992D  00                 	db	0
  1674  00992E  00                 	db	0
  1675  00992F  00                 	db	0
  1676  009930  00                 	db	0
  1677  009931  00                 	db	0
  1678  009932  00                 	db	0
  1679  009933  00                 	db	0
  1680  009934  00                 	db	0
  1681  009935  00                 	db	0
  1682  009936  00                 	db	0
  1683  009937  00                 	db	0
  1684  009938  00                 	db	0
  1685  009939  00                 	db	0
  1686  00993A  00                 	db	0
  1687  00993B  00                 	db	0
  1688  00993C  00                 	db	0
  1689  00993D  00                 	db	0
  1690  00993E  00                 	db	0
  1691  00993F  00                 	db	0
  1692  009940  00                 	db	0
  1693  009941  00                 	db	0
  1694  009942  00                 	db	0
  1695  009943  00                 	db	0
  1696  009944  00                 	db	0
  1697  009945  00                 	db	0
  1698  009946  00                 	db	0
  1699  009947  00                 	db	0
  1700  009948  00                 	db	0
  1701  009949  00                 	db	0
  1702  00994A  00                 	db	0
  1703  00994B  00                 	db	0
  1704  00994C  00                 	db	0
  1705  00994D  00                 	db	0
  1706  00994E  00                 	db	0
  1707  00994F  00                 	db	0
  1708  009950  00                 	db	0
  1709  009951  00                 	db	0
  1710  009952  00                 	db	0
  1711  009953  00                 	db	0
  1712  009954  00                 	db	0
  1713  009955  00                 	db	0
  1714  009956  00                 	db	0
  1715  009957  00                 	db	0
  1716  009958  00                 	db	0
  1717  009959  00                 	db	0
  1718  00995A  00                 	db	0
  1719  00995B  00                 	db	0
  1720  00995C  00                 	db	0
  1721  00995D  00                 	db	0
  1722  00995E  00                 	db	0
  1723  00995F  00                 	db	0
  1724  009960  00                 	db	0
  1725  009961  00                 	db	0
  1726  009962  00                 	db	0
  1727  009963  00                 	db	0
  1728  009964  00                 	db	0
  1729  009965  00                 	db	0
  1730  009966  00                 	db	0
  1731  009967  00                 	db	0
  1732  009968  00                 	db	0
  1733  009969  00                 	db	0
  1734  00996A  00                 	db	0
  1735  00996B  00                 	db	0
  1736  00996C  00                 	db	0
  1737  00996D  00                 	db	0
  1738  00996E  00                 	db	0
  1739  00996F  00                 	db	0
  1740  009970  00                 	db	0
  1741  009971  00                 	db	0
  1742  009972  00                 	db	0
  1743  009973  00                 	db	0
  1744  009974  00                 	db	0
  1745  009975  00                 	db	0
  1746  009976  00                 	db	0
  1747  009977  00                 	db	0
  1748  009978  00                 	db	0
  1749  009979  00                 	db	0
  1750  00997A  00                 	db	0
  1751  00997B  00                 	db	0
  1752  00997C  00                 	db	0
  1753  00997D  00                 	db	0
  1754  00997E  00                 	db	0
  1755  00997F  00                 	db	0
  1756  009980  00                 	db	0
  1757  009981  00                 	db	0
  1758  009982  00                 	db	0
  1759  009983  00                 	db	0
  1760  009984  00                 	db	0
  1761  009985  00                 	db	0
  1762  009986  00                 	db	0
  1763  009987  00                 	db	0
  1764  009988  00                 	db	0
  1765  009989  00                 	db	0
  1766  00998A  00                 	db	0
  1767  00998B  00                 	db	0
  1768  00998C  00                 	db	0
  1769  00998D  00                 	db	0
  1770  00998E  00                 	db	0
  1771  00998F  00                 	db	0
  1772  009990  00                 	db	0
  1773  009991  00                 	db	0
  1774  009992  00                 	db	0
  1775  009993  00                 	db	0
  1776  009994  00                 	db	0
  1777  009995  00                 	db	0
  1778  009996  00                 	db	0
  1779  009997  00                 	db	0
  1780  009998  00                 	db	0
  1781  009999  00                 	db	0
  1782  00999A  00                 	db	0
  1783  00999B  00                 	db	0
  1784  00999C  00                 	db	0
  1785  00999D  00                 	db	0
  1786  00999E  00                 	db	0
  1787  00999F  00                 	db	0
  1788  0099A0  00                 	db	0
  1789  0099A1  00                 	db	0
  1790  0099A2  00                 	db	0
  1791  0099A3  00                 	db	0
  1792  0099A4  00                 	db	0
  1793  0099A5  00                 	db	0
  1794  0099A6  00                 	db	0
  1795  0099A7  00                 	db	0
  1796  0099A8  00                 	db	0
  1797  0099A9  00                 	db	0
  1798  0099AA  00                 	db	0
  1799  0099AB  00                 	db	0
  1800  0099AC  00                 	db	0
  1801  0099AD  00                 	db	0
  1802  0099AE  00                 	db	0
  1803  0099AF  00                 	db	0
  1804  0099B0  00                 	db	0
  1805  0099B1  00                 	db	0
  1806  0099B2  00                 	db	0
  1807  0099B3  00                 	db	0
  1808  0099B4  00                 	db	0
  1809  0099B5  00                 	db	0
  1810  0099B6  00                 	db	0
  1811  0099B7  00                 	db	0
  1812  0099B8  00                 	db	0
  1813  0099B9  00                 	db	0
  1814  0099BA  00                 	db	0
  1815  0099BB  00                 	db	0
  1816  0099BC  00                 	db	0
  1817  0099BD  00                 	db	0
  1818  0099BE  00                 	db	0
  1819  0099BF  00                 	db	0
  1820  0099C0  00                 	db	0
  1821  0099C1  00                 	db	0
  1822  0099C2  00                 	db	0
  1823  0099C3  00                 	db	0
  1824  0099C4  00                 	db	0
  1825  0099C5  00                 	db	0
  1826  0099C6  00                 	db	0
  1827  0099C7  00                 	db	0
  1828  0099C8  00                 	db	0
  1829  0099C9  00                 	db	0
  1830  0099CA  00                 	db	0
  1831  0099CB  00                 	db	0
  1832  0099CC  00                 	db	0
  1833  0099CD  00                 	db	0
  1834  0099CE  00                 	db	0
  1835  0099CF  00                 	db	0
  1836  0099D0  00                 	db	0
  1837  0099D1  00                 	db	0
  1838  0099D2  00                 	db	0
  1839  0099D3  00                 	db	0
  1840  0099D4  00                 	db	0
  1841  0099D5  00                 	db	0
  1842  0099D6  00                 	db	0
  1843  0099D7  00                 	db	0
  1844  0099D8  00                 	db	0
  1845  0099D9  00                 	db	0
  1846  0099DA  00                 	db	0
  1847  0099DB  00                 	db	0
  1848  0099DC  00                 	db	0
  1849  0099DD  00                 	db	0
  1850  0099DE  00                 	db	0
  1851  0099DF  00                 	db	0
  1852  0099E0  00                 	db	0
  1853  0099E1  00                 	db	0
  1854  0099E2  00                 	db	0
  1855  0099E3  00                 	db	0
  1856  0099E4  00                 	db	0
  1857  0099E5  00                 	db	0
  1858  0099E6  00                 	db	0
  1859  0099E7  00                 	db	0
  1860  0099E8  00                 	db	0
  1861  0099E9  00                 	db	0
  1862  0099EA  00                 	db	0
  1863  0099EB  00                 	db	0
  1864  0099EC  00                 	db	0
  1865  0099ED  00                 	db	0
  1866  0099EE  00                 	db	0
  1867  0099EF  00                 	db	0
  1868  0099F0  00                 	db	0
  1869  0099F1  00                 	db	0
  1870  0099F2  00                 	db	0
  1871  0099F3  00                 	db	0
  1872  0099F4  00                 	db	0
  1873  0099F5  00                 	db	0
  1874  0099F6  00                 	db	0
  1875  0099F7  00                 	db	0
  1876  0099F8  00                 	db	0
  1877  0099F9  00                 	db	0
  1878  0099FA  00                 	db	0
  1879  0099FB  00                 	db	0
  1880  0099FC  00                 	db	0
  1881  0099FD  00                 	db	0
  1882  0099FE  00                 	db	0
  1883  0099FF  00                 	db	0
  1884  009A00  00                 	db	0
  1885  009A01  00                 	db	0
  1886  009A02  00                 	db	0
  1887  009A03  00                 	db	0
  1888  009A04  00                 	db	0
  1889  009A05  00                 	db	0
  1890  009A06  00                 	db	0
  1891  009A07  00                 	db	0
  1892  009A08  00                 	db	0
  1893  009A09  00                 	db	0
  1894  009A0A  00                 	db	0
  1895  009A0B  00                 	db	0
  1896  009A0C  00                 	db	0
  1897  009A0D  00                 	db	0
  1898  009A0E  00                 	db	0
  1899  009A0F  00                 	db	0
  1900  009A10  00                 	db	0
  1901  009A11  00                 	db	0
  1902  009A12  00                 	db	0
  1903  009A13  00                 	db	0
  1904  009A14  00                 	db	0
  1905  009A15  00                 	db	0
  1906  009A16                     __end_of_motor_postscaler_lookup:
  1907                           	opt stack 0
  1908  009A16                     _motor_period_lookup:
  1909                           	opt stack 0
  1910  009A16  EC                 	db	236
  1911  009A17  F2                 	db	242
  1912  009A18  F6                 	db	246
  1913  009A19  F4                 	db	244
  1914  009A1A  D2                 	db	210
  1915  009A1B  E8                 	db	232
  1916  009A1C  D2                 	db	210
  1917  009A1D  C0                 	db	192
  1918  009A1E  EC                 	db	236
  1919  009A1F  DC                 	db	220
  1920  009A20  CF                 	db	207
  1921  009A21  C3                 	db	195
  1922  009A22  B9                 	db	185
  1923  009A23  B0                 	db	176
  1924  009A24  FC                 	db	252
  1925  009A25  F2                 	db	242
  1926  009A26  E8                 	db	232
  1927  009A27  DF                 	db	223
  1928  009A28  D7                 	db	215
  1929  009A29  D0                 	db	208
  1930  009A2A  CA                 	db	202
  1931  009A2B  C3                 	db	195
  1932  009A2C  BE                 	db	190
  1933  009A2D  B8                 	db	184
  1934  009A2E  B3                 	db	179
  1935  009A2F  AF                 	db	175
  1936  009A30  AA                 	db	170
  1937  009A31  A6                 	db	166
  1938  009A32  A2                 	db	162
  1939  009A33  9F                 	db	159
  1940  009A34  9B                 	db	155
  1941  009A35  98                 	db	152
  1942  009A36  95                 	db	149
  1943  009A37  92                 	db	146
  1944  009A38  8F                 	db	143
  1945  009A39  8C                 	db	140
  1946  009A3A  8A                 	db	138
  1947  009A3B  87                 	db	135
  1948  009A3C  85                 	db	133
  1949  009A3D  83                 	db	131
  1950  009A3E  81                 	db	129
  1951  009A3F  7F                 	db	127
  1952  009A40  7D                 	db	125
  1953  009A41  7B                 	db	123
  1954  009A42  79                 	db	121
  1955  009A43  77                 	db	119
  1956  009A44  75                 	db	117
  1957  009A45  74                 	db	116
  1958  009A46  72                 	db	114
  1959  009A47  71                 	db	113
  1960  009A48  6F                 	db	111
  1961  009A49  6E                 	db	110
  1962  009A4A  6C                 	db	108
  1963  009A4B  6B                 	db	107
  1964  009A4C  6A                 	db	106
  1965  009A4D  68                 	db	104
  1966  009A4E  67                 	db	103
  1967  009A4F  66                 	db	102
  1968  009A50  65                 	db	101
  1969  009A51  64                 	db	100
  1970  009A52  62                 	db	98
  1971  009A53  61                 	db	97
  1972  009A54  60                 	db	96
  1973  009A55  5F                 	db	95
  1974  009A56  5E                 	db	94
  1975  009A57  5D                 	db	93
  1976  009A58  5C                 	db	92
  1977  009A59  5B                 	db	91
  1978  009A5A  59                 	db	89
  1979  009A5B  57                 	db	87
  1980  009A5C  56                 	db	86
  1981  009A5D  54                 	db	84
  1982  009A5E  53                 	db	83
  1983  009A5F  51                 	db	81
  1984  009A60  50                 	db	80
  1985  009A61  4F                 	db	79
  1986  009A62  4E                 	db	78
  1987  009A63  4C                 	db	76
  1988  009A64  4B                 	db	75
  1989  009A65  4A                 	db	74
  1990  009A66  49                 	db	73
  1991  009A67  48                 	db	72
  1992  009A68  47                 	db	71
  1993  009A69  46                 	db	70
  1994  009A6A  45                 	db	69
  1995  009A6B  44                 	db	68
  1996  009A6C  43                 	db	67
  1997  009A6D  42                 	db	66
  1998  009A6E  41                 	db	65
  1999  009A6F  40                 	db	64
  2000  009A70  3F                 	db	63
  2001  009A71  FE                 	db	254
  2002  009A72  FB                 	db	251
  2003  009A73  F8                 	db	248
  2004  009A74  F6                 	db	246
  2005  009A75  F3                 	db	243
  2006  009A76  F0                 	db	240
  2007  009A77  EE                 	db	238
  2008  009A78  EC                 	db	236
  2009  009A79  E9                 	db	233
  2010  009A7A  E7                 	db	231
  2011  009A7B  E5                 	db	229
  2012  009A7C  E3                 	db	227
  2013  009A7D  E0                 	db	224
  2014  009A7E  DE                 	db	222
  2015  009A7F  DC                 	db	220
  2016  009A80  DA                 	db	218
  2017  009A81  D8                 	db	216
  2018  009A82  D7                 	db	215
  2019  009A83  D5                 	db	213
  2020  009A84  D3                 	db	211
  2021  009A85  D1                 	db	209
  2022  009A86  CF                 	db	207
  2023  009A87  CE                 	db	206
  2024  009A88  CC                 	db	204
  2025  009A89  CA                 	db	202
  2026  009A8A  C9                 	db	201
  2027  009A8B  C7                 	db	199
  2028  009A8C  C6                 	db	198
  2029  009A8D  C4                 	db	196
  2030  009A8E  C3                 	db	195
  2031  009A8F  C1                 	db	193
  2032  009A90  C0                 	db	192
  2033  009A91  BE                 	db	190
  2034  009A92  BD                 	db	189
  2035  009A93  BC                 	db	188
  2036  009A94  BA                 	db	186
  2037  009A95  B8                 	db	184
  2038  009A96  B6                 	db	182
  2039  009A97  B4                 	db	180
  2040  009A98  B3                 	db	179
  2041  009A99  B1                 	db	177
  2042  009A9A  AF                 	db	175
  2043  009A9B  AE                 	db	174
  2044  009A9C  AC                 	db	172
  2045  009A9D  AA                 	db	170
  2046  009A9E  A9                 	db	169
  2047  009A9F  A7                 	db	167
  2048  009AA0  A6                 	db	166
  2049  009AA1  A4                 	db	164
  2050  009AA2  A3                 	db	163
  2051  009AA3  A1                 	db	161
  2052  009AA4  A0                 	db	160
  2053  009AA5  9F                 	db	159
  2054  009AA6  9D                 	db	157
  2055  009AA7  9C                 	db	156
  2056  009AA8  9B                 	db	155
  2057  009AA9  9A                 	db	154
  2058  009AAA  98                 	db	152
  2059  009AAB  97                 	db	151
  2060  009AAC  96                 	db	150
  2061  009AAD  95                 	db	149
  2062  009AAE  94                 	db	148
  2063  009AAF  93                 	db	147
  2064  009AB0  92                 	db	146
  2065  009AB1  90                 	db	144
  2066  009AB2  8F                 	db	143
  2067  009AB3  8E                 	db	142
  2068  009AB4  8D                 	db	141
  2069  009AB5  8C                 	db	140
  2070  009AB6  8B                 	db	139
  2071  009AB7  8A                 	db	138
  2072  009AB8  89                 	db	137
  2073  009AB9  88                 	db	136
  2074  009ABA  87                 	db	135
  2075  009ABB  86                 	db	134
  2076  009ABC  85                 	db	133
  2077  009ABD  84                 	db	132
  2078  009ABE  83                 	db	131
  2079  009ABF  82                 	db	130
  2080  009AC0  81                 	db	129
  2081  009AC1  80                 	db	128
  2082  009AC2  7F                 	db	127
  2083  009AC3  7E                 	db	126
  2084  009AC4  7D                 	db	125
  2085  009AC5  7C                 	db	124
  2086  009AC6  7B                 	db	123
  2087  009AC7  7A                 	db	122
  2088  009AC8  79                 	db	121
  2089  009AC9  78                 	db	120
  2090  009ACA  77                 	db	119
  2091  009ACB  76                 	db	118
  2092  009ACC  75                 	db	117
  2093  009ACD  74                 	db	116
  2094  009ACE  73                 	db	115
  2095  009ACF  72                 	db	114
  2096  009AD0  71                 	db	113
  2097  009AD1  70                 	db	112
  2098  009AD2  6F                 	db	111
  2099  009AD3  6E                 	db	110
  2100  009AD4  6D                 	db	109
  2101  009AD5  6C                 	db	108
  2102  009AD6  6B                 	db	107
  2103  009AD7  6A                 	db	106
  2104  009AD8  69                 	db	105
  2105  009AD9  68                 	db	104
  2106  009ADA  67                 	db	103
  2107  009ADB  66                 	db	102
  2108  009ADC  65                 	db	101
  2109  009ADD  64                 	db	100
  2110  009ADE  63                 	db	99
  2111  009ADF  62                 	db	98
  2112  009AE0  61                 	db	97
  2113  009AE1  60                 	db	96
  2114  009AE2  5F                 	db	95
  2115  009AE3  5E                 	db	94
  2116  009AE4  5D                 	db	93
  2117  009AE5  5C                 	db	92
  2118  009AE6  5B                 	db	91
  2119  009AE7  5A                 	db	90
  2120  009AE8  59                 	db	89
  2121  009AE9  58                 	db	88
  2122  009AEA  57                 	db	87
  2123  009AEB  56                 	db	86
  2124  009AEC  55                 	db	85
  2125  009AED  54                 	db	84
  2126  009AEE  53                 	db	83
  2127  009AEF  52                 	db	82
  2128  009AF0  51                 	db	81
  2129  009AF1  50                 	db	80
  2130  009AF2  4F                 	db	79
  2131  009AF3  4E                 	db	78
  2132  009AF4  4D                 	db	77
  2133  009AF5  4C                 	db	76
  2134  009AF6  4B                 	db	75
  2135  009AF7  4A                 	db	74
  2136  009AF8  49                 	db	73
  2137  009AF9  48                 	db	72
  2138  009AFA  47                 	db	71
  2139  009AFB  46                 	db	70
  2140  009AFC  45                 	db	69
  2141  009AFD  44                 	db	68
  2142  009AFE  43                 	db	67
  2143  009AFF  42                 	db	66
  2144  009B00  41                 	db	65
  2145  009B01  40                 	db	64
  2146  009B02  3F                 	db	63
  2147  009B03  FF                 	db	255
  2148  009B04  FE                 	db	254
  2149  009B05  FD                 	db	253
  2150  009B06  FC                 	db	252
  2151  009B07  FB                 	db	251
  2152  009B08  FA                 	db	250
  2153  009B09  F9                 	db	249
  2154  009B0A  F8                 	db	248
  2155  009B0B  F7                 	db	247
  2156  009B0C  F6                 	db	246
  2157  009B0D  F5                 	db	245
  2158  009B0E  F4                 	db	244
  2159  009B0F  F3                 	db	243
  2160  009B10  F2                 	db	242
  2161  009B11  F1                 	db	241
  2162  009B12  F0                 	db	240
  2163  009B13  EF                 	db	239
  2164  009B14  EE                 	db	238
  2165  009B15  ED                 	db	237
  2166  009B16  EC                 	db	236
  2167  009B17  EB                 	db	235
  2168  009B18  EA                 	db	234
  2169  009B19  E9                 	db	233
  2170  009B1A  E8                 	db	232
  2171  009B1B  E7                 	db	231
  2172  009B1C  E6                 	db	230
  2173  009B1D  E5                 	db	229
  2174  009B1E  E4                 	db	228
  2175  009B1F  E3                 	db	227
  2176  009B20  E2                 	db	226
  2177  009B21  E1                 	db	225
  2178  009B22  E0                 	db	224
  2179  009B23  DF                 	db	223
  2180  009B24  DE                 	db	222
  2181  009B25  DD                 	db	221
  2182  009B26  DC                 	db	220
  2183  009B27  DB                 	db	219
  2184  009B28  DA                 	db	218
  2185  009B29  D9                 	db	217
  2186  009B2A  D8                 	db	216
  2187  009B2B  D7                 	db	215
  2188  009B2C  D6                 	db	214
  2189  009B2D  D5                 	db	213
  2190  009B2E  D4                 	db	212
  2191  009B2F  D3                 	db	211
  2192  009B30  D2                 	db	210
  2193  009B31  D1                 	db	209
  2194  009B32  D0                 	db	208
  2195  009B33  CF                 	db	207
  2196  009B34  CE                 	db	206
  2197  009B35  CD                 	db	205
  2198  009B36  CC                 	db	204
  2199  009B37  CB                 	db	203
  2200  009B38  CA                 	db	202
  2201  009B39  C9                 	db	201
  2202  009B3A  C8                 	db	200
  2203  009B3B  C7                 	db	199
  2204  009B3C  C6                 	db	198
  2205  009B3D  C5                 	db	197
  2206  009B3E  C4                 	db	196
  2207  009B3F  C3                 	db	195
  2208  009B40  C2                 	db	194
  2209  009B41  C1                 	db	193
  2210  009B42  C0                 	db	192
  2211  009B43  BF                 	db	191
  2212  009B44  BE                 	db	190
  2213  009B45  BD                 	db	189
  2214  009B46  BC                 	db	188
  2215  009B47  BB                 	db	187
  2216  009B48  BA                 	db	186
  2217  009B49  B9                 	db	185
  2218  009B4A  B8                 	db	184
  2219  009B4B  B7                 	db	183
  2220  009B4C  B6                 	db	182
  2221  009B4D  B5                 	db	181
  2222  009B4E  B4                 	db	180
  2223  009B4F  B3                 	db	179
  2224  009B50  B2                 	db	178
  2225  009B51  B1                 	db	177
  2226  009B52  B0                 	db	176
  2227  009B53  AF                 	db	175
  2228  009B54  AE                 	db	174
  2229  009B55  AD                 	db	173
  2230  009B56  AC                 	db	172
  2231  009B57  AB                 	db	171
  2232  009B58  AA                 	db	170
  2233  009B59  A9                 	db	169
  2234  009B5A  A8                 	db	168
  2235  009B5B  A7                 	db	167
  2236  009B5C  A6                 	db	166
  2237  009B5D  A5                 	db	165
  2238  009B5E  A4                 	db	164
  2239  009B5F  A3                 	db	163
  2240  009B60  A2                 	db	162
  2241  009B61  A1                 	db	161
  2242  009B62  A0                 	db	160
  2243  009B63  9F                 	db	159
  2244  009B64  9E                 	db	158
  2245  009B65  9D                 	db	157
  2246  009B66  9C                 	db	156
  2247  009B67  9B                 	db	155
  2248  009B68  9A                 	db	154
  2249  009B69  99                 	db	153
  2250  009B6A  98                 	db	152
  2251  009B6B  97                 	db	151
  2252  009B6C  96                 	db	150
  2253  009B6D  95                 	db	149
  2254  009B6E  94                 	db	148
  2255  009B6F  93                 	db	147
  2256  009B70  92                 	db	146
  2257  009B71  91                 	db	145
  2258  009B72  90                 	db	144
  2259  009B73  8F                 	db	143
  2260  009B74  8E                 	db	142
  2261  009B75  8D                 	db	141
  2262  009B76  8C                 	db	140
  2263  009B77  8B                 	db	139
  2264  009B78  8A                 	db	138
  2265  009B79  89                 	db	137
  2266  009B7A  88                 	db	136
  2267  009B7B  87                 	db	135
  2268  009B7C  86                 	db	134
  2269  009B7D  85                 	db	133
  2270  009B7E  84                 	db	132
  2271  009B7F  83                 	db	131
  2272  009B80  82                 	db	130
  2273  009B81  81                 	db	129
  2274  009B82  80                 	db	128
  2275  009B83  7F                 	db	127
  2276  009B84  7E                 	db	126
  2277  009B85  7D                 	db	125
  2278  009B86  7C                 	db	124
  2279  009B87  7B                 	db	123
  2280  009B88  7A                 	db	122
  2281  009B89  79                 	db	121
  2282  009B8A  78                 	db	120
  2283  009B8B  77                 	db	119
  2284  009B8C  76                 	db	118
  2285  009B8D  75                 	db	117
  2286  009B8E  74                 	db	116
  2287  009B8F  73                 	db	115
  2288  009B90  72                 	db	114
  2289  009B91  71                 	db	113
  2290  009B92  70                 	db	112
  2291  009B93  6F                 	db	111
  2292  009B94  6E                 	db	110
  2293  009B95  6D                 	db	109
  2294  009B96  6C                 	db	108
  2295  009B97  6B                 	db	107
  2296  009B98  6A                 	db	106
  2297  009B99  69                 	db	105
  2298  009B9A  68                 	db	104
  2299  009B9B  67                 	db	103
  2300  009B9C  66                 	db	102
  2301  009B9D  65                 	db	101
  2302  009B9E  64                 	db	100
  2303  009B9F  63                 	db	99
  2304  009BA0  62                 	db	98
  2305  009BA1  61                 	db	97
  2306  009BA2  60                 	db	96
  2307  009BA3  5F                 	db	95
  2308  009BA4  5E                 	db	94
  2309  009BA5  5D                 	db	93
  2310  009BA6  5C                 	db	92
  2311  009BA7  5B                 	db	91
  2312  009BA8  5A                 	db	90
  2313  009BA9  59                 	db	89
  2314  009BAA  58                 	db	88
  2315  009BAB  57                 	db	87
  2316  009BAC  56                 	db	86
  2317  009BAD  55                 	db	85
  2318  009BAE  54                 	db	84
  2319  009BAF  53                 	db	83
  2320  009BB0  52                 	db	82
  2321  009BB1  51                 	db	81
  2322  009BB2  50                 	db	80
  2323  009BB3  4F                 	db	79
  2324  009BB4  4E                 	db	78
  2325  009BB5  4D                 	db	77
  2326  009BB6  4C                 	db	76
  2327  009BB7  4B                 	db	75
  2328  009BB8  4A                 	db	74
  2329  009BB9  49                 	db	73
  2330  009BBA  48                 	db	72
  2331  009BBB  47                 	db	71
  2332  009BBC  46                 	db	70
  2333  009BBD  45                 	db	69
  2334  009BBE  44                 	db	68
  2335  009BBF  43                 	db	67
  2336  009BC0  42                 	db	66
  2337  009BC1  41                 	db	65
  2338  009BC2  40                 	db	64
  2339  009BC3  3F                 	db	63
  2340  009BC4  FF                 	db	255
  2341  009BC5  FE                 	db	254
  2342  009BC6  FD                 	db	253
  2343  009BC7  FC                 	db	252
  2344  009BC8  FB                 	db	251
  2345  009BC9  FA                 	db	250
  2346  009BCA  F9                 	db	249
  2347  009BCB  F8                 	db	248
  2348  009BCC  F7                 	db	247
  2349  009BCD  F6                 	db	246
  2350  009BCE  F5                 	db	245
  2351  009BCF  F4                 	db	244
  2352  009BD0  F3                 	db	243
  2353  009BD1  F2                 	db	242
  2354  009BD2  F1                 	db	241
  2355  009BD3  F0                 	db	240
  2356  009BD4  EF                 	db	239
  2357  009BD5  EE                 	db	238
  2358  009BD6  ED                 	db	237
  2359  009BD7  EC                 	db	236
  2360  009BD8  EB                 	db	235
  2361  009BD9  EA                 	db	234
  2362  009BDA  E9                 	db	233
  2363  009BDB  E8                 	db	232
  2364  009BDC  E7                 	db	231
  2365  009BDD  E6                 	db	230
  2366  009BDE  E5                 	db	229
  2367  009BDF  E4                 	db	228
  2368  009BE0  E3                 	db	227
  2369  009BE1  E2                 	db	226
  2370  009BE2  E1                 	db	225
  2371  009BE3  E0                 	db	224
  2372  009BE4  DF                 	db	223
  2373  009BE5  DE                 	db	222
  2374  009BE6  DD                 	db	221
  2375  009BE7  DC                 	db	220
  2376  009BE8  DB                 	db	219
  2377  009BE9  DA                 	db	218
  2378  009BEA  D9                 	db	217
  2379  009BEB  D8                 	db	216
  2380  009BEC  D7                 	db	215
  2381  009BED  D6                 	db	214
  2382  009BEE  D5                 	db	213
  2383  009BEF  D4                 	db	212
  2384  009BF0  D3                 	db	211
  2385  009BF1  D2                 	db	210
  2386  009BF2  D1                 	db	209
  2387  009BF3  D0                 	db	208
  2388  009BF4  CF                 	db	207
  2389  009BF5  CE                 	db	206
  2390  009BF6  CD                 	db	205
  2391  009BF7  CC                 	db	204
  2392  009BF8  CB                 	db	203
  2393  009BF9  CA                 	db	202
  2394  009BFA  C9                 	db	201
  2395  009BFB  C8                 	db	200
  2396  009BFC  C7                 	db	199
  2397  009BFD                     __end_of_motor_period_lookup:
  2398                           	opt stack 0
  2399  009BFD                     _motor_prescaler_lookup:
  2400                           	opt stack 0
  2401  009BFD  02                 	db	2
  2402  009BFE  02                 	db	2
  2403  009BFF  02                 	db	2
  2404  009C00  02                 	db	2
  2405  009C01  02                 	db	2
  2406  009C02  02                 	db	2
  2407  009C03  02                 	db	2
  2408  009C04  02                 	db	2
  2409  009C05  02                 	db	2
  2410  009C06  02                 	db	2
  2411  009C07  02                 	db	2
  2412  009C08  02                 	db	2
  2413  009C09  02                 	db	2
  2414  009C0A  02                 	db	2
  2415  009C0B  02                 	db	2
  2416  009C0C  02                 	db	2
  2417  009C0D  02                 	db	2
  2418  009C0E  02                 	db	2
  2419  009C0F  02                 	db	2
  2420  009C10  02                 	db	2
  2421  009C11  02                 	db	2
  2422  009C12  02                 	db	2
  2423  009C13  02                 	db	2
  2424  009C14  02                 	db	2
  2425  009C15  02                 	db	2
  2426  009C16  02                 	db	2
  2427  009C17  02                 	db	2
  2428  009C18  02                 	db	2
  2429  009C19  02                 	db	2
  2430  009C1A  02                 	db	2
  2431  009C1B  02                 	db	2
  2432  009C1C  02                 	db	2
  2433  009C1D  02                 	db	2
  2434  009C1E  02                 	db	2
  2435  009C1F  02                 	db	2
  2436  009C20  02                 	db	2
  2437  009C21  02                 	db	2
  2438  009C22  02                 	db	2
  2439  009C23  02                 	db	2
  2440  009C24  02                 	db	2
  2441  009C25  02                 	db	2
  2442  009C26  02                 	db	2
  2443  009C27  02                 	db	2
  2444  009C28  02                 	db	2
  2445  009C29  02                 	db	2
  2446  009C2A  02                 	db	2
  2447  009C2B  02                 	db	2
  2448  009C2C  02                 	db	2
  2449  009C2D  02                 	db	2
  2450  009C2E  02                 	db	2
  2451  009C2F  02                 	db	2
  2452  009C30  02                 	db	2
  2453  009C31  02                 	db	2
  2454  009C32  02                 	db	2
  2455  009C33  02                 	db	2
  2456  009C34  02                 	db	2
  2457  009C35  02                 	db	2
  2458  009C36  02                 	db	2
  2459  009C37  02                 	db	2
  2460  009C38  02                 	db	2
  2461  009C39  02                 	db	2
  2462  009C3A  02                 	db	2
  2463  009C3B  02                 	db	2
  2464  009C3C  02                 	db	2
  2465  009C3D  02                 	db	2
  2466  009C3E  02                 	db	2
  2467  009C3F  02                 	db	2
  2468  009C40  02                 	db	2
  2469  009C41  02                 	db	2
  2470  009C42  02                 	db	2
  2471  009C43  02                 	db	2
  2472  009C44  02                 	db	2
  2473  009C45  02                 	db	2
  2474  009C46  02                 	db	2
  2475  009C47  02                 	db	2
  2476  009C48  02                 	db	2
  2477  009C49  02                 	db	2
  2478  009C4A  02                 	db	2
  2479  009C4B  02                 	db	2
  2480  009C4C  02                 	db	2
  2481  009C4D  02                 	db	2
  2482  009C4E  02                 	db	2
  2483  009C4F  02                 	db	2
  2484  009C50  02                 	db	2
  2485  009C51  02                 	db	2
  2486  009C52  02                 	db	2
  2487  009C53  02                 	db	2
  2488  009C54  02                 	db	2
  2489  009C55  02                 	db	2
  2490  009C56  02                 	db	2
  2491  009C57  02                 	db	2
  2492  009C58  02                 	db	2
  2493  009C59  02                 	db	2
  2494  009C5A  02                 	db	2
  2495  009C5B  02                 	db	2
  2496  009C5C  02                 	db	2
  2497  009C5D  02                 	db	2
  2498  009C5E  02                 	db	2
  2499  009C5F  02                 	db	2
  2500  009C60  02                 	db	2
  2501  009C61  02                 	db	2
  2502  009C62  02                 	db	2
  2503  009C63  02                 	db	2
  2504  009C64  02                 	db	2
  2505  009C65  02                 	db	2
  2506  009C66  02                 	db	2
  2507  009C67  02                 	db	2
  2508  009C68  02                 	db	2
  2509  009C69  02                 	db	2
  2510  009C6A  02                 	db	2
  2511  009C6B  02                 	db	2
  2512  009C6C  02                 	db	2
  2513  009C6D  02                 	db	2
  2514  009C6E  02                 	db	2
  2515  009C6F  02                 	db	2
  2516  009C70  02                 	db	2
  2517  009C71  02                 	db	2
  2518  009C72  02                 	db	2
  2519  009C73  02                 	db	2
  2520  009C74  02                 	db	2
  2521  009C75  02                 	db	2
  2522  009C76  02                 	db	2
  2523  009C77  02                 	db	2
  2524  009C78  02                 	db	2
  2525  009C79  02                 	db	2
  2526  009C7A  02                 	db	2
  2527  009C7B  02                 	db	2
  2528  009C7C  02                 	db	2
  2529  009C7D  02                 	db	2
  2530  009C7E  02                 	db	2
  2531  009C7F  02                 	db	2
  2532  009C80  02                 	db	2
  2533  009C81  02                 	db	2
  2534  009C82  02                 	db	2
  2535  009C83  02                 	db	2
  2536  009C84  02                 	db	2
  2537  009C85  02                 	db	2
  2538  009C86  02                 	db	2
  2539  009C87  02                 	db	2
  2540  009C88  02                 	db	2
  2541  009C89  02                 	db	2
  2542  009C8A  02                 	db	2
  2543  009C8B  02                 	db	2
  2544  009C8C  02                 	db	2
  2545  009C8D  02                 	db	2
  2546  009C8E  02                 	db	2
  2547  009C8F  02                 	db	2
  2548  009C90  02                 	db	2
  2549  009C91  02                 	db	2
  2550  009C92  02                 	db	2
  2551  009C93  02                 	db	2
  2552  009C94  02                 	db	2
  2553  009C95  02                 	db	2
  2554  009C96  02                 	db	2
  2555  009C97  02                 	db	2
  2556  009C98  02                 	db	2
  2557  009C99  02                 	db	2
  2558  009C9A  02                 	db	2
  2559  009C9B  02                 	db	2
  2560  009C9C  02                 	db	2
  2561  009C9D  02                 	db	2
  2562  009C9E  02                 	db	2
  2563  009C9F  02                 	db	2
  2564  009CA0  02                 	db	2
  2565  009CA1  02                 	db	2
  2566  009CA2  02                 	db	2
  2567  009CA3  02                 	db	2
  2568  009CA4  02                 	db	2
  2569  009CA5  02                 	db	2
  2570  009CA6  02                 	db	2
  2571  009CA7  02                 	db	2
  2572  009CA8  02                 	db	2
  2573  009CA9  02                 	db	2
  2574  009CAA  02                 	db	2
  2575  009CAB  02                 	db	2
  2576  009CAC  02                 	db	2
  2577  009CAD  02                 	db	2
  2578  009CAE  02                 	db	2
  2579  009CAF  02                 	db	2
  2580  009CB0  02                 	db	2
  2581  009CB1  02                 	db	2
  2582  009CB2  02                 	db	2
  2583  009CB3  02                 	db	2
  2584  009CB4  02                 	db	2
  2585  009CB5  02                 	db	2
  2586  009CB6  02                 	db	2
  2587  009CB7  02                 	db	2
  2588  009CB8  02                 	db	2
  2589  009CB9  02                 	db	2
  2590  009CBA  02                 	db	2
  2591  009CBB  02                 	db	2
  2592  009CBC  02                 	db	2
  2593  009CBD  02                 	db	2
  2594  009CBE  02                 	db	2
  2595  009CBF  02                 	db	2
  2596  009CC0  02                 	db	2
  2597  009CC1  02                 	db	2
  2598  009CC2  02                 	db	2
  2599  009CC3  02                 	db	2
  2600  009CC4  02                 	db	2
  2601  009CC5  02                 	db	2
  2602  009CC6  02                 	db	2
  2603  009CC7  02                 	db	2
  2604  009CC8  02                 	db	2
  2605  009CC9  02                 	db	2
  2606  009CCA  02                 	db	2
  2607  009CCB  02                 	db	2
  2608  009CCC  02                 	db	2
  2609  009CCD  02                 	db	2
  2610  009CCE  02                 	db	2
  2611  009CCF  02                 	db	2
  2612  009CD0  02                 	db	2
  2613  009CD1  02                 	db	2
  2614  009CD2  02                 	db	2
  2615  009CD3  02                 	db	2
  2616  009CD4  02                 	db	2
  2617  009CD5  02                 	db	2
  2618  009CD6  02                 	db	2
  2619  009CD7  02                 	db	2
  2620  009CD8  02                 	db	2
  2621  009CD9  02                 	db	2
  2622  009CDA  02                 	db	2
  2623  009CDB  02                 	db	2
  2624  009CDC  02                 	db	2
  2625  009CDD  02                 	db	2
  2626  009CDE  02                 	db	2
  2627  009CDF  02                 	db	2
  2628  009CE0  02                 	db	2
  2629  009CE1  02                 	db	2
  2630  009CE2  02                 	db	2
  2631  009CE3  02                 	db	2
  2632  009CE4  02                 	db	2
  2633  009CE5  02                 	db	2
  2634  009CE6  02                 	db	2
  2635  009CE7  02                 	db	2
  2636  009CE8  02                 	db	2
  2637  009CE9  02                 	db	2
  2638  009CEA  01                 	db	1
  2639  009CEB  01                 	db	1
  2640  009CEC  01                 	db	1
  2641  009CED  01                 	db	1
  2642  009CEE  01                 	db	1
  2643  009CEF  01                 	db	1
  2644  009CF0  01                 	db	1
  2645  009CF1  01                 	db	1
  2646  009CF2  01                 	db	1
  2647  009CF3  01                 	db	1
  2648  009CF4  01                 	db	1
  2649  009CF5  01                 	db	1
  2650  009CF6  01                 	db	1
  2651  009CF7  01                 	db	1
  2652  009CF8  01                 	db	1
  2653  009CF9  01                 	db	1
  2654  009CFA  01                 	db	1
  2655  009CFB  01                 	db	1
  2656  009CFC  01                 	db	1
  2657  009CFD  01                 	db	1
  2658  009CFE  01                 	db	1
  2659  009CFF  01                 	db	1
  2660  009D00  01                 	db	1
  2661  009D01  01                 	db	1
  2662  009D02  01                 	db	1
  2663  009D03  01                 	db	1
  2664  009D04  01                 	db	1
  2665  009D05  01                 	db	1
  2666  009D06  01                 	db	1
  2667  009D07  01                 	db	1
  2668  009D08  01                 	db	1
  2669  009D09  01                 	db	1
  2670  009D0A  01                 	db	1
  2671  009D0B  01                 	db	1
  2672  009D0C  01                 	db	1
  2673  009D0D  01                 	db	1
  2674  009D0E  01                 	db	1
  2675  009D0F  01                 	db	1
  2676  009D10  01                 	db	1
  2677  009D11  01                 	db	1
  2678  009D12  01                 	db	1
  2679  009D13  01                 	db	1
  2680  009D14  01                 	db	1
  2681  009D15  01                 	db	1
  2682  009D16  01                 	db	1
  2683  009D17  01                 	db	1
  2684  009D18  01                 	db	1
  2685  009D19  01                 	db	1
  2686  009D1A  01                 	db	1
  2687  009D1B  01                 	db	1
  2688  009D1C  01                 	db	1
  2689  009D1D  01                 	db	1
  2690  009D1E  01                 	db	1
  2691  009D1F  01                 	db	1
  2692  009D20  01                 	db	1
  2693  009D21  01                 	db	1
  2694  009D22  01                 	db	1
  2695  009D23  01                 	db	1
  2696  009D24  01                 	db	1
  2697  009D25  01                 	db	1
  2698  009D26  01                 	db	1
  2699  009D27  01                 	db	1
  2700  009D28  01                 	db	1
  2701  009D29  01                 	db	1
  2702  009D2A  01                 	db	1
  2703  009D2B  01                 	db	1
  2704  009D2C  01                 	db	1
  2705  009D2D  01                 	db	1
  2706  009D2E  01                 	db	1
  2707  009D2F  01                 	db	1
  2708  009D30  01                 	db	1
  2709  009D31  01                 	db	1
  2710  009D32  01                 	db	1
  2711  009D33  01                 	db	1
  2712  009D34  01                 	db	1
  2713  009D35  01                 	db	1
  2714  009D36  01                 	db	1
  2715  009D37  01                 	db	1
  2716  009D38  01                 	db	1
  2717  009D39  01                 	db	1
  2718  009D3A  01                 	db	1
  2719  009D3B  01                 	db	1
  2720  009D3C  01                 	db	1
  2721  009D3D  01                 	db	1
  2722  009D3E  01                 	db	1
  2723  009D3F  01                 	db	1
  2724  009D40  01                 	db	1
  2725  009D41  01                 	db	1
  2726  009D42  01                 	db	1
  2727  009D43  01                 	db	1
  2728  009D44  01                 	db	1
  2729  009D45  01                 	db	1
  2730  009D46  01                 	db	1
  2731  009D47  01                 	db	1
  2732  009D48  01                 	db	1
  2733  009D49  01                 	db	1
  2734  009D4A  01                 	db	1
  2735  009D4B  01                 	db	1
  2736  009D4C  01                 	db	1
  2737  009D4D  01                 	db	1
  2738  009D4E  01                 	db	1
  2739  009D4F  01                 	db	1
  2740  009D50  01                 	db	1
  2741  009D51  01                 	db	1
  2742  009D52  01                 	db	1
  2743  009D53  01                 	db	1
  2744  009D54  01                 	db	1
  2745  009D55  01                 	db	1
  2746  009D56  01                 	db	1
  2747  009D57  01                 	db	1
  2748  009D58  01                 	db	1
  2749  009D59  01                 	db	1
  2750  009D5A  01                 	db	1
  2751  009D5B  01                 	db	1
  2752  009D5C  01                 	db	1
  2753  009D5D  01                 	db	1
  2754  009D5E  01                 	db	1
  2755  009D5F  01                 	db	1
  2756  009D60  01                 	db	1
  2757  009D61  01                 	db	1
  2758  009D62  01                 	db	1
  2759  009D63  01                 	db	1
  2760  009D64  01                 	db	1
  2761  009D65  01                 	db	1
  2762  009D66  01                 	db	1
  2763  009D67  01                 	db	1
  2764  009D68  01                 	db	1
  2765  009D69  01                 	db	1
  2766  009D6A  01                 	db	1
  2767  009D6B  01                 	db	1
  2768  009D6C  01                 	db	1
  2769  009D6D  01                 	db	1
  2770  009D6E  01                 	db	1
  2771  009D6F  01                 	db	1
  2772  009D70  01                 	db	1
  2773  009D71  01                 	db	1
  2774  009D72  01                 	db	1
  2775  009D73  01                 	db	1
  2776  009D74  01                 	db	1
  2777  009D75  01                 	db	1
  2778  009D76  01                 	db	1
  2779  009D77  01                 	db	1
  2780  009D78  01                 	db	1
  2781  009D79  01                 	db	1
  2782  009D7A  01                 	db	1
  2783  009D7B  01                 	db	1
  2784  009D7C  01                 	db	1
  2785  009D7D  01                 	db	1
  2786  009D7E  01                 	db	1
  2787  009D7F  01                 	db	1
  2788  009D80  01                 	db	1
  2789  009D81  01                 	db	1
  2790  009D82  01                 	db	1
  2791  009D83  01                 	db	1
  2792  009D84  01                 	db	1
  2793  009D85  01                 	db	1
  2794  009D86  01                 	db	1
  2795  009D87  01                 	db	1
  2796  009D88  01                 	db	1
  2797  009D89  01                 	db	1
  2798  009D8A  01                 	db	1
  2799  009D8B  01                 	db	1
  2800  009D8C  01                 	db	1
  2801  009D8D  01                 	db	1
  2802  009D8E  01                 	db	1
  2803  009D8F  01                 	db	1
  2804  009D90  01                 	db	1
  2805  009D91  01                 	db	1
  2806  009D92  01                 	db	1
  2807  009D93  01                 	db	1
  2808  009D94  01                 	db	1
  2809  009D95  01                 	db	1
  2810  009D96  01                 	db	1
  2811  009D97  01                 	db	1
  2812  009D98  01                 	db	1
  2813  009D99  01                 	db	1
  2814  009D9A  01                 	db	1
  2815  009D9B  01                 	db	1
  2816  009D9C  01                 	db	1
  2817  009D9D  01                 	db	1
  2818  009D9E  01                 	db	1
  2819  009D9F  01                 	db	1
  2820  009DA0  01                 	db	1
  2821  009DA1  01                 	db	1
  2822  009DA2  01                 	db	1
  2823  009DA3  01                 	db	1
  2824  009DA4  01                 	db	1
  2825  009DA5  01                 	db	1
  2826  009DA6  01                 	db	1
  2827  009DA7  01                 	db	1
  2828  009DA8  01                 	db	1
  2829  009DA9  01                 	db	1
  2830  009DAA  01                 	db	1
  2831  009DAB  00                 	db	0
  2832  009DAC  00                 	db	0
  2833  009DAD  00                 	db	0
  2834  009DAE  00                 	db	0
  2835  009DAF  00                 	db	0
  2836  009DB0  00                 	db	0
  2837  009DB1  00                 	db	0
  2838  009DB2  00                 	db	0
  2839  009DB3  00                 	db	0
  2840  009DB4  00                 	db	0
  2841  009DB5  00                 	db	0
  2842  009DB6  00                 	db	0
  2843  009DB7  00                 	db	0
  2844  009DB8  00                 	db	0
  2845  009DB9  00                 	db	0
  2846  009DBA  00                 	db	0
  2847  009DBB  00                 	db	0
  2848  009DBC  00                 	db	0
  2849  009DBD  00                 	db	0
  2850  009DBE  00                 	db	0
  2851  009DBF  00                 	db	0
  2852  009DC0  00                 	db	0
  2853  009DC1  00                 	db	0
  2854  009DC2  00                 	db	0
  2855  009DC3  00                 	db	0
  2856  009DC4  00                 	db	0
  2857  009DC5  00                 	db	0
  2858  009DC6  00                 	db	0
  2859  009DC7  00                 	db	0
  2860  009DC8  00                 	db	0
  2861  009DC9  00                 	db	0
  2862  009DCA  00                 	db	0
  2863  009DCB  00                 	db	0
  2864  009DCC  00                 	db	0
  2865  009DCD  00                 	db	0
  2866  009DCE  00                 	db	0
  2867  009DCF  00                 	db	0
  2868  009DD0  00                 	db	0
  2869  009DD1  00                 	db	0
  2870  009DD2  00                 	db	0
  2871  009DD3  00                 	db	0
  2872  009DD4  00                 	db	0
  2873  009DD5  00                 	db	0
  2874  009DD6  00                 	db	0
  2875  009DD7  00                 	db	0
  2876  009DD8  00                 	db	0
  2877  009DD9  00                 	db	0
  2878  009DDA  00                 	db	0
  2879  009DDB  00                 	db	0
  2880  009DDC  00                 	db	0
  2881  009DDD  00                 	db	0
  2882  009DDE  00                 	db	0
  2883  009DDF  00                 	db	0
  2884  009DE0  00                 	db	0
  2885  009DE1  00                 	db	0
  2886  009DE2  00                 	db	0
  2887  009DE3  00                 	db	0
  2888  009DE4                     __end_of_motor_prescaler_lookup:
  2889                           	opt stack 0
  2890  009DE4                     _USB_SD_Ptr:
  2891                           	opt stack 0
  2892  009DE4  B7                 	db	low _sd000
  2893  009DE5  A2                 	db	high _sd000
  2894  009DE6  FE                 	db	low _sd001
  2895  009DE7  A0                 	db	high _sd001
  2896  009DE8  32                 	db	low _sd002
  2897  009DE9  A1                 	db	high _sd002
  2898  009DEA  A1                 	db	low _sd003
  2899  009DEB  A1                 	db	high _sd003
  2900  009DEC                     __end_of_USB_SD_Ptr:
  2901                           	opt stack 0
  2902  009DEC                     _USB_CD_Ptr:
  2903                           	opt stack 0
  2904  009DEC  BE                 	db	low _configDescriptor1
  2905  009DED  A0                 	db	high _configDescriptor1
  2906  009DEE                     __end_of_USB_CD_Ptr:
  2907                           	opt stack 0
  2908  009DEE                     _dc_manual:
  2909                           	opt stack 0
  2910  009DEE  4D                 	db	77
  2911  009DEF  61                 	db	97
  2912  009DF0  6E                 	db	110
  2913  009DF1  75                 	db	117
  2914  009DF2  61                 	db	97
  2915  009DF3  6C                 	db	108
  2916  009DF4  20                 	db	32
  2917  009DF5  4D                 	db	77
  2918  009DF6  6F                 	db	111
  2919  009DF7  64                 	db	100
  2920  009DF8  65                 	db	101
  2921  009DF9  20                 	db	32
  2922  009DFA  20                 	db	32
  2923  009DFB  20                 	db	32
  2924  009DFC  20                 	db	32
  2925  009DFD  20                 	db	32
  2926  009DFE  20                 	db	32
  2927  009DFF  20                 	db	32
  2928  009E00  20                 	db	32
  2929  009E01  20                 	db	32
  2930  009E02  43                 	db	67
  2931  009E03  75                 	db	117
  2932  009E04  72                 	db	114
  2933  009E05  72                 	db	114
  2934  009E06  65                 	db	101
  2935  009E07  6E                 	db	110
  2936  009E08  74                 	db	116
  2937  009E09  20                 	db	32
  2938  009E0A  70                 	db	112
  2939  009E0B  6F                 	db	111
  2940  009E0C  73                 	db	115
  2941  009E0D  3A                 	db	58
  2942  009E0E  20                 	db	32
  2943  009E0F  20                 	db	32
  2944  009E10  20                 	db	32
  2945  009E11  20                 	db	32
  2946  009E12  20                 	db	32
  2947  009E13  20                 	db	32
  2948  009E14  20                 	db	32
  2949  009E15  01                 	db	1
  2950  009E16  54                 	db	84
  2951  009E17  75                 	db	117
  2952  009E18  72                 	db	114
  2953  009E19  6E                 	db	110
  2954  009E1A  20                 	db	32
  2955  009E1B  43                 	db	67
  2956  009E1C  43                 	db	67
  2957  009E1D  57                 	db	87
  2958  009E1E  20                 	db	32
  2959  009E1F  00                 	db	0
  2960  009E20  20                 	db	32
  2961  009E21  53                 	db	83
  2962  009E22  70                 	db	112
  2963  009E23  65                 	db	101
  2964  009E24  65                 	db	101
  2965  009E25  64                 	db	100
  2966  009E26  20                 	db	32
  2967  009E27  20                 	db	32
  2968  009E28  20                 	db	32
  2969  009E29  20                 	db	32
  2970  009E2A  53                 	db	83
  2971  009E2B  74                 	db	116
  2972  009E2C  61                 	db	97
  2973  009E2D  72                 	db	114
  2974  009E2E  74                 	db	116
  2975  009E2F  20                 	db	32
  2976  009E30  20                 	db	32
  2977  009E31  20                 	db	32
  2978  009E32  20                 	db	32
  2979  009E33  00                 	db	0
  2980  009E34  20                 	db	32
  2981  009E35  20                 	db	32
  2982  009E36  20                 	db	32
  2983  009E37  20                 	db	32
  2984  009E38  20                 	db	32
  2985  009E39  20                 	db	32
  2986  009E3A  20                 	db	32
  2987  009E3B  20                 	db	32
  2988  009E3C  20                 	db	32
  2989  009E3D  20                 	db	32
  2990  009E3E                     __end_of_dc_manual:
  2991                           	opt stack 0
  2992  009E3E                     _dc_zero:
  2993                           	opt stack 0
  2994  009E3E  52                 	db	82
  2995  009E3F  65                 	db	101
  2996  009E40  74                 	db	116
  2997  009E41  75                 	db	117
  2998  009E42  72                 	db	114
  2999  009E43  6E                 	db	110
  3000  009E44  20                 	db	32
  3001  009E45  74                 	db	116
  3002  009E46  6F                 	db	111
  3003  009E47  20                 	db	32
  3004  009E48  5A                 	db	90
  3005  009E49  65                 	db	101
  3006  009E4A  72                 	db	114
  3007  009E4B  6F                 	db	111
  3008  009E4C  3F                 	db	63
  3009  009E4D  20                 	db	32
  3010  009E4E  20                 	db	32
  3011  009E4F  20                 	db	32
  3012  009E50  20                 	db	32
  3013  009E51  20                 	db	32
  3014  009E52  43                 	db	67
  3015  009E53  75                 	db	117
  3016  009E54  72                 	db	114
  3017  009E55  72                 	db	114
  3018  009E56  65                 	db	101
  3019  009E57  6E                 	db	110
  3020  009E58  74                 	db	116
  3021  009E59  20                 	db	32
  3022  009E5A  70                 	db	112
  3023  009E5B  6F                 	db	111
  3024  009E5C  73                 	db	115
  3025  009E5D  3A                 	db	58
  3026  009E5E  20                 	db	32
  3027  009E5F  20                 	db	32
  3028  009E60  20                 	db	32
  3029  009E61  20                 	db	32
  3030  009E62  20                 	db	32
  3031  009E63  20                 	db	32
  3032  009E64  20                 	db	32
  3033  009E65  20                 	db	32
  3034  009E66  20                 	db	32
  3035  009E67  20                 	db	32
  3036  009E68  20                 	db	32
  3037  009E69  20                 	db	32
  3038  009E6A  20                 	db	32
  3039  009E6B  20                 	db	32
  3040  009E6C  20                 	db	32
  3041  009E6D  20                 	db	32
  3042  009E6E  20                 	db	32
  3043  009E6F  20                 	db	32
  3044  009E70  20                 	db	32
  3045  009E71  20                 	db	32
  3046  009E72  20                 	db	32
  3047  009E73  20                 	db	32
  3048  009E74  20                 	db	32
  3049  009E75  20                 	db	32
  3050  009E76  20                 	db	32
  3051  009E77  20                 	db	32
  3052  009E78  20                 	db	32
  3053  009E79  20                 	db	32
  3054  009E7A  20                 	db	32
  3055  009E7B  59                 	db	89
  3056  009E7C  65                 	db	101
  3057  009E7D  73                 	db	115
  3058  009E7E  20                 	db	32
  3059  009E7F  20                 	db	32
  3060  009E80  20                 	db	32
  3061  009E81  20                 	db	32
  3062  009E82  20                 	db	32
  3063  009E83  20                 	db	32
  3064  009E84  20                 	db	32
  3065  009E85  20                 	db	32
  3066  009E86  20                 	db	32
  3067  009E87  20                 	db	32
  3068  009E88  20                 	db	32
  3069  009E89  20                 	db	32
  3070  009E8A  4E                 	db	78
  3071  009E8B  6F                 	db	111
  3072  009E8C  20                 	db	32
  3073  009E8D  20                 	db	32
  3074  009E8E                     __end_of_dc_zero:
  3075                           	opt stack 0
  3076  009E8E                     _dc_arc2:
  3077                           	opt stack 0
  3078  009E8E  41                 	db	65
  3079  009E8F  72                 	db	114
  3080  009E90  63                 	db	99
  3081  009E91  3A                 	db	58
  3082  009E92  20                 	db	32
  3083  009E93  53                 	db	83
  3084  009E94  69                 	db	105
  3085  009E95  7A                 	db	122
  3086  009E96  65                 	db	101
  3087  009E97  3D                 	db	61
  3088  009E98  20                 	db	32
  3089  009E99  20                 	db	32
  3090  009E9A  20                 	db	32
  3091  009E9B  20                 	db	32
  3092  009E9C  20                 	db	32
  3093  009E9D  20                 	db	32
  3094  009E9E  20                 	db	32
  3095  009E9F  20                 	db	32
  3096  009EA0  20                 	db	32
  3097  009EA1  20                 	db	32
  3098  009EA2  43                 	db	67
  3099  009EA3  75                 	db	117
  3100  009EA4  72                 	db	114
  3101  009EA5  72                 	db	114
  3102  009EA6  65                 	db	101
  3103  009EA7  6E                 	db	110
  3104  009EA8  74                 	db	116
  3105  009EA9  20                 	db	32
  3106  009EAA  70                 	db	112
  3107  009EAB  6F                 	db	111
  3108  009EAC  73                 	db	115
  3109  009EAD  3A                 	db	58
  3110  009EAE  20                 	db	32
  3111  009EAF  20                 	db	32
  3112  009EB0  20                 	db	32
  3113  009EB1  20                 	db	32
  3114  009EB2  20                 	db	32
  3115  009EB3  20                 	db	32
  3116  009EB4  20                 	db	32
  3117  009EB5  01                 	db	1
  3118  009EB6  54                 	db	84
  3119  009EB7  75                 	db	117
  3120  009EB8  72                 	db	114
  3121  009EB9  6E                 	db	110
  3122  009EBA  20                 	db	32
  3123  009EBB  43                 	db	67
  3124  009EBC  43                 	db	67
  3125  009EBD  57                 	db	87
  3126  009EBE  20                 	db	32
  3127  009EBF  00                 	db	0
  3128  009EC0  20                 	db	32
  3129  009EC1  53                 	db	83
  3130  009EC2  70                 	db	112
  3131  009EC3  65                 	db	101
  3132  009EC4  65                 	db	101
  3133  009EC5  64                 	db	100
  3134  009EC6  20                 	db	32
  3135  009EC7  20                 	db	32
  3136  009EC8  20                 	db	32
  3137  009EC9  20                 	db	32
  3138  009ECA  53                 	db	83
  3139  009ECB  74                 	db	116
  3140  009ECC  61                 	db	97
  3141  009ECD  72                 	db	114
  3142  009ECE  74                 	db	116
  3143  009ECF  20                 	db	32
  3144  009ED0  20                 	db	32
  3145  009ED1  20                 	db	32
  3146  009ED2  20                 	db	32
  3147  009ED3  00                 	db	0
  3148  009ED4  20                 	db	32
  3149  009ED5  20                 	db	32
  3150  009ED6  20                 	db	32
  3151  009ED7  20                 	db	32
  3152  009ED8  20                 	db	32
  3153  009ED9  20                 	db	32
  3154  009EDA  20                 	db	32
  3155  009EDB  20                 	db	32
  3156  009EDC  20                 	db	32
  3157  009EDD  20                 	db	32
  3158  009EDE                     __end_of_dc_arc2:
  3159                           	opt stack 0
  3160  009EDE                     _dc_arc1:
  3161                           	opt stack 0
  3162  009EDE  41                 	db	65
  3163  009EDF  72                 	db	114
  3164  009EE0  63                 	db	99
  3165  009EE1  3A                 	db	58
  3166  009EE2  20                 	db	32
  3167  009EE3  53                 	db	83
  3168  009EE4  65                 	db	101
  3169  009EE5  74                 	db	116
  3170  009EE6  20                 	db	32
  3171  009EE7  61                 	db	97
  3172  009EE8  72                 	db	114
  3173  009EE9  63                 	db	99
  3174  009EEA  20                 	db	32
  3175  009EEB  73                 	db	115
  3176  009EEC  69                 	db	105
  3177  009EED  7A                 	db	122
  3178  009EEE  65                 	db	101
  3179  009EEF  20                 	db	32
  3180  009EF0  20                 	db	32
  3181  009EF1  20                 	db	32
  3182  009EF2  41                 	db	65
  3183  009EF3  72                 	db	114
  3184  009EF4  63                 	db	99
  3185  009EF5  20                 	db	32
  3186  009EF6  73                 	db	115
  3187  009EF7  69                 	db	105
  3188  009EF8  7A                 	db	122
  3189  009EF9  65                 	db	101
  3190  009EFA  3A                 	db	58
  3191  009EFB  20                 	db	32
  3192  009EFC  20                 	db	32
  3193  009EFD  20                 	db	32
  3194  009EFE  20                 	db	32
  3195  009EFF  20                 	db	32
  3196  009F00  20                 	db	32
  3197  009F01  20                 	db	32
  3198  009F02  20                 	db	32
  3199  009F03  20                 	db	32
  3200  009F04  20                 	db	32
  3201  009F05  20                 	db	32
  3202  009F06  53                 	db	83
  3203  009F07  74                 	db	116
  3204  009F08  65                 	db	101
  3205  009F09  70                 	db	112
  3206  009F0A  20                 	db	32
  3207  009F0B  73                 	db	115
  3208  009F0C  69                 	db	105
  3209  009F0D  7A                 	db	122
  3210  009F0E  65                 	db	101
  3211  009F0F  20                 	db	32
  3212  009F10  00                 	db	0
  3213  009F11  20                 	db	32
  3214  009F12  20                 	db	32
  3215  009F13  43                 	db	67
  3216  009F14  6F                 	db	111
  3217  009F15  6E                 	db	110
  3218  009F16  66                 	db	102
  3219  009F17  69                 	db	105
  3220  009F18  72                 	db	114
  3221  009F19  6D                 	db	109
  3222  009F1A  20                 	db	32
  3223  009F1B  20                 	db	32
  3224  009F1C  20                 	db	32
  3225  009F1D  20                 	db	32
  3226  009F1E  20                 	db	32
  3227  009F1F  20                 	db	32
  3228  009F20  20                 	db	32
  3229  009F21  20                 	db	32
  3230  009F22  20                 	db	32
  3231  009F23  20                 	db	32
  3232  009F24  00                 	db	0
  3233  009F25  20                 	db	32
  3234  009F26  20                 	db	32
  3235  009F27  43                 	db	67
  3236  009F28  61                 	db	97
  3237  009F29  6E                 	db	110
  3238  009F2A  63                 	db	99
  3239  009F2B  65                 	db	101
  3240  009F2C  6C                 	db	108
  3241  009F2D  20                 	db	32
  3242  009F2E                     __end_of_dc_arc1:
  3243                           	opt stack 0
  3244  009F2E                     _dc_divide2:
  3245                           	opt stack 0
  3246  009F2E  44                 	db	68
  3247  009F2F  69                 	db	105
  3248  009F30  76                 	db	118
  3249  009F31  69                 	db	105
  3250  009F32  64                 	db	100
  3251  009F33  65                 	db	101
  3252  009F34  3A                 	db	58
  3253  009F35  20                 	db	32
  3254  009F36  20                 	db	32
  3255  009F37  20                 	db	32
  3256  009F38  20                 	db	32
  3257  009F39  20                 	db	32
  3258  009F3A  20                 	db	32
  3259  009F3B  20                 	db	32
  3260  009F3C  20                 	db	32
  3261  009F3D  20                 	db	32
  3262  009F3E  20                 	db	32
  3263  009F3F  20                 	db	32
  3264  009F40  20                 	db	32
  3265  009F41  20                 	db	32
  3266  009F42  50                 	db	80
  3267  009F43  6F                 	db	111
  3268  009F44  73                 	db	115
  3269  009F45  3A                 	db	58
  3270  009F46  20                 	db	32
  3271  009F47  20                 	db	32
  3272  009F48  20                 	db	32
  3273  009F49  20                 	db	32
  3274  009F4A  20                 	db	32
  3275  009F4B  20                 	db	32
  3276  009F4C  20                 	db	32
  3277  009F4D  20                 	db	32
  3278  009F4E  20                 	db	32
  3279  009F4F  20                 	db	32
  3280  009F50  20                 	db	32
  3281  009F51  20                 	db	32
  3282  009F52  20                 	db	32
  3283  009F53  20                 	db	32
  3284  009F54  20                 	db	32
  3285  009F55  20                 	db	32
  3286  009F56  4A                 	db	74
  3287  009F57  75                 	db	117
  3288  009F58  6D                 	db	109
  3289  009F59  70                 	db	112
  3290  009F5A  20                 	db	32
  3291  009F5B  73                 	db	115
  3292  009F5C  69                 	db	105
  3293  009F5D  7A                 	db	122
  3294  009F5E  65                 	db	101
  3295  009F5F  3A                 	db	58
  3296  009F60  20                 	db	32
  3297  009F61  20                 	db	32
  3298  009F62  20                 	db	32
  3299  009F63  20                 	db	32
  3300  009F64  20                 	db	32
  3301  009F65  20                 	db	32
  3302  009F66  20                 	db	32
  3303  009F67  20                 	db	32
  3304  009F68  20                 	db	32
  3305  009F69  20                 	db	32
  3306  009F6A  50                 	db	80
  3307  009F6B  72                 	db	114
  3308  009F6C  65                 	db	101
  3309  009F6D  73                 	db	115
  3310  009F6E  73                 	db	115
  3311  009F6F  54                 	db	84
  3312  009F70  6F                 	db	111
  3313  009F71  4A                 	db	74
  3314  009F72  75                 	db	117
  3315  009F73  6D                 	db	109
  3316  009F74  70                 	db	112
  3317  009F75  20                 	db	32
  3318  009F76  00                 	db	0
  3319  009F77  20                 	db	32
  3320  009F78  43                 	db	67
  3321  009F79  61                 	db	97
  3322  009F7A  6E                 	db	110
  3323  009F7B  63                 	db	99
  3324  009F7C  65                 	db	101
  3325  009F7D  6C                 	db	108
  3326  009F7E                     __end_of_dc_divide2:
  3327                           	opt stack 0
  3328  009F7E                     _dc_divide1:
  3329                           	opt stack 0
  3330  009F7E  44                 	db	68
  3331  009F7F  69                 	db	105
  3332  009F80  76                 	db	118
  3333  009F81  69                 	db	105
  3334  009F82  64                 	db	100
  3335  009F83  65                 	db	101
  3336  009F84  3A                 	db	58
  3337  009F85  20                 	db	32
  3338  009F86  53                 	db	83
  3339  009F87  65                 	db	101
  3340  009F88  74                 	db	116
  3341  009F89  20                 	db	32
  3342  009F8A  64                 	db	100
  3343  009F8B  69                 	db	105
  3344  009F8C  76                 	db	118
  3345  009F8D  69                 	db	105
  3346  009F8E  73                 	db	115
  3347  009F8F  69                 	db	105
  3348  009F90  6F                 	db	111
  3349  009F91  6E                 	db	110
  3350  009F92  20                 	db	32
  3351  009F93  20                 	db	32
  3352  009F94  20                 	db	32
  3353  009F95  20                 	db	32
  3354  009F96  20                 	db	32
  3355  009F97  20                 	db	32
  3356  009F98  20                 	db	32
  3357  009F99  20                 	db	32
  3358  009F9A  20                 	db	32
  3359  009F9B  20                 	db	32
  3360  009F9C  20                 	db	32
  3361  009F9D  20                 	db	32
  3362  009F9E  20                 	db	32
  3363  009F9F  20                 	db	32
  3364  009FA0  20                 	db	32
  3365  009FA1  20                 	db	32
  3366  009FA2  20                 	db	32
  3367  009FA3  20                 	db	32
  3368  009FA4  20                 	db	32
  3369  009FA5  20                 	db	32
  3370  009FA6  20                 	db	32
  3371  009FA7  20                 	db	32
  3372  009FA8  20                 	db	32
  3373  009FA9  2F                 	db	47
  3374  009FAA  73                 	db	115
  3375  009FAB  74                 	db	116
  3376  009FAC  65                 	db	101
  3377  009FAD  70                 	db	112
  3378  009FAE  20                 	db	32
  3379  009FAF  20                 	db	32
  3380  009FB0  00                 	db	0
  3381  009FB1  20                 	db	32
  3382  009FB2  20                 	db	32
  3383  009FB3  43                 	db	67
  3384  009FB4  6F                 	db	111
  3385  009FB5  6E                 	db	110
  3386  009FB6  66                 	db	102
  3387  009FB7  69                 	db	105
  3388  009FB8  72                 	db	114
  3389  009FB9  6D                 	db	109
  3390  009FBA  31                 	db	49
  3391  009FBB  32                 	db	50
  3392  009FBC  33                 	db	51
  3393  009FBD  34                 	db	52
  3394  009FBE  20                 	db	32
  3395  009FBF  20                 	db	32
  3396  009FC0  20                 	db	32
  3397  009FC1  20                 	db	32
  3398  009FC2  20                 	db	32
  3399  009FC3  20                 	db	32
  3400  009FC4  00                 	db	0
  3401  009FC5  20                 	db	32
  3402  009FC6  20                 	db	32
  3403  009FC7  43                 	db	67
  3404  009FC8  61                 	db	97
  3405  009FC9  6E                 	db	110
  3406  009FCA  63                 	db	99
  3407  009FCB  65                 	db	101
  3408  009FCC  6C                 	db	108
  3409  009FCD  20                 	db	32
  3410  009FCE                     __end_of_dc_divide1:
  3411                           	opt stack 0
  3412  009FCE                     _dc_setup2:
  3413                           	opt stack 0
  3414  009FCE  53                 	db	83
  3415  009FCF  65                 	db	101
  3416  009FD0  74                 	db	116
  3417  009FD1  75                 	db	117
  3418  009FD2  70                 	db	112
  3419  009FD3  3A                 	db	58
  3420  009FD4  20                 	db	32
  3421  009FD5  53                 	db	83
  3422  009FD6  65                 	db	101
  3423  009FD7  74                 	db	116
  3424  009FD8  20                 	db	32
  3425  009FD9  64                 	db	100
  3426  009FDA  69                 	db	105
  3427  009FDB  72                 	db	114
  3428  009FDC  65                 	db	101
  3429  009FDD  63                 	db	99
  3430  009FDE  74                 	db	116
  3431  009FDF  69                 	db	105
  3432  009FE0  6F                 	db	111
  3433  009FE1  6E                 	db	110
  3434  009FE2  20                 	db	32
  3435  009FE3  20                 	db	32
  3436  009FE4  20                 	db	32
  3437  009FE5  20                 	db	32
  3438  009FE6  20                 	db	32
  3439  009FE7  20                 	db	32
  3440  009FE8  20                 	db	32
  3441  009FE9  20                 	db	32
  3442  009FEA  20                 	db	32
  3443  009FEB  20                 	db	32
  3444  009FEC  20                 	db	32
  3445  009FED  20                 	db	32
  3446  009FEE  20                 	db	32
  3447  009FEF  20                 	db	32
  3448  009FF0  20                 	db	32
  3449  009FF1  20                 	db	32
  3450  009FF2  20                 	db	32
  3451  009FF3  20                 	db	32
  3452  009FF4  20                 	db	32
  3453  009FF5  20                 	db	32
  3454  009FF6  20                 	db	32
  3455  009FF7  43                 	db	67
  3456  009FF8  6F                 	db	111
  3457  009FF9  75                 	db	117
  3458  009FFA  6E                 	db	110
  3459  009FFB  74                 	db	116
  3460  009FFC  65                 	db	101
  3461  009FFD  72                 	db	114
  3462  009FFE  43                 	db	67
  3463  009FFF  6C                 	db	108
  3464  00A000  6F                 	db	111
  3465  00A001  63                 	db	99
  3466  00A002  6B                 	db	107
  3467  00A003  77                 	db	119
  3468  00A004  69                 	db	105
  3469  00A005  73                 	db	115
  3470  00A006  65                 	db	101
  3471  00A007  20                 	db	32
  3472  00A008  20                 	db	32
  3473  00A009  20                 	db	32
  3474  00A00A  20                 	db	32
  3475  00A00B  43                 	db	67
  3476  00A00C  6C                 	db	108
  3477  00A00D  6F                 	db	111
  3478  00A00E  63                 	db	99
  3479  00A00F  6B                 	db	107
  3480  00A010  77                 	db	119
  3481  00A011  69                 	db	105
  3482  00A012  73                 	db	115
  3483  00A013  65                 	db	101
  3484  00A014  20                 	db	32
  3485  00A015  20                 	db	32
  3486  00A016  20                 	db	32
  3487  00A017  20                 	db	32
  3488  00A018  20                 	db	32
  3489  00A019  20                 	db	32
  3490  00A01A  20                 	db	32
  3491  00A01B  20                 	db	32
  3492  00A01C  20                 	db	32
  3493  00A01D  20                 	db	32
  3494  00A01E                     __end_of_dc_setup2:
  3495                           	opt stack 0
  3496  00A01E                     _dc_setup1:
  3497                           	opt stack 0
  3498  00A01E  53                 	db	83
  3499  00A01F  65                 	db	101
  3500  00A020  74                 	db	116
  3501  00A021  75                 	db	117
  3502  00A022  70                 	db	112
  3503  00A023  3A                 	db	58
  3504  00A024  20                 	db	32
  3505  00A025  53                 	db	83
  3506  00A026  65                 	db	101
  3507  00A027  74                 	db	116
  3508  00A028  20                 	db	32
  3509  00A029  7A                 	db	122
  3510  00A02A  65                 	db	101
  3511  00A02B  72                 	db	114
  3512  00A02C  6F                 	db	111
  3513  00A02D  20                 	db	32
  3514  00A02E  70                 	db	112
  3515  00A02F  6F                 	db	111
  3516  00A030  73                 	db	115
  3517  00A031  2E                 	db	46
  3518  00A032  20                 	db	32
  3519  00A033  20                 	db	32
  3520  00A034  20                 	db	32
  3521  00A035  20                 	db	32
  3522  00A036  20                 	db	32
  3523  00A037  20                 	db	32
  3524  00A038  20                 	db	32
  3525  00A039  20                 	db	32
  3526  00A03A  20                 	db	32
  3527  00A03B  20                 	db	32
  3528  00A03C  20                 	db	32
  3529  00A03D  20                 	db	32
  3530  00A03E  20                 	db	32
  3531  00A03F  20                 	db	32
  3532  00A040  20                 	db	32
  3533  00A041  20                 	db	32
  3534  00A042  20                 	db	32
  3535  00A043  20                 	db	32
  3536  00A044  20                 	db	32
  3537  00A045  20                 	db	32
  3538  00A046  53                 	db	83
  3539  00A047  74                 	db	116
  3540  00A048  65                 	db	101
  3541  00A049  70                 	db	112
  3542  00A04A  20                 	db	32
  3543  00A04B  73                 	db	115
  3544  00A04C  69                 	db	105
  3545  00A04D  7A                 	db	122
  3546  00A04E  65                 	db	101
  3547  00A04F  20                 	db	32
  3548  00A050  00                 	db	0
  3549  00A051  20                 	db	32
  3550  00A052  20                 	db	32
  3551  00A053  43                 	db	67
  3552  00A054  6F                 	db	111
  3553  00A055  6E                 	db	110
  3554  00A056  66                 	db	102
  3555  00A057  69                 	db	105
  3556  00A058  72                 	db	114
  3557  00A059  6D                 	db	109
  3558  00A05A  20                 	db	32
  3559  00A05B  78                 	db	120
  3560  00A05C  2E                 	db	46
  3561  00A05D  78                 	db	120
  3562  00A05E  78                 	db	120
  3563  00A05F  01                 	db	1
  3564  00A060  20                 	db	32
  3565  00A061  20                 	db	32
  3566  00A062  20                 	db	32
  3567  00A063  20                 	db	32
  3568  00A064  00                 	db	0
  3569  00A065  20                 	db	32
  3570  00A066  20                 	db	32
  3571  00A067  43                 	db	67
  3572  00A068  61                 	db	97
  3573  00A069  6E                 	db	110
  3574  00A06A  63                 	db	99
  3575  00A06B  65                 	db	101
  3576  00A06C  6C                 	db	108
  3577  00A06D  20                 	db	32
  3578  00A06E                     __end_of_dc_setup1:
  3579                           	opt stack 0
  3580  00A06E                     _dc_main:
  3581                           	opt stack 0
  3582  00A06E  4D                 	db	77
  3583  00A06F  61                 	db	97
  3584  00A070  69                 	db	105
  3585  00A071  6E                 	db	110
  3586  00A072  20                 	db	32
  3587  00A073  4D                 	db	77
  3588  00A074  65                 	db	101
  3589  00A075  6E                 	db	110
  3590  00A076  75                 	db	117
  3591  00A077  3A                 	db	58
  3592  00A078  20                 	db	32
  3593  00A079  20                 	db	32
  3594  00A07A  20                 	db	32
  3595  00A07B  20                 	db	32
  3596  00A07C  20                 	db	32
  3597  00A07D  20                 	db	32
  3598  00A07E  20                 	db	32
  3599  00A07F  20                 	db	32
  3600  00A080  20                 	db	32
  3601  00A081  20                 	db	32
  3602  00A082  20                 	db	32
  3603  00A083  53                 	db	83
  3604  00A084  65                 	db	101
  3605  00A085  74                 	db	116
  3606  00A086  75                 	db	117
  3607  00A087  70                 	db	112
  3608  00A088  20                 	db	32
  3609  00A089  20                 	db	32
  3610  00A08A  20                 	db	32
  3611  00A08B  20                 	db	32
  3612  00A08C  44                 	db	68
  3613  00A08D  69                 	db	105
  3614  00A08E  76                 	db	118
  3615  00A08F  69                 	db	105
  3616  00A090  64                 	db	100
  3617  00A091  65                 	db	101
  3618  00A092  20                 	db	32
  3619  00A093  20                 	db	32
  3620  00A094  20                 	db	32
  3621  00A095  20                 	db	32
  3622  00A096  20                 	db	32
  3623  00A097  41                 	db	65
  3624  00A098  72                 	db	114
  3625  00A099  63                 	db	99
  3626  00A09A  20                 	db	32
  3627  00A09B  20                 	db	32
  3628  00A09C  20                 	db	32
  3629  00A09D  20                 	db	32
  3630  00A09E  20                 	db	32
  3631  00A09F  20                 	db	32
  3632  00A0A0  4D                 	db	77
  3633  00A0A1  61                 	db	97
  3634  00A0A2  6E                 	db	110
  3635  00A0A3  75                 	db	117
  3636  00A0A4  61                 	db	97
  3637  00A0A5  6C                 	db	108
  3638  00A0A6  20                 	db	32
  3639  00A0A7  20                 	db	32
  3640  00A0A8  20                 	db	32
  3641  00A0A9  20                 	db	32
  3642  00A0AA  20                 	db	32
  3643  00A0AB  47                 	db	71
  3644  00A0AC  6F                 	db	111
  3645  00A0AD  32                 	db	50
  3646  00A0AE  5A                 	db	90
  3647  00A0AF  65                 	db	101
  3648  00A0B0  72                 	db	114
  3649  00A0B1  6F                 	db	111
  3650  00A0B2  20                 	db	32
  3651  00A0B3  20                 	db	32
  3652  00A0B4  20                 	db	32
  3653  00A0B5  20                 	db	32
  3654  00A0B6  20                 	db	32
  3655  00A0B7  20                 	db	32
  3656  00A0B8  20                 	db	32
  3657  00A0B9  20                 	db	32
  3658  00A0BA  20                 	db	32
  3659  00A0BB  20                 	db	32
  3660  00A0BC  20                 	db	32
  3661  00A0BD  20                 	db	32
  3662  00A0BE                     __end_of_dc_main:
  3663                           	opt stack 0
  3664  00A0BE                     _configDescriptor1:
  3665                           	opt stack 0
  3666  00A0BE  09                 	db	9
  3667  00A0BF  02                 	db	2
  3668  00A0C0  40                 	db	64
  3669  00A0C1  00                 	db	0
  3670  00A0C2  02                 	db	2
  3671  00A0C3  01                 	db	1
  3672  00A0C4  00                 	db	0
  3673  00A0C5  C0                 	db	192
  3674  00A0C6  32                 	db	50
  3675  00A0C7  09                 	db	9
  3676  00A0C8  04                 	db	4
  3677  00A0C9  00                 	db	0
  3678  00A0CA  00                 	db	0
  3679  00A0CB  02                 	db	2
  3680  00A0CC  03                 	db	3
  3681  00A0CD  00                 	db	0
  3682  00A0CE  00                 	db	0
  3683  00A0CF  00                 	db	0
  3684  00A0D0  09                 	db	9
  3685  00A0D1  21                 	db	33
  3686  00A0D2  11                 	db	17
  3687  00A0D3  01                 	db	1
  3688  00A0D4  00                 	db	0
  3689  00A0D5  01                 	db	1
  3690  00A0D6  22                 	db	34
  3691  00A0D7  1D                 	db	29
  3692  00A0D8  00                 	db	0
  3693  00A0D9  07                 	db	7
  3694  00A0DA  05                 	db	5
  3695  00A0DB  81                 	db	129
  3696  00A0DC  03                 	db	3
  3697  00A0DD  40                 	db	64
  3698  00A0DE  00                 	db	0
  3699  00A0DF  01                 	db	1
  3700  00A0E0  07                 	db	7
  3701  00A0E1  05                 	db	5
  3702  00A0E2  01                 	db	1
  3703  00A0E3  03                 	db	3
  3704  00A0E4  40                 	db	64
  3705  00A0E5  00                 	db	0
  3706  00A0E6  01                 	db	1
  3707  00A0E7  09                 	db	9
  3708  00A0E8  04                 	db	4
  3709  00A0E9  01                 	db	1
  3710  00A0EA  00                 	db	0
  3711  00A0EB  02                 	db	2
  3712  00A0EC  08                 	db	8
  3713  00A0ED  06                 	db	6
  3714  00A0EE  50                 	db	80
  3715  00A0EF  00                 	db	0
  3716  00A0F0  07                 	db	7
  3717  00A0F1  05                 	db	5
  3718  00A0F2  82                 	db	130
  3719  00A0F3  02                 	db	2
  3720  00A0F4  40                 	db	64
  3721  00A0F5  00                 	db	0
  3722  00A0F6  01                 	db	1
  3723  00A0F7  07                 	db	7
  3724  00A0F8  05                 	db	5
  3725  00A0F9  02                 	db	2
  3726  00A0FA  02                 	db	2
  3727  00A0FB  40                 	db	64
  3728  00A0FC  00                 	db	0
  3729  00A0FD  01                 	db	1
  3730  00A0FE                     __end_of_configDescriptor1:
  3731                           	opt stack 0
  3732  00A0FE                     _sd001:
  3733                           	opt stack 0
  3734  00A0FE  34                 	db	52
  3735  00A0FF  03                 	db	3
  3736  00A100  0053               	dw	83
  3737  00A102  006F               	dw	111
  3738  00A104  006C               	dw	108
  3739  00A106  0064               	dw	100
  3740  00A108  0065               	dw	101
  3741  00A10A  0072               	dw	114
  3742  00A10C  006E               	dw	110
  3743  00A10E  0065               	dw	101
  3744  00A110  0072               	dw	114
  3745  00A112  0064               	dw	100
  3746  00A114  002E               	dw	46
  3747  00A116  0063               	dw	99
  3748  00A118  006F               	dw	111
  3749  00A11A  006D               	dw	109
  3750  00A11C  0020               	dw	32
  3751  00A11E  0020               	dw	32
  3752  00A120  0020               	dw	32
  3753  00A122  0020               	dw	32
  3754  00A124  0020               	dw	32
  3755  00A126  0020               	dw	32
  3756  00A128  0020               	dw	32
  3757  00A12A  0020               	dw	32
  3758  00A12C  0020               	dw	32
  3759  00A12E  0020               	dw	32
  3760  00A130  0020               	dw	32
  3761  00A132                     __end_of_sd001:
  3762                           	opt stack 0
  3763  00A132                     _sd002:
  3764                           	opt stack 0
  3765  00A132  2E                 	db	46
  3766  00A133  03                 	db	3
  3767  00A134  0053               	dw	83
  3768  00A136  0074               	dw	116
  3769  00A138  0065               	dw	101
  3770  00A13A  0070               	dw	112
  3771  00A13C  0070               	dw	112
  3772  00A13E  0065               	dw	101
  3773  00A140  0072               	dw	114
  3774  00A142  004D               	dw	77
  3775  00A144  006F               	dw	111
  3776  00A146  0074               	dw	116
  3777  00A148  006F               	dw	111
  3778  00A14A  0072               	dw	114
  3779  00A14C  0043               	dw	67
  3780  00A14E  006F               	dw	111
  3781  00A150  006E               	dw	110
  3782  00A152  0074               	dw	116
  3783  00A154  0072               	dw	114
  3784  00A156  006F               	dw	111
  3785  00A158  006C               	dw	108
  3786  00A15A  006C               	dw	108
  3787  00A15C  0065               	dw	101
  3788  00A15E  0072               	dw	114
  3789  00A160                     __end_of_sd002:
  3790                           	opt stack 0
  3791  00A160                     _inq_resp:
  3792                           	opt stack 0
  3793  00A160  00                 	db	0
  3794  00A161  80                 	db	128
  3795  00A162  04                 	db	4
  3796  00A163  02                 	db	2
  3797  00A164  20                 	db	32
  3798  00A165  00                 	db	0
  3799  00A166  00                 	db	0
  3800  00A167  00                 	db	0
  3801  00A168  4D                 	db	77
  3802  00A169  69                 	db	105
  3803  00A16A  63                 	db	99
  3804  00A16B  72                 	db	114
  3805  00A16C  6F                 	db	111
  3806  00A16D  63                 	db	99
  3807  00A16E  68                 	db	104
  3808  00A16F  70                 	db	112
  3809  00A170  4D                 	db	77
  3810  00A171  61                 	db	97
  3811  00A172  73                 	db	115
  3812  00A173  73                 	db	115
  3813  00A174  20                 	db	32
  3814  00A175  53                 	db	83
  3815  00A176  74                 	db	116
  3816  00A177  6F                 	db	111
  3817  00A178  72                 	db	114
  3818  00A179  61                 	db	97
  3819  00A17A  67                 	db	103
  3820  00A17B  65                 	db	101
  3821  00A17C  20                 	db	32
  3822  00A17D  20                 	db	32
  3823  00A17E  20                 	db	32
  3824  00A17F  20                 	db	32
  3825  00A180  30                 	db	48
  3826  00A181  30                 	db	48
  3827  00A182  30                 	db	48
  3828  00A183  31                 	db	49
  3829  00A184                     __end_of_inq_resp:
  3830                           	opt stack 0
  3831  00A184                     _hid_rpt01:
  3832                           	opt stack 0
  3833  00A184  06                 	db	6
  3834  00A185  00                 	db	0
  3835  00A186  FF                 	db	255
  3836  00A187  09                 	db	9
  3837  00A188  01                 	db	1
  3838  00A189  A1                 	db	161
  3839  00A18A  01                 	db	1
  3840  00A18B  19                 	db	25
  3841  00A18C  01                 	db	1
  3842  00A18D  29                 	db	41
  3843  00A18E  40                 	db	64
  3844  00A18F  15                 	db	21
  3845  00A190  00                 	db	0
  3846  00A191  26                 	db	38
  3847  00A192  FF                 	db	255
  3848  00A193  00                 	db	0
  3849  00A194  75                 	db	117
  3850  00A195  08                 	db	8
  3851  00A196  95                 	db	149
  3852  00A197  40                 	db	64
  3853  00A198  81                 	db	129
  3854  00A199  00                 	db	0
  3855  00A19A  19                 	db	25
  3856  00A19B  01                 	db	1
  3857  00A19C  29                 	db	41
  3858  00A19D  40                 	db	64
  3859  00A19E  91                 	db	145
  3860  00A19F  00                 	db	0
  3861  00A1A0  C0                 	db	192
  3862  00A1A1                     __end_of_hid_rpt01:
  3863                           	opt stack 0
  3864  00A1A1                     _sd003:
  3865                           	opt stack 0
  3866  00A1A1  1A                 	db	26
  3867  00A1A2  03                 	db	3
  3868  00A1A3  0031               	dw	49
  3869  00A1A5  0032               	dw	50
  3870  00A1A7  0033               	dw	51
  3871  00A1A9  0034               	dw	52
  3872  00A1AB  0035               	dw	53
  3873  00A1AD  0036               	dw	54
  3874  00A1AF  0037               	dw	55
  3875  00A1B1  0038               	dw	56
  3876  00A1B3  0039               	dw	57
  3877  00A1B5  0030               	dw	48
  3878  00A1B7  0039               	dw	57
  3879  00A1B9  0039               	dw	57
  3880  00A1BB                     __end_of_sd003:
  3881                           	opt stack 0
  3882  00A1BB                     _overshoot_cost_in_steps_string:
  3883                           	opt stack 0
  3884  00A1BB  4F                 	db	79
  3885  00A1BC  56                 	db	86
  3886  00A1BD  45                 	db	69
  3887  00A1BE  52                 	db	82
  3888  00A1BF  53                 	db	83
  3889  00A1C0  48                 	db	72
  3890  00A1C1  4F                 	db	79
  3891  00A1C2  4F                 	db	79
  3892  00A1C3  54                 	db	84
  3893  00A1C4  5F                 	db	95
  3894  00A1C5  43                 	db	67
  3895  00A1C6  4F                 	db	79
  3896  00A1C7  53                 	db	83
  3897  00A1C8  54                 	db	84
  3898  00A1C9  5F                 	db	95
  3899  00A1CA  49                 	db	73
  3900  00A1CB  4E                 	db	78
  3901  00A1CC  5F                 	db	95
  3902  00A1CD  53                 	db	83
  3903  00A1CE  54                 	db	84
  3904  00A1CF  45                 	db	69
  3905  00A1D0  50                 	db	80
  3906  00A1D1  53                 	db	83
  3907  00A1D2  00                 	db	0
  3908  00A1D3                     __end_of_overshoot_cost_in_steps_string:
  3909                           	opt stack 0
  3910  00A1D3                     _maximum_speed_manual_string:
  3911                           	opt stack 0
  3912  00A1D3  4D                 	db	77
  3913  00A1D4  41                 	db	65
  3914  00A1D5  58                 	db	88
  3915  00A1D6  49                 	db	73
  3916  00A1D7  4D                 	db	77
  3917  00A1D8  55                 	db	85
  3918  00A1D9  4D                 	db	77
  3919  00A1DA  5F                 	db	95
  3920  00A1DB  53                 	db	83
  3921  00A1DC  50                 	db	80
  3922  00A1DD  45                 	db	69
  3923  00A1DE  45                 	db	69
  3924  00A1DF  44                 	db	68
  3925  00A1E0  5F                 	db	95
  3926  00A1E1  4D                 	db	77
  3927  00A1E2  41                 	db	65
  3928  00A1E3  4E                 	db	78
  3929  00A1E4  55                 	db	85
  3930  00A1E5  41                 	db	65
  3931  00A1E6  4C                 	db	76
  3932  00A1E7  00                 	db	0
  3933  00A1E8                     __end_of_maximum_speed_manual_string:
  3934                           	opt stack 0
  3935  00A1E8                     _initial_speed_manual_string:
  3936                           	opt stack 0
  3937  00A1E8  49                 	db	73
  3938  00A1E9  4E                 	db	78
  3939  00A1EA  49                 	db	73
  3940  00A1EB  54                 	db	84
  3941  00A1EC  49                 	db	73
  3942  00A1ED  41                 	db	65
  3943  00A1EE  4C                 	db	76
  3944  00A1EF  5F                 	db	95
  3945  00A1F0  53                 	db	83
  3946  00A1F1  50                 	db	80
  3947  00A1F2  45                 	db	69
  3948  00A1F3  45                 	db	69
  3949  00A1F4  44                 	db	68
  3950  00A1F5  5F                 	db	95
  3951  00A1F6  4D                 	db	77
  3952  00A1F7  41                 	db	65
  3953  00A1F8  4E                 	db	78
  3954  00A1F9  55                 	db	85
  3955  00A1FA  41                 	db	65
  3956  00A1FB  4C                 	db	76
  3957  00A1FC  00                 	db	0
  3958  00A1FD                     __end_of_initial_speed_manual_string:
  3959                           	opt stack 0
  3960  00A1FD                     _full_circle_in_steps_string:
  3961                           	opt stack 0
  3962  00A1FD  46                 	db	70
  3963  00A1FE  55                 	db	85
  3964  00A1FF  4C                 	db	76
  3965  00A200  4C                 	db	76
  3966  00A201  5F                 	db	95
  3967  00A202  43                 	db	67
  3968  00A203  49                 	db	73
  3969  00A204  52                 	db	82
  3970  00A205  43                 	db	67
  3971  00A206  4C                 	db	76
  3972  00A207  45                 	db	69
  3973  00A208  5F                 	db	95
  3974  00A209  49                 	db	73
  3975  00A20A  4E                 	db	78
  3976  00A20B  5F                 	db	95
  3977  00A20C  53                 	db	83
  3978  00A20D  54                 	db	84
  3979  00A20E  45                 	db	69
  3980  00A20F  50                 	db	80
  3981  00A210  53                 	db	83
  3982  00A211  00                 	db	0
  3983  00A212                     __end_of_full_circle_in_steps_string:
  3984                           	opt stack 0
  3985  00A212                     _overshoot_in_steps_string:
  3986                           	opt stack 0
  3987  00A212  4F                 	db	79
  3988  00A213  56                 	db	86
  3989  00A214  45                 	db	69
  3990  00A215  52                 	db	82
  3991  00A216  53                 	db	83
  3992  00A217  48                 	db	72
  3993  00A218  4F                 	db	79
  3994  00A219  4F                 	db	79
  3995  00A21A  54                 	db	84
  3996  00A21B  5F                 	db	95
  3997  00A21C  49                 	db	73
  3998  00A21D  4E                 	db	78
  3999  00A21E  5F                 	db	95
  4000  00A21F  53                 	db	83
  4001  00A220  54                 	db	84
  4002  00A221  45                 	db	69
  4003  00A222  50                 	db	80
  4004  00A223  53                 	db	83
  4005  00A224  00                 	db	0
  4006  00A225                     __end_of_overshoot_in_steps_string:
  4007                           	opt stack 0
  4008  00A225                     _maximum_speed_arc_string:
  4009                           	opt stack 0
  4010  00A225  4D                 	db	77
  4011  00A226  41                 	db	65
  4012  00A227  58                 	db	88
  4013  00A228  49                 	db	73
  4014  00A229  4D                 	db	77
  4015  00A22A  55                 	db	85
  4016  00A22B  4D                 	db	77
  4017  00A22C  5F                 	db	95
  4018  00A22D  53                 	db	83
  4019  00A22E  50                 	db	80
  4020  00A22F  45                 	db	69
  4021  00A230  45                 	db	69
  4022  00A231  44                 	db	68
  4023  00A232  5F                 	db	95
  4024  00A233  41                 	db	65
  4025  00A234  52                 	db	82
  4026  00A235  43                 	db	67
  4027  00A236  00                 	db	0
  4028  00A237                     __end_of_maximum_speed_arc_string:
  4029                           	opt stack 0
  4030  00A237                     _initial_speed_arc_string:
  4031                           	opt stack 0
  4032  00A237  49                 	db	73
  4033  00A238  4E                 	db	78
  4034  00A239  49                 	db	73
  4035  00A23A  54                 	db	84
  4036  00A23B  49                 	db	73
  4037  00A23C  41                 	db	65
  4038  00A23D  4C                 	db	76
  4039  00A23E  5F                 	db	95
  4040  00A23F  53                 	db	83
  4041  00A240  50                 	db	80
  4042  00A241  45                 	db	69
  4043  00A242  45                 	db	69
  4044  00A243  44                 	db	68
  4045  00A244  5F                 	db	95
  4046  00A245  41                 	db	65
  4047  00A246  52                 	db	82
  4048  00A247  43                 	db	67
  4049  00A248  00                 	db	0
  4050  00A249                     __end_of_initial_speed_arc_string:
  4051                           	opt stack 0
  4052  00A249                     _inverse_direction_string:
  4053                           	opt stack 0
  4054  00A249  49                 	db	73
  4055  00A24A  4E                 	db	78
  4056  00A24B  56                 	db	86
  4057  00A24C  45                 	db	69
  4058  00A24D  52                 	db	82
  4059  00A24E  53                 	db	83
  4060  00A24F  45                 	db	69
  4061  00A250  5F                 	db	95
  4062  00A251  44                 	db	68
  4063  00A252  49                 	db	73
  4064  00A253  52                 	db	82
  4065  00A254  45                 	db	69
  4066  00A255  43                 	db	67
  4067  00A256  54                 	db	84
  4068  00A257  49                 	db	73
  4069  00A258  4F                 	db	79
  4070  00A259  4E                 	db	78
  4071  00A25A  00                 	db	0
  4072  00A25B                     __end_of_inverse_direction_string:
  4073                           	opt stack 0
  4074  00A25B                     _device_dsc:
  4075                           	opt stack 0
  4076  00A25B  12                 	db	18
  4077  00A25C  01                 	db	1
  4078  00A25D  0200               	dw	512
  4079  00A25F  00                 	db	0
  4080  00A260  00                 	db	0
  4081  00A261  00                 	db	0
  4082  00A262  08                 	db	8
  4083  00A263  04D8               	dw	1240
  4084  00A265  EDCF               	dw	60879
  4085  00A267  0100               	dw	256
  4086  00A269  01                 	db	1
  4087  00A26A  02                 	db	2
  4088  00A26B  00                 	db	0
  4089  00A26C  01                 	db	1
  4090  00A26D                     __end_of_device_dsc:
  4091                           	opt stack 0
  4092  00A26D                     _beep_duration_string:
  4093                           	opt stack 0
  4094  00A26D  42                 	db	66
  4095  00A26E  45                 	db	69
  4096  00A26F  45                 	db	69
  4097  00A270  50                 	db	80
  4098  00A271  5F                 	db	95
  4099  00A272  44                 	db	68
  4100  00A273  55                 	db	85
  4101  00A274  52                 	db	82
  4102  00A275  41                 	db	65
  4103  00A276  54                 	db	84
  4104  00A277  49                 	db	73
  4105  00A278  4F                 	db	79
  4106  00A279  4E                 	db	78
  4107  00A27A  00                 	db	0
  4108  00A27B                     __end_of_beep_duration_string:
  4109                           	opt stack 0
  4110  00A27B                     _maximum_speed_string:
  4111                           	opt stack 0
  4112  00A27B  4D                 	db	77
  4113  00A27C  41                 	db	65
  4114  00A27D  58                 	db	88
  4115  00A27E  49                 	db	73
  4116  00A27F  4D                 	db	77
  4117  00A280  55                 	db	85
  4118  00A281  4D                 	db	77
  4119  00A282  5F                 	db	95
  4120  00A283  53                 	db	83
  4121  00A284  50                 	db	80
  4122  00A285  45                 	db	69
  4123  00A286  45                 	db	69
  4124  00A287  44                 	db	68
  4125  00A288  00                 	db	0
  4126  00A289                     __end_of_maximum_speed_string:
  4127                           	opt stack 0
  4128  00A289                     _minimum_speed_string:
  4129                           	opt stack 0
  4130  00A289  4D                 	db	77
  4131  00A28A  49                 	db	73
  4132  00A28B  4E                 	db	78
  4133  00A28C  49                 	db	73
  4134  00A28D  4D                 	db	77
  4135  00A28E  55                 	db	85
  4136  00A28F  4D                 	db	77
  4137  00A290  5F                 	db	95
  4138  00A291  53                 	db	83
  4139  00A292  50                 	db	80
  4140  00A293  45                 	db	69
  4141  00A294  45                 	db	69
  4142  00A295  44                 	db	68
  4143  00A296  00                 	db	0
  4144  00A297                     __end_of_minimum_speed_string:
  4145                           	opt stack 0
  4146  00A297                     _bit_pattern_ae:
  4147                           	opt stack 0
  4148  00A297  0A                 	db	10
  4149  00A298  00                 	db	0
  4150  00A299  0E                 	db	14
  4151  00A29A  01                 	db	1
  4152  00A29B  0F                 	db	15
  4153  00A29C  11                 	db	17
  4154  00A29D  0F                 	db	15
  4155  00A29E  00                 	db	0
  4156  00A29F                     __end_of_bit_pattern_ae:
  4157                           	opt stack 0
  4158  00A29F                     _bit_pattern_degree:
  4159                           	opt stack 0
  4160  00A29F  18                 	db	24
  4161  00A2A0  18                 	db	24
  4162  00A2A1  00                 	db	0
  4163  00A2A2  00                 	db	0
  4164  00A2A3  00                 	db	0
  4165  00A2A4  00                 	db	0
  4166  00A2A5  00                 	db	0
  4167  00A2A6  00                 	db	0
  4168  00A2A7                     __end_of_bit_pattern_degree:
  4169                           	opt stack 0
  4170  00A2A7                     _bit_pattern_verticalbar:
  4171                           	opt stack 0
  4172  00A2A7  04                 	db	4
  4173  00A2A8  04                 	db	4
  4174  00A2A9  04                 	db	4
  4175  00A2AA  04                 	db	4
  4176  00A2AB  04                 	db	4
  4177  00A2AC  04                 	db	4
  4178  00A2AD  04                 	db	4
  4179  00A2AE  04                 	db	4
  4180  00A2AF                     __end_of_bit_pattern_verticalbar:
  4181                           	opt stack 0
  4182  00A2AF                     _flash_command_pagesize_528:
  4183                           	opt stack 0
  4184  00A2AF  3D                 	db	61
  4185  00A2B0  2A                 	db	42
  4186  00A2B1  80                 	db	128
  4187  00A2B2  A7                 	db	167
  4188  00A2B3                     __end_of_flash_command_pagesize_528:
  4189                           	opt stack 0
  4190  00A2B3                     _flash_command_pagesize_512:
  4191                           	opt stack 0
  4192  00A2B3  3D                 	db	61
  4193  00A2B4  2A                 	db	42
  4194  00A2B5  80                 	db	128
  4195  00A2B6  A6                 	db	166
  4196  00A2B7                     __end_of_flash_command_pagesize_512:
  4197                           	opt stack 0
  4198  00A2B7                     _sd000:
  4199                           	opt stack 0
  4200  00A2B7  04                 	db	4
  4201  00A2B8  03                 	db	3
  4202  00A2B9  0409               	dw	1033
  4203  00A2BB                     __end_of_sd000:
  4204                           	opt stack 0
  4205  0000                     _RPINR22	set	3837
  4206  0000                     _RPOR23	set	3799
  4207  0000                     _RPOR21	set	3797
  4208  0000                     _RPINR21	set	3836
  4209  0000                     _RPOR4	set	3780
  4210  0000                     _PPSCONbits	set	3775
  4211  0000                     _CCPTMRS0bits	set	3922
  4212  0000                     _ANCON0bits	set	3912
  4213  0000                     _ANCON1bits	set	3913
  4214  0000                     _UEP0bits	set	3878
  4215  0000                     _UIEbits	set	3894
  4216  0000                     _UADDR	set	3896
  4217  0000                     _UIE	set	3894
  4218  0000                     _UEIE	set	3895
  4219  0000                     _UCFG	set	3897
  4220  0000                     _UEP1	set	3879
  4221  0000                     _UEP0	set	3878
  4222  0000                     _ADRESL	set	4035
  4223  0000                     _ADRESH	set	4036
  4224  0000                     _ADCON1bits	set	4033
  4225  0000                     _ADCON0bits	set	4034
  4226  0000                     _PORTA	set	3968
  4227  0000                     _PORTE	set	3972
  4228  0000                     _TMR2	set	4044
  4229  0000                     _PIE1bits	set	3997
  4230  0000                     _CCPR1L	set	4027
  4231  0000                     _PR2	set	4043
  4232  0000                     _T2CONbits	set	4042
  4233  0000                     _CCP1CONbits	set	4026
  4234  0000                     _RXADDRL	set	3945
  4235  0000                     _RXADDRH	set	3944
  4236  0000                     _DMABCL	set	3943
  4237  0000                     _DMABCH	set	3942
  4238  0000                     _TXADDRL	set	3947
  4239  0000                     _TXADDRH	set	3946
  4240  0000                     _DMACON2bits	set	3974
  4241  0000                     _DMACON1bits	set	3976
  4242  0000                     _SSP2CON1bits	set	3954
  4243  0000                     _SSP2STATbits	set	3955
  4244  0000                     _PORTDbits	set	3971
  4245  0000                     _PORTEbits	set	3972
  4246  0000                     _SSP1BUF	set	4041
  4247  0000                     _SSP1CON2bits	set	4037
  4248  0000                     _SSP1CON1bits	set	4038
  4249  0000                     _SSP1ADD	set	4040
  4250  0000                     _SSP1STATbits	set	4039
  4251  0000                     _PORTAbits	set	3968
  4252  0000                     _T0CONbits	set	4053
  4253  0000                     _TRISEbits	set	3990
  4254  0000                     _EECON2	set	4007
  4255  0000                     _LATBbits	set	3978
  4256  0000                     _LATAbits	set	3977
  4257  0000                     _TRISAbits	set	3986
  4258  0000                     _LATCbits	set	3979
  4259  0000                     _TRISCbits	set	3988
  4260  0000                     _TRISBbits	set	3987
  4261  0000                     _LATDbits	set	3980
  4262  0000                     _TRISDbits	set	3989
  4263  0000                     _TMR0L	set	4054
  4264  0000                     _TMR0H	set	4055
  4265  0000                     _PIR1bits	set	3998
  4266  0000                     _OSCCON	set	4051
  4267  0000                     _OSCTUNEbits	set	3995
  4268  0000                     _INTCONbits	set	4082
  4269  0000                     _IPR2bits	set	4002
  4270  0000                     _RCONbits	set	4048
  4271  0000                     _UCON	set	3941
  4272  0000                     _USTAT	set	3940
  4273  0000                     _PIR2bits	set	4001
  4274  0000                     _UIRbits	set	3938
  4275  0000                     _UCONbits	set	3941
  4276  0000                     _UIR	set	3938
  4277  0000                     _UEIR	set	3939
  4278  0000                     _PIE2bits	set	4000
  4279  00A2BB                     STR_18:
  4280                           
  4281                           ; BSR set to: 1
  4282  00A2BB  68                 	db	104	;'h'
  4283  00A2BC  65                 	db	101	;'e'
  4284  00A2BD  6C                 	db	108	;'l'
  4285  00A2BE  6C                 	db	108	;'l'
  4286  00A2BF  6F                 	db	111	;'o'
  4287  00A2C0  20                 	db	32
  4288  00A2C1  77                 	db	119	;'w'
  4289  00A2C2  6F                 	db	111	;'o'
  4290  00A2C3  72                 	db	114	;'r'
  4291  00A2C4  6C                 	db	108	;'l'
  4292  00A2C5  64                 	db	100	;'d'
  4293  00A2C6  21                 	db	33
  4294  00A2C7  00                 	db	0
  4295  00A2C8                     STR_15:
  4296                           
  4297                           ; BSR set to: 1
  4298  00A2C8  53                 	db	83	;'S'
  4299  00A2C9  74                 	db	116	;'t'
  4300  00A2CA  65                 	db	101	;'e'
  4301  00A2CB  70                 	db	112	;'p'
  4302  00A2CC  70                 	db	112	;'p'
  4303  00A2CD  65                 	db	101	;'e'
  4304  00A2CE  72                 	db	114	;'r'
  4305  00A2CF  43                 	db	67	;'C'
  4306  00A2D0  74                 	db	116	;'t'
  4307  00A2D1  72                 	db	114	;'r'
  4308  00A2D2  6C                 	db	108	;'l'
  4309  00A2D3  00                 	db	0
  4310  00A2D4                     STR_16:
  4311                           
  4312                           ; BSR set to: 1
  4313  00A2D4  46                 	db	70	;'F'
  4314  00A2D5  49                 	db	73	;'I'
  4315  00A2D6  4C                 	db	76	;'L'
  4316  00A2D7  45                 	db	69	;'E'
  4317  00A2D8  20                 	db	32
  4318  00A2D9  20                 	db	32
  4319  00A2DA  20                 	db	32
  4320  00A2DB  20                 	db	32
  4321  00A2DC  00                 	db	0
  4322  00A2DD                     STR_7:
  4323                           
  4324                           ; BSR set to: 1
  4325  00A2DD  4D                 	db	77	;'M'
  4326  00A2DE  53                 	db	83	;'S'
  4327  00A2DF  44                 	db	68	;'D'
  4328  00A2E0  4F                 	db	79	;'O'
  4329  00A2E1  53                 	db	83	;'S'
  4330  00A2E2  35                 	db	53	;'5'
  4331  00A2E3  2E                 	db	46
  4332  00A2E4  30                 	db	48	;'0'
  4333  00A2E5  00                 	db	0
  4334  00A2E6                     STR_1:
  4335                           
  4336                           ; BSR set to: 1
  4337  00A2E6  20                 	db	32
  4338  00A2E7  20                 	db	32
  4339  00A2E8  20                 	db	32
  4340  00A2E9  20                 	db	32
  4341  00A2EA  20                 	db	32
  4342  00A2EB  20                 	db	32
  4343  00A2EC  20                 	db	32
  4344  00A2ED  20                 	db	32
  4345  00A2EE  00                 	db	0
  4346  00A2EF                     STR_2:
  4347                           
  4348                           ; BSR set to: 1
  4349  00A2EF  43                 	db	67	;'C'
  4350  00A2F0  61                 	db	97	;'a'
  4351  00A2F1  6E                 	db	110	;'n'
  4352  00A2F2  63                 	db	99	;'c'
  4353  00A2F3  65                 	db	101	;'e'
  4354  00A2F4  6C                 	db	108	;'l'
  4355  00A2F5  00                 	db	0
  4356  00A2F6                     STR_6:
  4357                           
  4358                           ; BSR set to: 1
  4359  00A2F6  53                 	db	83	;'S'
  4360  00A2F7  74                 	db	116	;'t'
  4361  00A2F8  6F                 	db	111	;'o'
  4362  00A2F9  70                 	db	112	;'p'
  4363  00A2FA  20                 	db	32
  4364  00A2FB  00                 	db	0
  4365  00A2FC                     STR_17:
  4366                           
  4367                           ; BSR set to: 1
  4368  00A2FC  54                 	db	84	;'T'
  4369  00A2FD  58                 	db	88	;'X'
  4370  00A2FE  54                 	db	84	;'T'
  4371  00A2FF  00                 	db	0
  4372  0000                     
  4373                           ; #config settings
  4374  00A300  00                 	db	0	; dummy byte at the end
  4375  0000                     
  4376                           	psect	cinit
  4377  012386                     __pcinit:
  4378                           	opt stack 0
  4379  012386                     start_initialization:
  4380                           	opt stack 0
  4381  012386                     __initialization:
  4382                           	opt stack 0
  4383                           
  4384                           ; Initialize objects allocated to BANK2 (88 bytes)
  4385                           ; load TBLPTR registers with __pidataBANK2
  4386  012386  0E56               	movlw	low __pidataBANK2
  4387  012388  6EF6               	movwf	tblptrl,c
  4388  01238A  0E33               	movlw	high __pidataBANK2
  4389  01238C  6EF7               	movwf	tblptrh,c
  4390  01238E  0E01               	movlw	low (__pidataBANK2 shr (0+16))
  4391  012390  6EF8               	movwf	tblptru,c
  4392  012392  EE02  F078         	lfsr	0,__pdataBANK2
  4393  012396  EE10 F058          	lfsr	1,88
  4394  01239A                     copy_data0:
  4395  01239A  0009               	tblrd		*+
  4396  01239C  CFF5 FFEE          	movff	tablat,postinc0
  4397  0123A0  50E5               	movf	postdec1,w,c
  4398  0123A2  50E1               	movf	fsr1l,w,c
  4399  0123A4  E1FA               	bnz	copy_data0
  4400                           
  4401                           ; Initialize objects allocated to BANK1 (58 bytes)
  4402                           ; load TBLPTR registers with __pidataBANK1
  4403  0123A6  0E04               	movlw	low __pidataBANK1
  4404  0123A8  6EF6               	movwf	tblptrl,c
  4405  0123AA  0E3C               	movlw	high __pidataBANK1
  4406  0123AC  6EF7               	movwf	tblptrh,c
  4407  0123AE  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  4408  0123B0  6EF8               	movwf	tblptru,c
  4409  0123B2  EE01  F0C1         	lfsr	0,__pdataBANK1
  4410  0123B6  EE10 F03A          	lfsr	1,58
  4411  0123BA                     copy_data1:
  4412  0123BA  0009               	tblrd		*+
  4413  0123BC  CFF5 FFEE          	movff	tablat,postinc0
  4414  0123C0  50E5               	movf	postdec1,w,c
  4415  0123C2  50E1               	movf	fsr1l,w,c
  4416  0123C4  E1FA               	bnz	copy_data1
  4417                           
  4418                           ; Clear objects allocated to BIGRAMll (1024 bytes)
  4419  0123C6  EE08  F000         	lfsr	0,__pbssBIGRAMll
  4420  0123CA  EE14 F000          	lfsr	1,1024
  4421  0123CE                     clear_0:
  4422  0123CE  6AEE               	clrf	postinc0,c
  4423  0123D0  50E5               	movf	postdec1,w,c
  4424  0123D2  50E1               	movf	fsr1l,w,c
  4425  0123D4  E1FC               	bnz	clear_0
  4426  0123D6  50E2               	movf	fsr1h,w,c
  4427  0123D8  E1FA               	bnz	clear_0
  4428                           
  4429                           ; Clear objects allocated to BANK3 (64 bytes)
  4430  0123DA  EE03  F000         	lfsr	0,__pbssBANK3
  4431  0123DE  0E40               	movlw	64
  4432  0123E0                     clear_1:
  4433  0123E0  6AEE               	clrf	postinc0,c
  4434  0123E2  06E8               	decf	wreg,f,c
  4435  0123E4  E1FD               	bnz	clear_1
  4436                           
  4437                           ; Clear objects allocated to BANK2 (120 bytes)
  4438  0123E6  EE02  F000         	lfsr	0,__pbssBANK2
  4439  0123EA  0E78               	movlw	120
  4440  0123EC                     clear_2:
  4441  0123EC  6AEE               	clrf	postinc0,c
  4442  0123EE  06E8               	decf	wreg,f,c
  4443  0123F0  E1FD               	bnz	clear_2
  4444                           
  4445                           ; Clear objects allocated to BANK1 (193 bytes)
  4446  0123F2  EE01  F000         	lfsr	0,__pbssBANK1
  4447  0123F6  0EC1               	movlw	193
  4448  0123F8                     clear_3:
  4449  0123F8  6AEE               	clrf	postinc0,c
  4450  0123FA  06E8               	decf	wreg,f,c
  4451  0123FC  E1FD               	bnz	clear_3
  4452                           
  4453                           ; Clear objects allocated to BANK0 (23 bytes)
  4454  0123FE  EE00  F0E9         	lfsr	0,__pbssBANK0
  4455  012402  0E17               	movlw	23
  4456  012404                     clear_4:
  4457  012404  6AEE               	clrf	postinc0,c
  4458  012406  06E8               	decf	wreg,f,c
  4459  012408  E1FD               	bnz	clear_4
  4460                           
  4461                           ; Clear objects allocated to COMRAM (45 bytes)
  4462  01240A  EE00  F001         	lfsr	0,__pbssCOMRAM
  4463  01240E  0E2D               	movlw	45
  4464  012410                     clear_5:
  4465  012410  6AEE               	clrf	postinc0,c
  4466  012412  06E8               	decf	wreg,f,c
  4467  012414  E1FD               	bnz	clear_5
  4468  012416                     end_of_initialization:
  4469                           	opt stack 0
  4470  012416                     __end_of__initialization:
  4471                           	opt stack 0
  4472  012416  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  4473  012418  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4474  01241A  0100               	movlb	0
  4475  01241C  EF2B  F07C         	goto	_main	;jump to C main() function
  4476                           tblptru	equ	0xFF8
  4477                           tblptrh	equ	0xFF7
  4478                           tblptrl	equ	0xFF6
  4479                           tablat	equ	0xFF5
  4480                           postinc0	equ	0xFEE
  4481                           wreg	equ	0xFE8
  4482                           postdec1	equ	0xFE5
  4483                           fsr1h	equ	0xFE2
  4484                           fsr1l	equ	0xFE1
  4485                           
  4486                           	psect	bssCOMRAM
  4487  000001                     __pbssCOMRAM:
  4488                           	opt stack 0
  4489  000001                     _outPipes:
  4490                           	opt stack 0
  4491  000001                     	ds	9
  4492  00000A                     _inPipes:
  4493                           	opt stack 0
  4494  00000A                     	ds	6
  4495  000010                     _pBDTEntryIn:
  4496                           	opt stack 0
  4497  000010                     	ds	6
  4498  000016                     _motor_current_stepcount:
  4499                           	opt stack 0
  4500  000016                     	ds	4
  4501  00001A                     _pBDTEntryEP0OutNext:
  4502                           	opt stack 0
  4503  00001A                     	ds	2
  4504  00001C                     _pBDTEntryEP0OutCurrent:
  4505                           	opt stack 0
  4506  00001C                     	ds	2
  4507  00001E                     _enc2:
  4508                           	opt stack 0
  4509  00001E                     	ds	1
  4510  00001F                     _enc1:
  4511                           	opt stack 0
  4512  00001F                     	ds	1
  4513  000020                     _motor_mode:
  4514                           	opt stack 0
  4515  000020                     	ds	1
  4516  000021                     _MSDWriteState:
  4517                           	opt stack 0
  4518  000021                     	ds	1
  4519  000022                     _USBStatusStageEnabledFlag1:
  4520                           	opt stack 0
  4521  000022                     	ds	1
  4522  000023                     _USBDeferStatusStagePacket:
  4523                           	opt stack 0
  4524  000023                     	ds	1
  4525  000024                     _USBStatusStageTimeoutCounter:
  4526                           	opt stack 0
  4527  000024                     	ds	1
  4528  000025                     _BothEP0OutUOWNsSet:
  4529                           	opt stack 0
  4530  000025                     	ds	1
  4531  000026                     _endpoint_number:
  4532                           	opt stack 0
  4533  000026                     	ds	1
  4534  000027                     _USBBusIsSuspended:
  4535                           	opt stack 0
  4536  000027                     	ds	1
  4537  000028                     _RemoteWakeup:
  4538                           	opt stack 0
  4539  000028                     	ds	1
  4540  000029                     _controlTransferState:
  4541                           	opt stack 0
  4542  000029                     	ds	1
  4543  00002A                     _shortPacketStatus:
  4544                           	opt stack 0
  4545  00002A                     	ds	1
  4546  00002B                     _USBDeviceState:
  4547                           	opt stack 0
  4548  00002B                     	ds	1
  4549  00002C                     _USTATcopy:
  4550                           	opt stack 0
  4551  00002C                     	ds	1
  4552  00002D                     _USBActiveConfiguration:
  4553                           	opt stack 0
  4554  00002D                     	ds	1
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           postdec1	equ	0xFE5
  4562                           fsr1h	equ	0xFE2
  4563                           fsr1l	equ	0xFE1
  4564                           
  4565                           	psect	bssBANK0
  4566  0000E9                     __pbssBANK0:
  4567                           	opt stack 0
  4568  0000E9                     _motor_current_speed:
  4569                           	opt stack 0
  4570  0000E9                     	ds	2
  4571  0000EB                     _TransferLength:
  4572                           	opt stack 0
  4573  0000EB                     	ds	2
  4574  0000ED                     _USBMSDInHandle:
  4575                           	opt stack 0
  4576  0000ED                     	ds	2
  4577  0000EF                     _USBMSDOutHandle:
  4578                           	opt stack 0
  4579  0000EF                     	ds	2
  4580  0000F1                     _motor_direction:
  4581                           	opt stack 0
  4582  0000F1                     	ds	1
  4583  0000F2                     _motor_cue_write_index:
  4584                           	opt stack 0
  4585  0000F2                     	ds	1
  4586  0000F3                     _motor_cue_read_index:
  4587                           	opt stack 0
  4588  0000F3                     	ds	1
  4589  0000F4                     _power_state:
  4590                           	opt stack 0
  4591  0000F4                     	ds	1
  4592  0000F5                     _MSDHostNoData:
  4593                           	opt stack 0
  4594  0000F5                     	ds	1
  4595  0000F6                     _SoftDetach:
  4596                           	opt stack 0
  4597  0000F6                     	ds	1
  4598  0000F7                     _MSDRetryAttempt:
  4599                           	opt stack 0
  4600  0000F7                     	ds	1
  4601  0000F8                     _MSDReadState:
  4602                           	opt stack 0
  4603  0000F8                     	ds	1
  4604  0000F9                     _MSDCommandState:
  4605                           	opt stack 0
  4606  0000F9                     	ds	1
  4607  0000FA                     _MSD_State:
  4608                           	opt stack 0
  4609  0000FA                     	ds	1
  4610  0000FB                     _USBTicksSinceSuspendEnd:
  4611                           	opt stack 0
  4612  0000FB                     	ds	1
  4613  0000FC                     _USBDeferOUTDataStagePackets:
  4614                           	opt stack 0
  4615  0000FC                     	ds	1
  4616  0000FD                     _USBDeferINDataStagePackets:
  4617                           	opt stack 0
  4618  0000FD                     	ds	1
  4619  0000FE                     _USBStatusStageEnabledFlag2:
  4620                           	opt stack 0
  4621  0000FE                     	ds	1
  4622  0000FF                     _idle_rate:
  4623                           	opt stack 0
  4624  0000FF                     	ds	1
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           postinc0	equ	0xFEE
  4630                           wreg	equ	0xFE8
  4631                           postdec1	equ	0xFE5
  4632                           fsr1h	equ	0xFE2
  4633                           fsr1l	equ	0xFE1
  4634                           
  4635                           	psect	bssBANK1
  4636  000100                     __pbssBANK1:
  4637                           	opt stack 0
  4638  000100                     _gblCBW:
  4639                           	opt stack 0
  4640  000100                     	ds	31
  4641  00011F                     _gblSenseData:
  4642                           	opt stack 0
  4643  00011F                     	ds	18
  4644  000131                     _params:
  4645                           	opt stack 0
  4646  000131                     	ds	7
  4647  000138                     _pBDTEntryOut:
  4648                           	opt stack 0
  4649  000138                     	ds	6
  4650  00013E                     _motor_next_speed_check:
  4651                           	opt stack 0
  4652  00013E                     	ds	4
  4653  000142                     _motor_final_stepcount:
  4654                           	opt stack 0
  4655  000142                     	ds	4
  4656  000146                     _gblBLKLen:
  4657                           	opt stack 0
  4658  000146                     	ds	4
  4659  00014A                     _gblNumBLKS:
  4660                           	opt stack 0
  4661  00014A                     	ds	4
  4662  00014E                     _LBA:
  4663                           	opt stack 0
  4664  00014E                     	ds	4
  4665  000152                     _USB1msTickCount:
  4666                           	opt stack 0
  4667  000152                     	ds	4
  4668  000156                     _config_external:
  4669                           	opt stack 0
  4670  000156                     	ds	3
  4671  000159                     _config_internal:
  4672                           	opt stack 0
  4673  000159                     	ds	3
  4674  00015C                     _ep_data_out:
  4675                           	opt stack 0
  4676  00015C                     	ds	3
  4677  00015F                     _ep_data_in:
  4678                           	opt stack 0
  4679  00015F                     	ds	3
  4680  000162                     _motor_maximum_speed:
  4681                           	opt stack 0
  4682  000162                     	ds	2
  4683  000164                     _USBInHandle:
  4684                           	opt stack 0
  4685  000164                     	ds	2
  4686  000166                     _USBOutHandle:
  4687                           	opt stack 0
  4688  000166                     	ds	2
  4689  000168                     _gblMediaPresent:
  4690                           	opt stack 0
  4691  000168                     	ds	2
  4692  00016A                     _MSBBufferIndex:
  4693                           	opt stack 0
  4694  00016A                     	ds	2
  4695  00016C                     _ptrNextData:
  4696                           	opt stack 0
  4697  00016C                     	ds	2
  4698  00016E                     _pDst:
  4699                           	opt stack 0
  4700  00016E                     	ds	2
  4701  000170                     _active_configuration:
  4702                           	opt stack 0
  4703  000170                     	ds	1
  4704  000171                     _MSDCBWValid:
  4705                           	opt stack 0
  4706  000171                     	ds	1
  4707  000172                     _gblCBWLength:
  4708                           	opt stack 0
  4709  000172                     	ds	1
  4710  000173                     _os:
  4711                           	opt stack 0
  4712  000173                     	ds	48
  4713  0001A3                     _config:
  4714                           	opt stack 0
  4715  0001A3                     	ds	22
  4716  0001B9                     _mediaInformation:
  4717                           	opt stack 0
  4718  0001B9                     	ds	5
  4719  0001BE                     _USBAlternateInterface:
  4720                           	opt stack 0
  4721  0001BE                     	ds	2
  4722  0001C0                     _active_protocol:
  4723                           	opt stack 0
  4724  0001C0                     	ds	1
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           postinc0	equ	0xFEE
  4730                           wreg	equ	0xFE8
  4731                           postdec1	equ	0xFE5
  4732                           fsr1h	equ	0xFE2
  4733                           fsr1l	equ	0xFE1
  4734                           
  4735                           	psect	dataBANK1
  4736  0001C1                     __pdataBANK1:
  4737                           	opt stack 0
  4738  0001C1                     _LUN:
  4739                           	opt stack 0
  4740  0001C1                     	ds	29
  4741  0001DE                     i2c_display_init@F6908:
  4742                           	opt stack 0
  4743  0001DE                     	ds	9
  4744  0001E7                     __i2c_display_send_init_sequence@F6905:
  4745                           	opt stack 0
  4746  0001E7                     	ds	9
  4747  0001F0                     _configFile_name:
  4748                           	opt stack 0
  4749  0001F0                     	ds	8
  4750  0001F8                     _configFile_extention:
  4751                           	opt stack 0
  4752  0001F8                     	ds	3
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           postinc0	equ	0xFEE
  4758                           wreg	equ	0xFE8
  4759                           postdec1	equ	0xFE5
  4760                           fsr1h	equ	0xFE2
  4761                           fsr1l	equ	0xFE1
  4762                           
  4763                           	psect	bssBANK2
  4764  000200                     __pbssBANK2:
  4765                           	opt stack 0
  4766  000200                     _motor_command_cue:
  4767                           	opt stack 0
  4768  000200                     	ds	56
  4769  000238                     _ReceivedDataBuffer:
  4770                           	opt stack 0
  4771  000238                     	ds	64
  4772                           tblptru	equ	0xFF8
  4773                           tblptrh	equ	0xFF7
  4774                           tblptrl	equ	0xFF6
  4775                           tablat	equ	0xFF5
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           postdec1	equ	0xFE5
  4779                           fsr1h	equ	0xFE2
  4780                           fsr1l	equ	0xFE1
  4781                           
  4782                           	psect	dataBANK2
  4783  000278                     __pdataBANK2:
  4784                           	opt stack 0
  4785  000278                     	ds	8
  4786  000280                     _display_content:
  4787                           	opt stack 0
  4788  000280                     	ds	80
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           postinc0	equ	0xFEE
  4794                           wreg	equ	0xFE8
  4795                           postdec1	equ	0xFE5
  4796                           fsr1h	equ	0xFE2
  4797                           fsr1l	equ	0xFE1
  4798                           
  4799                           	psect	bssBANK3
  4800  000300                     __pbssBANK3:
  4801                           	opt stack 0
  4802  000300                     _ToSendDataBuffer:
  4803                           	opt stack 0
  4804  000300                     	ds	64
  4805                           tblptru	equ	0xFF8
  4806                           tblptrh	equ	0xFF7
  4807                           tblptrl	equ	0xFF6
  4808                           tablat	equ	0xFF5
  4809                           postinc0	equ	0xFEE
  4810                           wreg	equ	0xFE8
  4811                           postdec1	equ	0xFE5
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           
  4815                           	psect	bssBIGRAMll
  4816  000800                     __pbssBIGRAMll:
  4817                           	opt stack 0
  4818  000800                     _ConfigFile_buffer:
  4819                           	opt stack 0
  4820  000800                     	ds	512
  4821  000A00                     _buffer:
  4822                           	opt stack 0
  4823  000A00                     	ds	512
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           postdec1	equ	0xFE5
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           
  4834                           	psect	cstackBANK1
  4835  0001FB                     __pcstackBANK1:
  4836                           	opt stack 0
  4837  0001FB                     main@tmp:
  4838                           	opt stack 0
  4839                           
  4840                           ; 4 bytes @ 0x0
  4841  0001FB                     	ds	4
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           postinc0	equ	0xFEE
  4847                           wreg	equ	0xFE8
  4848                           postdec1	equ	0xFE5
  4849                           fsr1h	equ	0xFE2
  4850                           fsr1l	equ	0xFE1
  4851                           
  4852                           	psect	cstackBANK0
  4853  000060                     __pcstackBANK0:
  4854                           	opt stack 0
  4855  000060                     ??__i2c_wait_idle:
  4856  000060                     ??__display_clear:
  4857  000060                     ??_motor_stop:
  4858  000060                     ??__divide_jump_size_increment:
  4859  000060                     ??__divide_jump_size_decrement:
  4860  000060                     ?_USBTransferOnePacket:
  4861                           	opt stack 0
  4862  000060                     ?_ExternalFlash_MediaInitialize:
  4863                           	opt stack 0
  4864  000060                     ?_ExternalFlash_SectorSizeRead:
  4865                           	opt stack 0
  4866  000060                     ?_strlen:
  4867                           	opt stack 0
  4868  000060                     ?_strncmp:
  4869                           	opt stack 0
  4870  000060                     ?__sector_from_file_number:
  4871                           	opt stack 0
  4872  000060                     ?__offset_from_file_number:
  4873                           	opt stack 0
  4874  000060                     ?__data_sector_from_cluster:
  4875                           	opt stack 0
  4876  000060                     ?__fat_sector_from_cluster:
  4877                           	opt stack 0
  4878  000060                     ?__fat_offset_from_cluster:
  4879                           	opt stack 0
  4880  000060                     ?__cluster_from_sector_and_offset:
  4881                           	opt stack 0
  4882  000060                     ?__get_available_offset_from_buffer:
  4883                           	opt stack 0
  4884  000060                     ?__read_value_from_offset:
  4885                           	opt stack 0
  4886  000060                     ?__get_time:
  4887                           	opt stack 0
  4888  000060                     ?__get_date:
  4889                           	opt stack 0
  4890  000060                     ?__encoder_next_setup_stepsize:
  4891                           	opt stack 0
  4892  000060                     ?__encoder_next_arc_step_size:
  4893                           	opt stack 0
  4894  000060                     ?___lwdiv:
  4895                           	opt stack 0
  4896  000060                     ?___lwmod:
  4897                           	opt stack 0
  4898  000060                     ?_ExternalFlash_CapacityRead:
  4899                           	opt stack 0
  4900  000060                     ?___lmul:
  4901                           	opt stack 0
  4902  000060                     ?___lldiv:
  4903                           	opt stack 0
  4904  000060                     ?___aldiv:
  4905                           	opt stack 0
  4906  000060                     ?___almod:
  4907                           	opt stack 0
  4908  000060                     ?___fltol:
  4909                           	opt stack 0
  4910  000060                     ?___llmod:
  4911                           	opt stack 0
  4912  000060                     ?___xxtofl:
  4913                           	opt stack 0
  4914  000060                     USBTransferOnePacket@dir:
  4915                           	opt stack 0
  4916  000060                     USBStallEndpoint@dir:
  4917                           	opt stack 0
  4918  000060                     SYSTEM_Initialize@state:
  4919                           	opt stack 0
  4920  000060                     __i2c_send@dat:
  4921                           	opt stack 0
  4922  000060                     display_get_character@position:
  4923                           	opt stack 0
  4924  000060                     __encoder_next_divide_step_size@old_stepsize:
  4925                           	opt stack 0
  4926  000060                     MSDComputeDeviceInAndResidue@DiExpected:
  4927                           	opt stack 0
  4928  000060                     ExternalFlash_MediaInitialize@config:
  4929                           	opt stack 0
  4930  000060                     ExternalFlash_SectorSizeRead@config:
  4931                           	opt stack 0
  4932  000060                     ExternalFlash_CapacityRead@config:
  4933                           	opt stack 0
  4934  000060                     ExternalFlash_MediaDetect@config:
  4935                           	opt stack 0
  4936  000060                     ExternalFlash_WriteProtectStateGet@config:
  4937                           	opt stack 0
  4938  000060                     __data_sector_from_cluster@fat_cluster:
  4939                           	opt stack 0
  4940  000060                     __fat_sector_from_cluster@cluster:
  4941                           	opt stack 0
  4942  000060                     __fat_offset_from_cluster@cluster:
  4943                           	opt stack 0
  4944  000060                     __cluster_from_sector_and_offset@sector:
  4945                           	opt stack 0
  4946  000060                     __get_available_offset_from_buffer@minimum_offset:
  4947                           	opt stack 0
  4948  000060                     __read_value_from_offset@offset:
  4949                           	opt stack 0
  4950  000060                     __write_value_to_offset@offset:
  4951                           	opt stack 0
  4952  000060                     __get_mbr@idx:
  4953                           	opt stack 0
  4954  000060                     __get_fbr@idx:
  4955                           	opt stack 0
  4956  000060                     __get_fat@idx:
  4957                           	opt stack 0
  4958  000060                     __get_root@idx:
  4959                           	opt stack 0
  4960  000060                     __get_data@idx:
  4961                           	opt stack 0
  4962  000060                     spi_tx@data:
  4963                           	opt stack 0
  4964  000060                     spi_tx_tx@command:
  4965                           	opt stack 0
  4966  000060                     spi_tx_rx@command:
  4967                           	opt stack 0
  4968  000060                     __fill_buffer_get_mode_details@outBuffer:
  4969                           	opt stack 0
  4970  000060                     motor_change_speed@new_speed:
  4971                           	opt stack 0
  4972  000060                     __encoder_next_setup_stepsize@old_stepsize:
  4973                           	opt stack 0
  4974  000060                     __encoder_next_arc_step_size@old_stepsize:
  4975                           	opt stack 0
  4976  000060                     ___lwdiv@dividend:
  4977                           	opt stack 0
  4978  000060                     ___lwmod@dividend:
  4979                           	opt stack 0
  4980  000060                     memcpy@d1:
  4981                           	opt stack 0
  4982  000060                     memset@p1:
  4983                           	opt stack 0
  4984  000060                     strlen@s:
  4985                           	opt stack 0
  4986  000060                     strncmp@s1:
  4987                           	opt stack 0
  4988  000060                     __spi_init@details:
  4989                           	opt stack 0
  4990  000060                     __motor_run@distance_in_steps:
  4991                           	opt stack 0
  4992  000060                     ___lmul@multiplier:
  4993                           	opt stack 0
  4994  000060                     ___lldiv@dividend:
  4995                           	opt stack 0
  4996  000060                     ___aldiv@dividend:
  4997                           	opt stack 0
  4998  000060                     ___almod@dividend:
  4999                           	opt stack 0
  5000  000060                     ___fltol@f1:
  5001                           	opt stack 0
  5002  000060                     ___llmod@dividend:
  5003                           	opt stack 0
  5004  000060                     ___xxtofl@val:
  5005                           	opt stack 0
  5006                           
  5007                           ; 4 bytes @ 0x0
  5008  000060                     	ds	1
  5009  000061                     ??_USBStallEndpoint:
  5010  000061                     ??_display_get_character:
  5011  000061                     USBTransferOnePacket@data:
  5012                           	opt stack 0
  5013  000061                     SYSTEM_Initialize@pll_startup_counter:
  5014                           	opt stack 0
  5015                           
  5016                           ; 2 bytes @ 0x1
  5017  000061                     	ds	1
  5018  000062                     ??_MSDComputeDeviceInAndResidue:
  5019  000062                     ??_strlen:
  5020  000062                     ??__fill_buffer_get_mode_details:
  5021  000062                     ??__get_mbr:
  5022  000062                     ??__get_fbr:
  5023  000062                     ??__get_fat:
  5024  000062                     ??__get_root:
  5025  000062                     ??__encoder_next_setup_stepsize:
  5026  000062                     ??__encoder_next_arc_step_size:
  5027  000062                     __display_clear@row:
  5028                           	opt stack 0
  5029  000062                     __sector_from_file_number@file_number:
  5030                           	opt stack 0
  5031  000062                     __offset_from_file_number@file_number:
  5032                           	opt stack 0
  5033  000062                     __cluster_from_sector_and_offset@offset:
  5034                           	opt stack 0
  5035  000062                     __get_available_offset_from_buffer@buffer:
  5036                           	opt stack 0
  5037  000062                     __read_value_from_offset@buffer:
  5038                           	opt stack 0
  5039  000062                     __write_value_to_offset@buffer:
  5040                           	opt stack 0
  5041  000062                     spi_tx@length:
  5042                           	opt stack 0
  5043  000062                     spi_tx_tx@command_length:
  5044                           	opt stack 0
  5045  000062                     spi_tx_rx@command_length:
  5046                           	opt stack 0
  5047  000062                     ___lwdiv@divisor:
  5048                           	opt stack 0
  5049  000062                     ___lwmod@divisor:
  5050                           	opt stack 0
  5051  000062                     memcpy@s1:
  5052                           	opt stack 0
  5053  000062                     memset@c:
  5054                           	opt stack 0
  5055  000062                     strncmp@s2:
  5056                           	opt stack 0
  5057                           
  5058                           ; 2 bytes @ 0x2
  5059  000062                     	ds	1
  5060  000063                     USBTransferOnePacket@len:
  5061                           	opt stack 0
  5062  000063                     __display_clear@col:
  5063                           	opt stack 0
  5064  000063                     display_get_character@line:
  5065                           	opt stack 0
  5066  000063                     spi_init@configuration:
  5067                           	opt stack 0
  5068  000063                     SYSTEM_Initialize@pll_startup_counter_3117:
  5069                           	opt stack 0
  5070  000063                     __sector_from_file_number@sector:
  5071                           	opt stack 0
  5072  000063                     __offset_from_file_number@offset:
  5073                           	opt stack 0
  5074                           
  5075                           ; 2 bytes @ 0x3
  5076  000063                     	ds	1
  5077  000064                     ??_USBTransferOnePacket:
  5078  000064                     ??_spi_tx:
  5079  000064                     ??__get_available_offset_from_buffer:
  5080  000064                     ??__read_value_from_offset:
  5081  000064                     ??___fltol:
  5082  000064                     ??___xxtofl:
  5083  000064                     ___lwdiv@counter:
  5084                           	opt stack 0
  5085  000064                     ___lwmod@counter:
  5086                           	opt stack 0
  5087  000064                     __write_value_to_offset@value:
  5088                           	opt stack 0
  5089  000064                     spi_tx_tx@data:
  5090                           	opt stack 0
  5091  000064                     spi_tx_rx@data:
  5092                           	opt stack 0
  5093  000064                     __fill_buffer_get_display@outBuffer:
  5094                           	opt stack 0
  5095  000064                     __motor_run@speed:
  5096                           	opt stack 0
  5097  000064                     memcpy@n:
  5098                           	opt stack 0
  5099  000064                     memset@n:
  5100                           	opt stack 0
  5101  000064                     strlen@cp:
  5102                           	opt stack 0
  5103  000064                     strncmp@len:
  5104                           	opt stack 0
  5105  000064                     ___lmul@multiplicand:
  5106                           	opt stack 0
  5107  000064                     ___lldiv@divisor:
  5108                           	opt stack 0
  5109  000064                     ___aldiv@divisor:
  5110                           	opt stack 0
  5111  000064                     ___almod@divisor:
  5112                           	opt stack 0
  5113  000064                     ___llmod@divisor:
  5114                           	opt stack 0
  5115                           
  5116                           ; 4 bytes @ 0x4
  5117  000064                     	ds	1
  5118  000065                     USBStallEndpoint@ep:
  5119                           	opt stack 0
  5120  000065                     __i2c_write@data:
  5121                           	opt stack 0
  5122  000065                     i2c_display_write_fixed@data:
  5123                           	opt stack 0
  5124  000065                     ___lwdiv@quotient:
  5125                           	opt stack 0
  5126                           
  5127                           ; 2 bytes @ 0x5
  5128  000065                     	ds	1
  5129  000066                     ??_strncmp:
  5130  000066                     ??__motor_run:
  5131  000066                     ??__write_value_to_offset:
  5132  000066                     __fill_buffer_get_display@secondHalf:
  5133                           	opt stack 0
  5134  000066                     memcpy@tmp:
  5135                           	opt stack 0
  5136  000066                     USBStallEndpoint@p:
  5137                           	opt stack 0
  5138  000066                     __get_available_offset_from_buffer@offset:
  5139                           	opt stack 0
  5140  000066                     spi_tx_tx@data_length:
  5141                           	opt stack 0
  5142  000066                     spi_tx_rx@data_length:
  5143                           	opt stack 0
  5144  000066                     memset@p:
  5145                           	opt stack 0
  5146                           
  5147                           ; 2 bytes @ 0x6
  5148  000066                     	ds	1
  5149  000067                     ??__fill_buffer_get_display:
  5150  000067                     __i2c_write@length:
  5151                           	opt stack 0
  5152  000067                     i2c_display_write_fixed@length:
  5153                           	opt stack 0
  5154  000067                     __read_value_from_offset@value:
  5155                           	opt stack 0
  5156  000067                     utoa@buf:
  5157                           	opt stack 0
  5158  000067                     memcpy@d:
  5159                           	opt stack 0
  5160                           
  5161                           ; 2 bytes @ 0x7
  5162  000067                     	ds	1
  5163  000068                     ??_spi_tx_rx:
  5164  000068                     ??_spi_tx_tx:
  5165  000068                     USBDeviceInit@i:
  5166                           	opt stack 0
  5167  000068                     USBTransferOnePacket@ep:
  5168                           	opt stack 0
  5169  000068                     MSDErrorHandler@ErrorCase:
  5170                           	opt stack 0
  5171  000068                     __i2c_write@slave_address:
  5172                           	opt stack 0
  5173  000068                     i2c_display_write_fixed@pos:
  5174                           	opt stack 0
  5175  000068                     __flash_wakeup@command:
  5176                           	opt stack 0
  5177  000068                     ___aldiv@counter:
  5178                           	opt stack 0
  5179  000068                     ___almod@counter:
  5180                           	opt stack 0
  5181  000068                     ___fltol@sign1:
  5182                           	opt stack 0
  5183  000068                     ___llmod@counter:
  5184                           	opt stack 0
  5185  000068                     ___xxtofl@sign:
  5186                           	opt stack 0
  5187  000068                     ___lmul@product:
  5188                           	opt stack 0
  5189  000068                     ___lldiv@quotient:
  5190                           	opt stack 0
  5191                           
  5192                           ; 4 bytes @ 0x8
  5193  000068                     	ds	1
  5194  000069                     MSDErrorHandler@OldMSD_State:
  5195                           	opt stack 0
  5196  000069                     __i2c_write@cntr:
  5197                           	opt stack 0
  5198  000069                     ___aldiv@sign:
  5199                           	opt stack 0
  5200  000069                     ___almod@sign:
  5201                           	opt stack 0
  5202  000069                     ___fltol@exp1:
  5203                           	opt stack 0
  5204  000069                     ___xxtofl@exp:
  5205                           	opt stack 0
  5206  000069                     USBTransferOnePacket@handle:
  5207                           	opt stack 0
  5208  000069                     utoa@val:
  5209                           	opt stack 0
  5210  000069                     memcpy@s:
  5211                           	opt stack 0
  5212                           
  5213                           ; 2 bytes @ 0x9
  5214  000069                     	ds	1
  5215  00006A                     ??_i2c_display_init:
  5216  00006A                     __ic2_display_set_ddram_address@address:
  5217                           	opt stack 0
  5218  00006A                     __motor_run@direction:
  5219                           	opt stack 0
  5220  00006A                     __ic2_display_set_cgram_address@data_array:
  5221                           	opt stack 0
  5222  00006A                     MSDCheckForErrorCases@DeviceBytes:
  5223                           	opt stack 0
  5224  00006A                     ___aldiv@quotient:
  5225                           	opt stack 0
  5226  00006A                     ___xxtofl@arg:
  5227                           	opt stack 0
  5228                           
  5229                           ; 4 bytes @ 0xA
  5230  00006A                     	ds	1
  5231  00006B                     __ic2_display_set_ddram_address@data_array:
  5232                           	opt stack 0
  5233  00006B                     __fill_buffer_get_status@outBuffer:
  5234                           	opt stack 0
  5235  00006B                     utoa@base:
  5236                           	opt stack 0
  5237  00006B                     i2c_display_init@init_sequence:
  5238                           	opt stack 0
  5239                           
  5240                           ; 9 bytes @ 0xB
  5241  00006B                     	ds	1
  5242  00006C                     ?__flash_get_status:
  5243                           	opt stack 0
  5244  00006C                     __fill_buffer_get_display@cntr:
  5245                           	opt stack 0
  5246  00006C                     ___lldiv@counter:
  5247                           	opt stack 0
  5248                           
  5249                           ; 1 bytes @ 0xC
  5250  00006C                     	ds	1
  5251  00006D                     __ic2_display_set_cgram_address@address:
  5252                           	opt stack 0
  5253  00006D                     i2c_display_cursor@position:
  5254                           	opt stack 0
  5255  00006D                     __fill_buffer_get_display@line:
  5256                           	opt stack 0
  5257  00006D                     utoa@v:
  5258                           	opt stack 0
  5259  00006D                     ultoa@buf:
  5260                           	opt stack 0
  5261                           
  5262                           ; 2 bytes @ 0xD
  5263  00006D                     	ds	1
  5264  00006E                     ?___fldiv:
  5265                           	opt stack 0
  5266  00006E                     ?___flmul:
  5267                           	opt stack 0
  5268  00006E                     ?___flneg:
  5269                           	opt stack 0
  5270  00006E                     MSDCheckForErrorCases@HostMoreDataThanDevice:
  5271                           	opt stack 0
  5272  00006E                     i2c_display_cursor@line:
  5273                           	opt stack 0
  5274  00006E                     __flash_get_status@command:
  5275                           	opt stack 0
  5276  00006E                     __fill_buffer_get_display@start_line:
  5277                           	opt stack 0
  5278  00006E                     i2c_display_program_custom_character@bit_pattern:
  5279                           	opt stack 0
  5280  00006E                     ___flneg@f1:
  5281                           	opt stack 0
  5282  00006E                     ___fldiv@b:
  5283                           	opt stack 0
  5284  00006E                     ___flmul@b:
  5285                           	opt stack 0
  5286                           
  5287                           ; 4 bytes @ 0xE
  5288  00006E                     	ds	1
  5289  00006F                     MSDCheckForErrorCases@DeviceNoData:
  5290                           	opt stack 0
  5291  00006F                     i2c_display_cursor@address:
  5292                           	opt stack 0
  5293  00006F                     __fill_buffer_get_display@position:
  5294                           	opt stack 0
  5295  00006F                     utoa@c:
  5296                           	opt stack 0
  5297  00006F                     __flash_get_status@status:
  5298                           	opt stack 0
  5299  00006F                     ultoa@val:
  5300                           	opt stack 0
  5301                           
  5302                           ; 4 bytes @ 0xF
  5303  00006F                     	ds	1
  5304  000070                     ??_i2c_display_program_custom_character:
  5305  000070                     MSDCheckForErrorCases@MSDErrorCase:
  5306                           	opt stack 0
  5307  000070                     display_update@line:
  5308                           	opt stack 0
  5309  000070                     api_prepare@inBuffer:
  5310                           	opt stack 0
  5311  000070                     itoa@buf:
  5312                           	opt stack 0
  5313                           
  5314                           ; 2 bytes @ 0x10
  5315  000070                     	ds	1
  5316  000071                     __flash_is_busy@status:
  5317                           	opt stack 0
  5318                           
  5319                           ; 2 bytes @ 0x11
  5320  000071                     	ds	1
  5321  000072                     ?___fladd:
  5322                           	opt stack 0
  5323  000072                     api_prepare@outBuffer:
  5324                           	opt stack 0
  5325  000072                     itoa@val:
  5326                           	opt stack 0
  5327  000072                     ___fladd@b:
  5328                           	opt stack 0
  5329  000072                     ___fldiv@a:
  5330                           	opt stack 0
  5331  000072                     ___flmul@a:
  5332                           	opt stack 0
  5333                           
  5334                           ; 4 bytes @ 0x12
  5335  000072                     	ds	1
  5336  000073                     __flash_copy_page_to_buffer@page:
  5337                           	opt stack 0
  5338  000073                     __flash_compare_page_to_buffer@page:
  5339                           	opt stack 0
  5340  000073                     __flash_write_to_buffer@start:
  5341                           	opt stack 0
  5342  000073                     __flash_write_page_from_buffer@page:
  5343                           	opt stack 0
  5344  000073                     __flash_partial_read@page:
  5345                           	opt stack 0
  5346  000073                     ultoa@base:
  5347                           	opt stack 0
  5348  000073                     __flash_set_page_size@command:
  5349                           	opt stack 0
  5350                           
  5351                           ; 4 bytes @ 0x13
  5352  000073                     	ds	1
  5353  000074                     api_prepare@command:
  5354                           	opt stack 0
  5355  000074                     itoa@base:
  5356                           	opt stack 0
  5357  000074                     i2c_display_program_custom_character@data_array:
  5358                           	opt stack 0
  5359                           
  5360                           ; 11 bytes @ 0x14
  5361  000074                     	ds	1
  5362  000075                     __flash_copy_page_to_buffer@buffer:
  5363                           	opt stack 0
  5364  000075                     __flash_compare_page_to_buffer@buffer:
  5365                           	opt stack 0
  5366  000075                     __flash_write_page_from_buffer@buffer:
  5367                           	opt stack 0
  5368  000075                     __flash_write_to_buffer@data:
  5369                           	opt stack 0
  5370  000075                     __flash_partial_read@start:
  5371                           	opt stack 0
  5372  000075                     ultoa@v:
  5373                           	opt stack 0
  5374                           
  5375                           ; 4 bytes @ 0x15
  5376  000075                     	ds	1
  5377  000076                     ??___fldiv:
  5378  000076                     ??___flmul:
  5379  000076                     ??__flash_copy_page_to_buffer:
  5380  000076                     ??__flash_compare_page_to_buffer:
  5381  000076                     ??__flash_write_page_from_buffer:
  5382  000076                     itoa@cp:
  5383                           	opt stack 0
  5384  000076                     ___fladd@a:
  5385                           	opt stack 0
  5386                           
  5387                           ; 4 bytes @ 0x16
  5388  000076                     	ds	1
  5389  000077                     __flash_set_page_size@size:
  5390                           	opt stack 0
  5391  000077                     __flash_write_to_buffer@data_length:
  5392                           	opt stack 0
  5393  000077                     __flash_partial_read@length:
  5394                           	opt stack 0
  5395                           
  5396                           ; 2 bytes @ 0x17
  5397  000077                     	ds	1
  5398  000078                     __display_padded_itoa@value:
  5399                           	opt stack 0
  5400                           
  5401                           ; 2 bytes @ 0x18
  5402  000078                     	ds	1
  5403  000079                     __flash_write_to_buffer@buffer:
  5404                           	opt stack 0
  5405  000079                     ultoa@c:
  5406                           	opt stack 0
  5407  000079                     __flash_compare_page_to_buffer@status:
  5408                           	opt stack 0
  5409  000079                     __flash_partial_read@data:
  5410                           	opt stack 0
  5411  000079                     __flash_copy_page_to_buffer@command:
  5412                           	opt stack 0
  5413  000079                     __flash_write_page_from_buffer@command:
  5414                           	opt stack 0
  5415                           
  5416                           ; 4 bytes @ 0x19
  5417  000079                     	ds	1
  5418  00007A                     ??___fladd:
  5419  00007A                     __display_padded_itoa@length:
  5420                           	opt stack 0
  5421  00007A                     ___flmul@sign:
  5422                           	opt stack 0
  5423  00007A                     ltoa@buf:
  5424                           	opt stack 0
  5425  00007A                     __flash_write_to_buffer@command:
  5426                           	opt stack 0
  5427  00007A                     ___fldiv@rem:
  5428                           	opt stack 0
  5429                           
  5430                           ; 4 bytes @ 0x1A
  5431  00007A                     	ds	1
  5432  00007B                     ??__flash_partial_read:
  5433  00007B                     ___flmul@aexp:
  5434                           	opt stack 0
  5435  00007B                     __display_padded_itoa@text:
  5436                           	opt stack 0
  5437  00007B                     __flash_compare_page_to_buffer@command:
  5438                           	opt stack 0
  5439                           
  5440                           ; 4 bytes @ 0x1B
  5441  00007B                     	ds	1
  5442  00007C                     ___flmul@grs:
  5443                           	opt stack 0
  5444  00007C                     ltoa@val:
  5445                           	opt stack 0
  5446                           
  5447                           ; 4 bytes @ 0x1C
  5448  00007C                     	ds	1
  5449  00007D                     ??__display_padded_itoa:
  5450                           
  5451                           ; 1 bytes @ 0x1D
  5452  00007D                     	ds	1
  5453  00007E                     ___fldiv@sign:
  5454                           	opt stack 0
  5455                           
  5456                           ; 1 bytes @ 0x1E
  5457  00007E                     	ds	1
  5458  00007F                     i2c_display_program_custom_character@address:
  5459                           	opt stack 0
  5460  00007F                     flash_sector_write@page:
  5461                           	opt stack 0
  5462  00007F                     flash_partial_write@page:
  5463                           	opt stack 0
  5464  00007F                     ___fldiv@new_exp:
  5465                           	opt stack 0
  5466  00007F                     __flash_partial_read@command:
  5467                           	opt stack 0
  5468                           
  5469                           ; 4 bytes @ 0x1F
  5470  00007F                     	ds	1
  5471  000080                     i2c_display_program_custom_character@cntr:
  5472                           	opt stack 0
  5473  000080                     ___flmul@bexp:
  5474                           	opt stack 0
  5475  000080                     ltoa@base:
  5476                           	opt stack 0
  5477                           
  5478                           ; 2 bytes @ 0x20
  5479  000080                     	ds	1
  5480  000081                     flash_sector_write@data:
  5481                           	opt stack 0
  5482  000081                     flash_partial_write@start:
  5483                           	opt stack 0
  5484  000081                     ___fldiv@grs:
  5485                           	opt stack 0
  5486  000081                     ___flmul@prod:
  5487                           	opt stack 0
  5488                           
  5489                           ; 4 bytes @ 0x21
  5490  000081                     	ds	1
  5491  000082                     ___fladd@signs:
  5492                           	opt stack 0
  5493  000082                     ltoa@cp:
  5494                           	opt stack 0
  5495  000082                     __display_padded_itoa@tmp:
  5496                           	opt stack 0
  5497                           
  5498                           ; 10 bytes @ 0x22
  5499  000082                     	ds	1
  5500  000083                     flash_sector_write@match:
  5501                           	opt stack 0
  5502  000083                     ___fladd@aexp:
  5503                           	opt stack 0
  5504  000083                     flash_partial_write@length:
  5505                           	opt stack 0
  5506  000083                     __flash_partial_read@address:
  5507                           	opt stack 0
  5508                           
  5509                           ; 4 bytes @ 0x23
  5510  000083                     	ds	1
  5511  000084                     ___fladd@bexp:
  5512                           	opt stack 0
  5513  000084                     ExternalFlash_SectorWrite@config:
  5514                           	opt stack 0
  5515  000084                     fat_format@cntr:
  5516                           	opt stack 0
  5517  000084                     __add_item@item_string:
  5518                           	opt stack 0
  5519                           
  5520                           ; 2 bytes @ 0x24
  5521  000084                     	ds	1
  5522  000085                     ___fladd@grs:
  5523                           	opt stack 0
  5524  000085                     ___fldiv@bexp:
  5525                           	opt stack 0
  5526  000085                     flash_partial_write@data:
  5527                           	opt stack 0
  5528  000085                     ___flmul@temp:
  5529                           	opt stack 0
  5530                           
  5531                           ; 2 bytes @ 0x25
  5532  000085                     	ds	1
  5533  000086                     ___fldiv@aexp:
  5534                           	opt stack 0
  5535  000086                     ExternalFlash_SectorWrite@sector_addr:
  5536                           	opt stack 0
  5537  000086                     __add_item@value:
  5538                           	opt stack 0
  5539                           
  5540                           ; 4 bytes @ 0x26
  5541  000086                     	ds	1
  5542  000087                     ??_adc_read_temperature:
  5543  000087                     ?__motor_get_speed_in_degrees:
  5544                           	opt stack 0
  5545  000087                     ?_motor_steps_from_degrees:
  5546                           	opt stack 0
  5547  000087                     ?__step_position_from_divide_position:
  5548                           	opt stack 0
  5549  000087                     flash_partial_write@match:
  5550                           	opt stack 0
  5551  000087                     flash_sector_read@page:
  5552                           	opt stack 0
  5553  000087                     flash_partial_read@page:
  5554                           	opt stack 0
  5555  000087                     motor_steps_from_degrees@degrees:
  5556                           	opt stack 0
  5557  000087                     __motor_get_speed_in_degrees@speed_index:
  5558                           	opt stack 0
  5559  000087                     __step_position_from_divide_position@divide_position:
  5560                           	opt stack 0
  5561                           
  5562                           ; 2 bytes @ 0x27
  5563  000087                     	ds	1
  5564  000088                     __write_root@data:
  5565                           	opt stack 0
  5566                           
  5567                           ; 2 bytes @ 0x28
  5568  000088                     	ds	1
  5569  000089                     ??__motor_get_speed_in_degrees:
  5570  000089                     flash_sector_read@data:
  5571                           	opt stack 0
  5572  000089                     flash_partial_read@start:
  5573                           	opt stack 0
  5574  000089                     adc_read_temperature@adc_result:
  5575                           	opt stack 0
  5576                           
  5577                           ; 2 bytes @ 0x29
  5578  000089                     	ds	1
  5579  00008A                     ExternalFlash_SectorWrite@buffer:
  5580                           	opt stack 0
  5581  00008A                     __write_root@sector:
  5582                           	opt stack 0
  5583  00008A                     __add_item@buffer:
  5584                           	opt stack 0
  5585                           
  5586                           ; 2 bytes @ 0x2A
  5587  00008A                     	ds	1
  5588  00008B                     ??_fat_get_format_status:
  5589  00008B                     ?__get_available_cluster:
  5590                           	opt stack 0
  5591  00008B                     flash_partial_read@length:
  5592                           	opt stack 0
  5593  00008B                     ExternalFlash_SectorRead@config:
  5594                           	opt stack 0
  5595  00008B                     __get_available_cluster@first_sector:
  5596                           	opt stack 0
  5597  00008B                     fat_find_file@name:
  5598                           	opt stack 0
  5599  00008B                     motor_steps_from_degrees@steps:
  5600                           	opt stack 0
  5601  00008B                     __motor_get_speed_in_degrees@speed:
  5602                           	opt stack 0
  5603  00008B                     __step_position_from_divide_position@target_position:
  5604                           	opt stack 0
  5605  00008B                     adc_read_temperature@temperature:
  5606                           	opt stack 0
  5607                           
  5608                           ; 4 bytes @ 0x2B
  5609  00008B                     	ds	1
  5610  00008C                     ??__add_item:
  5611  00008C                     __display_padded_itoa@len:
  5612                           	opt stack 0
  5613  00008C                     ExternalFlash_SectorWrite@allowWriteToZero:
  5614                           	opt stack 0
  5615  00008C                     __write_root@offset:
  5616                           	opt stack 0
  5617                           
  5618                           ; 2 bytes @ 0x2C
  5619  00008C                     	ds	1
  5620  00008D                     __display_padded_itoa@pos:
  5621                           	opt stack 0
  5622  00008D                     flash_partial_read@data:
  5623                           	opt stack 0
  5624  00008D                     ExternalFlash_SectorWrite@page:
  5625                           	opt stack 0
  5626  00008D                     __get_available_cluster@skip_sector:
  5627                           	opt stack 0
  5628  00008D                     fat_find_file@extension:
  5629                           	opt stack 0
  5630  00008D                     fat_get_format_status@cntr:
  5631                           	opt stack 0
  5632  00008D                     ExternalFlash_SectorRead@sector_addr:
  5633                           	opt stack 0
  5634                           
  5635                           ; 4 bytes @ 0x2D
  5636  00008D                     	ds	1
  5637  00008E                     __display_padded_itoa@padding:
  5638                           	opt stack 0
  5639  00008E                     __write_root@file_number:
  5640                           	opt stack 0
  5641  00008E                     __add_item@length:
  5642                           	opt stack 0
  5643                           
  5644                           ; 1 bytes @ 0x2E
  5645  00008E                     	ds	1
  5646  00008F                     ??_MSDWriteHandler:
  5647  00008F                     ??_fat_find_file:
  5648  00008F                     ?__read_fat:
  5649                           	opt stack 0
  5650  00008F                     ?_motor_nonzero_steps_from_degrees:
  5651                           	opt stack 0
  5652  00008F                     __display_signed_itoa@value:
  5653                           	opt stack 0
  5654  00008F                     __get_available_cluster@cluster:
  5655                           	opt stack 0
  5656  00008F                     __root_is_available@root_sector:
  5657                           	opt stack 0
  5658  00008F                     __read_fat@cluster:
  5659                           	opt stack 0
  5660  00008F                     fat_get_file_information@data:
  5661                           	opt stack 0
  5662  00008F                     motor_nonzero_steps_from_degrees@degrees:
  5663                           	opt stack 0
  5664  00008F                     __motor_get_speed_in_degrees@lookup:
  5665                           	opt stack 0
  5666                           
  5667                           ; 4 bytes @ 0x2F
  5668  00008F                     	ds	2
  5669  000091                     fat_find_file@file_number:
  5670                           	opt stack 0
  5671  000091                     __display_signed_itoa@text:
  5672                           	opt stack 0
  5673  000091                     ExternalFlash_SectorRead@buffer:
  5674                           	opt stack 0
  5675  000091                     __get_available_cluster@offset:
  5676                           	opt stack 0
  5677  000091                     __root_is_available@offset:
  5678                           	opt stack 0
  5679  000091                     __read_fat@sector:
  5680                           	opt stack 0
  5681                           
  5682                           ; 2 bytes @ 0x31
  5683  000091                     	ds	1
  5684  000092                     fat_find_file@sector:
  5685                           	opt stack 0
  5686  000092                     fat_get_file_information@root_sector:
  5687                           	opt stack 0
  5688                           
  5689                           ; 2 bytes @ 0x32
  5690  000092                     	ds	1
  5691  000093                     ?_motor_speed_from_index:
  5692                           	opt stack 0
  5693  000093                     __root_is_available@file_number:
  5694                           	opt stack 0
  5695  000093                     ExternalFlash_SectorRead@page:
  5696                           	opt stack 0
  5697  000093                     __get_available_cluster@sector:
  5698                           	opt stack 0
  5699  000093                     __read_fat@offset:
  5700                           	opt stack 0
  5701  000093                     motor_speed_from_index@speed_index:
  5702                           	opt stack 0
  5703  000093                     motor_nonzero_steps_from_degrees@steps:
  5704                           	opt stack 0
  5705                           
  5706                           ; 4 bytes @ 0x33
  5707  000093                     	ds	1
  5708  000094                     __root_is_available@first_byte:
  5709                           	opt stack 0
  5710  000094                     fat_find_file@offset:
  5711                           	opt stack 0
  5712  000094                     fat_get_file_information@offset:
  5713                           	opt stack 0
  5714                           
  5715                           ; 2 bytes @ 0x34
  5716  000094                     	ds	1
  5717  000095                     ??_MSDReadHandler:
  5718  000095                     ?__make_cluster_chain:
  5719                           	opt stack 0
  5720  000095                     __get_available_root_entry@file_number:
  5721                           	opt stack 0
  5722  000095                     __display_itoa@value:
  5723                           	opt stack 0
  5724  000095                     __make_cluster_chain@first_cluster:
  5725                           	opt stack 0
  5726  000095                     __read_fat@value:
  5727                           	opt stack 0
  5728                           
  5729                           ; 2 bytes @ 0x35
  5730  000095                     	ds	1
  5731  000096                     fat_get_file_information@file_number:
  5732                           	opt stack 0
  5733                           
  5734                           ; 1 bytes @ 0x36
  5735  000096                     	ds	1
  5736  000097                     ?__find_nth_cluster:
  5737                           	opt stack 0
  5738  000097                     __display_itoa@decimals:
  5739                           	opt stack 0
  5740  000097                     __find_nth_cluster@cluster:
  5741                           	opt stack 0
  5742  000097                     __make_cluster_chain@number_of_clusters:
  5743                           	opt stack 0
  5744  000097                     motor_schedule_command@distance_in_steps:
  5745                           	opt stack 0
  5746                           
  5747                           ; 4 bytes @ 0x37
  5748  000097                     	ds	1
  5749  000098                     __display_itoa@text:
  5750                           	opt stack 0
  5751                           
  5752                           ; 2 bytes @ 0x38
  5753  000098                     	ds	1
  5754  000099                     ??_MSDProcessCommandMediaPresent:
  5755  000099                     ??__make_cluster_chain:
  5756  000099                     __find_nth_cluster@n:
  5757                           	opt stack 0
  5758                           
  5759                           ; 2 bytes @ 0x39
  5760  000099                     	ds	1
  5761  00009A                     ??__display_itoa:
  5762                           
  5763                           ; 1 bytes @ 0x3A
  5764  00009A                     	ds	1
  5765  00009B                     _MSDProcessCommandMediaPresent$2606:
  5766                           	opt stack 0
  5767  00009B                     __find_nth_cluster@offset:
  5768                           	opt stack 0
  5769  00009B                     __make_cluster_chain@next_offset:
  5770                           	opt stack 0
  5771  00009B                     motor_schedule_command@speed:
  5772                           	opt stack 0
  5773                           
  5774                           ; 2 bytes @ 0x3B
  5775  00009B                     	ds	2
  5776  00009D                     MSDProcessCommandMediaPresent@NumBytesInPacket:
  5777                           	opt stack 0
  5778  00009D                     motor_schedule_command@direction:
  5779                           	opt stack 0
  5780  00009D                     __find_nth_cluster@sector_in_buffer:
  5781                           	opt stack 0
  5782  00009D                     __make_cluster_chain@minimum_sector:
  5783                           	opt stack 0
  5784                           
  5785                           ; 2 bytes @ 0x3D
  5786  00009D                     	ds	1
  5787  00009E                     motor_arc_move@direction:
  5788                           	opt stack 0
  5789  00009E                     __parse_jump_steps@data:
  5790                           	opt stack 0
  5791  00009E                     MSDProcessCommandMediaPresent@sectorSize:
  5792                           	opt stack 0
  5793  00009E                     motor_go_to_steps_position@target_position:
  5794                           	opt stack 0
  5795                           
  5796                           ; 4 bytes @ 0x3E
  5797  00009E                     	ds	1
  5798  00009F                     __find_nth_cluster@sector:
  5799                           	opt stack 0
  5800  00009F                     __make_cluster_chain@different_sector_cluster:
  5801                           	opt stack 0
  5802  00009F                     motor_arc_move@arc_in_steps:
  5803                           	opt stack 0
  5804                           
  5805                           ; 4 bytes @ 0x3F
  5806  00009F                     	ds	1
  5807  0000A0                     __parse_jump_steps@out_buffer:
  5808                           	opt stack 0
  5809  0000A0                     __display_itoa@tmp:
  5810                           	opt stack 0
  5811                           
  5812                           ; 10 bytes @ 0x40
  5813  0000A0                     	ds	1
  5814  0000A1                     __make_cluster_chain@data_changed:
  5815                           	opt stack 0
  5816  0000A1                     fat_modify_file@start_byte:
  5817                           	opt stack 0
  5818                           
  5819                           ; 4 bytes @ 0x41
  5820  0000A1                     	ds	1
  5821  0000A2                     ??_motor_go_to_steps_position:
  5822  0000A2                     __make_cluster_chain@remaining_clusters:
  5823                           	opt stack 0
  5824  0000A2                     __parse_jump_steps@out_idx_ptr:
  5825                           	opt stack 0
  5826  0000A2                     MSDProcessCommandMediaPresent@capacity:
  5827                           	opt stack 0
  5828                           
  5829                           ; 4 bytes @ 0x42
  5830  0000A2                     	ds	2
  5831  0000A4                     ??__parse_jump_steps:
  5832  0000A4                     __make_cluster_chain@sector:
  5833                           	opt stack 0
  5834                           
  5835                           ; 2 bytes @ 0x44
  5836  0000A4                     	ds	1
  5837  0000A5                     __parse_jump_steps@return_value:
  5838                           	opt stack 0
  5839  0000A5                     fat_modify_file@length:
  5840                           	opt stack 0
  5841                           
  5842                           ; 2 bytes @ 0x45
  5843  0000A5                     	ds	1
  5844  0000A6                     MSDProcessCommandMediaPresent@i:
  5845                           	opt stack 0
  5846  0000A6                     __make_cluster_chain@sector_in_buffer:
  5847                           	opt stack 0
  5848  0000A6                     __parse_jump_steps@number_of_steps:
  5849                           	opt stack 0
  5850                           
  5851                           ; 4 bytes @ 0x46
  5852  0000A6                     	ds	1
  5853  0000A7                     ??_MSDProcessCommand:
  5854  0000A7                     fat_modify_file@data:
  5855                           	opt stack 0
  5856                           
  5857                           ; 2 bytes @ 0x47
  5858  0000A7                     	ds	1
  5859  0000A8                     __make_cluster_chain@offset:
  5860                           	opt stack 0
  5861                           
  5862                           ; 2 bytes @ 0x48
  5863  0000A8                     	ds	1
  5864  0000A9                     ??_fat_modify_file:
  5865                           
  5866                           ; 1 bytes @ 0x49
  5867  0000A9                     	ds	1
  5868  0000AA                     __display_itoa@len:
  5869                           	opt stack 0
  5870  0000AA                     __make_cluster_chain@next_cluster:
  5871                           	opt stack 0
  5872  0000AA                     __parse_command_long@data:
  5873                           	opt stack 0
  5874  0000AA                     motor_go_to_steps_position@overhead_cw:
  5875                           	opt stack 0
  5876                           
  5877                           ; 4 bytes @ 0x4A
  5878  0000AA                     	ds	1
  5879  0000AB                     __display_itoa@missing:
  5880                           	opt stack 0
  5881                           
  5882                           ; 1 bytes @ 0x4B
  5883  0000AB                     	ds	1
  5884  0000AC                     ??_MSDTasks:
  5885  0000AC                     __display_itoa@pos:
  5886                           	opt stack 0
  5887  0000AC                     fat_create_file@name:
  5888                           	opt stack 0
  5889  0000AC                     __parse_command_long@out_buffer:
  5890                           	opt stack 0
  5891  0000AC                     fat_resize_file@new_file_size:
  5892                           	opt stack 0
  5893                           
  5894                           ; 4 bytes @ 0x4C
  5895  0000AC                     	ds	1
  5896  0000AD                     _MSDTasks$2588:
  5897                           	opt stack 0
  5898  0000AD                     __display_itoa_long@value:
  5899                           	opt stack 0
  5900                           
  5901                           ; 4 bytes @ 0x4D
  5902  0000AD                     	ds	1
  5903  0000AE                     fat_create_file@extension:
  5904                           	opt stack 0
  5905  0000AE                     __parse_command_long@out_idx_ptr:
  5906                           	opt stack 0
  5907  0000AE                     motor_go_to_steps_position@overhead_ccw:
  5908                           	opt stack 0
  5909                           
  5910                           ; 4 bytes @ 0x4E
  5911  0000AE                     	ds	1
  5912  0000AF                     _MSDTasks$2589:
  5913                           	opt stack 0
  5914                           
  5915                           ; 2 bytes @ 0x4F
  5916  0000AF                     	ds	1
  5917  0000B0                     ??_fat_resize_file:
  5918  0000B0                     __parse_command_long@length:
  5919                           	opt stack 0
  5920  0000B0                     fat_create_file@size:
  5921                           	opt stack 0
  5922                           
  5923                           ; 4 bytes @ 0x50
  5924  0000B0                     	ds	1
  5925  0000B1                     MSDTasks@i:
  5926                           	opt stack 0
  5927  0000B1                     __display_itoa_long@decimals:
  5928                           	opt stack 0
  5929                           
  5930                           ; 1 bytes @ 0x51
  5931  0000B1                     	ds	1
  5932  0000B2                     __display_itoa_long@text:
  5933                           	opt stack 0
  5934  0000B2                     motor_go_to_steps_position@distance_cw:
  5935                           	opt stack 0
  5936                           
  5937                           ; 4 bytes @ 0x52
  5938  0000B2                     	ds	2
  5939  0000B4                     ??__display_itoa_long:
  5940  0000B4                     ??_fat_create_file:
  5941  0000B4                     fat_resize_file@old_number_of_clusters:
  5942                           	opt stack 0
  5943                           
  5944                           ; 2 bytes @ 0x54
  5945  0000B4                     	ds	1
  5946  0000B5                     fat_modify_file@file_number:
  5947                           	opt stack 0
  5948                           
  5949                           ; 1 bytes @ 0x55
  5950  0000B5                     	ds	1
  5951  0000B6                     fat_resize_file@new_number_of_clusters:
  5952                           	opt stack 0
  5953  0000B6                     fat_modify_file@sector:
  5954                           	opt stack 0
  5955  0000B6                     motor_go_to_steps_position@distance_ccw:
  5956                           	opt stack 0
  5957                           
  5958                           ; 4 bytes @ 0x56
  5959  0000B6                     	ds	2
  5960  0000B8                     __display_itoa_long@length:
  5961                           	opt stack 0
  5962  0000B8                     fat_modify_file@return_code:
  5963                           	opt stack 0
  5964  0000B8                     fat_create_file@number_of_clusters:
  5965                           	opt stack 0
  5966  0000B8                     fat_resize_file@first_cluster:
  5967                           	opt stack 0
  5968                           
  5969                           ; 2 bytes @ 0x58
  5970  0000B8                     	ds	1
  5971  0000B9                     __display_itoa_long@short_value:
  5972                           	opt stack 0
  5973  0000B9                     fat_modify_file@cluster:
  5974                           	opt stack 0
  5975                           
  5976                           ; 2 bytes @ 0x59
  5977  0000B9                     	ds	1
  5978  0000BA                     ??_motor_divide_jump:
  5979  0000BA                     fat_resize_file@file_number:
  5980                           	opt stack 0
  5981  0000BA                     __parse_command_short@cmd:
  5982                           	opt stack 0
  5983  0000BA                     fat_create_file@first_cluster:
  5984                           	opt stack 0
  5985  0000BA                     motor_divide_jump_to_nearest@nearest_position_in_steps:
  5986                           	opt stack 0
  5987                           
  5988                           ; 4 bytes @ 0x5A
  5989  0000BA                     	ds	1
  5990  0000BB                     __display_itoa_long@last_digit:
  5991                           	opt stack 0
  5992  0000BB                     fat_modify_file@offset:
  5993                           	opt stack 0
  5994  0000BB                     api_parse@inBuffer:
  5995                           	opt stack 0
  5996  0000BB                     motor_divide_jump@target_position_in_steps:
  5997                           	opt stack 0
  5998  0000BB                     fat_resize_file@root:
  5999                           	opt stack 0
  6000                           
  6001                           ; 32 bytes @ 0x5B
  6002  0000BB                     	ds	1
  6003  0000BC                     ??_display_prepare:
  6004  0000BC                     fat_create_file@file_number:
  6005                           	opt stack 0
  6006                           
  6007                           ; 1 bytes @ 0x5C
  6008  0000BC                     	ds	1
  6009  0000BD                     api_parse@receivedDataLength:
  6010                           	opt stack 0
  6011  0000BD                     fat_modify_file@number_of_bytes:
  6012                           	opt stack 0
  6013  0000BD                     fat_create_file@root_entry:
  6014                           	opt stack 0
  6015                           
  6016                           ; 32 bytes @ 0x5D
  6017  0000BD                     	ds	1
  6018  0000BE                     api_parse@outBuffer:
  6019                           	opt stack 0
  6020  0000BE                     motor_divide_jump_to_nearest@nearest_divide_position:
  6021                           	opt stack 0
  6022  0000BE                     display_prepare@temp:
  6023                           	opt stack 0
  6024                           
  6025                           ; 10 bytes @ 0x5E
  6026  0000BE                     	ds	1
  6027  0000BF                     motor_divide_jump@target_divide_position:
  6028                           	opt stack 0
  6029  0000BF                     fat_modify_file@position:
  6030                           	opt stack 0
  6031                           
  6032                           ; 4 bytes @ 0x5F
  6033  0000BF                     	ds	1
  6034  0000C0                     ??_api_parse:
  6035  0000C0                     motor_divide_jump_to_nearest@divide_position_float:
  6036                           	opt stack 0
  6037                           
  6038                           ; 4 bytes @ 0x60
  6039  0000C0                     	ds	2
  6040  0000C2                     api_parse@out_idx_ptr:
  6041                           	opt stack 0
  6042                           
  6043                           ; 2 bytes @ 0x62
  6044  0000C2                     	ds	1
  6045  0000C3                     fat_modify_file@root:
  6046                           	opt stack 0
  6047                           
  6048                           ; 32 bytes @ 0x63
  6049  0000C3                     	ds	1
  6050  0000C4                     ??_encoder_statemachine:
  6051  0000C4                     api_parse@out_idx:
  6052                           	opt stack 0
  6053                           
  6054                           ; 1 bytes @ 0x64
  6055  0000C4                     	ds	1
  6056  0000C5                     api_parse@in_idx:
  6057                           	opt stack 0
  6058                           
  6059                           ; 1 bytes @ 0x65
  6060  0000C5                     	ds	1
  6061  0000C6                     
  6062                           ; 1 bytes @ 0x66
  6063  0000C6                     	ds	2
  6064  0000C8                     display_prepare@space:
  6065                           	opt stack 0
  6066                           
  6067                           ; 1 bytes @ 0x68
  6068  0000C8                     	ds	1
  6069  0000C9                     display_prepare@cntr:
  6070                           	opt stack 0
  6071                           
  6072                           ; 1 bytes @ 0x69
  6073  0000C9                     	ds	26
  6074  0000E3                     ??_configFile_write:
  6075                           
  6076                           ; 1 bytes @ 0x83
  6077  0000E3                     	ds	1
  6078  0000E4                     configFile_write@file_number:
  6079                           	opt stack 0
  6080                           
  6081                           ; 1 bytes @ 0x84
  6082  0000E4                     	ds	1
  6083  0000E5                     configFile_write@file_size:
  6084                           	opt stack 0
  6085                           
  6086                           ; 4 bytes @ 0x85
  6087  0000E5                     	ds	4
  6088  0000E9                     tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           postinc0	equ	0xFEE
  6093                           wreg	equ	0xFE8
  6094                           postdec1	equ	0xFE5
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           
  6098                           ; 1 bytes @ 0x89
  6099                           
  6100                           	psect	cstackCOMRAM
  6101  00002E                     __pcstackCOMRAM:
  6102                           	opt stack 0
  6103  00002E                     ??_motor_isr:
  6104  00002E                     ??_USBStdGetDscHandler:
  6105  00002E                     ??_USBStdGetStatusHandler:
  6106  00002E                     ?i2_USBTransferOnePacket:
  6107                           	opt stack 0
  6108  00002E                     ?i2_ExternalFlash_MediaInitialize:
  6109                           	opt stack 0
  6110  00002E                     USBConfigureEndpoint@direction:
  6111                           	opt stack 0
  6112  00002E                     USBCtrlTrfTxService@byteToSend:
  6113                           	opt stack 0
  6114  00002E                     USBCtrlTrfRxService@i:
  6115                           	opt stack 0
  6116  00002E                     i2USBTransferOnePacket@dir:
  6117                           	opt stack 0
  6118  00002E                     i2USBStallEndpoint@dir:
  6119                           	opt stack 0
  6120  00002E                     i2SYSTEM_Initialize@pll_startup_counter:
  6121                           	opt stack 0
  6122  00002E                     i2ExternalFlash_MediaInitialize@config:
  6123                           	opt stack 0
  6124  00002E                     i2ExternalFlash_MediaDetect@config:
  6125                           	opt stack 0
  6126  00002E                     i2memcpy@d1:
  6127                           	opt stack 0
  6128  00002E                     i2memset@p1:
  6129                           	opt stack 0
  6130                           
  6131                           ; 2 bytes @ 0x0
  6132  00002E                     	ds	1
  6133  00002F                     ??_USBConfigureEndpoint:
  6134  00002F                     ??i2_USBStallEndpoint:
  6135  00002F                     USBCtrlTrfRxService@byteToRead:
  6136                           	opt stack 0
  6137  00002F                     USBCtrlTrfInHandler@lastDTS:
  6138                           	opt stack 0
  6139  00002F                     USBStdGetStatusHandler@p:
  6140                           	opt stack 0
  6141  00002F                     i2USBTransferOnePacket@data:
  6142                           	opt stack 0
  6143                           
  6144                           ; 2 bytes @ 0x1
  6145  00002F                     	ds	1
  6146  000030                     i2SYSTEM_Initialize@pll_startup_counter_3117:
  6147                           	opt stack 0
  6148  000030                     i2memcpy@s1:
  6149                           	opt stack 0
  6150  000030                     i2memset@c:
  6151                           	opt stack 0
  6152                           
  6153                           ; 2 bytes @ 0x2
  6154  000030                     	ds	1
  6155  000031                     i2USBTransferOnePacket@len:
  6156                           	opt stack 0
  6157                           
  6158                           ; 1 bytes @ 0x3
  6159  000031                     	ds	1
  6160  000032                     ??i2_USBTransferOnePacket:
  6161  000032                     i2SYSTEM_Initialize@state:
  6162                           	opt stack 0
  6163  000032                     i2memcpy@n:
  6164                           	opt stack 0
  6165  000032                     i2memset@n:
  6166                           	opt stack 0
  6167                           
  6168                           ; 2 bytes @ 0x4
  6169  000032                     	ds	1
  6170  000033                     USBConfigureEndpoint@EPNum:
  6171                           	opt stack 0
  6172  000033                     i2USBStallEndpoint@ep:
  6173                           	opt stack 0
  6174                           
  6175                           ; 1 bytes @ 0x5
  6176  000033                     	ds	1
  6177  000034                     USBConfigureEndpoint@handle:
  6178                           	opt stack 0
  6179  000034                     i2USBStallEndpoint@p:
  6180                           	opt stack 0
  6181  000034                     i2memcpy@d:
  6182                           	opt stack 0
  6183  000034                     i2memset@p:
  6184                           	opt stack 0
  6185                           
  6186                           ; 2 bytes @ 0x6
  6187  000034                     	ds	2
  6188  000036                     USBEnableEndpoint@options:
  6189                           	opt stack 0
  6190  000036                     i2USBDeviceInit@i:
  6191                           	opt stack 0
  6192  000036                     i2USBTransferOnePacket@ep:
  6193                           	opt stack 0
  6194  000036                     i2memcpy@s:
  6195                           	opt stack 0
  6196                           
  6197                           ; 2 bytes @ 0x8
  6198  000036                     	ds	1
  6199  000037                     USBEnableEndpoint@p:
  6200                           	opt stack 0
  6201  000037                     i2USBTransferOnePacket@handle:
  6202                           	opt stack 0
  6203                           
  6204                           ; 2 bytes @ 0x9
  6205  000037                     	ds	1
  6206  000038                     i2memcpy@tmp:
  6207                           	opt stack 0
  6208                           
  6209                           ; 1 bytes @ 0xA
  6210  000038                     	ds	1
  6211  000039                     ??_USBMSDInit:
  6212  000039                     USBEnableEndpoint@ep:
  6213                           	opt stack 0
  6214  000039                     _USBCheckMSDRequest$2534:
  6215                           	opt stack 0
  6216  000039                     MSDTransferTerminated@handle:
  6217                           	opt stack 0
  6218                           
  6219                           ; 2 bytes @ 0xB
  6220  000039                     	ds	1
  6221  00003A                     
  6222                           ; 1 bytes @ 0xC
  6223  00003A                     	ds	1
  6224  00003B                     _USBCheckMSDRequest$2535:
  6225                           	opt stack 0
  6226  00003B                     _MSDTransferTerminated$2623:
  6227                           	opt stack 0
  6228                           
  6229                           ; 2 bytes @ 0xD
  6230  00003B                     	ds	1
  6231  00003C                     
  6232                           ; 1 bytes @ 0xE
  6233  00003C                     	ds	1
  6234  00003D                     USER_USB_CALLBACK_EVENT_HANDLER@event:
  6235                           	opt stack 0
  6236                           
  6237                           ; 2 bytes @ 0xF
  6238  00003D                     	ds	1
  6239  00003E                     motor_isr@steps_until_standstill:
  6240                           	opt stack 0
  6241                           
  6242                           ; 2 bytes @ 0x10
  6243  00003E                     	ds	1
  6244  00003F                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  6245                           	opt stack 0
  6246                           
  6247                           ; 2 bytes @ 0x11
  6248  00003F                     	ds	1
  6249  000040                     motor_isr@steps_until_standstill_if_accelerate:
  6250                           	opt stack 0
  6251                           
  6252                           ; 2 bytes @ 0x12
  6253  000040                     	ds	1
  6254  000041                     USER_USB_CALLBACK_EVENT_HANDLER@size:
  6255                           	opt stack 0
  6256                           
  6257                           ; 2 bytes @ 0x13
  6258  000041                     	ds	1
  6259  000042                     motor_isr@steps_remaining:
  6260                           	opt stack 0
  6261                           
  6262                           ; 4 bytes @ 0x14
  6263  000042                     	ds	1
  6264  000043                     ??_USER_USB_CALLBACK_EVENT_HANDLER:
  6265                           
  6266                           ; 1 bytes @ 0x15
  6267  000043                     	ds	2
  6268  000045                     ??_USBStdFeatureReqHandler:
  6269  000045                     USBStdSetCfgHandler@i:
  6270                           	opt stack 0
  6271                           
  6272                           ; 1 bytes @ 0x17
  6273  000045                     	ds	1
  6274  000046                     USBStdFeatureReqHandler@pUEP:
  6275                           	opt stack 0
  6276                           
  6277                           ; 2 bytes @ 0x18
  6278  000046                     	ds	2
  6279  000048                     USBStdFeatureReqHandler@current_ep_data:
  6280                           	opt stack 0
  6281                           
  6282                           ; 1 bytes @ 0x1A
  6283  000048                     	ds	1
  6284  000049                     USBStdFeatureReqHandler@p:
  6285                           	opt stack 0
  6286                           
  6287                           ; 2 bytes @ 0x1B
  6288  000049                     	ds	2
  6289  00004B                     ??_USBCtrlEPService:
  6290  00004B                     
  6291                           ; 1 bytes @ 0x1D
  6292  00004B                     	ds	1
  6293  00004C                     USBDeviceTasks@i:
  6294                           	opt stack 0
  6295                           
  6296                           ; 1 bytes @ 0x1E
  6297  00004C                     	ds	1
  6298  00004D                     ??_SYS_InterruptHigh:
  6299                           
  6300                           ; 1 bytes @ 0x1F
  6301  00004D                     	ds	14
  6302                           tblptru	equ	0xFF8
  6303                           tblptrh	equ	0xFF7
  6304                           tblptrl	equ	0xFF6
  6305                           tablat	equ	0xFF5
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           postdec1	equ	0xFE5
  6309                           fsr1h	equ	0xFE2
  6310                           fsr1l	equ	0xFE1
  6311                           
  6312 ;;
  6313 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6314 ;;
  6315 ;; *************** function _main *****************
  6316 ;; Defined at:
  6317 ;;		line 48 in file "main.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;		None
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  tmp             4    0[BANK1 ] float 
  6322 ;;  startup_time    1    0        unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      void 
  6325 ;; Registers used:
  6326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  6332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6333 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6335 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6336 ;;Total ram usage:        4 bytes
  6337 ;; Hardware stack levels required when called:   22
  6338 ;; This function calls:
  6339 ;;		_APP_DeviceCustomHIDTasks
  6340 ;;		_APP_DeviceMSDTasks
  6341 ;;		_SYSTEM_Initialize
  6342 ;;		_USBDeviceAttach
  6343 ;;		_USBDeviceInit
  6344 ;;		___fldiv
  6345 ;;		___flmul
  6346 ;;		___fltol
  6347 ;;		___xxtofl
  6348 ;;		_adc_read_temperature
  6349 ;;		_display_prepare
  6350 ;;		_display_update
  6351 ;;		_encoder_statemachine
  6352 ;;		_motor_process_cue
  6353 ;;		_system_init
  6354 ;; This function is called by:
  6355 ;;		Startup code after reset
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text0
  6360  00F856                     __ptext0:
  6361                           	opt stack 0
  6362  00F856                     _main:
  6363                           	opt stack 9
  6364                           
  6365                           ;main.c: 50: uint8_t startup_timer;;main.c: 51: float tmp;;main.c: 54: system_init();
  6366                           
  6367                           ;incstack = 0
  6368  00F856  EC71  F086         	call	_system_init	;wreg free
  6369                           
  6370                           ;main.c: 56: SYSTEM_Initialize(SYSTEM_STATE_USB_START);
  6371  00F85A  0E00               	movlw	0
  6372  00F85C  EC24  F099         	call	_SYSTEM_Initialize
  6373                           
  6374                           ;main.c: 58: USBDeviceInit();
  6375  00F860  EC9F  F079         	call	_USBDeviceInit	;wreg free
  6376                           
  6377                           ;main.c: 59: USBDeviceAttach();
  6378  00F864  EC2D  F09F         	call	_USBDeviceAttach	;wreg free
  6379  00F868                     
  6380                           ;main.c: 62: {;main.c: 64: APP_DeviceMSDTasks();
  6381  00F868  EC51  F0A1         	call	_APP_DeviceMSDTasks	;wreg free
  6382                           
  6383                           ;main.c: 66: if(!os.done)
  6384  00F86C  0101               	movlb	1	; () banked
  6385  00F86E  5175               	movf	(_os+2)& (0+255),w,b	;volatile
  6386  00F870  A4D8               	btfss	status,2,c
  6387  00F872  D7FA               	goto	l859
  6388                           
  6389                           ; BSR set to: 1
  6390  00F874  0004               	clrwdt		;# 
  6391                           
  6392                           ;main.c: 72: APP_DeviceCustomHIDTasks();
  6393  00F876  ECCE  F090         	call	_APP_DeviceCustomHIDTasks	;wreg free
  6394                           
  6395                           ;main.c: 75: encoder_statemachine();
  6396  00F87A  ECB3  F057         	call	_encoder_statemachine	;wreg free
  6397                           
  6398                           ;main.c: 78: motor_process_cue();
  6399  00F87E  EC88  F095         	call	_motor_process_cue	;wreg free
  6400                           
  6401                           ;main.c: 81: adc_read_temperature();
  6402  00F882  EC1A  F074         	call	_adc_read_temperature	;wreg free
  6403                           
  6404                           ;main.c: 84: switch(os.timeSlot)
  6405  00F886  D073               	goto	l861
  6406  00F888                     
  6407                           ;main.c: 95: tmp = (float) os.current_position_in_steps;
  6408  00F888  C17A  F060         	movff	_os+7,___xxtofl@val	;volatile
  6409  00F88C  C17B  F061         	movff	_os+8,___xxtofl@val+1	;volatile
  6410  00F890  C17C  F062         	movff	_os+9,___xxtofl@val+2	;volatile
  6411  00F894  C17D  F063         	movff	_os+10,___xxtofl@val+3	;volatile
  6412  00F898  0E00               	movlw	0
  6413  00F89A  ECE7  F07A         	call	___xxtofl
  6414  00F89E  C060  F1FB         	movff	?___xxtofl,main@tmp
  6415  00F8A2  C061  F1FC         	movff	?___xxtofl+1,main@tmp+1
  6416  00F8A6  C062  F1FD         	movff	?___xxtofl+2,main@tmp+2
  6417  00F8AA  C063  F1FE         	movff	?___xxtofl+3,main@tmp+3
  6418                           
  6419                           ;main.c: 96: tmp *= 36000;
  6420  00F8AE  C1FB  F06E         	movff	main@tmp,___flmul@b
  6421  00F8B2  C1FC  F06F         	movff	main@tmp+1,___flmul@b+1
  6422  00F8B6  C1FD  F070         	movff	main@tmp+2,___flmul@b+2
  6423  00F8BA  C1FE  F071         	movff	main@tmp+3,___flmul@b+3
  6424  00F8BE  0E00               	movlw	0
  6425  00F8C0  0100               	movlb	0	; () banked
  6426  00F8C2  6F72               	movwf	___flmul@a& (0+255),b
  6427  00F8C4  0EA0               	movlw	160
  6428  00F8C6  6F73               	movwf	(___flmul@a+1)& (0+255),b
  6429  00F8C8  0E0C               	movlw	12
  6430  00F8CA  6F74               	movwf	(___flmul@a+2)& (0+255),b
  6431  00F8CC  0E47               	movlw	71
  6432  00F8CE  6F75               	movwf	(___flmul@a+3)& (0+255),b
  6433  00F8D0  ECE8  F060         	call	___flmul	;wreg free
  6434  00F8D4  C06E  F1FB         	movff	?___flmul,main@tmp
  6435  00F8D8  C06F  F1FC         	movff	?___flmul+1,main@tmp+1
  6436  00F8DC  C070  F1FD         	movff	?___flmul+2,main@tmp+2
  6437  00F8E0  C071  F1FE         	movff	?___flmul+3,main@tmp+3
  6438                           
  6439                           ;main.c: 97: tmp /= config.full_circle_in_steps;
  6440  00F8E4  C1FB  F06E         	movff	main@tmp,___fldiv@b
  6441  00F8E8  C1FC  F06F         	movff	main@tmp+1,___fldiv@b+1
  6442  00F8EC  C1FD  F070         	movff	main@tmp+2,___fldiv@b+2
  6443  00F8F0  C1FE  F071         	movff	main@tmp+3,___fldiv@b+3
  6444  00F8F4  C1A3  F060         	movff	_config,___xxtofl@val
  6445  00F8F8  C1A4  F061         	movff	_config+1,___xxtofl@val+1
  6446  00F8FC  C1A5  F062         	movff	_config+2,___xxtofl@val+2
  6447  00F900  C1A6  F063         	movff	_config+3,___xxtofl@val+3
  6448  00F904  0E00               	movlw	0
  6449  00F906  ECE7  F07A         	call	___xxtofl
  6450  00F90A  C060  F072         	movff	?___xxtofl,___fldiv@a
  6451  00F90E  C061  F073         	movff	?___xxtofl+1,___fldiv@a+1
  6452  00F912  C062  F074         	movff	?___xxtofl+2,___fldiv@a+2
  6453  00F916  C063  F075         	movff	?___xxtofl+3,___fldiv@a+3
  6454  00F91A  ECFD  F069         	call	___fldiv	;wreg free
  6455  00F91E  C06E  F1FB         	movff	?___fldiv,main@tmp
  6456  00F922  C06F  F1FC         	movff	?___fldiv+1,main@tmp+1
  6457  00F926  C070  F1FD         	movff	?___fldiv+2,main@tmp+2
  6458  00F92A  C071  F1FE         	movff	?___fldiv+3,main@tmp+3
  6459                           
  6460                           ;main.c: 99: os.current_position_in_degrees = (uint16_t) tmp;
  6461  00F92E  C1FB  F060         	movff	main@tmp,___fltol@f1
  6462  00F932  C1FC  F061         	movff	main@tmp+1,___fltol@f1+1
  6463  00F936  C1FD  F062         	movff	main@tmp+2,___fltol@f1+2
  6464  00F93A  C1FE  F063         	movff	main@tmp+3,___fltol@f1+3
  6465  00F93E  EC28  F089         	call	___fltol	;wreg free
  6466  00F942  C060  F17E         	movff	?___fltol,_os+11	;volatile
  6467  00F946  C061  F17F         	movff	?___fltol+1,_os+12	;volatile
  6468                           
  6469                           ;main.c: 100: if(os.current_position_in_degrees==36000)
  6470  00F94A  0EA0               	movlw	160
  6471  00F94C  0101               	movlb	1	; () banked
  6472  00F94E  197E               	xorwf	(_os+11)& (0+255),w,b	;volatile
  6473  00F950  E108               	bnz	l23598
  6474  00F952  0E8C               	movlw	140
  6475  00F954  197F               	xorwf	(_os+12)& (0+255),w,b	;volatile
  6476  00F956  A4D8               	btfss	status,2,c
  6477  00F958  D004               	goto	l866
  6478                           
  6479                           ; BSR set to: 1
  6480                           ;main.c: 101: {;main.c: 103: os.current_position_in_degrees = 0;
  6481  00F95A  0E00               	movlw	0
  6482  00F95C  6F7F               	movwf	(_os+12)& (0+255),b	;volatile
  6483  00F95E  0E00               	movlw	0
  6484  00F960  6F7E               	movwf	(_os+11)& (0+255),b	;volatile
  6485  00F962                     l866:
  6486  00F962                     l23598:
  6487                           
  6488                           ; BSR set to: 1
  6489                           ;main.c: 107: display_prepare();
  6490  00F962  EC81  F051         	call	_display_prepare	;wreg free
  6491                           
  6492                           ;main.c: 108: break;
  6493  00F966  D014               	goto	l863
  6494  00F968                     
  6495                           ;main.c: 111: display_update();
  6496  00F968  EC58  F09E         	call	_display_update	;wreg free
  6497                           
  6498                           ;main.c: 113: }
  6499                           
  6500                           ;main.c: 112: break;
  6501  00F96C  D011               	goto	l863
  6502  00F96E                     l861:
  6503  00F96E  0101               	movlb	1	; () banked
  6504  00F970  5174               	movf	(_os+1)& (0+255),w,b	;volatile
  6505                           
  6506                           ; Switch size 1, requested type "space"
  6507                           ; Number of cases is 5, Range of values is 0 to 7
  6508                           ; switch strategies available:
  6509                           ; Name         Instructions Cycles
  6510                           ; simple_byte           16     9 (average)
  6511                           ;	Chosen strategy is simple_byte
  6512  00F972  0A00               	xorlw	0	; case 0
  6513  00F974  B4D8               	btfsc	status,2,c
  6514  00F976  D00C               	goto	l863
  6515  00F978  0A01               	xorlw	1	; case 1
  6516  00F97A  B4D8               	btfsc	status,2,c
  6517  00F97C  D009               	goto	l863
  6518  00F97E  0A04               	xorlw	4	; case 5
  6519  00F980  B4D8               	btfsc	status,2,c
  6520  00F982  D782               	goto	l865
  6521  00F984  0A03               	xorlw	3	; case 6
  6522  00F986  B4D8               	btfsc	status,2,c
  6523  00F988  D7EC               	goto	l866
  6524  00F98A  0A01               	xorlw	1	; case 7
  6525  00F98C  B4D8               	btfsc	status,2,c
  6526  00F98E  D7EC               	goto	l868
  6527  00F990                     l863:
  6528                           
  6529                           ;main.c: 115: os.done = 1;
  6530                           
  6531                           ; BSR set to: 1
  6532  00F990  0E01               	movlw	1
  6533  00F992  0101               	movlb	1	; () banked
  6534  00F994  6F75               	movwf	(_os+2)& (0+255),b	;volatile
  6535                           
  6536                           ; BSR set to: 1
  6537                           
  6538                           ; BSR set to: 1
  6539  00F996  D768               	goto	l859
  6540  00F998                     __end_of_main:
  6541                           	opt stack 0
  6542                           tblptru	equ	0xFF8
  6543                           tblptrh	equ	0xFF7
  6544                           tblptrl	equ	0xFF6
  6545                           tablat	equ	0xFF5
  6546                           postinc0	equ	0xFEE
  6547                           wreg	equ	0xFE8
  6548                           postdec1	equ	0xFE5
  6549                           fsr1h	equ	0xFE2
  6550                           fsr1l	equ	0xFE1
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function _system_init *****************
  6554 ;; Defined at:
  6555 ;;		line 195 in file "os.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;		None
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;		None
  6560 ;; Return value:  Size  Location     Type
  6561 ;;                  1    wreg      void 
  6562 ;; Registers used:
  6563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6564 ;; Tracked objects:
  6565 ;;		On entry : 0/0
  6566 ;;		On exit  : 0/0
  6567 ;;		Unchanged: 0/0
  6568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  6569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6573 ;;Total ram usage:        0 bytes
  6574 ;; Hardware stack levels used:    1
  6575 ;; Hardware stack levels required when called:   19
  6576 ;; This function calls:
  6577 ;;		__backlight_init
  6578 ;;		__system_pin_setup
  6579 ;;		__system_timer0_init
  6580 ;;		_adc_init
  6581 ;;		_configFile_write
  6582 ;;		_display_init
  6583 ;;		_display_update
  6584 ;;		_encoder_init
  6585 ;;		_fat_init
  6586 ;;		_flash_init
  6587 ;;		_i2c_init
  6588 ;;		_motor_init
  6589 ;; This function is called by:
  6590 ;;		_main
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           	psect	text1
  6595  010CE2                     __ptext1:
  6596                           	opt stack 0
  6597  010CE2                     _system_init:
  6598                           	opt stack 11
  6599                           
  6600                           ;os.c: 198: _system_pin_setup();
  6601                           
  6602                           ; BSR set to: 1
  6603                           ;incstack = 0
  6604  010CE2  EC0E  F097         	call	__system_pin_setup	;wreg free
  6605                           
  6606                           ;os.c: 201: adc_init();
  6607  010CE6  EC87  F09A         	call	_adc_init	;wreg free
  6608                           
  6609                           ;os.c: 204: flash_init();
  6610  010CEA  EC72  F0A1         	call	_flash_init	;wreg free
  6611                           
  6612                           ;os.c: 207: fat_init();
  6613  010CEE  EC5A  F0A1         	call	_fat_init	;wreg free
  6614                           
  6615                           ;os.c: 210: encoder_init();
  6616  010CF2  EC8F  F0A0         	call	_encoder_init	;wreg free
  6617                           
  6618                           ;os.c: 213: i2c_init();
  6619  010CF6  EC07  F0A1         	call	_i2c_init	;wreg free
  6620                           
  6621                           ;os.c: 216: display_init();
  6622  010CFA  EC74  F09E         	call	_display_init	;wreg free
  6623                           
  6624                           ;os.c: 217: display_update();
  6625  010CFE  EC58  F09E         	call	_display_update	;wreg free
  6626                           
  6627                           ;os.c: 218: _backlight_init();
  6628  010D02  ECA8  F0A1         	call	__backlight_init	;wreg free
  6629                           
  6630                           ;os.c: 221: motor_init();
  6631  010D06  ECF8  F0A0         	call	_motor_init	;wreg free
  6632                           
  6633                           ;os.c: 224: os.displayState = DISPLAY_STATE_MAIN_SETUP;
  6634  010D0A  0E01               	movlw	1
  6635  010D0C  0101               	movlb	1	; () banked
  6636  010D0E  6F80               	movwf	(_os+13)& (0+255),b	;volatile
  6637                           
  6638                           ; BSR set to: 1
  6639                           ;os.c: 225: os.busy = 0;
  6640  010D10  0E00               	movlw	0
  6641  010D12  6F81               	movwf	(_os+14)& (0+255),b	;volatile
  6642                           
  6643                           ; BSR set to: 1
  6644                           ;os.c: 226: os.current_position_in_steps = 0;
  6645  010D14  0E00               	movlw	0
  6646  010D16  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
  6647  010D18  0E00               	movlw	0
  6648  010D1A  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
  6649  010D1C  0E00               	movlw	0
  6650  010D1E  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
  6651  010D20  0E00               	movlw	0
  6652  010D22  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
  6653                           
  6654                           ; BSR set to: 1
  6655                           ;os.c: 227: os.last_approach_direction = MOTOR_DIRECTION_CW;
  6656  010D24  0E01               	movlw	1
  6657  010D26  6F82               	movwf	(_os+15)& (0+255),b	;volatile
  6658                           
  6659                           ; BSR set to: 1
  6660                           ;os.c: 228: os.setup_step_size = 1000;
  6661  010D28  0E03               	movlw	3
  6662  010D2A  6F84               	movwf	(_os+17)& (0+255),b	;volatile
  6663  010D2C  0EE8               	movlw	232
  6664  010D2E  6F83               	movwf	(_os+16)& (0+255),b	;volatile
  6665                           
  6666                           ; BSR set to: 1
  6667                           ;os.c: 229: os.approach_direction = MOTOR_DIRECTION_CW;
  6668  010D30  0E01               	movlw	1
  6669  010D32  6F85               	movwf	(_os+18)& (0+255),b	;volatile
  6670                           
  6671                           ; BSR set to: 1
  6672                           ;os.c: 230: os.division = 36;
  6673  010D34  0E00               	movlw	0
  6674  010D36  6F87               	movwf	(_os+20)& (0+255),b	;volatile
  6675  010D38  0E24               	movlw	36
  6676  010D3A  6F86               	movwf	(_os+19)& (0+255),b	;volatile
  6677                           
  6678                           ; BSR set to: 1
  6679                           ;os.c: 231: os.divide_step_size = 10;
  6680  010D3C  0E0A               	movlw	10
  6681  010D3E  6F88               	movwf	(_os+21)& (0+255),b	;volatile
  6682                           
  6683                           ; BSR set to: 1
  6684                           ;os.c: 232: os.divide_position = 0;
  6685  010D40  0E00               	movlw	0
  6686  010D42  6F8A               	movwf	(_os+23)& (0+255),b	;volatile
  6687  010D44  0E00               	movlw	0
  6688  010D46  6F89               	movwf	(_os+22)& (0+255),b	;volatile
  6689                           
  6690                           ; BSR set to: 1
  6691                           ;os.c: 233: os.divide_jump_size = 1;
  6692  010D48  0E00               	movlw	0
  6693  010D4A  6F8C               	movwf	(_os+25)& (0+255),b	;volatile
  6694  010D4C  0E01               	movlw	1
  6695  010D4E  6F8B               	movwf	(_os+24)& (0+255),b	;volatile
  6696                           
  6697                           ; BSR set to: 1
  6698                           ;os.c: 234: os.arc_step_size = 1000;
  6699  010D50  0E03               	movlw	3
  6700  010D52  6F8E               	movwf	(_os+27)& (0+255),b	;volatile
  6701  010D54  0EE8               	movlw	232
  6702  010D56  6F8D               	movwf	(_os+26)& (0+255),b	;volatile
  6703                           
  6704                           ; BSR set to: 1
  6705                           ;os.c: 235: os.arc_size = 1000;
  6706  010D58  0EE8               	movlw	232
  6707  010D5A  6F8F               	movwf	(_os+28)& (0+255),b	;volatile
  6708  010D5C  0E03               	movlw	3
  6709  010D5E  6F90               	movwf	(_os+29)& (0+255),b	;volatile
  6710  010D60  0E00               	movlw	0
  6711  010D62  6F91               	movwf	(_os+30)& (0+255),b	;volatile
  6712  010D64  0E00               	movlw	0
  6713  010D66  6F92               	movwf	(_os+31)& (0+255),b	;volatile
  6714                           
  6715                           ; BSR set to: 1
  6716                           ;os.c: 236: os.arc_speed = 30;
  6717  010D68  0E00               	movlw	0
  6718  010D6A  6F94               	movwf	(_os+33)& (0+255),b	;volatile
  6719  010D6C  0E1E               	movlw	30
  6720  010D6E  6F93               	movwf	(_os+32)& (0+255),b	;volatile
  6721                           
  6722                           ; BSR set to: 1
  6723                           ;os.c: 237: os.arc_direction = MOTOR_DIRECTION_CW;
  6724  010D70  0E01               	movlw	1
  6725  010D72  6F95               	movwf	(_os+34)& (0+255),b	;volatile
  6726                           
  6727                           ; BSR set to: 1
  6728                           ;os.c: 238: os.manual_speed = 30;
  6729  010D74  0E00               	movlw	0
  6730  010D76  6F97               	movwf	(_os+36)& (0+255),b	;volatile
  6731  010D78  0E1E               	movlw	30
  6732  010D7A  6F96               	movwf	(_os+35)& (0+255),b	;volatile
  6733                           
  6734                           ; BSR set to: 1
  6735                           ;os.c: 239: os.manual_direction = MOTOR_DIRECTION_CW;
  6736  010D7C  0E01               	movlw	1
  6737  010D7E  6F98               	movwf	(_os+37)& (0+255),b	;volatile
  6738                           
  6739                           ; BSR set to: 1
  6740                           ;os.c: 240: os.beep_count = 0;
  6741  010D80  0E00               	movlw	0
  6742  010D82  6F99               	movwf	(_os+38)& (0+255),b	;volatile
  6743                           
  6744                           ; BSR set to: 1
  6745                           ;os.c: 242: config.full_circle_in_steps = 576000;
  6746  010D84  0E00               	movlw	0
  6747  010D86  6FA3               	movwf	_config& (0+255),b
  6748  010D88  0ECA               	movlw	202
  6749  010D8A  6FA4               	movwf	(_config+1)& (0+255),b
  6750  010D8C  0E08               	movlw	8
  6751  010D8E  6FA5               	movwf	(_config+2)& (0+255),b
  6752  010D90  0E00               	movlw	0
  6753  010D92  6FA6               	movwf	(_config+3)& (0+255),b
  6754                           
  6755                           ; BSR set to: 1
  6756                           ;os.c: 243: config.inverse_direction = 1;
  6757  010D94  0E01               	movlw	1
  6758  010D96  6FA7               	movwf	(_config+4)& (0+255),b
  6759                           
  6760                           ; BSR set to: 1
  6761                           ;os.c: 244: config.overshoot_in_steps = 6400;
  6762  010D98  0E19               	movlw	25
  6763  010D9A  6FA9               	movwf	(_config+6)& (0+255),b
  6764  010D9C  0E00               	movlw	0
  6765  010D9E  6FA8               	movwf	(_config+5)& (0+255),b
  6766                           
  6767                           ; BSR set to: 1
  6768                           ;os.c: 245: config.overshoot_cost_in_steps = 3000;
  6769  010DA0  0E0B               	movlw	11
  6770  010DA2  6FAB               	movwf	(_config+8)& (0+255),b
  6771  010DA4  0EB8               	movlw	184
  6772  010DA6  6FAA               	movwf	(_config+7)& (0+255),b
  6773                           
  6774                           ; BSR set to: 1
  6775                           ;os.c: 246: config.minimum_speed = 1;
  6776  010DA8  0E00               	movlw	0
  6777  010DAA  6FAD               	movwf	(_config+10)& (0+255),b
  6778  010DAC  0E01               	movlw	1
  6779  010DAE  6FAC               	movwf	(_config+9)& (0+255),b
  6780                           
  6781                           ; BSR set to: 1
  6782                           ;os.c: 247: config.maximum_speed = 380;
  6783  010DB0  0E01               	movlw	1
  6784  010DB2  6FAF               	movwf	(_config+12)& (0+255),b
  6785  010DB4  0E7C               	movlw	124
  6786  010DB6  6FAE               	movwf	(_config+11)& (0+255),b
  6787                           
  6788                           ; BSR set to: 1
  6789                           ;os.c: 248: config.maximum_speed_arc = 305;
  6790  010DB8  0E01               	movlw	1
  6791  010DBA  6FB3               	movwf	(_config+16)& (0+255),b
  6792  010DBC  0E31               	movlw	49
  6793  010DBE  6FB2               	movwf	(_config+15)& (0+255),b
  6794                           
  6795                           ; BSR set to: 1
  6796                           ;os.c: 249: config.maximum_speed_manual = 305;
  6797  010DC0  0E01               	movlw	1
  6798  010DC2  6FB7               	movwf	(_config+20)& (0+255),b
  6799  010DC4  0E31               	movlw	49
  6800  010DC6  6FB6               	movwf	(_config+19)& (0+255),b
  6801                           
  6802                           ; BSR set to: 1
  6803                           ;os.c: 250: config.beep_duration = 10;
  6804  010DC8  0E0A               	movlw	10
  6805  010DCA  6FB8               	movwf	(_config+21)& (0+255),b
  6806                           
  6807                           ; BSR set to: 1
  6808                           ;os.c: 253: configFile_write();
  6809  010DCC  ECB5  F065         	call	_configFile_write	;wreg free
  6810                           
  6811                           ;os.c: 256: _system_timer0_init();
  6812  010DD0  ECD4  F09F         	call	__system_timer0_init	;wreg free
  6813  010DD4  0012               	return		;funcret
  6814  010DD6                     __end_of_system_init:
  6815                           	opt stack 0
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           postinc0	equ	0xFEE
  6821                           wreg	equ	0xFE8
  6822                           postdec1	equ	0xFE5
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           status	equ	0xFD8
  6826                           
  6827 ;; *************** function _motor_init *****************
  6828 ;; Defined at:
  6829 ;;		line 153 in file "motor.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;		None
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, status,2
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  6843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6847 ;;Total ram usage:        0 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:   10
  6850 ;; This function calls:
  6851 ;;		Nothing
  6852 ;; This function is called by:
  6853 ;;		_system_init
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text2
  6858  0141F0                     __ptext2:
  6859                           	opt stack 0
  6860  0141F0                     _motor_init:
  6861                           	opt stack 19
  6862                           
  6863                           ;motor.c: 156: motor_cue_read_index = 0;
  6864                           
  6865                           ;incstack = 0
  6866  0141F0  0E00               	movlw	0
  6867  0141F2  0100               	movlb	0	; () banked
  6868  0141F4  6FF3               	movwf	_motor_cue_read_index& (0+255),b
  6869                           
  6870                           ;motor.c: 157: motor_cue_write_index = 0;
  6871  0141F6  0E00               	movlw	0
  6872  0141F8  6FF2               	movwf	_motor_cue_write_index& (0+255),b
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;motor.c: 163: CCPTMRS0bits.C2TSEL = 0b000;
  6876  0141FA  010F               	movlb	15	; () banked
  6877  0141FC  9752               	bcf	82,3,b	;volatile
  6878  0141FE  9952               	bcf	82,4,b	;volatile
  6879  014200  9B52               	bcf	82,5,b	;volatile
  6880                           
  6881                           ;motor.c: 168: CCP1CONbits.P1M = 0b00;
  6882  014202  0E3F               	movlw	-193
  6883  014204  16BA               	andwf	4026,f,c	;volatile
  6884                           
  6885                           ;motor.c: 171: CCP1CONbits.DC1B = 0b00;
  6886  014206  0ECF               	movlw	-49
  6887  014208  16BA               	andwf	4026,f,c	;volatile
  6888                           
  6889                           ; BSR set to: 15
  6890                           ;motor.c: 174: LATBbits.LB0 = 0;
  6891  01420A  908A               	bcf	3978,0,c	;volatile
  6892                           
  6893                           ; BSR set to: 15
  6894  01420C  0012               	return		;funcret
  6895  01420E                     __end_of_motor_init:
  6896                           	opt stack 0
  6897                           tblptru	equ	0xFF8
  6898                           tblptrh	equ	0xFF7
  6899                           tblptrl	equ	0xFF6
  6900                           tablat	equ	0xFF5
  6901                           postinc0	equ	0xFEE
  6902                           wreg	equ	0xFE8
  6903                           postdec1	equ	0xFE5
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           status	equ	0xFD8
  6907                           
  6908 ;; *************** function _i2c_init *****************
  6909 ;; Defined at:
  6910 ;;		line 24 in file "i2c.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;		None
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      void 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6928 ;;Total ram usage:        0 bytes
  6929 ;; Hardware stack levels used:    1
  6930 ;; Hardware stack levels required when called:   10
  6931 ;; This function calls:
  6932 ;;		Nothing
  6933 ;; This function is called by:
  6934 ;;		_system_init
  6935 ;; This function uses a non-reentrant model
  6936 ;;
  6937                           
  6938                           	psect	text3
  6939  01420E                     __ptext3:
  6940                           	opt stack 0
  6941  01420E                     _i2c_init:
  6942                           	opt stack 19
  6943                           
  6944                           ;i2c.c: 26: TRISBbits.TRISB5 = 1;
  6945                           
  6946                           ; BSR set to: 15
  6947                           ;incstack = 0
  6948  01420E  8A93               	bsf	3987,5,c	;volatile
  6949                           
  6950                           ;i2c.c: 27: TRISBbits.TRISB4 = 1;
  6951  014210  8893               	bsf	3987,4,c	;volatile
  6952                           
  6953                           ;i2c.c: 28: SSP1STATbits.SMP = 0;
  6954  014212  9EC7               	bcf	4039,7,c	;volatile
  6955                           
  6956                           ;i2c.c: 29: SSP1STATbits.CKE = 0;
  6957  014214  9CC7               	bcf	4039,6,c	;volatile
  6958                           
  6959                           ;i2c.c: 31: SSP1ADD = 119;
  6960  014216  0E77               	movlw	119
  6961  014218  6EC8               	movwf	4040,c	;volatile
  6962                           
  6963                           ;i2c.c: 33: SSP1CON1bits.WCOL = 0;
  6964  01421A  9EC6               	bcf	4038,7,c	;volatile
  6965                           
  6966                           ;i2c.c: 34: SSP1CON1bits.SSPOV = 0;
  6967  01421C  9CC6               	bcf	4038,6,c	;volatile
  6968                           
  6969                           ;i2c.c: 35: SSP1CON1bits.SSPM = 0b1000;
  6970  01421E  50C6               	movf	4038,w,c	;volatile
  6971  014220  0BF0               	andlw	-16
  6972  014222  0908               	iorlw	8
  6973  014224  6EC6               	movwf	4038,c	;volatile
  6974                           
  6975                           ;i2c.c: 36: SSP1CON1bits.SSPEN = 1;
  6976  014226  8AC6               	bsf	4038,5,c	;volatile
  6977  014228  0012               	return		;funcret
  6978  01422A                     __end_of_i2c_init:
  6979                           	opt stack 0
  6980                           tblptru	equ	0xFF8
  6981                           tblptrh	equ	0xFF7
  6982                           tblptrl	equ	0xFF6
  6983                           tablat	equ	0xFF5
  6984                           postinc0	equ	0xFEE
  6985                           wreg	equ	0xFE8
  6986                           postdec1	equ	0xFE5
  6987                           fsr1h	equ	0xFE2
  6988                           fsr1l	equ	0xFE1
  6989                           status	equ	0xFD8
  6990                           
  6991 ;; *************** function _flash_init *****************
  6992 ;; Defined at:
  6993 ;;		line 361 in file "flash.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;		None
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  7007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7011 ;;Total ram usage:        0 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:   14
  7014 ;; This function calls:
  7015 ;;		__flash_set_page_size
  7016 ;;		_spi_init
  7017 ;; This function is called by:
  7018 ;;		_system_init
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text4
  7023  0142E4                     __ptext4:
  7024                           	opt stack 0
  7025  0142E4                     _flash_init:
  7026                           	opt stack 15
  7027                           
  7028                           ;flash.c: 364: spi_init(SPI_CONFIGURATION_INTERNAL);
  7029                           
  7030                           ;incstack = 0
  7031  0142E4  0E00               	movlw	0
  7032  0142E6  EC66  F09D         	call	_spi_init
  7033                           
  7034                           ;flash.c: 367: _flash_set_page_size(FLASH_PAGE_SIZE_512);
  7035  0142EA  0E00               	movlw	0
  7036  0142EC  EC34  F096         	call	__flash_set_page_size
  7037  0142F0  0012               	return		;funcret
  7038  0142F2                     __end_of_flash_init:
  7039                           	opt stack 0
  7040                           tblptru	equ	0xFF8
  7041                           tblptrh	equ	0xFF7
  7042                           tblptrl	equ	0xFF6
  7043                           tablat	equ	0xFF5
  7044                           postinc0	equ	0xFEE
  7045                           wreg	equ	0xFE8
  7046                           postdec1	equ	0xFE5
  7047                           fsr1h	equ	0xFE2
  7048                           fsr1l	equ	0xFE1
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _spi_init *****************
  7052 ;; Defined at:
  7053 ;;		line 89 in file "spi.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  configuratio    1    wreg     enum E6801
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  configuratio    1    3[BANK0 ] enum E6801
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      void 
  7060 ;; Registers used:
  7061 ;;		wreg, status,2, status,0, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  7067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7071 ;;Total ram usage:        1 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:   11
  7074 ;; This function calls:
  7075 ;;		__spi_init
  7076 ;; This function is called by:
  7077 ;;		_flash_init
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text5
  7082  013ACC                     __ptext5:
  7083                           	opt stack 0
  7084  013ACC                     _spi_init:
  7085                           	opt stack 17
  7086                           
  7087                           ;incstack = 0
  7088                           ;spi_init@configuration stored from wreg
  7089  013ACC  0100               	movlb	0	; () banked
  7090  013ACE  6F63               	movwf	spi_init@configuration& (0+255),b
  7091                           
  7092                           ;spi.c: 91: switch(configuration)
  7093  013AD0  D012               	goto	l2116
  7094  013AD2                     
  7095                           ;spi.c: 94: _spi_init(config_internal);
  7096  013AD2  C159  F060         	movff	_config_internal,__spi_init@details
  7097  013AD6  C15A  F061         	movff	_config_internal+1,__spi_init@details+1
  7098  013ADA  C15B  F062         	movff	_config_internal+2,__spi_init@details+2
  7099  013ADE  EC3C  F09E         	call	__spi_init	;wreg free
  7100                           
  7101                           ;spi.c: 95: break;
  7102  013AE2  D011               	goto	l2118
  7103  013AE4                     
  7104                           ;spi.c: 98: _spi_init(config_external);
  7105  013AE4  C156  F060         	movff	_config_external,__spi_init@details
  7106  013AE8  C157  F061         	movff	_config_external+1,__spi_init@details+1
  7107  013AEC  C158  F062         	movff	_config_external+2,__spi_init@details+2
  7108  013AF0  EC3C  F09E         	call	__spi_init	;wreg free
  7109                           
  7110                           ;spi.c: 100: }
  7111                           
  7112                           ;spi.c: 99: break;
  7113  013AF4  D008               	goto	l2118
  7114  013AF6                     l2116:
  7115  013AF6  0100               	movlb	0	; () banked
  7116  013AF8  5163               	movf	spi_init@configuration& (0+255),w,b
  7117                           
  7118                           ; Switch size 1, requested type "space"
  7119                           ; Number of cases is 2, Range of values is 0 to 1
  7120                           ; switch strategies available:
  7121                           ; Name         Instructions Cycles
  7122                           ; simple_byte            7     4 (average)
  7123                           ;	Chosen strategy is simple_byte
  7124  013AFA  0A00               	xorlw	0	; case 0
  7125  013AFC  B4D8               	btfsc	status,2,c
  7126  013AFE  D7E9               	goto	l2117
  7127  013B00  0A01               	xorlw	1	; case 1
  7128  013B02  B4D8               	btfsc	status,2,c
  7129  013B04  D7EF               	goto	l2119
  7130  013B06                     l2118:
  7131                           
  7132                           ;spi.c: 102: active_configuration = configuration;
  7133  013B06  C063  F170         	movff	spi_init@configuration,_active_configuration
  7134  013B0A  0012               	return		;funcret
  7135  013B0C                     __end_of_spi_init:
  7136                           	opt stack 0
  7137                           tblptru	equ	0xFF8
  7138                           tblptrh	equ	0xFF7
  7139                           tblptrl	equ	0xFF6
  7140                           tablat	equ	0xFF5
  7141                           postinc0	equ	0xFEE
  7142                           wreg	equ	0xFE8
  7143                           postdec1	equ	0xFE5
  7144                           fsr1h	equ	0xFE2
  7145                           fsr1l	equ	0xFE1
  7146                           status	equ	0xFD8
  7147                           
  7148 ;; *************** function __spi_init *****************
  7149 ;; Defined at:
  7150 ;;		line 24 in file "spi.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  details         3    0[BANK0 ] struct .
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;		None
  7155 ;; Return value:  Size  Location     Type
  7156 ;;                  1    wreg      void 
  7157 ;; Registers used:
  7158 ;;		wreg, status,2
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  7164 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7167 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7168 ;;Total ram usage:        3 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:   10
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_spi_init
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           	psect	text6
  7179  013C78                     __ptext6:
  7180                           	opt stack 0
  7181  013C78                     __spi_init:
  7182                           	opt stack 17
  7183                           
  7184                           ;spi.c: 30: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 0;};
  7185                           
  7186                           ;incstack = 0
  7187  013C78  0E55               	movlw	85
  7188  013C7A  6EA7               	movwf	4007,c	;volsfr
  7189  013C7C  0EAA               	movlw	170
  7190  013C7E  6EA7               	movwf	4007,c	;volsfr
  7191  013C80  010E               	movlb	14	; () banked
  7192  013C82  91BF               	bcf	191,0,b	;volatile
  7193                           
  7194                           ;spi.c: 31: RPINR21 = 22;
  7195  013C84  0E16               	movlw	22
  7196  013C86  6FFC               	movwf	252,b	;volatile
  7197                           
  7198                           ;spi.c: 32: RPOR21 = 10;
  7199  013C88  0E0A               	movlw	10
  7200  013C8A  6FD5               	movwf	213,b	;volatile
  7201                           
  7202                           ;spi.c: 34: RPOR23 = 11;
  7203  013C8C  0E0B               	movlw	11
  7204  013C8E  6FD7               	movwf	215,b	;volatile
  7205                           
  7206                           ;spi.c: 35: RPINR22 = 23;
  7207  013C90  0E17               	movlw	23
  7208  013C92  6FFD               	movwf	253,b	;volatile
  7209                           
  7210                           ;spi.c: 36: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 1;};
  7211  013C94  0E55               	movlw	85
  7212  013C96  6EA7               	movwf	4007,c	;volsfr
  7213  013C98  0EAA               	movlw	170
  7214  013C9A  6EA7               	movwf	4007,c	;volsfr
  7215                           
  7216                           ; BSR set to: 14
  7217  013C9C  81BF               	bsf	191,0,b	;volatile
  7218                           
  7219                           ; BSR set to: 14
  7220                           ;spi.c: 39: SSP2STATbits.SMP = 1;
  7221  013C9E  8E73               	bsf	3955,7,c	;volatile
  7222                           
  7223                           ; BSR set to: 14
  7224                           ;spi.c: 40: SSP2STATbits.CKE = 1;
  7225  013CA0  8C73               	bsf	3955,6,c	;volatile
  7226                           
  7227                           ; BSR set to: 14
  7228                           ;spi.c: 41: SSP2CON1bits.CKP = 0;
  7229  013CA2  9872               	bcf	3954,4,c	;volatile
  7230                           
  7231                           ; BSR set to: 14
  7232                           ;spi.c: 42: SSP2CON1bits.SSPM =0b0000;
  7233  013CA4  9072               	bcf	3954,0,c	;volatile
  7234  013CA6  9272               	bcf	3954,1,c	;volatile
  7235  013CA8  9472               	bcf	3954,2,c	;volatile
  7236  013CAA  9672               	bcf	3954,3,c	;volatile
  7237                           
  7238                           ; BSR set to: 14
  7239                           ;spi.c: 43: SSP2CON1bits.SSPEN = 1;
  7240  013CAC  8A72               	bsf	3954,5,c	;volatile
  7241                           
  7242                           ; BSR set to: 14
  7243  013CAE  0012               	return		;funcret
  7244  013CB0                     __end_of__spi_init:
  7245                           	opt stack 0
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           postinc0	equ	0xFEE
  7251                           wreg	equ	0xFE8
  7252                           postdec1	equ	0xFE5
  7253                           fsr1h	equ	0xFE2
  7254                           fsr1l	equ	0xFE1
  7255                           status	equ	0xFD8
  7256                           
  7257 ;; *************** function __flash_set_page_size *****************
  7258 ;; Defined at:
  7259 ;;		line 99 in file "flash.c"
  7260 ;; Parameters:    Size  Location     Type
  7261 ;;  size            1    wreg     enum E6970
  7262 ;; Auto vars:     Size  Location     Type
  7263 ;;  size            1   23[BANK0 ] enum E6970
  7264 ;;  command         4   19[BANK0 ] unsigned char [4]
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      void 
  7267 ;; Registers used:
  7268 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  7274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7275 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7277 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7278 ;;Total ram usage:        5 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:   13
  7281 ;; This function calls:
  7282 ;;		__flash_is_busy
  7283 ;;		_memcpy
  7284 ;;		_spi_tx
  7285 ;; This function is called by:
  7286 ;;		_flash_init
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           	psect	text7
  7291  012C68                     __ptext7:
  7292                           	opt stack 0
  7293  012C68                     __flash_set_page_size:
  7294                           	opt stack 15
  7295                           
  7296                           ; BSR set to: 14
  7297                           ;incstack = 0
  7298                           ;__flash_set_page_size@size stored from wreg
  7299  012C68  0100               	movlb	0	; () banked
  7300  012C6A  6F77               	movwf	__flash_set_page_size@size& (0+255),b
  7301  012C6C                     
  7302                           ;flash.c: 101: uint8_t command[4];;flash.c: 104: while(_flash_is_busy());
  7303  012C6C  ECB3  F0A0         	call	__flash_is_busy	;wreg free
  7304  012C70  0900               	iorlw	0
  7305  012C72  A4D8               	btfss	status,2,c
  7306  012C74  D7FB               	goto	l20910
  7307                           
  7308                           ;flash.c: 107: if(size==FLASH_PAGE_SIZE_512)
  7309  012C76  0100               	movlb	0	; () banked
  7310  012C78  5177               	movf	__flash_set_page_size@size& (0+255),w,b
  7311  012C7A  A4D8               	btfss	status,2,c
  7312  012C7C  D00E               	goto	l1474
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;flash.c: 108: memcpy(command, flash_command_pagesize_512, 4);
  7316  012C7E  0E73               	movlw	low __flash_set_page_size@command
  7317  012C80  6F60               	movwf	memcpy@d1& (0+255),b
  7318  012C82  0E00               	movlw	high __flash_set_page_size@command
  7319  012C84  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7320  012C86  0EB3               	movlw	low _flash_command_pagesize_512
  7321  012C88  6F62               	movwf	memcpy@s1& (0+255),b
  7322  012C8A  0EA2               	movlw	high _flash_command_pagesize_512
  7323  012C8C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  7324  012C8E  0E00               	movlw	0
  7325  012C90  6F65               	movwf	(memcpy@n+1)& (0+255),b
  7326  012C92  0E04               	movlw	4
  7327  012C94  6F64               	movwf	memcpy@n& (0+255),b
  7328  012C96  EC3C  F098         	call	_memcpy	;wreg free
  7329  012C9A                     l1474:
  7330                           
  7331                           ;flash.c: 109: if(size==FLASH_PAGE_SIZE_528)
  7332  012C9A  0100               	movlb	0	; () banked
  7333  012C9C  0577               	decf	__flash_set_page_size@size& (0+255),w,b
  7334  012C9E  A4D8               	btfss	status,2,c
  7335  012CA0  D00E               	goto	l1475
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;flash.c: 110: memcpy(command, flash_command_pagesize_528, 4);
  7339  012CA2  0E73               	movlw	low __flash_set_page_size@command
  7340  012CA4  6F60               	movwf	memcpy@d1& (0+255),b
  7341  012CA6  0E00               	movlw	high __flash_set_page_size@command
  7342  012CA8  6F61               	movwf	(memcpy@d1+1)& (0+255),b
  7343  012CAA  0EAF               	movlw	low _flash_command_pagesize_528
  7344  012CAC  6F62               	movwf	memcpy@s1& (0+255),b
  7345  012CAE  0EA2               	movlw	high _flash_command_pagesize_528
  7346  012CB0  6F63               	movwf	(memcpy@s1+1)& (0+255),b
  7347  012CB2  0E00               	movlw	0
  7348  012CB4  6F65               	movwf	(memcpy@n+1)& (0+255),b
  7349  012CB6  0E04               	movlw	4
  7350  012CB8  6F64               	movwf	memcpy@n& (0+255),b
  7351  012CBA  EC3C  F098         	call	_memcpy	;wreg free
  7352  012CBE                     l1475:
  7353                           
  7354                           ;flash.c: 113: spi_tx(command, 4);
  7355  012CBE  0E73               	movlw	low __flash_set_page_size@command
  7356  012CC0  0100               	movlb	0	; () banked
  7357  012CC2  6F60               	movwf	spi_tx@data& (0+255),b
  7358  012CC4  0E00               	movlw	high __flash_set_page_size@command
  7359  012CC6  6F61               	movwf	(spi_tx@data+1)& (0+255),b
  7360  012CC8  0E00               	movlw	0
  7361  012CCA  6F63               	movwf	(spi_tx@length+1)& (0+255),b
  7362  012CCC  0E04               	movlw	4
  7363  012CCE  6F62               	movwf	spi_tx@length& (0+255),b
  7364  012CD0  EC7E  F099         	call	_spi_tx	;wreg free
  7365  012CD4  0012               	return		;funcret
  7366  012CD6                     __end_of__flash_set_page_size:
  7367                           	opt stack 0
  7368                           tblptru	equ	0xFF8
  7369                           tblptrh	equ	0xFF7
  7370                           tblptrl	equ	0xFF6
  7371                           tablat	equ	0xFF5
  7372                           postinc0	equ	0xFEE
  7373                           wreg	equ	0xFE8
  7374                           postdec1	equ	0xFE5
  7375                           fsr1h	equ	0xFE2
  7376                           fsr1l	equ	0xFE1
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function _fat_init *****************
  7380 ;; Defined at:
  7381 ;;		line 1382 in file "fat16.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;		None
  7384 ;; Auto vars:     Size  Location     Type
  7385 ;;		None
  7386 ;; Return value:  Size  Location     Type
  7387 ;;                  1    wreg      void 
  7388 ;; Registers used:
  7389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7390 ;; Tracked objects:
  7391 ;;		On entry : 0/0
  7392 ;;		On exit  : 0/0
  7393 ;;		Unchanged: 0/0
  7394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  7395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7399 ;;Total ram usage:        0 bytes
  7400 ;; Hardware stack levels used:    1
  7401 ;; Hardware stack levels required when called:   16
  7402 ;; This function calls:
  7403 ;;		_fat_format
  7404 ;;		_fat_get_format_status
  7405 ;; This function is called by:
  7406 ;;		_system_init
  7407 ;; This function uses a non-reentrant model
  7408 ;;
  7409                           
  7410                           	psect	text8
  7411  0142B4                     __ptext8:
  7412                           	opt stack 0
  7413  0142B4                     _fat_init:
  7414                           	opt stack 13
  7415                           
  7416                           ;fat16.c: 1385: if(fat_get_format_status()==DRIVE_NOT_FORMATED)
  7417                           
  7418                           ;incstack = 0
  7419  0142B4  EC20  F08F         	call	_fat_get_format_status	;wreg free
  7420  0142B8  0900               	iorlw	0
  7421  0142BA  A4D8               	btfss	status,2,c
  7422  0142BC  0012               	return	
  7423                           
  7424                           ;fat16.c: 1386: {;fat16.c: 1387: fat_format();
  7425  0142BE  EC29  F071         	call	_fat_format	;wreg free
  7426  0142C2  0012               	return	
  7427  0142C4                     __end_of_fat_init:
  7428                           	opt stack 0
  7429                           tblptru	equ	0xFF8
  7430                           tblptrh	equ	0xFF7
  7431                           tblptrl	equ	0xFF6
  7432                           tablat	equ	0xFF5
  7433                           postinc0	equ	0xFEE
  7434                           wreg	equ	0xFE8
  7435                           postdec1	equ	0xFE5
  7436                           fsr1h	equ	0xFE2
  7437                           fsr1l	equ	0xFE1
  7438                           status	equ	0xFD8
  7439                           
  7440 ;; *************** function _fat_get_format_status *****************
  7441 ;; Defined at:
  7442 ;;		line 1292 in file "fat16.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;		None
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;  cntr            2   45[BANK0 ] unsigned int 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      enum E6944
  7449 ;; Registers used:
  7450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  7456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7458 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7459 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7460 ;;Total ram usage:        4 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:   15
  7463 ;; This function calls:
  7464 ;;		__get_fbr
  7465 ;;		__get_mbr
  7466 ;;		_flash_sector_read
  7467 ;; This function is called by:
  7468 ;;		_fat_init
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text9
  7473  011E40                     __ptext9:
  7474                           	opt stack 0
  7475  011E40                     _fat_get_format_status:
  7476                           	opt stack 13
  7477                           
  7478                           ;fat16.c: 1294: uint16_t cntr;;fat16.c: 1297: flash_sector_read(0, buffer);
  7479                           
  7480                           ;incstack = 0
  7481  011E40  0E00               	movlw	0
  7482  011E42  0100               	movlb	0	; () banked
  7483  011E44  6F88               	movwf	(flash_sector_read@page+1)& (0+255),b
  7484  011E46  0E00               	movlw	0
  7485  011E48  6F87               	movwf	flash_sector_read@page& (0+255),b
  7486  011E4A  0E00               	movlw	low _buffer
  7487  011E4C  6F89               	movwf	flash_sector_read@data& (0+255),b
  7488  011E4E  0E0A               	movlw	high _buffer
  7489  011E50  6F8A               	movwf	(flash_sector_read@data+1)& (0+255),b
  7490  011E52  EC68  F0A0         	call	_flash_sector_read	;wreg free
  7491                           
  7492                           ;fat16.c: 1298: for(cntr=0; cntr<512; ++cntr)
  7493  011E56  0E00               	movlw	0
  7494  011E58  0100               	movlb	0	; () banked
  7495  011E5A  6F8E               	movwf	(fat_get_format_status@cntr+1)& (0+255),b
  7496  011E5C  0E00               	movlw	0
  7497  011E5E  6F8D               	movwf	fat_get_format_status@cntr& (0+255),b
  7498  011E60                     l21070:
  7499                           
  7500                           ; BSR set to: 0
  7501  011E60  0E02               	movlw	2
  7502  011E62  5D8E               	subwf	(fat_get_format_status@cntr+1)& (0+255),w,b
  7503  011E64  B0D8               	btfsc	status,0,c
  7504  011E66  D017               	goto	u21010
  7505                           
  7506                           ; BSR set to: 0
  7507                           ;fat16.c: 1299: {;fat16.c: 1300: if(buffer[cntr] != _get_mbr(cntr))
  7508                           
  7509                           ; BSR set to: 0
  7510                           
  7511                           ; BSR set to: 0
  7512  011E68  0E00               	movlw	low _buffer
  7513  011E6A  258D               	addwf	fat_get_format_status@cntr& (0+255),w,b
  7514  011E6C  6ED9               	movwf	fsr2l,c
  7515  011E6E  0E0A               	movlw	high _buffer
  7516  011E70  218E               	addwfc	(fat_get_format_status@cntr+1)& (0+255),w,b
  7517  011E72  6EDA               	movwf	fsr2h,c
  7518  011E74  C08D  F060         	movff	fat_get_format_status@cntr,__get_mbr@idx
  7519  011E78  C08E  F061         	movff	fat_get_format_status@cntr+1,__get_mbr@idx+1
  7520  011E7C  ECE0  F08A         	call	__get_mbr	;wreg free
  7521  011E80  0100               	movlb	0	; () banked
  7522  011E82  6F8C               	movwf	(??_fat_get_format_status+1)& (0+255),b
  7523  011E84  50DE               	movf	postinc2,w,c
  7524  011E86  198C               	xorwf	(??_fat_get_format_status+1)& (0+255),w,b
  7525  011E88  B4D8               	btfsc	status,2,c
  7526  011E8A  D002               	goto	l1998
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;fat16.c: 1301: {;fat16.c: 1302: return DRIVE_NOT_FORMATED;
  7530  011E8C  0E00               	movlw	0
  7531                           
  7532                           ; BSR set to: 0
  7533  011E8E  0012               	return	
  7534  011E90                     l1998:
  7535                           
  7536                           ; BSR set to: 0
  7537                           
  7538                           ; BSR set to: 0
  7539  011E90  4B8D               	infsnz	fat_get_format_status@cntr& (0+255),f,b
  7540  011E92  2B8E               	incf	(fat_get_format_status@cntr+1)& (0+255),f,b
  7541  011E94  D7E5               	goto	l21070
  7542  011E96                     u21010:
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;fat16.c: 1303: };fat16.c: 1304: };fat16.c: 1307: flash_sector_read(1, buffer);
  7546                           
  7547                           ; BSR set to: 0
  7548  011E96  0E00               	movlw	0
  7549  011E98  6F88               	movwf	(flash_sector_read@page+1)& (0+255),b
  7550  011E9A  0E01               	movlw	1
  7551  011E9C  6F87               	movwf	flash_sector_read@page& (0+255),b
  7552  011E9E  0E00               	movlw	low _buffer
  7553  011EA0  6F89               	movwf	flash_sector_read@data& (0+255),b
  7554  011EA2  0E0A               	movlw	high _buffer
  7555  011EA4  6F8A               	movwf	(flash_sector_read@data+1)& (0+255),b
  7556  011EA6  EC68  F0A0         	call	_flash_sector_read	;wreg free
  7557                           
  7558                           ;fat16.c: 1308: for(cntr=0; cntr<512; ++cntr)
  7559  011EAA  0E00               	movlw	0
  7560  011EAC  0100               	movlb	0	; () banked
  7561  011EAE  6F8E               	movwf	(fat_get_format_status@cntr+1)& (0+255),b
  7562  011EB0  0E00               	movlw	0
  7563  011EB2  6F8D               	movwf	fat_get_format_status@cntr& (0+255),b
  7564  011EB4                     l21088:
  7565                           
  7566                           ; BSR set to: 0
  7567  011EB4  0E02               	movlw	2
  7568  011EB6  5D8E               	subwf	(fat_get_format_status@cntr+1)& (0+255),w,b
  7569  011EB8  B0D8               	btfsc	status,0,c
  7570  011EBA  D017               	goto	u21040
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;fat16.c: 1309: {;fat16.c: 1310: if(buffer[cntr] != _get_fbr(cntr))
  7574                           
  7575                           ; BSR set to: 0
  7576                           
  7577                           ; BSR set to: 0
  7578  011EBC  0E00               	movlw	low _buffer
  7579  011EBE  258D               	addwf	fat_get_format_status@cntr& (0+255),w,b
  7580  011EC0  6ED9               	movwf	fsr2l,c
  7581  011EC2  0E0A               	movlw	high _buffer
  7582  011EC4  218E               	addwfc	(fat_get_format_status@cntr+1)& (0+255),w,b
  7583  011EC6  6EDA               	movwf	fsr2h,c
  7584  011EC8  C08D  F060         	movff	fat_get_format_status@cntr,__get_fbr@idx
  7585  011ECC  C08E  F061         	movff	fat_get_format_status@cntr+1,__get_fbr@idx+1
  7586  011ED0  EC96  F06C         	call	__get_fbr	;wreg free
  7587  011ED4  0100               	movlb	0	; () banked
  7588  011ED6  6F8C               	movwf	(??_fat_get_format_status+1)& (0+255),b
  7589  011ED8  50DE               	movf	postinc2,w,c
  7590  011EDA  198C               	xorwf	(??_fat_get_format_status+1)& (0+255),w,b
  7591  011EDC  B4D8               	btfsc	status,2,c
  7592  011EDE  D002               	goto	l2002
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;fat16.c: 1311: {;fat16.c: 1312: return DRIVE_NOT_FORMATED;
  7596  011EE0  0E00               	movlw	0
  7597                           
  7598                           ; BSR set to: 0
  7599  011EE2  0012               	return	
  7600  011EE4                     l2002:
  7601                           
  7602                           ; BSR set to: 0
  7603                           
  7604                           ; BSR set to: 0
  7605  011EE4  4B8D               	infsnz	fat_get_format_status@cntr& (0+255),f,b
  7606  011EE6  2B8E               	incf	(fat_get_format_status@cntr+1)& (0+255),f,b
  7607  011EE8  D7E5               	goto	l21088
  7608  011EEA                     u21040:
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;fat16.c: 1313: };fat16.c: 1314: };fat16.c: 1317: return DRIVE_FORMATED;
  7612                           
  7613                           ; BSR set to: 0
  7614  011EEA  0E01               	movlw	1
  7615  011EEC  0012               	return	
  7616  011EEE                     __end_of_fat_get_format_status:
  7617                           	opt stack 0
  7618                           tblptru	equ	0xFF8
  7619                           tblptrh	equ	0xFF7
  7620                           tblptrl	equ	0xFF6
  7621                           tablat	equ	0xFF5
  7622                           postinc0	equ	0xFEE
  7623                           wreg	equ	0xFE8
  7624                           postdec1	equ	0xFE5
  7625                           fsr1h	equ	0xFE2
  7626                           fsr1l	equ	0xFE1
  7627                           postinc2	equ	0xFDE
  7628                           fsr2h	equ	0xFDA
  7629                           fsr2l	equ	0xFD9
  7630                           status	equ	0xFD8
  7631                           
  7632 ;; *************** function _fat_format *****************
  7633 ;; Defined at:
  7634 ;;		line 1320 in file "fat16.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;		None
  7637 ;; Auto vars:     Size  Location     Type
  7638 ;;  cntr            2   36[BANK0 ] unsigned int 
  7639 ;; Return value:  Size  Location     Type
  7640 ;;                  1    wreg      unsigned char 
  7641 ;; Registers used:
  7642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7643 ;; Tracked objects:
  7644 ;;		On entry : 0/0
  7645 ;;		On exit  : 0/0
  7646 ;;		Unchanged: 0/0
  7647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  7648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7649 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7651 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7652 ;;Total ram usage:        2 bytes
  7653 ;; Hardware stack levels used:    1
  7654 ;; Hardware stack levels required when called:   15
  7655 ;; This function calls:
  7656 ;;		__get_data
  7657 ;;		__get_fat
  7658 ;;		__get_fbr
  7659 ;;		__get_mbr
  7660 ;;		__get_root
  7661 ;;		_flash_sector_write
  7662 ;; This function is called by:
  7663 ;;		_fat_init
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text10
  7668  00E252                     __ptext10:
  7669                           	opt stack 0
  7670  00E252                     _fat_format:
  7671                           	opt stack 13
  7672                           
  7673                           ;fat16.c: 1322: uint16_t cntr;;fat16.c: 1325: for(cntr=0; cntr<512; ++cntr)
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;incstack = 0
  7677  00E252  0E00               	movlw	0
  7678  00E254  0100               	movlb	0	; () banked
  7679  00E256  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7680  00E258  0E00               	movlw	0
  7681  00E25A  6F84               	movwf	fat_format@cntr& (0+255),b
  7682  00E25C                     l21108:
  7683                           
  7684                           ; BSR set to: 0
  7685  00E25C  0E02               	movlw	2
  7686  00E25E  5D85               	subwf	(fat_format@cntr+1)& (0+255),w,b
  7687  00E260  B0D8               	btfsc	status,0,c
  7688  00E262  D011               	goto	u21060
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;fat16.c: 1326: {;fat16.c: 1327: buffer[cntr] = _get_mbr(cntr);
  7692                           
  7693                           ; BSR set to: 0
  7694                           
  7695                           ; BSR set to: 0
  7696  00E264  0E00               	movlw	low _buffer
  7697  00E266  2584               	addwf	fat_format@cntr& (0+255),w,b
  7698  00E268  6ED9               	movwf	fsr2l,c
  7699  00E26A  0E0A               	movlw	high _buffer
  7700  00E26C  2185               	addwfc	(fat_format@cntr+1)& (0+255),w,b
  7701  00E26E  6EDA               	movwf	fsr2h,c
  7702  00E270  C084  F060         	movff	fat_format@cntr,__get_mbr@idx
  7703  00E274  C085  F061         	movff	fat_format@cntr+1,__get_mbr@idx+1
  7704  00E278  ECE0  F08A         	call	__get_mbr	;wreg free
  7705  00E27C  6EDF               	movwf	indf2,c
  7706  00E27E  0100               	movlb	0	; () banked
  7707  00E280  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  7708  00E282  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  7709  00E284  D7EB               	goto	l21108
  7710  00E286                     u21060:
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;fat16.c: 1328: };fat16.c: 1329: flash_sector_write(0, buffer);
  7714                           
  7715                           ; BSR set to: 0
  7716  00E286  0E00               	movlw	0
  7717  00E288  6F80               	movwf	(flash_sector_write@page+1)& (0+255),b
  7718  00E28A  0E00               	movlw	0
  7719  00E28C  6F7F               	movwf	flash_sector_write@page& (0+255),b
  7720  00E28E  0E00               	movlw	low _buffer
  7721  00E290  6F81               	movwf	flash_sector_write@data& (0+255),b
  7722  00E292  0E0A               	movlw	high _buffer
  7723  00E294  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
  7724  00E296  ECFE  F09B         	call	_flash_sector_write	;wreg free
  7725                           
  7726                           ;fat16.c: 1332: for(cntr=0; cntr<512; ++cntr)
  7727  00E29A  0E00               	movlw	0
  7728  00E29C  0100               	movlb	0	; () banked
  7729  00E29E  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7730  00E2A0  0E00               	movlw	0
  7731  00E2A2  6F84               	movwf	fat_format@cntr& (0+255),b
  7732  00E2A4                     l21122:
  7733                           
  7734                           ; BSR set to: 0
  7735  00E2A4  0E02               	movlw	2
  7736  00E2A6  5D85               	subwf	(fat_format@cntr+1)& (0+255),w,b
  7737  00E2A8  B0D8               	btfsc	status,0,c
  7738  00E2AA  D011               	goto	u21080
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;fat16.c: 1333: {;fat16.c: 1334: buffer[cntr] = _get_fbr(cntr);
  7742                           
  7743                           ; BSR set to: 0
  7744                           
  7745                           ; BSR set to: 0
  7746  00E2AC  0E00               	movlw	low _buffer
  7747  00E2AE  2584               	addwf	fat_format@cntr& (0+255),w,b
  7748  00E2B0  6ED9               	movwf	fsr2l,c
  7749  00E2B2  0E0A               	movlw	high _buffer
  7750  00E2B4  2185               	addwfc	(fat_format@cntr+1)& (0+255),w,b
  7751  00E2B6  6EDA               	movwf	fsr2h,c
  7752  00E2B8  C084  F060         	movff	fat_format@cntr,__get_fbr@idx
  7753  00E2BC  C085  F061         	movff	fat_format@cntr+1,__get_fbr@idx+1
  7754  00E2C0  EC96  F06C         	call	__get_fbr	;wreg free
  7755  00E2C4  6EDF               	movwf	indf2,c
  7756  00E2C6  0100               	movlb	0	; () banked
  7757  00E2C8  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  7758  00E2CA  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  7759  00E2CC  D7EB               	goto	l21122
  7760  00E2CE                     u21080:
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;fat16.c: 1335: };fat16.c: 1336: flash_sector_write(1, buffer);
  7764                           
  7765                           ; BSR set to: 0
  7766  00E2CE  0E00               	movlw	0
  7767  00E2D0  6F80               	movwf	(flash_sector_write@page+1)& (0+255),b
  7768  00E2D2  0E01               	movlw	1
  7769  00E2D4  6F7F               	movwf	flash_sector_write@page& (0+255),b
  7770  00E2D6  0E00               	movlw	low _buffer
  7771  00E2D8  6F81               	movwf	flash_sector_write@data& (0+255),b
  7772  00E2DA  0E0A               	movlw	high _buffer
  7773  00E2DC  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
  7774  00E2DE  ECFE  F09B         	call	_flash_sector_write	;wreg free
  7775                           
  7776                           ;fat16.c: 1339: for(cntr=0; cntr<512; ++cntr)
  7777  00E2E2  0E00               	movlw	0
  7778  00E2E4  0100               	movlb	0	; () banked
  7779  00E2E6  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7780  00E2E8  0E00               	movlw	0
  7781  00E2EA  6F84               	movwf	fat_format@cntr& (0+255),b
  7782  00E2EC                     l21136:
  7783                           
  7784                           ; BSR set to: 0
  7785  00E2EC  0E02               	movlw	2
  7786  00E2EE  5D85               	subwf	(fat_format@cntr+1)& (0+255),w,b
  7787  00E2F0  B0D8               	btfsc	status,0,c
  7788  00E2F2  D011               	goto	u21100
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;fat16.c: 1340: {;fat16.c: 1341: buffer[cntr] = _get_fat(cntr);
  7792                           
  7793                           ; BSR set to: 0
  7794                           
  7795                           ; BSR set to: 0
  7796  00E2F4  0E00               	movlw	low _buffer
  7797  00E2F6  2584               	addwf	fat_format@cntr& (0+255),w,b
  7798  00E2F8  6ED9               	movwf	fsr2l,c
  7799  00E2FA  0E0A               	movlw	high _buffer
  7800  00E2FC  2185               	addwfc	(fat_format@cntr+1)& (0+255),w,b
  7801  00E2FE  6EDA               	movwf	fsr2h,c
  7802  00E300  C084  F060         	movff	fat_format@cntr,__get_fat@idx
  7803  00E304  C085  F061         	movff	fat_format@cntr+1,__get_fat@idx+1
  7804  00E308  ECD7  F099         	call	__get_fat	;wreg free
  7805  00E30C  6EDF               	movwf	indf2,c
  7806  00E30E  0100               	movlb	0	; () banked
  7807  00E310  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  7808  00E312  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  7809  00E314  D7EB               	goto	l21136
  7810  00E316                     u21100:
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;fat16.c: 1342: };fat16.c: 1343: flash_sector_write(2, buffer);
  7814                           
  7815                           ; BSR set to: 0
  7816  00E316  0E00               	movlw	0
  7817  00E318  6F80               	movwf	(flash_sector_write@page+1)& (0+255),b
  7818  00E31A  0E02               	movlw	2
  7819  00E31C  6F7F               	movwf	flash_sector_write@page& (0+255),b
  7820  00E31E  0E00               	movlw	low _buffer
  7821  00E320  6F81               	movwf	flash_sector_write@data& (0+255),b
  7822  00E322  0E0A               	movlw	high _buffer
  7823  00E324  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
  7824  00E326  ECFE  F09B         	call	_flash_sector_write	;wreg free
  7825                           
  7826                           ;fat16.c: 1346: for(cntr=0; cntr<512; ++cntr)
  7827  00E32A  0E00               	movlw	0
  7828  00E32C  0100               	movlb	0	; () banked
  7829  00E32E  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7830  00E330  0E00               	movlw	0
  7831  00E332  6F84               	movwf	fat_format@cntr& (0+255),b
  7832  00E334                     l21150:
  7833                           
  7834                           ; BSR set to: 0
  7835  00E334  0E02               	movlw	2
  7836  00E336  5D85               	subwf	(fat_format@cntr+1)& (0+255),w,b
  7837  00E338  B0D8               	btfsc	status,0,c
  7838  00E33A  D00B               	goto	u21120
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;fat16.c: 1347: {;fat16.c: 1348: buffer[cntr] = 0x00;
  7842                           
  7843                           ; BSR set to: 0
  7844                           
  7845                           ; BSR set to: 0
  7846  00E33C  0E00               	movlw	low _buffer
  7847  00E33E  2584               	addwf	fat_format@cntr& (0+255),w,b
  7848  00E340  6ED9               	movwf	fsr2l,c
  7849  00E342  0E0A               	movlw	high _buffer
  7850  00E344  2185               	addwfc	(fat_format@cntr+1)& (0+255),w,b
  7851  00E346  6EDA               	movwf	fsr2h,c
  7852  00E348  0E00               	movlw	0
  7853  00E34A  6EDF               	movwf	indf2,c
  7854                           
  7855                           ; BSR set to: 0
  7856  00E34C  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  7857  00E34E  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  7858  00E350  D7F1               	goto	l21150
  7859  00E352                     u21120:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;fat16.c: 1349: };fat16.c: 1350: for(cntr=2+1; cntr<=33; ++cntr)
  7863                           
  7864                           ; BSR set to: 0
  7865  00E352  0E00               	movlw	0
  7866  00E354  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7867  00E356  0E03               	movlw	3
  7868  00E358  6F84               	movwf	fat_format@cntr& (0+255),b
  7869  00E35A                     l21162:
  7870                           
  7871                           ; BSR set to: 0
  7872  00E35A  5185               	movf	(fat_format@cntr+1)& (0+255),w,b
  7873  00E35C  E112               	bnz	l21172
  7874  00E35E  0E22               	movlw	34
  7875  00E360  5D84               	subwf	fat_format@cntr& (0+255),w,b
  7876  00E362  B0D8               	btfsc	status,0,c
  7877  00E364  D00E               	goto	u21140
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;fat16.c: 1351: {;fat16.c: 1352: flash_sector_write(cntr, buffer);
  7881                           
  7882                           ; BSR set to: 0
  7883                           
  7884                           ; BSR set to: 0
  7885  00E366  C084  F07F         	movff	fat_format@cntr,flash_sector_write@page
  7886  00E36A  C085  F080         	movff	fat_format@cntr+1,flash_sector_write@page+1
  7887  00E36E  0E00               	movlw	low _buffer
  7888  00E370  6F81               	movwf	flash_sector_write@data& (0+255),b
  7889  00E372  0E0A               	movlw	high _buffer
  7890  00E374  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
  7891  00E376  ECFE  F09B         	call	_flash_sector_write	;wreg free
  7892  00E37A  0100               	movlb	0	; () banked
  7893  00E37C  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  7894  00E37E  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  7895  00E380  D7EC               	goto	l21162
  7896  00E382                     u21140:
  7897  00E382                     l21172:
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;fat16.c: 1353: };fat16.c: 1356: for(cntr=0; cntr<512; ++cntr)
  7901  00E382  0E00               	movlw	0
  7902  00E384  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7903  00E386  0E00               	movlw	0
  7904  00E388  6F84               	movwf	fat_format@cntr& (0+255),b
  7905  00E38A                     l21174:
  7906                           
  7907                           ; BSR set to: 0
  7908  00E38A  0E02               	movlw	2
  7909  00E38C  5D85               	subwf	(fat_format@cntr+1)& (0+255),w,b
  7910  00E38E  B0D8               	btfsc	status,0,c
  7911  00E390  D011               	goto	u21160
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;fat16.c: 1357: {;fat16.c: 1358: buffer[cntr] = _get_root(cntr);
  7915                           
  7916                           ; BSR set to: 0
  7917                           
  7918                           ; BSR set to: 0
  7919  00E392  0E00               	movlw	low _buffer
  7920  00E394  2584               	addwf	fat_format@cntr& (0+255),w,b
  7921  00E396  6ED9               	movwf	fsr2l,c
  7922  00E398  0E0A               	movlw	high _buffer
  7923  00E39A  2185               	addwfc	(fat_format@cntr+1)& (0+255),w,b
  7924  00E39C  6EDA               	movwf	fsr2h,c
  7925  00E39E  C084  F060         	movff	fat_format@cntr,__get_root@idx
  7926  00E3A2  C085  F061         	movff	fat_format@cntr+1,__get_root@idx+1
  7927  00E3A6  ECC4  F076         	call	__get_root	;wreg free
  7928  00E3AA  6EDF               	movwf	indf2,c
  7929  00E3AC  0100               	movlb	0	; () banked
  7930  00E3AE  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  7931  00E3B0  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  7932  00E3B2  D7EB               	goto	l21174
  7933  00E3B4                     u21160:
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;fat16.c: 1359: };fat16.c: 1360: flash_sector_write(34, buffer);
  7937                           
  7938                           ; BSR set to: 0
  7939  00E3B4  0E00               	movlw	0
  7940  00E3B6  6F80               	movwf	(flash_sector_write@page+1)& (0+255),b
  7941  00E3B8  0E22               	movlw	34
  7942  00E3BA  6F7F               	movwf	flash_sector_write@page& (0+255),b
  7943  00E3BC  0E00               	movlw	low _buffer
  7944  00E3BE  6F81               	movwf	flash_sector_write@data& (0+255),b
  7945  00E3C0  0E0A               	movlw	high _buffer
  7946  00E3C2  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
  7947  00E3C4  ECFE  F09B         	call	_flash_sector_write	;wreg free
  7948                           
  7949                           ;fat16.c: 1363: for(cntr=0; cntr<512; ++cntr)
  7950  00E3C8  0E00               	movlw	0
  7951  00E3CA  0100               	movlb	0	; () banked
  7952  00E3CC  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7953  00E3CE  0E00               	movlw	0
  7954  00E3D0  6F84               	movwf	fat_format@cntr& (0+255),b
  7955  00E3D2                     l21188:
  7956                           
  7957                           ; BSR set to: 0
  7958  00E3D2  0E02               	movlw	2
  7959  00E3D4  5D85               	subwf	(fat_format@cntr+1)& (0+255),w,b
  7960  00E3D6  B0D8               	btfsc	status,0,c
  7961  00E3D8  D00B               	goto	u21180
  7962                           
  7963                           ; BSR set to: 0
  7964                           ;fat16.c: 1364: {;fat16.c: 1365: buffer[cntr] = 0x00;
  7965                           
  7966                           ; BSR set to: 0
  7967                           
  7968                           ; BSR set to: 0
  7969  00E3DA  0E00               	movlw	low _buffer
  7970  00E3DC  2584               	addwf	fat_format@cntr& (0+255),w,b
  7971  00E3DE  6ED9               	movwf	fsr2l,c
  7972  00E3E0  0E0A               	movlw	high _buffer
  7973  00E3E2  2185               	addwfc	(fat_format@cntr+1)& (0+255),w,b
  7974  00E3E4  6EDA               	movwf	fsr2h,c
  7975  00E3E6  0E00               	movlw	0
  7976  00E3E8  6EDF               	movwf	indf2,c
  7977                           
  7978                           ; BSR set to: 0
  7979  00E3EA  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  7980  00E3EC  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  7981  00E3EE  D7F1               	goto	l21188
  7982  00E3F0                     u21180:
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;fat16.c: 1366: };fat16.c: 1367: for(cntr=34+1; cntr<=37; ++cntr)
  7986                           
  7987                           ; BSR set to: 0
  7988  00E3F0  0E00               	movlw	0
  7989  00E3F2  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  7990  00E3F4  0E23               	movlw	35
  7991  00E3F6  6F84               	movwf	fat_format@cntr& (0+255),b
  7992  00E3F8                     l21200:
  7993                           
  7994                           ; BSR set to: 0
  7995  00E3F8  5185               	movf	(fat_format@cntr+1)& (0+255),w,b
  7996  00E3FA  E112               	bnz	l21210
  7997  00E3FC  0E26               	movlw	38
  7998  00E3FE  5D84               	subwf	fat_format@cntr& (0+255),w,b
  7999  00E400  B0D8               	btfsc	status,0,c
  8000  00E402  D00E               	goto	u21200
  8001                           
  8002                           ; BSR set to: 0
  8003                           ;fat16.c: 1368: {;fat16.c: 1369: flash_sector_write(cntr, buffer);
  8004                           
  8005                           ; BSR set to: 0
  8006                           
  8007                           ; BSR set to: 0
  8008  00E404  C084  F07F         	movff	fat_format@cntr,flash_sector_write@page
  8009  00E408  C085  F080         	movff	fat_format@cntr+1,flash_sector_write@page+1
  8010  00E40C  0E00               	movlw	low _buffer
  8011  00E40E  6F81               	movwf	flash_sector_write@data& (0+255),b
  8012  00E410  0E0A               	movlw	high _buffer
  8013  00E412  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
  8014  00E414  ECFE  F09B         	call	_flash_sector_write	;wreg free
  8015  00E418  0100               	movlb	0	; () banked
  8016  00E41A  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  8017  00E41C  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  8018  00E41E  D7EC               	goto	l21200
  8019  00E420                     u21200:
  8020  00E420                     l21210:
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;fat16.c: 1370: };fat16.c: 1373: for(cntr=0; cntr<512; ++cntr)
  8024  00E420  0E00               	movlw	0
  8025  00E422  6F85               	movwf	(fat_format@cntr+1)& (0+255),b
  8026  00E424  0E00               	movlw	0
  8027  00E426  6F84               	movwf	fat_format@cntr& (0+255),b
  8028  00E428                     l21212:
  8029                           
  8030                           ; BSR set to: 0
  8031  00E428  0E02               	movlw	2
  8032  00E42A  5D85               	subwf	(fat_format@cntr+1)& (0+255),w,b
  8033  00E42C  B0D8               	btfsc	status,0,c
  8034  00E42E  D011               	goto	u21220
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;fat16.c: 1374: {;fat16.c: 1375: buffer[cntr] = _get_data(cntr);
  8038                           
  8039                           ; BSR set to: 0
  8040                           
  8041                           ; BSR set to: 0
  8042  00E430  0E00               	movlw	low _buffer
  8043  00E432  2584               	addwf	fat_format@cntr& (0+255),w,b
  8044  00E434  6ED9               	movwf	fsr2l,c
  8045  00E436  0E0A               	movlw	high _buffer
  8046  00E438  2185               	addwfc	(fat_format@cntr+1)& (0+255),w,b
  8047  00E43A  6EDA               	movwf	fsr2h,c
  8048  00E43C  C084  F060         	movff	fat_format@cntr,__get_data@idx
  8049  00E440  C085  F061         	movff	fat_format@cntr+1,__get_data@idx+1
  8050  00E444  EC00  F0A0         	call	__get_data	;wreg free
  8051  00E448  6EDF               	movwf	indf2,c
  8052  00E44A  0100               	movlb	0	; () banked
  8053  00E44C  4B84               	infsnz	fat_format@cntr& (0+255),f,b
  8054  00E44E  2B85               	incf	(fat_format@cntr+1)& (0+255),f,b
  8055  00E450  D7EB               	goto	l21212
  8056  00E452                     u21220:
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;fat16.c: 1376: };fat16.c: 1377: flash_sector_write(38, buffer);
  8060                           
  8061                           ; BSR set to: 0
  8062  00E452  0E00               	movlw	0
  8063  00E454  6F80               	movwf	(flash_sector_write@page+1)& (0+255),b
  8064  00E456  0E26               	movlw	38
  8065  00E458  6F7F               	movwf	flash_sector_write@page& (0+255),b
  8066  00E45A  0E00               	movlw	low _buffer
  8067  00E45C  6F81               	movwf	flash_sector_write@data& (0+255),b
  8068  00E45E  0E0A               	movlw	high _buffer
  8069  00E460  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
  8070  00E462  ECFE  F09B         	call	_flash_sector_write	;wreg free
  8071  00E466  0012               	return	
  8072  00E468                     __end_of_fat_format:
  8073                           	opt stack 0
  8074                           tblptru	equ	0xFF8
  8075                           tblptrh	equ	0xFF7
  8076                           tblptrl	equ	0xFF6
  8077                           tablat	equ	0xFF5
  8078                           postinc0	equ	0xFEE
  8079                           wreg	equ	0xFE8
  8080                           postdec1	equ	0xFE5
  8081                           fsr1h	equ	0xFE2
  8082                           fsr1l	equ	0xFE1
  8083                           indf2	equ	0xFDF
  8084                           postinc2	equ	0xFDE
  8085                           fsr2h	equ	0xFDA
  8086                           fsr2l	equ	0xFD9
  8087                           status	equ	0xFD8
  8088                           
  8089 ;; *************** function __get_root *****************
  8090 ;; Defined at:
  8091 ;;		line 1210 in file "fat16.c"
  8092 ;; Parameters:    Size  Location     Type
  8093 ;;  idx             2    0[BANK0 ] unsigned int 
  8094 ;; Auto vars:     Size  Location     Type
  8095 ;;		None
  8096 ;; Return value:  Size  Location     Type
  8097 ;;                  1    wreg      unsigned char 
  8098 ;; Registers used:
  8099 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8100 ;; Tracked objects:
  8101 ;;		On entry : 0/0
  8102 ;;		On exit  : 0/0
  8103 ;;		Unchanged: 0/0
  8104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  8105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8107 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8108 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8109 ;;Total ram usage:        6 bytes
  8110 ;; Hardware stack levels used:    1
  8111 ;; Hardware stack levels required when called:   10
  8112 ;; This function calls:
  8113 ;;		Nothing
  8114 ;; This function is called by:
  8115 ;;		_fat_format
  8116 ;; This function uses a non-reentrant model
  8117 ;;
  8118                           
  8119                           	psect	text11
  8120  00ED88                     __ptext11:
  8121                           	opt stack 0
  8122  00ED88                     __get_root:
  8123                           	opt stack 17
  8124                           
  8125                           ;fat16.c: 1212: if(idx < 0x20)
  8126                           
  8127                           ;incstack = 0
  8128  00ED88  0100               	movlb	0	; () banked
  8129  00ED8A  5161               	movf	(__get_root@idx+1)& (0+255),w,b
  8130  00ED8C  E11D               	bnz	l20118
  8131  00ED8E  0E20               	movlw	32
  8132  00ED90  5D60               	subwf	__get_root@idx& (0+255),w,b
  8133  00ED92  B0D8               	btfsc	status,0,c
  8134  00ED94  D019               	goto	l1963
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;fat16.c: 1213: {;fat16.c: 1214: if(idx < 11)
  8138  00ED96  5161               	movf	(__get_root@idx+1)& (0+255),w,b
  8139  00ED98  E110               	bnz	l20112
  8140  00ED9A  0E0B               	movlw	11
  8141  00ED9C  5D60               	subwf	__get_root@idx& (0+255),w,b
  8142  00ED9E  B0D8               	btfsc	status,0,c
  8143  00EDA0  D00C               	goto	l1961
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;fat16.c: 1215: {;fat16.c: 1216: return "StepperCtrl"[idx];
  8147  00EDA2  0EC8               	movlw	low STR_15
  8148  00EDA4  2560               	addwf	__get_root@idx& (0+255),w,b
  8149  00EDA6  6EF6               	movwf	tblptrl,c
  8150  00EDA8  0EA2               	movlw	high STR_15
  8151  00EDAA  2161               	addwfc	(__get_root@idx+1)& (0+255),w,b
  8152  00EDAC  6EF7               	movwf	tblptrh,c
  8153  00EDAE                     	if	1	;There are 3 active tblptr bytes
  8154  00EDAE  6AF8               	clrf	tblptru,c
  8155  00EDB0  0E00               	movlw	low (__mediumconst shr (0+16))
  8156  00EDB2  22F8               	addwfc	tblptru,f,c
  8157  00EDB4                     	endif
  8158  00EDB4  0008               	tblrd		*
  8159  00EDB6  50F5               	movf	tablat,w,c
  8160                           
  8161                           ; BSR set to: 0
  8162  00EDB8  0012               	return	
  8163  00EDBA                     l1961:
  8164  00EDBA                     l20112:
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;fat16.c: 1217: };fat16.c: 1218: if(idx==11)
  8168  00EDBA  0E0B               	movlw	11
  8169  00EDBC  1960               	xorwf	__get_root@idx& (0+255),w,b
  8170  00EDBE  1161               	iorwf	(__get_root@idx+1)& (0+255),w,b
  8171  00EDC0  A4D8               	btfss	status,2,c
  8172  00EDC2  D002               	goto	l1963
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;fat16.c: 1219: {;fat16.c: 1220: return 0x08;
  8176  00EDC4  0E08               	movlw	8
  8177                           
  8178                           ; BSR set to: 0
  8179  00EDC6  0012               	return	
  8180  00EDC8                     l1963:
  8181  00EDC8                     l20118:
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;fat16.c: 1221: };fat16.c: 1222: };fat16.c: 1223: if(idx < 0x40)
  8185  00EDC8  5161               	movf	(__get_root@idx+1)& (0+255),w,b
  8186  00EDCA  E103               	bnz	u19741
  8187  00EDCC  0E40               	movlw	64
  8188  00EDCE  5D60               	subwf	__get_root@idx& (0+255),w,b
  8189  00EDD0  B0D8               	btfsc	status,0,c
  8190  00EDD2                     u19741:
  8191  00EDD2  D0A4               	goto	l1989
  8192                           
  8193                           ; BSR set to: 0
  8194                           ;fat16.c: 1224: {;fat16.c: 1225: idx -= 0x20;
  8195  00EDD4  0E20               	movlw	32
  8196  00EDD6  5F60               	subwf	__get_root@idx& (0+255),f,b
  8197  00EDD8  0E00               	movlw	0
  8198  00EDDA  5B61               	subwfb	(__get_root@idx+1)& (0+255),f,b
  8199                           
  8200                           ;fat16.c: 1226: if(idx < 0+8)
  8201  00EDDC  5161               	movf	(__get_root@idx+1)& (0+255),w,b
  8202  00EDDE  E110               	bnz	l20126
  8203  00EDE0  0E08               	movlw	8
  8204  00EDE2  5D60               	subwf	__get_root@idx& (0+255),w,b
  8205  00EDE4  B0D8               	btfsc	status,0,c
  8206  00EDE6  D00C               	goto	l1965
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;fat16.c: 1227: {;fat16.c: 1228: return "FILE    "[idx];
  8210  00EDE8  0ED4               	movlw	low STR_16
  8211  00EDEA  2560               	addwf	__get_root@idx& (0+255),w,b
  8212  00EDEC  6EF6               	movwf	tblptrl,c
  8213  00EDEE  0EA2               	movlw	high STR_16
  8214  00EDF0  2161               	addwfc	(__get_root@idx+1)& (0+255),w,b
  8215  00EDF2  6EF7               	movwf	tblptrh,c
  8216  00EDF4                     	if	1	;There are 3 active tblptr bytes
  8217  00EDF4  6AF8               	clrf	tblptru,c
  8218  00EDF6  0E00               	movlw	low (__mediumconst shr (0+16))
  8219  00EDF8  22F8               	addwfc	tblptru,f,c
  8220  00EDFA                     	endif
  8221  00EDFA  0008               	tblrd		*
  8222  00EDFC  50F5               	movf	tablat,w,c
  8223                           
  8224                           ; BSR set to: 0
  8225  00EDFE  0012               	return	
  8226  00EE00                     l1965:
  8227  00EE00                     l20126:
  8228                           
  8229                           ; BSR set to: 0
  8230                           ;fat16.c: 1229: };fat16.c: 1230: if(idx < 11)
  8231  00EE00  5161               	movf	(__get_root@idx+1)& (0+255),w,b
  8232  00EE02  E146               	bnz	l20218
  8233  00EE04  0E0B               	movlw	11
  8234  00EE06  5D60               	subwf	__get_root@idx& (0+255),w,b
  8235  00EE08  B0D8               	btfsc	status,0,c
  8236  00EE0A  D042               	goto	l1967
  8237                           
  8238                           ; BSR set to: 0
  8239                           ;fat16.c: 1231: {;fat16.c: 1232: return "TXT"[idx-8];
  8240  00EE0C  0EF8               	movlw	248
  8241  00EE0E  6F62               	movwf	??__get_root& (0+255),b
  8242  00EE10  0EFF               	movlw	255
  8243  00EE12  6F63               	movwf	(??__get_root+1)& (0+255),b
  8244  00EE14  C060  F064         	movff	__get_root@idx,??__get_root+2
  8245  00EE18  C061  F065         	movff	__get_root@idx+1,??__get_root+3
  8246  00EE1C  5162               	movf	??__get_root& (0+255),w,b
  8247  00EE1E  2764               	addwf	(??__get_root+2)& (0+255),f,b
  8248  00EE20  5163               	movf	(??__get_root+1)& (0+255),w,b
  8249  00EE22  2365               	addwfc	(??__get_root+3)& (0+255),f,b
  8250  00EE24  0EFC               	movlw	low STR_17
  8251  00EE26  2564               	addwf	(??__get_root+2)& (0+255),w,b
  8252  00EE28  6EF6               	movwf	tblptrl,c
  8253  00EE2A  0EA2               	movlw	high STR_17
  8254  00EE2C  2165               	addwfc	(??__get_root+3)& (0+255),w,b
  8255  00EE2E  6EF7               	movwf	tblptrh,c
  8256  00EE30                     	if	1	;There are 3 active tblptr bytes
  8257  00EE30  6AF8               	clrf	tblptru,c
  8258  00EE32  0E00               	movlw	low (__mediumconst shr (0+16))
  8259  00EE34  22F8               	addwfc	tblptru,f,c
  8260  00EE36                     	endif
  8261  00EE36  0008               	tblrd		*
  8262  00EE38  50F5               	movf	tablat,w,c
  8263                           
  8264                           ; BSR set to: 0
  8265  00EE3A  0012               	return	
  8266  00EE3C                     
  8267                           ; BSR set to: 0
  8268                           ;fat16.c: 1237: return 0x20;
  8269                           
  8270                           ; BSR set to: 0
  8271  00EE3C  0E20               	movlw	32
  8272                           
  8273                           ; BSR set to: 0
  8274  00EE3E  0012               	return	
  8275  00EE40                     
  8276                           ; BSR set to: 0
  8277                           ;fat16.c: 1239: return 0x06;
  8278                           
  8279                           ; BSR set to: 0
  8280  00EE40  0E06               	movlw	6
  8281                           
  8282                           ; BSR set to: 0
  8283  00EE42  0012               	return	
  8284  00EE44                     
  8285                           ; BSR set to: 0
  8286                           ;fat16.c: 1241: return 0x28;
  8287                           
  8288                           ; BSR set to: 0
  8289  00EE44  0E28               	movlw	40
  8290                           
  8291                           ; BSR set to: 0
  8292  00EE46  0012               	return	
  8293  00EE48                     
  8294                           ; BSR set to: 0
  8295                           ;fat16.c: 1243: return 0x78;
  8296                           
  8297                           ; BSR set to: 0
  8298  00EE48  0E78               	movlw	120
  8299                           
  8300                           ; BSR set to: 0
  8301  00EE4A  0012               	return	
  8302  00EE4C                     
  8303                           ; BSR set to: 0
  8304                           ;fat16.c: 1245: return 0xDE;
  8305                           
  8306                           ; BSR set to: 0
  8307  00EE4C  0EDE               	movlw	222
  8308                           
  8309                           ; BSR set to: 0
  8310  00EE4E  0012               	return	
  8311  00EE50                     
  8312                           ; BSR set to: 0
  8313                           ;fat16.c: 1247: return 0x38;
  8314                           
  8315                           ; BSR set to: 0
  8316  00EE50  0E38               	movlw	56
  8317                           
  8318                           ; BSR set to: 0
  8319  00EE52  0012               	return	
  8320  00EE54                     
  8321                           ; BSR set to: 0
  8322                           ;fat16.c: 1249: return 0x5F;
  8323                           
  8324                           ; BSR set to: 0
  8325  00EE54  0E5F               	movlw	95
  8326                           
  8327                           ; BSR set to: 0
  8328  00EE56  0012               	return	
  8329  00EE58                     
  8330                           ; BSR set to: 0
  8331                           ;fat16.c: 1251: return 0x4B;
  8332                           
  8333                           ; BSR set to: 0
  8334  00EE58  0E4B               	movlw	75
  8335                           
  8336                           ; BSR set to: 0
  8337  00EE5A  0012               	return	
  8338  00EE5C                     
  8339                           ; BSR set to: 0
  8340                           ;fat16.c: 1253: return 0x00;
  8341                           
  8342                           ; BSR set to: 0
  8343  00EE5C  0E00               	movlw	0
  8344                           
  8345                           ; BSR set to: 0
  8346  00EE5E  0012               	return	
  8347  00EE60                     
  8348                           ; BSR set to: 0
  8349                           ;fat16.c: 1255: return 0x00;
  8350                           
  8351                           ; BSR set to: 0
  8352  00EE60  0E00               	movlw	0
  8353                           
  8354                           ; BSR set to: 0
  8355  00EE62  0012               	return	
  8356  00EE64                     
  8357                           ; BSR set to: 0
  8358                           ;fat16.c: 1257: return 0x04;
  8359                           
  8360                           ; BSR set to: 0
  8361  00EE64  0E04               	movlw	4
  8362                           
  8363                           ; BSR set to: 0
  8364  00EE66  0012               	return	
  8365  00EE68                     
  8366                           ; BSR set to: 0
  8367                           ;fat16.c: 1259: return 0x77;
  8368                           
  8369                           ; BSR set to: 0
  8370  00EE68  0E77               	movlw	119
  8371                           
  8372                           ; BSR set to: 0
  8373  00EE6A  0012               	return	
  8374  00EE6C                     
  8375                           ; BSR set to: 0
  8376                           ;fat16.c: 1261: return 0xDE;
  8377                           
  8378                           ; BSR set to: 0
  8379  00EE6C  0EDE               	movlw	222
  8380                           
  8381                           ; BSR set to: 0
  8382  00EE6E  0012               	return	
  8383  00EE70                     
  8384                           ; BSR set to: 0
  8385                           ;fat16.c: 1263: return 0x38;
  8386                           
  8387                           ; BSR set to: 0
  8388  00EE70  0E38               	movlw	56
  8389                           
  8390                           ; BSR set to: 0
  8391  00EE72  0012               	return	
  8392  00EE74                     
  8393                           ; BSR set to: 0
  8394                           ;fat16.c: 1265: return ((unsigned char)((((uint16_t)2))&0xFF));
  8395                           
  8396                           ; BSR set to: 0
  8397  00EE74  0E02               	movlw	2
  8398                           
  8399                           ; BSR set to: 0
  8400  00EE76  0012               	return	
  8401  00EE78                     
  8402                           ; BSR set to: 0
  8403                           ;fat16.c: 1267: return ((unsigned char)(((((uint16_t)2))>>8)&0xFF));
  8404                           
  8405                           ; BSR set to: 0
  8406  00EE78  0E00               	movlw	0
  8407                           
  8408                           ; BSR set to: 0
  8409  00EE7A  0012               	return	
  8410  00EE7C                     
  8411                           ; BSR set to: 0
  8412                           ;fat16.c: 1269: return ((unsigned char)((((unsigned short)((((uint32_t)12))&0xFFFF)))&0x
      +                          FF));
  8413                           
  8414                           ; BSR set to: 0
  8415  00EE7C  0E0C               	movlw	12
  8416                           
  8417                           ; BSR set to: 0
  8418  00EE7E  0012               	return	
  8419  00EE80                     
  8420                           ; BSR set to: 0
  8421                           ;fat16.c: 1271: return ((unsigned char)(((((unsigned short)((((uint32_t)12))&0xFFFF)))>>
      +                          8)&0xFF));
  8422                           
  8423                           ; BSR set to: 0
  8424  00EE80  0E00               	movlw	0
  8425                           
  8426                           ; BSR set to: 0
  8427  00EE82  0012               	return	
  8428  00EE84                     
  8429                           ; BSR set to: 0
  8430                           ;fat16.c: 1273: return ((unsigned char)((((unsigned short)(((((uint32_t)12))>>16)&0xFFFF
      +                          )))&0xFF));
  8431                           
  8432                           ; BSR set to: 0
  8433  00EE84  0E00               	movlw	0
  8434                           
  8435                           ; BSR set to: 0
  8436  00EE86  0012               	return	
  8437  00EE88                     
  8438                           ; BSR set to: 0
  8439                           ;fat16.c: 1275: return ((unsigned char)(((((unsigned short)(((((uint32_t)12))>>16)&0xFFF
      +                          F)))>>8)&0xFF));
  8440                           
  8441                           ; BSR set to: 0
  8442  00EE88  0E00               	movlw	0
  8443                           
  8444                           ; BSR set to: 0
  8445  00EE8A  0012               	return	
  8446  00EE8C                     
  8447                           ; BSR set to: 0
  8448                           ;fat16.c: 1277: return 0x00;
  8449                           
  8450                           ; BSR set to: 0
  8451  00EE8C  0E00               	movlw	0
  8452                           
  8453                           ; BSR set to: 0
  8454  00EE8E  0012               	return	
  8455  00EE90                     l1967:
  8456  00EE90                     l20218:
  8457                           
  8458                           ; BSR set to: 0
  8459  00EE90  C060  F062         	movff	__get_root@idx,??__get_root
  8460  00EE94  C061  F063         	movff	__get_root@idx+1,??__get_root+1
  8461                           
  8462                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8463                           ; Switch size 1, requested type "space"
  8464                           ; Number of cases is 1, Range of values is 0 to 0
  8465                           ; switch strategies available:
  8466                           ; Name         Instructions Cycles
  8467                           ; simple_byte            4     3 (average)
  8468                           ;	Chosen strategy is simple_byte
  8469  00EE98  5163               	movf	(??__get_root+1)& (0+255),w,b
  8470  00EE9A  0A00               	xorlw	0	; case 0
  8471  00EE9C  A4D8               	btfss	status,2,c
  8472  00EE9E  D7F6               	goto	l1988
  8473                           
  8474                           ; BSR set to: 0
  8475                           ; Switch size 1, requested type "space"
  8476                           ; Number of cases is 20, Range of values is 11 to 31
  8477                           ; switch strategies available:
  8478                           ; Name         Instructions Cycles
  8479                           ; simple_byte           61    31 (average)
  8480                           ;	Chosen strategy is simple_byte
  8481  00EEA0  5162               	movf	??__get_root& (0+255),w,b
  8482  00EEA2  0A0B               	xorlw	11	; case 11
  8483  00EEA4  B4D8               	btfsc	status,2,c
  8484  00EEA6  D7CA               	goto	l1968
  8485  00EEA8  0A06               	xorlw	6	; case 13
  8486  00EEAA  B4D8               	btfsc	status,2,c
  8487  00EEAC  D7C9               	goto	l1969
  8488  00EEAE  0A03               	xorlw	3	; case 14
  8489  00EEB0  B4D8               	btfsc	status,2,c
  8490  00EEB2  D7C8               	goto	l1970
  8491  00EEB4  0A01               	xorlw	1	; case 15
  8492  00EEB6  B4D8               	btfsc	status,2,c
  8493  00EEB8  D7C7               	goto	l1971
  8494  00EEBA  0A1F               	xorlw	31	; case 16
  8495  00EEBC  B4D8               	btfsc	status,2,c
  8496  00EEBE  D7C6               	goto	l1972
  8497  00EEC0  0A01               	xorlw	1	; case 17
  8498  00EEC2  B4D8               	btfsc	status,2,c
  8499  00EEC4  D7C5               	goto	l1973
  8500  00EEC6  0A03               	xorlw	3	; case 18
  8501  00EEC8  B4D8               	btfsc	status,2,c
  8502  00EECA  D7C4               	goto	l1974
  8503  00EECC  0A01               	xorlw	1	; case 19
  8504  00EECE  B4D8               	btfsc	status,2,c
  8505  00EED0  D7C3               	goto	l1975
  8506  00EED2  0A07               	xorlw	7	; case 20
  8507  00EED4  B4D8               	btfsc	status,2,c
  8508  00EED6  D7C2               	goto	l1976
  8509  00EED8  0A01               	xorlw	1	; case 21
  8510  00EEDA  B4D8               	btfsc	status,2,c
  8511  00EEDC  D7C1               	goto	l1977
  8512  00EEDE  0A03               	xorlw	3	; case 22
  8513  00EEE0  B4D8               	btfsc	status,2,c
  8514  00EEE2  D7C0               	goto	l1978
  8515  00EEE4  0A01               	xorlw	1	; case 23
  8516  00EEE6  B4D8               	btfsc	status,2,c
  8517  00EEE8  D7BF               	goto	l1979
  8518  00EEEA  0A0F               	xorlw	15	; case 24
  8519  00EEEC  B4D8               	btfsc	status,2,c
  8520  00EEEE  D7BE               	goto	l1980
  8521  00EEF0  0A01               	xorlw	1	; case 25
  8522  00EEF2  B4D8               	btfsc	status,2,c
  8523  00EEF4  D7BD               	goto	l1981
  8524  00EEF6  0A03               	xorlw	3	; case 26
  8525  00EEF8  B4D8               	btfsc	status,2,c
  8526  00EEFA  D7BC               	goto	l1982
  8527  00EEFC  0A01               	xorlw	1	; case 27
  8528  00EEFE  B4D8               	btfsc	status,2,c
  8529  00EF00  D7BB               	goto	l1983
  8530  00EF02  0A07               	xorlw	7	; case 28
  8531  00EF04  B4D8               	btfsc	status,2,c
  8532  00EF06  D7BA               	goto	l1984
  8533  00EF08  0A01               	xorlw	1	; case 29
  8534  00EF0A  B4D8               	btfsc	status,2,c
  8535  00EF0C  D7B9               	goto	l1985
  8536  00EF0E  0A03               	xorlw	3	; case 30
  8537  00EF10  B4D8               	btfsc	status,2,c
  8538  00EF12  D7B8               	goto	l1986
  8539  00EF14  0A01               	xorlw	1	; case 31
  8540  00EF16  B4D8               	btfsc	status,2,c
  8541  00EF18  D7B7               	goto	l1987
  8542  00EF1A  D7B8               	goto	l1988
  8543  00EF1C                     l1989:
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;fat16.c: 1279: };fat16.c: 1280: return 0X00;
  8547                           
  8548                           ; BSR set to: 0
  8549                           
  8550                           ; BSR set to: 0
  8551  00EF1C  0E00               	movlw	0
  8552  00EF1E  0012               	return	
  8553  00EF20                     __end_of__get_root:
  8554                           	opt stack 0
  8555                           tblptru	equ	0xFF8
  8556                           tblptrh	equ	0xFF7
  8557                           tblptrl	equ	0xFF6
  8558                           tablat	equ	0xFF5
  8559                           postinc0	equ	0xFEE
  8560                           wreg	equ	0xFE8
  8561                           postdec1	equ	0xFE5
  8562                           fsr1h	equ	0xFE2
  8563                           fsr1l	equ	0xFE1
  8564                           indf2	equ	0xFDF
  8565                           postinc2	equ	0xFDE
  8566                           fsr2h	equ	0xFDA
  8567                           fsr2l	equ	0xFD9
  8568                           status	equ	0xFD8
  8569                           
  8570 ;; *************** function __get_mbr *****************
  8571 ;; Defined at:
  8572 ;;		line 1037 in file "fat16.c"
  8573 ;; Parameters:    Size  Location     Type
  8574 ;;  idx             2    0[BANK0 ] unsigned int 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;		None
  8577 ;; Return value:  Size  Location     Type
  8578 ;;                  1    wreg      unsigned char 
  8579 ;; Registers used:
  8580 ;;		wreg, status,2, status,0
  8581 ;; Tracked objects:
  8582 ;;		On entry : 0/0
  8583 ;;		On exit  : 0/0
  8584 ;;		Unchanged: 0/0
  8585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  8586 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8589 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8590 ;;Total ram usage:        4 bytes
  8591 ;; Hardware stack levels used:    1
  8592 ;; Hardware stack levels required when called:   10
  8593 ;; This function calls:
  8594 ;;		Nothing
  8595 ;; This function is called by:
  8596 ;;		_fat_get_format_status
  8597 ;;		_fat_format
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           	psect	text12
  8602  0115C0                     __ptext12:
  8603                           	opt stack 0
  8604  0115C0                     __get_mbr:
  8605                           	opt stack 17
  8606                           
  8607                           ;fat16.c: 1039: switch (idx)
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;incstack = 0
  8611  0115C0  D026               	goto	l1870
  8612  0115C2                     
  8613                           ;fat16.c: 1042: return 0x80;
  8614  0115C2  0E80               	movlw	128
  8615  0115C4  0012               	return	
  8616  0115C6                     
  8617                           ;fat16.c: 1044: return 0;
  8618  0115C6  0E00               	movlw	0
  8619  0115C8  0012               	return	
  8620  0115CA                     
  8621                           ;fat16.c: 1046: return 2;
  8622  0115CA  0E02               	movlw	2
  8623  0115CC  0012               	return	
  8624  0115CE                     
  8625                           ;fat16.c: 1048: return 0;
  8626  0115CE  0E00               	movlw	0
  8627  0115D0  0012               	return	
  8628  0115D2                     
  8629                           ;fat16.c: 1050: return 0x04;
  8630  0115D2  0E04               	movlw	4
  8631  0115D4  0012               	return	
  8632  0115D6                     
  8633                           ;fat16.c: 1052: return 2;
  8634  0115D6  0E02               	movlw	2
  8635  0115D8  0012               	return	
  8636  0115DA                     
  8637                           ;fat16.c: 1054: return 3;
  8638  0115DA  0E03               	movlw	3
  8639  0115DC  0012               	return	
  8640  0115DE                     
  8641                           ;fat16.c: 1056: return 8;
  8642  0115DE  0E08               	movlw	8
  8643  0115E0  0012               	return	
  8644  0115E2                     
  8645                           ;fat16.c: 1058: return ((unsigned char)((((unsigned short)((((uint32_t)1))&0xFFFF)))&0xF
      +                          F));
  8646  0115E2  0E01               	movlw	1
  8647  0115E4  0012               	return	
  8648  0115E6                     
  8649                           ;fat16.c: 1060: return ((unsigned char)(((((unsigned short)((((uint32_t)1))&0xFFFF)))>>8
      +                          )&0xFF));
  8650  0115E6  0E00               	movlw	0
  8651  0115E8  0012               	return	
  8652  0115EA                     
  8653                           ;fat16.c: 1062: return ((unsigned char)((((unsigned short)(((((uint32_t)1))>>16)&0xFFFF)
      +                          ))&0xFF));
  8654  0115EA  0E00               	movlw	0
  8655  0115EC  0012               	return	
  8656  0115EE                     
  8657                           ;fat16.c: 1064: return ((unsigned char)(((((unsigned short)(((((uint32_t)1))>>16)&0xFFFF
      +                          )))>>8)&0xFF));
  8658  0115EE  0E00               	movlw	0
  8659  0115F0  0012               	return	
  8660  0115F2                     
  8661                           ;fat16.c: 1066: return ((unsigned char)((((unsigned short)((((uint32_t)8191))&0xFFFF)))&
      +                          0xFF));
  8662  0115F2  0EFF               	movlw	255
  8663  0115F4  0012               	return	
  8664  0115F6                     
  8665                           ;fat16.c: 1068: return ((unsigned char)(((((unsigned short)((((uint32_t)8191))&0xFFFF)))
      +                          >>8)&0xFF));
  8666  0115F6  0E1F               	movlw	31
  8667  0115F8  0012               	return	
  8668  0115FA                     
  8669                           ;fat16.c: 1070: return ((unsigned char)((((unsigned short)(((((uint32_t)8191))>>16)&0xFF
      +                          FF)))&0xFF));
  8670  0115FA  0E00               	movlw	0
  8671  0115FC  0012               	return	
  8672  0115FE                     
  8673                           ;fat16.c: 1072: return ((unsigned char)(((((unsigned short)(((((uint32_t)8191))>>16)&0xF
      +                          FFF)))>>8)&0xFF));
  8674  0115FE  0E00               	movlw	0
  8675  011600  0012               	return	
  8676  011602                     
  8677                           ;fat16.c: 1074: return ((unsigned char)((((uint16_t)0X55AA)>>8)&0xFF));
  8678  011602  0E55               	movlw	85
  8679  011604  0012               	return	
  8680  011606                     
  8681                           ;fat16.c: 1076: return ((unsigned char)(((uint16_t)0X55AA)&0xFF));
  8682  011606  0EAA               	movlw	170
  8683  011608  0012               	return	
  8684  01160A                     
  8685                           ;fat16.c: 1078: return 0X00;
  8686  01160A  0E00               	movlw	0
  8687                           
  8688                           ;fat16.c: 1079: }
  8689  01160C  0012               	return	
  8690  01160E                     l1870:
  8691  01160E  C060  F062         	movff	__get_mbr@idx,??__get_mbr
  8692  011612  C061  F063         	movff	__get_mbr@idx+1,??__get_mbr+1
  8693                           
  8694                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8695                           ; Switch size 1, requested type "space"
  8696                           ; Number of cases is 1, Range of values is 1 to 1
  8697                           ; switch strategies available:
  8698                           ; Name         Instructions Cycles
  8699                           ; simple_byte            4     3 (average)
  8700                           ;	Chosen strategy is simple_byte
  8701  011616  0100               	movlb	0	; () banked
  8702  011618  5163               	movf	(??__get_mbr+1)& (0+255),w,b
  8703  01161A  0A01               	xorlw	1	; case 1
  8704  01161C  A4D8               	btfss	status,2,c
  8705  01161E  D7F5               	goto	l1890
  8706                           
  8707                           ; BSR set to: 0
  8708                           ; Switch size 1, requested type "space"
  8709                           ; Number of cases is 18, Range of values is 190 to 255
  8710                           ; switch strategies available:
  8711                           ; Name         Instructions Cycles
  8712                           ; simple_byte           55    28 (average)
  8713                           ;	Chosen strategy is simple_byte
  8714  011620  5162               	movf	??__get_mbr& (0+255),w,b
  8715  011622  0ABE               	xorlw	190	; case 190
  8716  011624  B4D8               	btfsc	status,2,c
  8717  011626  D7CD               	goto	l1871
  8718  011628  0A01               	xorlw	1	; case 191
  8719  01162A  B4D8               	btfsc	status,2,c
  8720  01162C  D7CC               	goto	l1873
  8721  01162E  0A7F               	xorlw	127	; case 192
  8722  011630  B4D8               	btfsc	status,2,c
  8723  011632  D7CB               	goto	l1874
  8724  011634  0A01               	xorlw	1	; case 193
  8725  011636  B4D8               	btfsc	status,2,c
  8726  011638  D7CA               	goto	l1875
  8727  01163A  0A03               	xorlw	3	; case 194
  8728  01163C  B4D8               	btfsc	status,2,c
  8729  01163E  D7C9               	goto	l1876
  8730  011640  0A01               	xorlw	1	; case 195
  8731  011642  B4D8               	btfsc	status,2,c
  8732  011644  D7C8               	goto	l1877
  8733  011646  0A07               	xorlw	7	; case 196
  8734  011648  B4D8               	btfsc	status,2,c
  8735  01164A  D7C7               	goto	l1878
  8736  01164C  0A01               	xorlw	1	; case 197
  8737  01164E  B4D8               	btfsc	status,2,c
  8738  011650  D7C6               	goto	l1879
  8739  011652  0A03               	xorlw	3	; case 198
  8740  011654  B4D8               	btfsc	status,2,c
  8741  011656  D7C5               	goto	l1880
  8742  011658  0A01               	xorlw	1	; case 199
  8743  01165A  B4D8               	btfsc	status,2,c
  8744  01165C  D7C4               	goto	l1881
  8745  01165E  0A0F               	xorlw	15	; case 200
  8746  011660  B4D8               	btfsc	status,2,c
  8747  011662  D7C3               	goto	l1882
  8748  011664  0A01               	xorlw	1	; case 201
  8749  011666  B4D8               	btfsc	status,2,c
  8750  011668  D7C2               	goto	l1883
  8751  01166A  0A03               	xorlw	3	; case 202
  8752  01166C  B4D8               	btfsc	status,2,c
  8753  01166E  D7C1               	goto	l1884
  8754  011670  0A01               	xorlw	1	; case 203
  8755  011672  B4D8               	btfsc	status,2,c
  8756  011674  D7C0               	goto	l1885
  8757  011676  0A07               	xorlw	7	; case 204
  8758  011678  B4D8               	btfsc	status,2,c
  8759  01167A  D7BF               	goto	l1886
  8760  01167C  0A01               	xorlw	1	; case 205
  8761  01167E  B4D8               	btfsc	status,2,c
  8762  011680  D7BE               	goto	l1887
  8763  011682  0A33               	xorlw	51	; case 254
  8764  011684  B4D8               	btfsc	status,2,c
  8765  011686  D7BD               	goto	l1888
  8766  011688  0A01               	xorlw	1	; case 255
  8767  01168A  B4D8               	btfsc	status,2,c
  8768  01168C  D7BC               	goto	l1889
  8769  01168E  D7BD               	goto	l1890
  8770  011690                     __end_of__get_mbr:
  8771                           	opt stack 0
  8772                           tblptru	equ	0xFF8
  8773                           tblptrh	equ	0xFF7
  8774                           tblptrl	equ	0xFF6
  8775                           tablat	equ	0xFF5
  8776                           postinc0	equ	0xFEE
  8777                           wreg	equ	0xFE8
  8778                           postdec1	equ	0xFE5
  8779                           fsr1h	equ	0xFE2
  8780                           fsr1l	equ	0xFE1
  8781                           indf2	equ	0xFDF
  8782                           postinc2	equ	0xFDE
  8783                           fsr2h	equ	0xFDA
  8784                           fsr2l	equ	0xFD9
  8785                           status	equ	0xFD8
  8786                           
  8787 ;; *************** function __get_fbr *****************
  8788 ;; Defined at:
  8789 ;;		line 1082 in file "fat16.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  idx             2    0[BANK0 ] unsigned int 
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;		None
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  1    wreg      unsigned char 
  8796 ;; Registers used:
  8797 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  8803 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8805 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8806 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8807 ;;Total ram usage:        4 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:   10
  8810 ;; This function calls:
  8811 ;;		Nothing
  8812 ;; This function is called by:
  8813 ;;		_fat_get_format_status
  8814 ;;		_fat_format
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818                           	psect	text13
  8819  00D92C                     __ptext13:
  8820                           	opt stack 0
  8821  00D92C                     __get_fbr:
  8822                           	opt stack 17
  8823                           
  8824                           ;fat16.c: 1084: switch (idx)
  8825                           
  8826                           ;incstack = 0
  8827  00D92C  D098               	goto	l1894
  8828  00D92E                     
  8829                           ;fat16.c: 1087: return 0xEB;
  8830  00D92E  0EEB               	movlw	235
  8831  00D930  0012               	return	
  8832  00D932                     
  8833                           ;fat16.c: 1089: return 0x3C;
  8834  00D932  0E3C               	movlw	60
  8835  00D934  0012               	return	
  8836  00D936                     
  8837                           ;fat16.c: 1091: return 0x90;
  8838  00D936  0E90               	movlw	144
  8839  00D938  0012               	return	
  8840  00D93A                     
  8841                           ;fat16.c: 1093: return "MSDOS5.0"[0];
  8842  00D93A  0EDD               	movlw	low STR_7
  8843  00D93C  6EF6               	movwf	tblptrl,c
  8844  00D93E                     	if	1	;There is more than 1 active tblptr byte
  8845  00D93E  0EA2               	movlw	high STR_7
  8846  00D940  6EF7               	movwf	tblptrh,c
  8847  00D942                     	endif
  8848  00D942                     	if	1	;There are 3 active tblptr bytes
  8849  00D942  0E00               	movlw	low (STR_7 shr (0+16))
  8850  00D944  6EF8               	movwf	tblptru,c
  8851  00D946                     	endif
  8852  00D946  0008               	tblrd		*
  8853  00D948  50F5               	movf	tablat,w,c
  8854  00D94A  0012               	return	
  8855  00D94C                     
  8856                           ;fat16.c: 1095: return "MSDOS5.0"[1];
  8857  00D94C  0EDE               	movlw	low (STR_7+1)
  8858  00D94E  6EF6               	movwf	tblptrl,c
  8859  00D950  0EA2               	movlw	high (STR_7+1)
  8860  00D952  6EF7               	movwf	tblptrh,c
  8861  00D954                     	if	0	;tblptru may be non-zero
  8862  00D954                     	endif
  8863  00D954                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8864  00D954  0E00               	movlw	low (__mediumconst shr (0+16))
  8865  00D956  6EF8               	movwf	tblptru,c
  8866  00D958                     	endif
  8867  00D958  0008               	tblrd		*
  8868  00D95A  50F5               	movf	tablat,w,c
  8869  00D95C  0012               	return	
  8870  00D95E                     
  8871                           ;fat16.c: 1097: return "MSDOS5.0"[2];
  8872  00D95E  0EDF               	movlw	low (STR_7+2)
  8873  00D960  6EF6               	movwf	tblptrl,c
  8874  00D962  0EA2               	movlw	high (STR_7+2)
  8875  00D964  6EF7               	movwf	tblptrh,c
  8876  00D966                     	if	0	;tblptru may be non-zero
  8877  00D966                     	endif
  8878  00D966                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8879  00D966  0E00               	movlw	low (__mediumconst shr (0+16))
  8880  00D968  6EF8               	movwf	tblptru,c
  8881  00D96A                     	endif
  8882  00D96A  0008               	tblrd		*
  8883  00D96C  50F5               	movf	tablat,w,c
  8884  00D96E  0012               	return	
  8885  00D970                     
  8886                           ;fat16.c: 1099: return "MSDOS5.0"[3];
  8887  00D970  0EE0               	movlw	low (STR_7+3)
  8888  00D972  6EF6               	movwf	tblptrl,c
  8889  00D974  0EA2               	movlw	high (STR_7+3)
  8890  00D976  6EF7               	movwf	tblptrh,c
  8891  00D978                     	if	0	;tblptru may be non-zero
  8892  00D978                     	endif
  8893  00D978                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8894  00D978  0E00               	movlw	low (__mediumconst shr (0+16))
  8895  00D97A  6EF8               	movwf	tblptru,c
  8896  00D97C                     	endif
  8897  00D97C  0008               	tblrd		*
  8898  00D97E  50F5               	movf	tablat,w,c
  8899  00D980  0012               	return	
  8900  00D982                     
  8901                           ;fat16.c: 1101: return "MSDOS5.0"[4];
  8902  00D982  0EE1               	movlw	low (STR_7+4)
  8903  00D984  6EF6               	movwf	tblptrl,c
  8904  00D986  0EA2               	movlw	high (STR_7+4)
  8905  00D988  6EF7               	movwf	tblptrh,c
  8906  00D98A                     	if	0	;tblptru may be non-zero
  8907  00D98A                     	endif
  8908  00D98A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8909  00D98A  0E00               	movlw	low (__mediumconst shr (0+16))
  8910  00D98C  6EF8               	movwf	tblptru,c
  8911  00D98E                     	endif
  8912  00D98E  0008               	tblrd		*
  8913  00D990  50F5               	movf	tablat,w,c
  8914  00D992  0012               	return	
  8915  00D994                     
  8916                           ;fat16.c: 1103: return "MSDOS5.0"[5];
  8917  00D994  0EE2               	movlw	low (STR_7+5)
  8918  00D996  6EF6               	movwf	tblptrl,c
  8919  00D998  0EA2               	movlw	high (STR_7+5)
  8920  00D99A  6EF7               	movwf	tblptrh,c
  8921  00D99C                     	if	0	;tblptru may be non-zero
  8922  00D99C                     	endif
  8923  00D99C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8924  00D99C  0E00               	movlw	low (__mediumconst shr (0+16))
  8925  00D99E  6EF8               	movwf	tblptru,c
  8926  00D9A0                     	endif
  8927  00D9A0  0008               	tblrd		*
  8928  00D9A2  50F5               	movf	tablat,w,c
  8929  00D9A4  0012               	return	
  8930  00D9A6                     
  8931                           ;fat16.c: 1105: return "MSDOS5.0"[6];
  8932  00D9A6  0EE3               	movlw	low (STR_7+6)
  8933  00D9A8  6EF6               	movwf	tblptrl,c
  8934  00D9AA  0EA2               	movlw	high (STR_7+6)
  8935  00D9AC  6EF7               	movwf	tblptrh,c
  8936  00D9AE                     	if	0	;tblptru may be non-zero
  8937  00D9AE                     	endif
  8938  00D9AE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8939  00D9AE  0E00               	movlw	low (__mediumconst shr (0+16))
  8940  00D9B0  6EF8               	movwf	tblptru,c
  8941  00D9B2                     	endif
  8942  00D9B2  0008               	tblrd		*
  8943  00D9B4  50F5               	movf	tablat,w,c
  8944  00D9B6  0012               	return	
  8945  00D9B8                     
  8946                           ;fat16.c: 1107: return "MSDOS5.0"[7];
  8947  00D9B8  0EE4               	movlw	low (STR_7+7)
  8948  00D9BA  6EF6               	movwf	tblptrl,c
  8949  00D9BC  0EA2               	movlw	high (STR_7+7)
  8950  00D9BE  6EF7               	movwf	tblptrh,c
  8951  00D9C0                     	if	0	;tblptru may be non-zero
  8952  00D9C0                     	endif
  8953  00D9C0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8954  00D9C0  0E00               	movlw	low (__mediumconst shr (0+16))
  8955  00D9C2  6EF8               	movwf	tblptru,c
  8956  00D9C4                     	endif
  8957  00D9C4  0008               	tblrd		*
  8958  00D9C6  50F5               	movf	tablat,w,c
  8959  00D9C8  0012               	return	
  8960  00D9CA                     
  8961                           ;fat16.c: 1109: return ((unsigned char)((((uint16_t)512))&0xFF));
  8962  00D9CA  0E00               	movlw	0
  8963  00D9CC  0012               	return	
  8964  00D9CE                     
  8965                           ;fat16.c: 1111: return ((unsigned char)(((((uint16_t)512))>>8)&0xFF));
  8966  00D9CE  0E02               	movlw	2
  8967  00D9D0  0012               	return	
  8968  00D9D2                     
  8969                           ;fat16.c: 1113: return 1;
  8970  00D9D2  0E01               	movlw	1
  8971  00D9D4  0012               	return	
  8972  00D9D6                     
  8973                           ;fat16.c: 1115: return ((unsigned char)((((uint16_t)1))&0xFF));
  8974  00D9D6  0E01               	movlw	1
  8975  00D9D8  0012               	return	
  8976  00D9DA                     
  8977                           ;fat16.c: 1117: return ((unsigned char)(((((uint16_t)1))>>8)&0xFF));
  8978  00D9DA  0E00               	movlw	0
  8979  00D9DC  0012               	return	
  8980  00D9DE                     
  8981                           ;fat16.c: 1119: return 1;
  8982  00D9DE  0E01               	movlw	1
  8983  00D9E0  0012               	return	
  8984  00D9E2                     
  8985                           ;fat16.c: 1121: return ((unsigned char)((((uint16_t)64))&0xFF));
  8986  00D9E2  0E40               	movlw	64
  8987  00D9E4  0012               	return	
  8988  00D9E6                     
  8989                           ;fat16.c: 1123: return ((unsigned char)(((((uint16_t)64))>>8)&0xFF));
  8990  00D9E6  0E00               	movlw	0
  8991  00D9E8  0012               	return	
  8992  00D9EA                     
  8993                           ;fat16.c: 1125: return ((unsigned char)((((uint16_t)8191))&0xFF));
  8994  00D9EA  0EFF               	movlw	255
  8995  00D9EC  0012               	return	
  8996  00D9EE                     
  8997                           ;fat16.c: 1127: return ((unsigned char)(((((uint16_t)8191))>>8)&0xFF));
  8998  00D9EE  0E1F               	movlw	31
  8999  00D9F0  0012               	return	
  9000  00D9F2                     
  9001                           ;fat16.c: 1129: return 0XF8;
  9002  00D9F2  0EF8               	movlw	248
  9003  00D9F4  0012               	return	
  9004  00D9F6                     
  9005                           ;fat16.c: 1131: return ((unsigned char)((((uint16_t)32))&0xFF));
  9006  00D9F6  0E20               	movlw	32
  9007  00D9F8  0012               	return	
  9008  00D9FA                     
  9009                           ;fat16.c: 1133: return ((unsigned char)(((((uint16_t)32))>>8)&0xFF));
  9010  00D9FA  0E00               	movlw	0
  9011  00D9FC  0012               	return	
  9012  00D9FE                     
  9013                           ;fat16.c: 1135: return ((unsigned char)((((uint16_t)63))&0xFF));
  9014  00D9FE  0E3F               	movlw	63
  9015  00DA00  0012               	return	
  9016  00DA02                     
  9017                           ;fat16.c: 1137: return ((unsigned char)(((((uint16_t)63))>>8)&0xFF));
  9018  00DA02  0E00               	movlw	0
  9019  00DA04  0012               	return	
  9020  00DA06                     
  9021                           ;fat16.c: 1139: return ((unsigned char)((((uint16_t)16))&0xFF));
  9022  00DA06  0E10               	movlw	16
  9023  00DA08  0012               	return	
  9024  00DA0A                     
  9025                           ;fat16.c: 1141: return ((unsigned char)(((((uint16_t)16))>>8)&0xFF));
  9026  00DA0A  0E00               	movlw	0
  9027  00DA0C  0012               	return	
  9028  00DA0E                     
  9029                           ;fat16.c: 1143: return ((unsigned char)((((unsigned short)((((uint32_t)0))&0xFFFF)))&0xF
      +                          F));
  9030  00DA0E  0E00               	movlw	0
  9031  00DA10  0012               	return	
  9032  00DA12                     
  9033                           ;fat16.c: 1145: return ((unsigned char)(((((unsigned short)((((uint32_t)0))&0xFFFF)))>>8
      +                          )&0xFF));
  9034  00DA12  0E00               	movlw	0
  9035  00DA14  0012               	return	
  9036  00DA16                     
  9037                           ;fat16.c: 1147: return ((unsigned char)((((unsigned short)(((((uint32_t)0))>>16)&0xFFFF)
      +                          ))&0xFF));
  9038  00DA16  0E00               	movlw	0
  9039  00DA18  0012               	return	
  9040  00DA1A                     
  9041                           ;fat16.c: 1149: return ((unsigned char)(((((unsigned short)(((((uint32_t)0))>>16)&0xFFFF
      +                          )))>>8)&0xFF));
  9042  00DA1A  0E00               	movlw	0
  9043  00DA1C  0012               	return	
  9044  00DA1E                     
  9045                           ;fat16.c: 1151: return ((unsigned char)((((uint16_t)0b00000001))&0xFF));
  9046  00DA1E  0E01               	movlw	1
  9047  00DA20  0012               	return	
  9048  00DA22                     
  9049                           ;fat16.c: 1153: return ((unsigned char)(((((uint16_t)0b00000001))>>8)&0xFF));
  9050  00DA22  0E00               	movlw	0
  9051  00DA24  0012               	return	
  9052  00DA26                     
  9053                           ;fat16.c: 1155: return ((unsigned char)((((unsigned short)((((uint32_t)34))&0xFFFF)))&0x
      +                          FF));
  9054  00DA26  0E22               	movlw	34
  9055  00DA28  0012               	return	
  9056  00DA2A                     
  9057                           ;fat16.c: 1157: return ((unsigned char)(((((unsigned short)((((uint32_t)34))&0xFFFF)))>>
      +                          8)&0xFF));
  9058  00DA2A  0E00               	movlw	0
  9059  00DA2C  0012               	return	
  9060  00DA2E                     
  9061                           ;fat16.c: 1161: return ((unsigned char)(((((unsigned short)(((((uint32_t)34))>>16)&0xFFF
      +                          F)))>>8)&0xFF));
  9062                           
  9063                           ;fat16.c: 1160: case 0x2F:
  9064  00DA2E  0E00               	movlw	0
  9065  00DA30  0012               	return	
  9066  00DA32                     
  9067                           ;fat16.c: 1163: return 'F';
  9068  00DA32  0E46               	movlw	70
  9069  00DA34  0012               	return	
  9070  00DA36                     
  9071                           ;fat16.c: 1165: return 'A';
  9072  00DA36  0E41               	movlw	65
  9073  00DA38  0012               	return	
  9074  00DA3A                     
  9075                           ;fat16.c: 1167: return 'T';
  9076  00DA3A  0E54               	movlw	84
  9077  00DA3C  0012               	return	
  9078  00DA3E                     
  9079                           ;fat16.c: 1169: return '1';
  9080  00DA3E  0E31               	movlw	49
  9081  00DA40  0012               	return	
  9082  00DA42                     
  9083                           ;fat16.c: 1171: return '6';
  9084  00DA42  0E36               	movlw	54
  9085  00DA44  0012               	return	
  9086  00DA46                     
  9087                           ;fat16.c: 1173: return ' ';
  9088  00DA46  0E20               	movlw	32
  9089  00DA48  0012               	return	
  9090  00DA4A                     
  9091                           ;fat16.c: 1175: return ' ';
  9092  00DA4A  0E20               	movlw	32
  9093  00DA4C  0012               	return	
  9094  00DA4E                     
  9095                           ;fat16.c: 1177: return ' ';
  9096  00DA4E  0E20               	movlw	32
  9097  00DA50  0012               	return	
  9098  00DA52                     
  9099                           ;fat16.c: 1179: return ((unsigned char)(((((uint16_t)0X55AA))>>8)&0xFF));
  9100  00DA52  0E55               	movlw	85
  9101  00DA54  0012               	return	
  9102  00DA56                     
  9103                           ;fat16.c: 1181: return ((unsigned char)((((uint16_t)0X55AA))&0xFF));
  9104  00DA56  0EAA               	movlw	170
  9105  00DA58  0012               	return	
  9106  00DA5A                     
  9107                           ;fat16.c: 1183: return 0X00;
  9108  00DA5A  0E00               	movlw	0
  9109                           
  9110                           ;fat16.c: 1184: }
  9111  00DA5C  0012               	return	
  9112  00DA5E                     l1894:
  9113  00DA5E  C060  F062         	movff	__get_fbr@idx,??__get_fbr
  9114  00DA62  C061  F063         	movff	__get_fbr@idx+1,??__get_fbr+1
  9115                           
  9116                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  9117                           ; Switch size 1, requested type "space"
  9118                           ; Number of cases is 2, Range of values is 0 to 1
  9119                           ; switch strategies available:
  9120                           ; Name         Instructions Cycles
  9121                           ; simple_byte            7     4 (average)
  9122                           ;	Chosen strategy is simple_byte
  9123  00DA66  0100               	movlb	0	; () banked
  9124  00DA68  5163               	movf	(??__get_fbr+1)& (0+255),w,b
  9125  00DA6A  0A00               	xorlw	0	; case 0
  9126  00DA6C  B4D8               	btfsc	status,2,c
  9127  00DA6E  D004               	goto	l24324
  9128  00DA70  0A01               	xorlw	1	; case 1
  9129  00DA72  B4D8               	btfsc	status,2,c
  9130  00DA74  D08D               	goto	l24326
  9131  00DA76  D7F1               	goto	l1944
  9132  00DA78                     l24324:
  9133                           
  9134                           ; BSR set to: 0
  9135                           ; Switch size 1, requested type "space"
  9136                           ; Number of cases is 46, Range of values is 0 to 61
  9137                           ; switch strategies available:
  9138                           ; Name         Instructions Cycles
  9139                           ; simple_byte          139    70 (average)
  9140                           ;	Chosen strategy is simple_byte
  9141  00DA78  5162               	movf	??__get_fbr& (0+255),w,b
  9142  00DA7A  0A00               	xorlw	0	; case 0
  9143  00DA7C  B4D8               	btfsc	status,2,c
  9144  00DA7E  D757               	goto	l1895
  9145  00DA80  0A01               	xorlw	1	; case 1
  9146  00DA82  B4D8               	btfsc	status,2,c
  9147  00DA84  D756               	goto	l1897
  9148  00DA86  0A03               	xorlw	3	; case 2
  9149  00DA88  B4D8               	btfsc	status,2,c
  9150  00DA8A  D755               	goto	l1898
  9151  00DA8C  0A01               	xorlw	1	; case 3
  9152  00DA8E  B4D8               	btfsc	status,2,c
  9153  00DA90  D754               	goto	l1899
  9154  00DA92  0A07               	xorlw	7	; case 4
  9155  00DA94  B4D8               	btfsc	status,2,c
  9156  00DA96  D75A               	goto	l1900
  9157  00DA98  0A01               	xorlw	1	; case 5
  9158  00DA9A  B4D8               	btfsc	status,2,c
  9159  00DA9C  D760               	goto	l1901
  9160  00DA9E  0A03               	xorlw	3	; case 6
  9161  00DAA0  B4D8               	btfsc	status,2,c
  9162  00DAA2  D766               	goto	l1902
  9163  00DAA4  0A01               	xorlw	1	; case 7
  9164  00DAA6  B4D8               	btfsc	status,2,c
  9165  00DAA8  D76C               	goto	l1903
  9166  00DAAA  0A0F               	xorlw	15	; case 8
  9167  00DAAC  B4D8               	btfsc	status,2,c
  9168  00DAAE  D772               	goto	l1904
  9169  00DAB0  0A01               	xorlw	1	; case 9
  9170  00DAB2  B4D8               	btfsc	status,2,c
  9171  00DAB4  D778               	goto	l1905
  9172  00DAB6  0A03               	xorlw	3	; case 10
  9173  00DAB8  B4D8               	btfsc	status,2,c
  9174  00DABA  D77E               	goto	l1906
  9175  00DABC  0A01               	xorlw	1	; case 11
  9176  00DABE  B4D8               	btfsc	status,2,c
  9177  00DAC0  D784               	goto	l1907
  9178  00DAC2  0A07               	xorlw	7	; case 12
  9179  00DAC4  B4D8               	btfsc	status,2,c
  9180  00DAC6  D783               	goto	l1908
  9181  00DAC8  0A01               	xorlw	1	; case 13
  9182  00DACA  B4D8               	btfsc	status,2,c
  9183  00DACC  D782               	goto	l1909
  9184  00DACE  0A03               	xorlw	3	; case 14
  9185  00DAD0  B4D8               	btfsc	status,2,c
  9186  00DAD2  D781               	goto	l1910
  9187  00DAD4  0A01               	xorlw	1	; case 15
  9188  00DAD6  B4D8               	btfsc	status,2,c
  9189  00DAD8  D780               	goto	l1911
  9190  00DADA  0A1F               	xorlw	31	; case 16
  9191  00DADC  B4D8               	btfsc	status,2,c
  9192  00DADE  D77F               	goto	l1912
  9193  00DAE0  0A01               	xorlw	1	; case 17
  9194  00DAE2  B4D8               	btfsc	status,2,c
  9195  00DAE4  D77E               	goto	l1913
  9196  00DAE6  0A03               	xorlw	3	; case 18
  9197  00DAE8  B4D8               	btfsc	status,2,c
  9198  00DAEA  D77D               	goto	l1914
  9199  00DAEC  0A01               	xorlw	1	; case 19
  9200  00DAEE  B4D8               	btfsc	status,2,c
  9201  00DAF0  D77C               	goto	l1915
  9202  00DAF2  0A07               	xorlw	7	; case 20
  9203  00DAF4  B4D8               	btfsc	status,2,c
  9204  00DAF6  D77B               	goto	l1916
  9205  00DAF8  0A01               	xorlw	1	; case 21
  9206  00DAFA  B4D8               	btfsc	status,2,c
  9207  00DAFC  D77A               	goto	l1917
  9208  00DAFE  0A03               	xorlw	3	; case 22
  9209  00DB00  B4D8               	btfsc	status,2,c
  9210  00DB02  D779               	goto	l1918
  9211  00DB04  0A01               	xorlw	1	; case 23
  9212  00DB06  B4D8               	btfsc	status,2,c
  9213  00DB08  D778               	goto	l1919
  9214  00DB0A  0A0F               	xorlw	15	; case 24
  9215  00DB0C  B4D8               	btfsc	status,2,c
  9216  00DB0E  D777               	goto	l1920
  9217  00DB10  0A01               	xorlw	1	; case 25
  9218  00DB12  B4D8               	btfsc	status,2,c
  9219  00DB14  D776               	goto	l1921
  9220  00DB16  0A03               	xorlw	3	; case 26
  9221  00DB18  B4D8               	btfsc	status,2,c
  9222  00DB1A  D775               	goto	l1922
  9223  00DB1C  0A01               	xorlw	1	; case 27
  9224  00DB1E  B4D8               	btfsc	status,2,c
  9225  00DB20  D774               	goto	l1923
  9226  00DB22  0A07               	xorlw	7	; case 28
  9227  00DB24  B4D8               	btfsc	status,2,c
  9228  00DB26  D773               	goto	l1924
  9229  00DB28  0A01               	xorlw	1	; case 29
  9230  00DB2A  B4D8               	btfsc	status,2,c
  9231  00DB2C  D772               	goto	l1925
  9232  00DB2E  0A03               	xorlw	3	; case 30
  9233  00DB30  B4D8               	btfsc	status,2,c
  9234  00DB32  D771               	goto	l1926
  9235  00DB34  0A01               	xorlw	1	; case 31
  9236  00DB36  B4D8               	btfsc	status,2,c
  9237  00DB38  D770               	goto	l1927
  9238  00DB3A  0A37               	xorlw	55	; case 40
  9239  00DB3C  B4D8               	btfsc	status,2,c
  9240  00DB3E  D76F               	goto	l1928
  9241  00DB40  0A01               	xorlw	1	; case 41
  9242  00DB42  B4D8               	btfsc	status,2,c
  9243  00DB44  D76E               	goto	l1929
  9244  00DB46  0A05               	xorlw	5	; case 44
  9245  00DB48  B4D8               	btfsc	status,2,c
  9246  00DB4A  D76D               	goto	l1930
  9247  00DB4C  0A01               	xorlw	1	; case 45
  9248  00DB4E  B4D8               	btfsc	status,2,c
  9249  00DB50  D76C               	goto	l1931
  9250  00DB52  0A03               	xorlw	3	; case 46
  9251  00DB54  B4D8               	btfsc	status,2,c
  9252  00DB56  D76B               	goto	l1932
  9253  00DB58  0A01               	xorlw	1	; case 47
  9254  00DB5A  B4D8               	btfsc	status,2,c
  9255  00DB5C  D768               	goto	l1932
  9256  00DB5E  0A19               	xorlw	25	; case 54
  9257  00DB60  B4D8               	btfsc	status,2,c
  9258  00DB62  D767               	goto	l1934
  9259  00DB64  0A01               	xorlw	1	; case 55
  9260  00DB66  B4D8               	btfsc	status,2,c
  9261  00DB68  D766               	goto	l1935
  9262  00DB6A  0A0F               	xorlw	15	; case 56
  9263  00DB6C  B4D8               	btfsc	status,2,c
  9264  00DB6E  D765               	goto	l1936
  9265  00DB70  0A01               	xorlw	1	; case 57
  9266  00DB72  B4D8               	btfsc	status,2,c
  9267  00DB74  D764               	goto	l1937
  9268  00DB76  0A03               	xorlw	3	; case 58
  9269  00DB78  B4D8               	btfsc	status,2,c
  9270  00DB7A  D763               	goto	l1938
  9271  00DB7C  0A01               	xorlw	1	; case 59
  9272  00DB7E  B4D8               	btfsc	status,2,c
  9273  00DB80  D762               	goto	l1939
  9274  00DB82  0A07               	xorlw	7	; case 60
  9275  00DB84  B4D8               	btfsc	status,2,c
  9276  00DB86  D761               	goto	l1940
  9277  00DB88  0A01               	xorlw	1	; case 61
  9278  00DB8A  B4D8               	btfsc	status,2,c
  9279  00DB8C  D760               	goto	l1941
  9280  00DB8E  D765               	goto	l1944
  9281  00DB90                     l24326:
  9282                           
  9283                           ; BSR set to: 0
  9284                           ; Switch size 1, requested type "space"
  9285                           ; Number of cases is 2, Range of values is 254 to 255
  9286                           ; switch strategies available:
  9287                           ; Name         Instructions Cycles
  9288                           ; simple_byte            7     4 (average)
  9289                           ;	Chosen strategy is simple_byte
  9290  00DB90  5162               	movf	??__get_fbr& (0+255),w,b
  9291  00DB92  0AFE               	xorlw	254	; case 254
  9292  00DB94  B4D8               	btfsc	status,2,c
  9293  00DB96  D75D               	goto	l1942
  9294  00DB98  0A01               	xorlw	1	; case 255
  9295  00DB9A  B4D8               	btfsc	status,2,c
  9296  00DB9C  D75C               	goto	l1943
  9297  00DB9E  D75D               	goto	l1944
  9298  00DBA0                     __end_of__get_fbr:
  9299                           	opt stack 0
  9300                           tblptru	equ	0xFF8
  9301                           tblptrh	equ	0xFF7
  9302                           tblptrl	equ	0xFF6
  9303                           tablat	equ	0xFF5
  9304                           postinc0	equ	0xFEE
  9305                           wreg	equ	0xFE8
  9306                           postdec1	equ	0xFE5
  9307                           fsr1h	equ	0xFE2
  9308                           fsr1l	equ	0xFE1
  9309                           indf2	equ	0xFDF
  9310                           postinc2	equ	0xFDE
  9311                           fsr2h	equ	0xFDA
  9312                           fsr2l	equ	0xFD9
  9313                           status	equ	0xFD8
  9314                           
  9315 ;; *************** function __get_fat *****************
  9316 ;; Defined at:
  9317 ;;		line 1187 in file "fat16.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;  idx             2    0[BANK0 ] unsigned int 
  9320 ;; Auto vars:     Size  Location     Type
  9321 ;;		None
  9322 ;; Return value:  Size  Location     Type
  9323 ;;                  1    wreg      unsigned char 
  9324 ;; Registers used:
  9325 ;;		wreg, status,2, status,0
  9326 ;; Tracked objects:
  9327 ;;		On entry : 0/0
  9328 ;;		On exit  : 0/0
  9329 ;;		Unchanged: 0/0
  9330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  9331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9334 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9335 ;;Total ram usage:        4 bytes
  9336 ;; Hardware stack levels used:    1
  9337 ;; Hardware stack levels required when called:   10
  9338 ;; This function calls:
  9339 ;;		Nothing
  9340 ;; This function is called by:
  9341 ;;		_fat_format
  9342 ;; This function uses a non-reentrant model
  9343 ;;
  9344                           
  9345                           	psect	text14
  9346  0133AE                     __ptext14:
  9347                           	opt stack 0
  9348  0133AE                     __get_fat:
  9349                           	opt stack 17
  9350                           
  9351                           ;fat16.c: 1189: switch (idx)
  9352                           
  9353                           ;incstack = 0
  9354  0133AE  D00E               	goto	l1948
  9355  0133B0                     
  9356                           ;fat16.c: 1193: return 0xF8;
  9357  0133B0  0EF8               	movlw	248
  9358  0133B2  0012               	return	
  9359  0133B4                     
  9360                           ;fat16.c: 1195: return 0xFF;
  9361  0133B4  0EFF               	movlw	255
  9362  0133B6  0012               	return	
  9363  0133B8                     
  9364                           ;fat16.c: 1197: return 0xFF;
  9365  0133B8  0EFF               	movlw	255
  9366  0133BA  0012               	return	
  9367  0133BC                     
  9368                           ;fat16.c: 1199: return 0xFF;
  9369  0133BC  0EFF               	movlw	255
  9370  0133BE  0012               	return	
  9371  0133C0                     
  9372                           ;fat16.c: 1202: return 0xFF;
  9373  0133C0  0EFF               	movlw	255
  9374  0133C2  0012               	return	
  9375  0133C4                     
  9376                           ;fat16.c: 1204: return 0xFF;
  9377  0133C4  0EFF               	movlw	255
  9378  0133C6  0012               	return	
  9379  0133C8                     
  9380                           ;fat16.c: 1206: return 0X00;
  9381  0133C8  0E00               	movlw	0
  9382                           
  9383                           ;fat16.c: 1207: }
  9384  0133CA  0012               	return	
  9385  0133CC                     l1948:
  9386  0133CC  C060  F062         	movff	__get_fat@idx,??__get_fat
  9387  0133D0  C061  F063         	movff	__get_fat@idx+1,??__get_fat+1
  9388                           
  9389                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9390                           ; Switch size 1, requested type "space"
  9391                           ; Number of cases is 1, Range of values is 0 to 0
  9392                           ; switch strategies available:
  9393                           ; Name         Instructions Cycles
  9394                           ; simple_byte            4     3 (average)
  9395                           ;	Chosen strategy is simple_byte
  9396  0133D4  0100               	movlb	0	; () banked
  9397  0133D6  5163               	movf	(??__get_fat+1)& (0+255),w,b
  9398  0133D8  0A00               	xorlw	0	; case 0
  9399  0133DA  A4D8               	btfss	status,2,c
  9400  0133DC  D7F5               	goto	l1956
  9401                           
  9402                           ; BSR set to: 0
  9403                           ; Switch size 1, requested type "space"
  9404                           ; Number of cases is 6, Range of values is 0 to 5
  9405                           ; switch strategies available:
  9406                           ; Name         Instructions Cycles
  9407                           ; simple_byte           19    10 (average)
  9408                           ;	Chosen strategy is simple_byte
  9409  0133DE  5162               	movf	??__get_fat& (0+255),w,b
  9410  0133E0  0A00               	xorlw	0	; case 0
  9411  0133E2  B4D8               	btfsc	status,2,c
  9412  0133E4  D7E5               	goto	l1949
  9413  0133E6  0A01               	xorlw	1	; case 1
  9414  0133E8  B4D8               	btfsc	status,2,c
  9415  0133EA  D7E4               	goto	l1951
  9416  0133EC  0A03               	xorlw	3	; case 2
  9417  0133EE  B4D8               	btfsc	status,2,c
  9418  0133F0  D7E3               	goto	l1952
  9419  0133F2  0A01               	xorlw	1	; case 3
  9420  0133F4  B4D8               	btfsc	status,2,c
  9421  0133F6  D7E2               	goto	l1953
  9422  0133F8  0A07               	xorlw	7	; case 4
  9423  0133FA  B4D8               	btfsc	status,2,c
  9424  0133FC  D7E1               	goto	l1954
  9425  0133FE  0A01               	xorlw	1	; case 5
  9426  013400  B4D8               	btfsc	status,2,c
  9427  013402  D7E0               	goto	l1955
  9428  013404  D7E1               	goto	l1956
  9429  013406                     __end_of__get_fat:
  9430                           	opt stack 0
  9431                           tblptru	equ	0xFF8
  9432                           tblptrh	equ	0xFF7
  9433                           tblptrl	equ	0xFF6
  9434                           tablat	equ	0xFF5
  9435                           postinc0	equ	0xFEE
  9436                           wreg	equ	0xFE8
  9437                           postdec1	equ	0xFE5
  9438                           fsr1h	equ	0xFE2
  9439                           fsr1l	equ	0xFE1
  9440                           indf2	equ	0xFDF
  9441                           postinc2	equ	0xFDE
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function __get_data *****************
  9447 ;; Defined at:
  9448 ;;		line 1283 in file "fat16.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  idx             2    0[BANK0 ] unsigned int 
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      unsigned char 
  9455 ;; Registers used:
  9456 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  9462 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9466 ;;Total ram usage:        2 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:   10
  9469 ;; This function calls:
  9470 ;;		Nothing
  9471 ;; This function is called by:
  9472 ;;		_fat_format
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           	psect	text15
  9477  014000                     __ptext15:
  9478                           	opt stack 0
  9479  014000                     __get_data:
  9480                           	opt stack 17
  9481                           
  9482                           ;fat16.c: 1285: if(idx < 12)
  9483                           
  9484                           ;incstack = 0
  9485  014000  0100               	movlb	0	; () banked
  9486  014002  5161               	movf	(__get_data@idx+1)& (0+255),w,b
  9487  014004  E110               	bnz	l20236
  9488  014006  0E0C               	movlw	12
  9489  014008  5D60               	subwf	__get_data@idx& (0+255),w,b
  9490  01400A  B0D8               	btfsc	status,0,c
  9491  01400C  D00C               	goto	l1992
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;fat16.c: 1286: {;fat16.c: 1287: return "hello world!"[idx];
  9495  01400E  0EBB               	movlw	low STR_18
  9496  014010  2560               	addwf	__get_data@idx& (0+255),w,b
  9497  014012  6EF6               	movwf	tblptrl,c
  9498  014014  0EA2               	movlw	high STR_18
  9499  014016  2161               	addwfc	(__get_data@idx+1)& (0+255),w,b
  9500  014018  6EF7               	movwf	tblptrh,c
  9501  01401A                     	if	1	;There are 3 active tblptr bytes
  9502  01401A  6AF8               	clrf	tblptru,c
  9503  01401C  0E00               	movlw	low (__mediumconst shr (0+16))
  9504  01401E  22F8               	addwfc	tblptru,f,c
  9505  014020                     	endif
  9506  014020  0008               	tblrd		*
  9507  014022  50F5               	movf	tablat,w,c
  9508                           
  9509                           ; BSR set to: 0
  9510  014024  0012               	return	
  9511  014026                     l1992:
  9512  014026                     l20236:
  9513                           
  9514                           ; BSR set to: 0
  9515                           ;fat16.c: 1288: };fat16.c: 1289: return 0X00;
  9516  014026  0E00               	movlw	0
  9517  014028  0012               	return	
  9518  01402A                     __end_of__get_data:
  9519                           	opt stack 0
  9520                           tblptru	equ	0xFF8
  9521                           tblptrh	equ	0xFF7
  9522                           tblptrl	equ	0xFF6
  9523                           tablat	equ	0xFF5
  9524                           postinc0	equ	0xFEE
  9525                           wreg	equ	0xFE8
  9526                           postdec1	equ	0xFE5
  9527                           fsr1h	equ	0xFE2
  9528                           fsr1l	equ	0xFE1
  9529                           indf2	equ	0xFDF
  9530                           postinc2	equ	0xFDE
  9531                           fsr2h	equ	0xFDA
  9532                           fsr2l	equ	0xFD9
  9533                           status	equ	0xFD8
  9534                           
  9535 ;; *************** function _encoder_init *****************
  9536 ;; Defined at:
  9537 ;;		line 92 in file "encoder.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;		None
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;		None
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  1    wreg      void 
  9544 ;; Registers used:
  9545 ;;		wreg, status,2, status,0
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  9551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9554 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9555 ;;Total ram usage:        0 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:   10
  9558 ;; This function calls:
  9559 ;;		Nothing
  9560 ;; This function is called by:
  9561 ;;		_system_init
  9562 ;; This function uses a non-reentrant model
  9563 ;;
  9564                           
  9565                           	psect	text16
  9566  01411E                     __ptext16:
  9567                           	opt stack 0
  9568  01411E                     _encoder_init:
  9569                           	opt stack 19
  9570                           
  9571                           ;encoder.c: 94: enc1 = PORTE & 0b00000111;
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;incstack = 0
  9575  01411E  5084               	movf	3972,w,c	;volatile
  9576  014120  0B07               	andlw	7
  9577  014122  6E1F               	movwf	_enc1,c
  9578                           
  9579                           ;encoder.c: 95: enc2 = PORTA & 0b00000111;
  9580  014124  5080               	movf	3968,w,c	;volatile
  9581  014126  0B07               	andlw	7
  9582  014128  6E1E               	movwf	_enc2,c
  9583                           
  9584                           ;encoder.c: 96: os.encoder1Count = 0;
  9585  01412A  0E00               	movlw	0
  9586  01412C  0101               	movlb	1	; () banked
  9587  01412E  6F76               	movwf	(_os+3)& (0+255),b	;volatile
  9588                           
  9589                           ; BSR set to: 1
  9590                           ;encoder.c: 97: os.encoder2Count = 0;
  9591  014130  0E00               	movlw	0
  9592  014132  6F78               	movwf	(_os+5)& (0+255),b	;volatile
  9593                           
  9594                           ; BSR set to: 1
  9595                           ;encoder.c: 98: os.button1 = 0;
  9596  014134  0E00               	movlw	0
  9597  014136  6F77               	movwf	(_os+4)& (0+255),b	;volatile
  9598                           
  9599                           ; BSR set to: 1
  9600                           ;encoder.c: 99: os.button2 = 0;
  9601  014138  0E00               	movlw	0
  9602  01413A  6F79               	movwf	(_os+6)& (0+255),b	;volatile
  9603                           
  9604                           ; BSR set to: 1
  9605                           ;encoder.c: 100: os.displayState = DISPLAY_STATE_MAIN_SETUP;
  9606  01413C  0E01               	movlw	1
  9607  01413E  6F80               	movwf	(_os+13)& (0+255),b	;volatile
  9608                           
  9609                           ; BSR set to: 1
  9610  014140  0012               	return		;funcret
  9611  014142                     __end_of_encoder_init:
  9612                           	opt stack 0
  9613                           tblptru	equ	0xFF8
  9614                           tblptrh	equ	0xFF7
  9615                           tblptrl	equ	0xFF6
  9616                           tablat	equ	0xFF5
  9617                           postinc0	equ	0xFEE
  9618                           wreg	equ	0xFE8
  9619                           postdec1	equ	0xFE5
  9620                           fsr1h	equ	0xFE2
  9621                           fsr1l	equ	0xFE1
  9622                           indf2	equ	0xFDF
  9623                           postinc2	equ	0xFDE
  9624                           fsr2h	equ	0xFDA
  9625                           fsr2l	equ	0xFD9
  9626                           status	equ	0xFD8
  9627                           
  9628 ;; *************** function _display_update *****************
  9629 ;; Defined at:
  9630 ;;		line 570 in file "display.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;		None
  9633 ;; Auto vars:     Size  Location     Type
  9634 ;;  line            1   16[BANK0 ] unsigned char 
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  1    wreg      void 
  9637 ;; Registers used:
  9638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9639 ;; Tracked objects:
  9640 ;;		On entry : 0/0
  9641 ;;		On exit  : 0/0
  9642 ;;		Unchanged: 0/0
  9643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  9644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9648 ;;Total ram usage:        1 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; Hardware stack levels required when called:   14
  9651 ;; This function calls:
  9652 ;;		_i2c_display_cursor
  9653 ;;		_i2c_display_write_fixed
  9654 ;; This function is called by:
  9655 ;;		_main
  9656 ;;		_system_init
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text17
  9661  013CB0                     __ptext17:
  9662                           	opt stack 0
  9663  013CB0                     _display_update:
  9664                           	opt stack 15
  9665                           
  9666                           ;display.c: 572: uint8_t line;;display.c: 573: for(line=0; line<4; ++line)
  9667                           
  9668                           ; BSR set to: 1
  9669                           ;incstack = 0
  9670  013CB0  0E00               	movlw	0
  9671  013CB2  0100               	movlb	0	; () banked
  9672  013CB4  6F70               	movwf	display_update@line& (0+255),b
  9673  013CB6                     l21902:
  9674                           
  9675                           ; BSR set to: 0
  9676  013CB6  0E03               	movlw	3
  9677  013CB8  6570               	cpfsgt	display_update@line& (0+255),b
  9678  013CBA  D001               	goto	l1437
  9679  013CBC  0012               	return	
  9680  013CBE                     l1437:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;display.c: 574: {;display.c: 575: i2c_display_cursor(line, 0);
  9684                           
  9685                           ; BSR set to: 0
  9686  013CBE  0E00               	movlw	0
  9687  013CC0  6F6D               	movwf	i2c_display_cursor@position& (0+255),b
  9688  013CC2  5170               	movf	display_update@line& (0+255),w,b
  9689  013CC4  ECC5  F0A0         	call	_i2c_display_cursor
  9690                           
  9691                           ;display.c: 576: i2c_display_write_fixed(display_content[line], 20);
  9692  013CC8  0100               	movlb	0	; () banked
  9693  013CCA  5170               	movf	display_update@line& (0+255),w,b
  9694  013CCC  0D14               	mullw	20
  9695  013CCE  0E80               	movlw	low _display_content
  9696  013CD0  24F3               	addwf	prodl,w,c
  9697  013CD2  6F65               	movwf	i2c_display_write_fixed@data& (0+255),b
  9698  013CD4  0E02               	movlw	high _display_content
  9699  013CD6  20F4               	addwfc	prodh,w,c
  9700  013CD8  6F66               	movwf	(i2c_display_write_fixed@data+1)& (0+255),b
  9701  013CDA  0E14               	movlw	20
  9702  013CDC  6F67               	movwf	i2c_display_write_fixed@length& (0+255),b
  9703  013CDE  ECDD  F09A         	call	_i2c_display_write_fixed	;wreg free
  9704  013CE2  0100               	movlb	0	; () banked
  9705  013CE4  2B70               	incf	display_update@line& (0+255),f,b
  9706  013CE6  D7E7               	goto	l21902
  9707  013CE8                     __end_of_display_update:
  9708                           	opt stack 0
  9709                           tblptru	equ	0xFF8
  9710                           tblptrh	equ	0xFF7
  9711                           tblptrl	equ	0xFF6
  9712                           tablat	equ	0xFF5
  9713                           prodh	equ	0xFF4
  9714                           prodl	equ	0xFF3
  9715                           postinc0	equ	0xFEE
  9716                           wreg	equ	0xFE8
  9717                           postdec1	equ	0xFE5
  9718                           fsr1h	equ	0xFE2
  9719                           fsr1l	equ	0xFE1
  9720                           indf2	equ	0xFDF
  9721                           postinc2	equ	0xFDE
  9722                           fsr2h	equ	0xFDA
  9723                           fsr2l	equ	0xFD9
  9724                           status	equ	0xFD8
  9725                           
  9726 ;; *************** function _i2c_display_write_fixed *****************
  9727 ;; Defined at:
  9728 ;;		line 395 in file "i2c.c"
  9729 ;; Parameters:    Size  Location     Type
  9730 ;;  data            2    5[BANK0 ] PTR unsigned char 
  9731 ;;		 -> display_content(80), 
  9732 ;;  length          1    7[BANK0 ] unsigned char 
  9733 ;; Auto vars:     Size  Location     Type
  9734 ;;  pos             1    8[BANK0 ] unsigned char 
  9735 ;; Return value:  Size  Location     Type
  9736 ;;                  1    wreg      void 
  9737 ;; Registers used:
  9738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9739 ;; Tracked objects:
  9740 ;;		On entry : 0/0
  9741 ;;		On exit  : 0/0
  9742 ;;		Unchanged: 0/0
  9743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  9744 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9747 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9748 ;;Total ram usage:        4 bytes
  9749 ;; Hardware stack levels used:    1
  9750 ;; Hardware stack levels required when called:   11
  9751 ;; This function calls:
  9752 ;;		__i2c_send
  9753 ;;		__i2c_start
  9754 ;;		__i2c_stop
  9755 ;;		__i2c_wait_idle
  9756 ;; This function is called by:
  9757 ;;		_display_update
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           	psect	text18
  9762  0135BA                     __ptext18:
  9763                           	opt stack 0
  9764  0135BA                     _i2c_display_write_fixed:
  9765                           	opt stack 17
  9766                           
  9767                           ;i2c.c: 397: uint8_t pos;;i2c.c: 402: _i2c_wait_idle();
  9768                           
  9769                           ; BSR set to: 0
  9770                           ;incstack = 0
  9771  0135BA  EC77  F097         	call	__i2c_wait_idle	;wreg free
  9772                           
  9773                           ;i2c.c: 403: _i2c_start();
  9774  0135BE  ECA4  F0A1         	call	__i2c_start	;wreg free
  9775                           
  9776                           ;i2c.c: 404: _i2c_wait_idle();
  9777  0135C2  EC77  F097         	call	__i2c_wait_idle	;wreg free
  9778                           
  9779                           ;i2c.c: 405: _i2c_send(0b01111000);
  9780  0135C6  0E78               	movlw	120
  9781  0135C8  EC91  F0A1         	call	__i2c_send
  9782                           
  9783                           ;i2c.c: 406: _i2c_wait_idle();
  9784  0135CC  EC77  F097         	call	__i2c_wait_idle	;wreg free
  9785                           
  9786                           ;i2c.c: 407: _i2c_send(0b01000000);
  9787  0135D0  0E40               	movlw	64
  9788  0135D2  EC91  F0A1         	call	__i2c_send
  9789                           
  9790                           ;i2c.c: 408: _i2c_wait_idle();
  9791  0135D6  EC77  F097         	call	__i2c_wait_idle	;wreg free
  9792                           
  9793                           ;i2c.c: 411: for(pos=0; pos<length; ++pos)
  9794  0135DA  0E00               	movlw	0
  9795  0135DC  0100               	movlb	0	; () banked
  9796  0135DE  6F68               	movwf	i2c_display_write_fixed@pos& (0+255),b
  9797  0135E0  D00F               	goto	l1213
  9798  0135E2                     
  9799                           ; BSR set to: 0
  9800                           ;i2c.c: 412: {;i2c.c: 413: _i2c_send(data[pos]);
  9801                           
  9802                           ; BSR set to: 0
  9803  0135E2  5168               	movf	i2c_display_write_fixed@pos& (0+255),w,b
  9804  0135E4  0D01               	mullw	1
  9805  0135E6  50F3               	movf	prodl,w,c
  9806  0135E8  2565               	addwf	i2c_display_write_fixed@data& (0+255),w,b
  9807  0135EA  6ED9               	movwf	fsr2l,c
  9808  0135EC  50F4               	movf	prodh,w,c
  9809  0135EE  2166               	addwfc	(i2c_display_write_fixed@data+1)& (0+255),w,b
  9810  0135F0  6EDA               	movwf	fsr2h,c
  9811  0135F2  50DF               	movf	indf2,w,c
  9812  0135F4  EC91  F0A1         	call	__i2c_send
  9813                           
  9814                           ;i2c.c: 414: _i2c_wait_idle();
  9815  0135F8  EC77  F097         	call	__i2c_wait_idle	;wreg free
  9816  0135FC  0100               	movlb	0	; () banked
  9817  0135FE  2B68               	incf	i2c_display_write_fixed@pos& (0+255),f,b
  9818  013600                     l1213:
  9819                           
  9820                           ; BSR set to: 0
  9821                           
  9822                           ; BSR set to: 0
  9823  013600  5167               	movf	i2c_display_write_fixed@length& (0+255),w,b
  9824  013602  5D68               	subwf	i2c_display_write_fixed@pos& (0+255),w,b
  9825  013604  A0D8               	btfss	status,0,c
  9826  013606  D7ED               	goto	l1214
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;i2c.c: 415: };i2c.c: 417: _i2c_stop();
  9830                           
  9831                           ; BSR set to: 0
  9832  013608  ECA0  F0A1         	call	__i2c_stop	;wreg free
  9833  01360C  0012               	return		;funcret
  9834  01360E                     __end_of_i2c_display_write_fixed:
  9835                           	opt stack 0
  9836                           tblptru	equ	0xFF8
  9837                           tblptrh	equ	0xFF7
  9838                           tblptrl	equ	0xFF6
  9839                           tablat	equ	0xFF5
  9840                           prodh	equ	0xFF4
  9841                           prodl	equ	0xFF3
  9842                           postinc0	equ	0xFEE
  9843                           wreg	equ	0xFE8
  9844                           postdec1	equ	0xFE5
  9845                           fsr1h	equ	0xFE2
  9846                           fsr1l	equ	0xFE1
  9847                           indf2	equ	0xFDF
  9848                           postinc2	equ	0xFDE
  9849                           fsr2h	equ	0xFDA
  9850                           fsr2l	equ	0xFD9
  9851                           status	equ	0xFD8
  9852                           
  9853 ;; *************** function _i2c_display_cursor *****************
  9854 ;; Defined at:
  9855 ;;		line 355 in file "i2c.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;  line            1    wreg     unsigned char 
  9858 ;;  position        1   13[BANK0 ] unsigned char 
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;  line            1   14[BANK0 ] unsigned char 
  9861 ;;  address         1   15[BANK0 ] unsigned char 
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  1    wreg      void 
  9864 ;; Registers used:
  9865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  9871 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9872 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9874 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9875 ;;Total ram usage:        3 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:   13
  9878 ;; This function calls:
  9879 ;;		__ic2_display_set_ddram_address
  9880 ;; This function is called by:
  9881 ;;		_display_update
  9882 ;; This function uses a non-reentrant model
  9883 ;;
  9884                           
  9885                           	psect	text19
  9886  01418A                     __ptext19:
  9887                           	opt stack 0
  9888  01418A                     _i2c_display_cursor:
  9889                           	opt stack 15
  9890                           
  9891                           ;incstack = 0
  9892                           ;i2c_display_cursor@line stored from wreg
  9893  01418A  0100               	movlb	0	; () banked
  9894  01418C  6F6E               	movwf	i2c_display_cursor@line& (0+255),b
  9895                           
  9896                           ;i2c.c: 357: uint8_t address;;i2c.c: 360: line &= 0b11;
  9897  01418E  0E03               	movlw	3
  9898  014190  0100               	movlb	0	; () banked
  9899  014192  176E               	andwf	i2c_display_cursor@line& (0+255),f,b
  9900                           
  9901                           ;i2c.c: 361: address = line<<5;
  9902  014194  396E               	swapf	i2c_display_cursor@line& (0+255),w,b
  9903  014196  46E8               	rlncf	wreg,f,c
  9904  014198  0BE0               	andlw	224
  9905  01419A  6F6F               	movwf	i2c_display_cursor@address& (0+255),b
  9906                           
  9907                           ;i2c.c: 362: position &= 0b11111;
  9908  01419C  0E1F               	movlw	31
  9909  01419E  176D               	andwf	i2c_display_cursor@position& (0+255),f,b
  9910                           
  9911                           ;i2c.c: 363: address |= position;
  9912  0141A0  516D               	movf	i2c_display_cursor@position& (0+255),w,b
  9913  0141A2  136F               	iorwf	i2c_display_cursor@address& (0+255),f,b
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;i2c.c: 369: _ic2_display_set_ddram_address(address);
  9917  0141A4  516F               	movf	i2c_display_cursor@address& (0+255),w,b
  9918  0141A6  ECA1  F0A0         	call	__ic2_display_set_ddram_address
  9919  0141AA  0012               	return		;funcret
  9920  0141AC                     __end_of_i2c_display_cursor:
  9921                           	opt stack 0
  9922                           tblptru	equ	0xFF8
  9923                           tblptrh	equ	0xFF7
  9924                           tblptrl	equ	0xFF6
  9925                           tablat	equ	0xFF5
  9926                           prodh	equ	0xFF4
  9927                           prodl	equ	0xFF3
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           postdec1	equ	0xFE5
  9931                           fsr1h	equ	0xFE2
  9932                           fsr1l	equ	0xFE1
  9933                           indf2	equ	0xFDF
  9934                           postinc2	equ	0xFDE
  9935                           fsr2h	equ	0xFDA
  9936                           fsr2l	equ	0xFD9
  9937                           status	equ	0xFD8
  9938                           
  9939 ;; *************** function __ic2_display_set_ddram_address *****************
  9940 ;; Defined at:
  9941 ;;		line 326 in file "i2c.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;  address         1    wreg     unsigned char 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;  address         1   10[BANK0 ] unsigned char 
  9946 ;;  data_array      2   11[BANK0 ] unsigned char [2]
  9947 ;; Return value:  Size  Location     Type
  9948 ;;                  1    wreg      void 
  9949 ;; Registers used:
  9950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9951 ;; Tracked objects:
  9952 ;;		On entry : 0/0
  9953 ;;		On exit  : 0/0
  9954 ;;		Unchanged: 0/0
  9955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
  9956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9957 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9960 ;;Total ram usage:        3 bytes
  9961 ;; Hardware stack levels used:    1
  9962 ;; Hardware stack levels required when called:   12
  9963 ;; This function calls:
  9964 ;;		__i2c_write
  9965 ;; This function is called by:
  9966 ;;		_i2c_display_cursor
  9967 ;; This function uses a non-reentrant model
  9968 ;;
  9969                           
  9970                           	psect	text20
  9971  014142                     __ptext20:
  9972                           	opt stack 0
  9973  014142                     __ic2_display_set_ddram_address:
  9974                           	opt stack 15
  9975                           
  9976                           ;incstack = 0
  9977                           ;__ic2_display_set_ddram_address@address stored from wreg
  9978  014142  0100               	movlb	0	; () banked
  9979  014144  6F6A               	movwf	__ic2_display_set_ddram_address@address& (0+255),b
  9980                           
  9981                           ;i2c.c: 328: uint8_t data_array[2];;i2c.c: 329: data_array[0] = 0b00000000;
  9982  014146  0E00               	movlw	0
  9983  014148  0100               	movlb	0	; () banked
  9984  01414A  6F6B               	movwf	__ic2_display_set_ddram_address@data_array& (0+255),b
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;i2c.c: 330: data_array[1] = 0b10000000 | address;
  9988  01414C  516A               	movf	__ic2_display_set_ddram_address@address& (0+255),w,b
  9989  01414E  0980               	iorlw	128
  9990  014150  6F6C               	movwf	(__ic2_display_set_ddram_address@data_array+1)& (0+255),b
  9991                           
  9992                           ; BSR set to: 0
  9993                           ;i2c.c: 336: _i2c_write(0b01111000, &data_array[0], 2);
  9994  014152  0E6B               	movlw	low __ic2_display_set_ddram_address@data_array
  9995  014154  6F65               	movwf	__i2c_write@data& (0+255),b
  9996  014156  0E00               	movlw	high __ic2_display_set_ddram_address@data_array
  9997  014158  6F66               	movwf	(__i2c_write@data+1)& (0+255),b
  9998  01415A  0E02               	movlw	2
  9999  01415C  6F67               	movwf	__i2c_write@length& (0+255),b
 10000  01415E  0E78               	movlw	120
 10001  014160  ECD6  F09B         	call	__i2c_write
 10002  014164  0012               	return		;funcret
 10003  014166                     __end_of__ic2_display_set_ddram_address:
 10004                           	opt stack 0
 10005                           tblptru	equ	0xFF8
 10006                           tblptrh	equ	0xFF7
 10007                           tblptrl	equ	0xFF6
 10008                           tablat	equ	0xFF5
 10009                           prodh	equ	0xFF4
 10010                           prodl	equ	0xFF3
 10011                           postinc0	equ	0xFEE
 10012                           wreg	equ	0xFE8
 10013                           postdec1	equ	0xFE5
 10014                           fsr1h	equ	0xFE2
 10015                           fsr1l	equ	0xFE1
 10016                           indf2	equ	0xFDF
 10017                           postinc2	equ	0xFDE
 10018                           fsr2h	equ	0xFDA
 10019                           fsr2l	equ	0xFD9
 10020                           status	equ	0xFD8
 10021                           
 10022 ;; *************** function _display_init *****************
 10023 ;; Defined at:
 10024 ;;		line 222 in file "display.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      void 
 10031 ;; Registers used:
 10032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10042 ;;Total ram usage:        0 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:   14
 10045 ;; This function calls:
 10046 ;;		_i2c_display_init
 10047 ;;		_i2c_display_program_custom_character
 10048 ;; This function is called by:
 10049 ;;		_system_init
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           	psect	text21
 10054  013CE8                     __ptext21:
 10055                           	opt stack 0
 10056  013CE8                     _display_init:
 10057                           	opt stack 15
 10058                           
 10059                           ;display.c: 224: i2c_display_init();
 10060                           
 10061                           ;incstack = 0
 10062  013CE8  ECAE  F09B         	call	_i2c_display_init	;wreg free
 10063                           
 10064                           ;display.c: 225: i2c_display_program_custom_character(0x00, bit_pattern_verticalbar);
 10065  013CEC  0EA7               	movlw	low _bit_pattern_verticalbar
 10066  013CEE  0100               	movlb	0	; () banked
 10067  013CF0  6F6E               	movwf	i2c_display_program_custom_character@bit_pattern& (0+255),b
 10068  013CF2  0EA2               	movlw	high _bit_pattern_verticalbar
 10069  013CF4  6F6F               	movwf	(i2c_display_program_custom_character@bit_pattern+1)& (0+255),b
 10070  013CF6  0E00               	movlw	0
 10071  013CF8  EC92  F094         	call	_i2c_display_program_custom_character
 10072                           
 10073                           ;display.c: 226: i2c_display_program_custom_character(0x01, bit_pattern_degree);
 10074  013CFC  0E9F               	movlw	low _bit_pattern_degree
 10075  013CFE  0100               	movlb	0	; () banked
 10076  013D00  6F6E               	movwf	i2c_display_program_custom_character@bit_pattern& (0+255),b
 10077  013D02  0EA2               	movlw	high _bit_pattern_degree
 10078  013D04  6F6F               	movwf	(i2c_display_program_custom_character@bit_pattern+1)& (0+255),b
 10079  013D06  0E01               	movlw	1
 10080  013D08  EC92  F094         	call	_i2c_display_program_custom_character
 10081                           
 10082                           ;display.c: 227: i2c_display_program_custom_character(0x02, bit_pattern_ae);
 10083  013D0C  0E97               	movlw	low _bit_pattern_ae
 10084  013D0E  0100               	movlb	0	; () banked
 10085  013D10  6F6E               	movwf	i2c_display_program_custom_character@bit_pattern& (0+255),b
 10086  013D12  0EA2               	movlw	high _bit_pattern_ae
 10087  013D14  6F6F               	movwf	(i2c_display_program_custom_character@bit_pattern+1)& (0+255),b
 10088  013D16  0E02               	movlw	2
 10089  013D18  EC92  F094         	call	_i2c_display_program_custom_character
 10090  013D1C  0012               	return		;funcret
 10091  013D1E                     __end_of_display_init:
 10092                           	opt stack 0
 10093                           tblptru	equ	0xFF8
 10094                           tblptrh	equ	0xFF7
 10095                           tblptrl	equ	0xFF6
 10096                           tablat	equ	0xFF5
 10097                           prodh	equ	0xFF4
 10098                           prodl	equ	0xFF3
 10099                           postinc0	equ	0xFEE
 10100                           wreg	equ	0xFE8
 10101                           postdec1	equ	0xFE5
 10102                           fsr1h	equ	0xFE2
 10103                           fsr1l	equ	0xFE1
 10104                           indf2	equ	0xFDF
 10105                           postinc2	equ	0xFDE
 10106                           fsr2h	equ	0xFDA
 10107                           fsr2l	equ	0xFD9
 10108                           status	equ	0xFD8
 10109                           
 10110 ;; *************** function _i2c_display_program_custom_character *****************
 10111 ;; Defined at:
 10112 ;;		line 420 in file "i2c.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  address         1    wreg     unsigned char 
 10115 ;;  bit_pattern     2   14[BANK0 ] PTR unsigned char 
 10116 ;;		 -> bit_pattern_ae(8), bit_pattern_degree(8), bit_pattern_verticalbar(8), 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  address         1   31[BANK0 ] unsigned char 
 10119 ;;  data_array     11   20[BANK0 ] unsigned char [11]
 10120 ;;  cntr            1   32[BANK0 ] unsigned char 
 10121 ;; Return value:  Size  Location     Type
 10122 ;;                  1    wreg      void 
 10123 ;; Registers used:
 10124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10125 ;; Tracked objects:
 10126 ;;		On entry : 0/0
 10127 ;;		On exit  : 0/0
 10128 ;;		Unchanged: 0/0
 10129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10130 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10131 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10132 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10133 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10134 ;;Total ram usage:       19 bytes
 10135 ;; Hardware stack levels used:    1
 10136 ;; Hardware stack levels required when called:   13
 10137 ;; This function calls:
 10138 ;;		__i2c_write
 10139 ;;		__ic2_display_set_cgram_address
 10140 ;; This function is called by:
 10141 ;;		_display_init
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text22
 10146  012924                     __ptext22:
 10147                           	opt stack 0
 10148  012924                     _i2c_display_program_custom_character:
 10149                           	opt stack 15
 10150                           
 10151                           ;incstack = 0
 10152                           ;i2c_display_program_custom_character@address stored from wreg
 10153  012924  0100               	movlb	0	; () banked
 10154  012926  6F7F               	movwf	i2c_display_program_custom_character@address& (0+255),b
 10155                           
 10156                           ;i2c.c: 422: uint8_t cntr;;i2c.c: 423: uint8_t data_array[11];;i2c.c: 426: _ic2_display_
      +                          set_cgram_address(address<<3);
 10157  012928  0100               	movlb	0	; () banked
 10158  01292A  397F               	swapf	i2c_display_program_custom_character@address& (0+255),w,b
 10159  01292C  42E8               	rrncf	wreg,f,c
 10160  01292E  0BF8               	andlw	248
 10161  012930  EC15  F0A0         	call	__ic2_display_set_cgram_address
 10162                           
 10163                           ;i2c.c: 429: data_array[0] = 0b01000000;
 10164  012934  0E40               	movlw	64
 10165  012936  0100               	movlb	0	; () banked
 10166  012938  6F74               	movwf	i2c_display_program_custom_character@data_array& (0+255),b
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;i2c.c: 430: for(cntr=0; cntr<8; ++cntr)
 10170  01293A  0E00               	movlw	0
 10171  01293C  6F80               	movwf	i2c_display_program_custom_character@cntr& (0+255),b
 10172  01293E                     l20812:
 10173                           
 10174                           ; BSR set to: 0
 10175  01293E  0E07               	movlw	7
 10176  012940  6580               	cpfsgt	i2c_display_program_custom_character@cntr& (0+255),b
 10177  012942  D001               	goto	l1219
 10178  012944  D023               	goto	u20640
 10179  012946                     l1219:
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;i2c.c: 431: {;i2c.c: 432: data_array[cntr+1] = bit_pattern[cntr] & 0b00011111;
 10183                           
 10184                           ; BSR set to: 0
 10185  012946  5180               	movf	i2c_display_program_custom_character@cntr& (0+255),w,b
 10186  012948  6F70               	movwf	??_i2c_display_program_custom_character& (0+255),b
 10187  01294A  6B71               	clrf	(??_i2c_display_program_custom_character+1)& (0+255),b
 10188  01294C  0E01               	movlw	1
 10189  01294E  2770               	addwf	??_i2c_display_program_custom_character& (0+255),f,b
 10190  012950  0E00               	movlw	0
 10191  012952  2371               	addwfc	(??_i2c_display_program_custom_character+1)& (0+255),f,b
 10192  012954  0E74               	movlw	low i2c_display_program_custom_character@data_array
 10193  012956  2570               	addwf	??_i2c_display_program_custom_character& (0+255),w,b
 10194  012958  6ED9               	movwf	fsr2l,c
 10195  01295A  0E00               	movlw	high i2c_display_program_custom_character@data_array
 10196  01295C  2171               	addwfc	(??_i2c_display_program_custom_character+1)& (0+255),w,b
 10197  01295E  6EDA               	movwf	fsr2h,c
 10198  012960  5180               	movf	i2c_display_program_custom_character@cntr& (0+255),w,b
 10199  012962  0D01               	mullw	1
 10200  012964  C06E  F072         	movff	i2c_display_program_custom_character@bit_pattern,??_i2c_display_program_custom_ch
      +                          aracter+2
 10201  012968  C06F  F073         	movff	i2c_display_program_custom_character@bit_pattern+1,??_i2c_display_program_custom_
      +                          character+3
 10202  01296C  50F3               	movf	prodl,w,c
 10203  01296E  2772               	addwf	(??_i2c_display_program_custom_character+2)& (0+255),f,b
 10204  012970  50F4               	movf	prodh,w,c
 10205  012972  2373               	addwfc	(??_i2c_display_program_custom_character+3)& (0+255),f,b
 10206  012974  C072  FFF6         	movff	??_i2c_display_program_custom_character+2,tblptrl
 10207  012978  C073  FFF7         	movff	??_i2c_display_program_custom_character+3,tblptrh
 10208  01297C                     	if	0	;tblptru may be non-zero
 10209  01297C                     	endif
 10210  01297C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10211  01297C  0E00               	movlw	low (__mediumconst shr (0+16))
 10212  01297E  6EF8               	movwf	tblptru,c
 10213  012980                     	endif
 10214  012980  0008               	tblrd		*
 10215  012982  50F5               	movf	tablat,w,c
 10216  012984  0B1F               	andlw	31
 10217  012986  6EDF               	movwf	indf2,c
 10218                           
 10219                           ; BSR set to: 0
 10220  012988  2B80               	incf	i2c_display_program_custom_character@cntr& (0+255),f,b
 10221  01298A  D7D9               	goto	l20812
 10222  01298C                     u20640:
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;i2c.c: 433: };i2c.c: 434: _i2c_write(0b01111000, data_array, 9);
 10226                           
 10227                           ; BSR set to: 0
 10228  01298C  0E74               	movlw	low i2c_display_program_custom_character@data_array
 10229  01298E  6F65               	movwf	__i2c_write@data& (0+255),b
 10230  012990  0E00               	movlw	high i2c_display_program_custom_character@data_array
 10231  012992  6F66               	movwf	(__i2c_write@data+1)& (0+255),b
 10232  012994  0E09               	movlw	9
 10233  012996  6F67               	movwf	__i2c_write@length& (0+255),b
 10234  012998  0E78               	movlw	120
 10235  01299A  ECD6  F09B         	call	__i2c_write
 10236  01299E  0012               	return		;funcret
 10237  0129A0                     __end_of_i2c_display_program_custom_character:
 10238                           	opt stack 0
 10239                           tblptru	equ	0xFF8
 10240                           tblptrh	equ	0xFF7
 10241                           tblptrl	equ	0xFF6
 10242                           tablat	equ	0xFF5
 10243                           prodh	equ	0xFF4
 10244                           prodl	equ	0xFF3
 10245                           postinc0	equ	0xFEE
 10246                           wreg	equ	0xFE8
 10247                           postdec1	equ	0xFE5
 10248                           fsr1h	equ	0xFE2
 10249                           fsr1l	equ	0xFE1
 10250                           indf2	equ	0xFDF
 10251                           postinc2	equ	0xFDE
 10252                           fsr2h	equ	0xFDA
 10253                           fsr2l	equ	0xFD9
 10254                           status	equ	0xFD8
 10255                           
 10256 ;; *************** function __ic2_display_set_cgram_address *****************
 10257 ;; Defined at:
 10258 ;;		line 339 in file "i2c.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;  address         1    wreg     unsigned char 
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;  address         1   13[BANK0 ] unsigned char 
 10263 ;;  data_array      3   10[BANK0 ] unsigned char [3]
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  1    wreg      void 
 10266 ;; Registers used:
 10267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10274 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10276 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10277 ;;Total ram usage:        4 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; Hardware stack levels required when called:   12
 10280 ;; This function calls:
 10281 ;;		__i2c_write
 10282 ;; This function is called by:
 10283 ;;		_i2c_display_program_custom_character
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           	psect	text23
 10288  01402A                     __ptext23:
 10289                           	opt stack 0
 10290  01402A                     __ic2_display_set_cgram_address:
 10291                           	opt stack 15
 10292                           
 10293                           ;incstack = 0
 10294                           ;__ic2_display_set_cgram_address@address stored from wreg
 10295  01402A  0100               	movlb	0	; () banked
 10296  01402C  6F6D               	movwf	__ic2_display_set_cgram_address@address& (0+255),b
 10297                           
 10298                           ;i2c.c: 341: uint8_t data_array[3];;i2c.c: 346: address &= 0b001111111;
 10299  01402E  0100               	movlb	0	; () banked
 10300  014030  9F6D               	bcf	__ic2_display_set_cgram_address@address& (0+255),7,b
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;i2c.c: 347: data_array[0] = 0b00000000;
 10304  014032  0E00               	movlw	0
 10305  014034  6F6A               	movwf	__ic2_display_set_cgram_address@data_array& (0+255),b
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;i2c.c: 348: data_array[1] = 0b00111000;
 10309  014036  0E38               	movlw	56
 10310  014038  6F6B               	movwf	(__ic2_display_set_cgram_address@data_array+1)& (0+255),b
 10311                           
 10312                           ;i2c.c: 349: data_array[2] = 0b01000000 | address;
 10313  01403A  516D               	movf	__ic2_display_set_cgram_address@address& (0+255),w,b
 10314  01403C  0940               	iorlw	64
 10315  01403E  6F6C               	movwf	(__ic2_display_set_cgram_address@data_array+2)& (0+255),b
 10316                           
 10317                           ; BSR set to: 0
 10318                           ;i2c.c: 352: _i2c_write(0b01111000, data_array, 3);
 10319  014040  0E6A               	movlw	low __ic2_display_set_cgram_address@data_array
 10320  014042  6F65               	movwf	__i2c_write@data& (0+255),b
 10321  014044  0E00               	movlw	high __ic2_display_set_cgram_address@data_array
 10322  014046  6F66               	movwf	(__i2c_write@data+1)& (0+255),b
 10323  014048  0E03               	movlw	3
 10324  01404A  6F67               	movwf	__i2c_write@length& (0+255),b
 10325  01404C  0E78               	movlw	120
 10326  01404E  ECD6  F09B         	call	__i2c_write
 10327  014052  0012               	return		;funcret
 10328  014054                     __end_of__ic2_display_set_cgram_address:
 10329                           	opt stack 0
 10330                           tblptru	equ	0xFF8
 10331                           tblptrh	equ	0xFF7
 10332                           tblptrl	equ	0xFF6
 10333                           tablat	equ	0xFF5
 10334                           prodh	equ	0xFF4
 10335                           prodl	equ	0xFF3
 10336                           postinc0	equ	0xFEE
 10337                           wreg	equ	0xFE8
 10338                           postdec1	equ	0xFE5
 10339                           fsr1h	equ	0xFE2
 10340                           fsr1l	equ	0xFE1
 10341                           indf2	equ	0xFDF
 10342                           postinc2	equ	0xFDE
 10343                           fsr2h	equ	0xFDA
 10344                           fsr2l	equ	0xFD9
 10345                           status	equ	0xFD8
 10346                           
 10347 ;; *************** function _i2c_display_init *****************
 10348 ;; Defined at:
 10349 ;;		line 297 in file "i2c.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;		None
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;  init_sequenc    9   11[BANK0 ] unsigned char [9]
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      void 
 10356 ;; Registers used:
 10357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10364 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10366 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10367 ;;Total ram usage:       10 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:   12
 10370 ;; This function calls:
 10371 ;;		__i2c_write
 10372 ;; This function is called by:
 10373 ;;		_display_init
 10374 ;; This function uses a non-reentrant model
 10375 ;;
 10376                           
 10377                           	psect	text24
 10378  01375C                     __ptext24:
 10379                           	opt stack 0
 10380  01375C                     _i2c_display_init:
 10381                           	opt stack 16
 10382                           
 10383                           ;i2c.c: 299: uint8_t init_sequence[9] = {;i2c.c: 300: 0x3A,;i2c.c: 302: 0b00011110,;i2c.
      +                          c: 303: 0x39,;i2c.c: 305: 0b00001100,;i2c.c: 306: 0x74,;i2c.c: 307: 0b1011100,;i2c.c: 30
      +                          8: 0x6d,;i2c.c: 309: 0x0c,;i2c.c: 310: 0x01;i2c.c: 311: };
 10384                           
 10385                           ;incstack = 0
 10386  01375C  EE21  F0DE         	lfsr	2,i2c_display_init@F6908
 10387  013760  EE10  F06B         	lfsr	1,i2c_display_init@init_sequence
 10388  013764  0E08               	movlw	8
 10389  013766                     u20611:
 10390  013766  CFDB FFE3          	movff	plusw2,plusw1
 10391  01376A  06E8               	decf	wreg,f,c
 10392  01376C  E2FC               	bc	u20611
 10393                           
 10394                           ;i2c.c: 314: LATAbits.LA3 = 0;
 10395  01376E  9689               	bcf	3977,3,c	;volatile
 10396                           
 10397                           ;i2c.c: 315: _delay((unsigned long)((10)*(8000000/4000.0)));
 10398  013770  0E1A               	movlw	26
 10399  013772  0100               	movlb	0	; () banked
 10400  013774  6F6A               	movwf	??_i2c_display_init& (0+255),b
 10401  013776  0EF8               	movlw	248
 10402  013778                     u24667:
 10403  013778  2EE8               	decfsz	wreg,f,c
 10404  01377A  D7FE               	bra	u24667
 10405  01377C  2F6A               	decfsz	??_i2c_display_init& (0+255),f,b
 10406  01377E  D7FC               	bra	u24667
 10407  013780  F000               	nop	
 10408                           
 10409                           ;i2c.c: 316: LATAbits.LA3 = 1;
 10410  013782  8689               	bsf	3977,3,c	;volatile
 10411                           
 10412                           ;i2c.c: 317: _delay((unsigned long)((50)*(8000000/4000.0)));
 10413  013784  0E82               	movlw	130
 10414  013786  0100               	movlb	0	; () banked
 10415  013788  6F6A               	movwf	??_i2c_display_init& (0+255),b
 10416  01378A  0EDD               	movlw	221
 10417  01378C                     u24677:
 10418  01378C  2EE8               	decfsz	wreg,f,c
 10419  01378E  D7FE               	bra	u24677
 10420  013790  2F6A               	decfsz	??_i2c_display_init& (0+255),f,b
 10421  013792  D7FC               	bra	u24677
 10422  013794  D000               	nop2	
 10423                           
 10424                           ;i2c.c: 323: _i2c_write(0b01111000, &init_sequence[0], 9);
 10425  013796  0E6B               	movlw	low i2c_display_init@init_sequence
 10426  013798  0100               	movlb	0	; () banked
 10427  01379A  6F65               	movwf	__i2c_write@data& (0+255),b
 10428  01379C  0E00               	movlw	high i2c_display_init@init_sequence
 10429  01379E  6F66               	movwf	(__i2c_write@data+1)& (0+255),b
 10430  0137A0  0E09               	movlw	9
 10431  0137A2  6F67               	movwf	__i2c_write@length& (0+255),b
 10432  0137A4  0E78               	movlw	120
 10433  0137A6  ECD6  F09B         	call	__i2c_write
 10434  0137AA  0012               	return		;funcret
 10435  0137AC                     __end_of_i2c_display_init:
 10436                           	opt stack 0
 10437                           tblptru	equ	0xFF8
 10438                           tblptrh	equ	0xFF7
 10439                           tblptrl	equ	0xFF6
 10440                           tablat	equ	0xFF5
 10441                           prodh	equ	0xFF4
 10442                           prodl	equ	0xFF3
 10443                           postinc0	equ	0xFEE
 10444                           wreg	equ	0xFE8
 10445                           postdec1	equ	0xFE5
 10446                           plusw1	equ	0xFE3
 10447                           fsr1h	equ	0xFE2
 10448                           fsr1l	equ	0xFE1
 10449                           indf2	equ	0xFDF
 10450                           postinc2	equ	0xFDE
 10451                           plusw2	equ	0xFDB
 10452                           fsr2h	equ	0xFDA
 10453                           fsr2l	equ	0xFD9
 10454                           status	equ	0xFD8
 10455                           
 10456 ;; *************** function __i2c_write *****************
 10457 ;; Defined at:
 10458 ;;		line 83 in file "i2c.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;  slave_addres    1    wreg     unsigned char 
 10461 ;;  data            2    5[BANK0 ] PTR unsigned char 
 10462 ;;		 -> i2c_display_program_custom_character@data_array(11), _ic2_display_set_cgram_address@data_array(3), _ic2_display_
      +set_ddram_address@data_array(2), i2c_display_init@init_sequence(9), 
 10463 ;;		 -> _i2c_display_send_init_sequence@init_sequence(9), i2c_eeprom_read@addr(1), i2c_eeprom_write@dat(17), i2c_eeprom_
      +readByte@addr(1), 
 10464 ;;		 -> i2c_eeprom_writeByte@dat(2), i2c_adc_start@configuration_byte(1), 
 10465 ;;  length          1    7[BANK0 ] unsigned char 
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  slave_addres    1    8[BANK0 ] unsigned char 
 10468 ;;  cntr            1    9[BANK0 ] unsigned char 
 10469 ;; Return value:  Size  Location     Type
 10470 ;;                  1    wreg      void 
 10471 ;; Registers used:
 10472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10473 ;; Tracked objects:
 10474 ;;		On entry : 0/0
 10475 ;;		On exit  : 0/0
 10476 ;;		Unchanged: 0/0
 10477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10478 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10479 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10481 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10482 ;;Total ram usage:        5 bytes
 10483 ;; Hardware stack levels used:    1
 10484 ;; Hardware stack levels required when called:   11
 10485 ;; This function calls:
 10486 ;;		__i2c_send
 10487 ;;		__i2c_start
 10488 ;;		__i2c_stop
 10489 ;;		__i2c_wait_idle
 10490 ;; This function is called by:
 10491 ;;		_i2c_display_init
 10492 ;;		__ic2_display_set_ddram_address
 10493 ;;		__ic2_display_set_cgram_address
 10494 ;;		_i2c_display_program_custom_character
 10495 ;;		_i2c_adc_start
 10496 ;;		_i2c_eeprom_writeByte
 10497 ;;		_i2c_eeprom_readByte
 10498 ;;		_i2c_eeprom_write
 10499 ;;		_i2c_eeprom_read
 10500 ;;		__i2c_display_send_init_sequence
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text25
 10505  0137AC                     __ptext25:
 10506                           	opt stack 0
 10507  0137AC                     __i2c_write:
 10508                           	opt stack 15
 10509                           
 10510                           ;incstack = 0
 10511                           ;__i2c_write@slave_address stored from wreg
 10512  0137AC  0100               	movlb	0	; () banked
 10513  0137AE  6F68               	movwf	__i2c_write@slave_address& (0+255),b
 10514                           
 10515                           ;i2c.c: 85: uint8_t cntr;;i2c.c: 87: _i2c_wait_idle();
 10516  0137B0  EC77  F097         	call	__i2c_wait_idle	;wreg free
 10517                           
 10518                           ;i2c.c: 88: _i2c_start();
 10519  0137B4  ECA4  F0A1         	call	__i2c_start	;wreg free
 10520                           
 10521                           ;i2c.c: 89: _i2c_wait_idle();
 10522  0137B8  EC77  F097         	call	__i2c_wait_idle	;wreg free
 10523                           
 10524                           ;i2c.c: 90: _i2c_send(slave_address);
 10525  0137BC  0100               	movlb	0	; () banked
 10526  0137BE  5168               	movf	__i2c_write@slave_address& (0+255),w,b
 10527  0137C0  EC91  F0A1         	call	__i2c_send
 10528                           
 10529                           ;i2c.c: 91: _i2c_wait_idle();
 10530  0137C4  EC77  F097         	call	__i2c_wait_idle	;wreg free
 10531                           
 10532                           ;i2c.c: 93: for(cntr=0; cntr<length; ++cntr)
 10533  0137C8  0E00               	movlw	0
 10534  0137CA  0100               	movlb	0	; () banked
 10535  0137CC  6F69               	movwf	__i2c_write@cntr& (0+255),b
 10536  0137CE  D00F               	goto	l1140
 10537  0137D0                     
 10538                           ; BSR set to: 0
 10539                           ;i2c.c: 94: {;i2c.c: 95: _i2c_send(data[cntr]);
 10540                           
 10541                           ; BSR set to: 0
 10542  0137D0  5169               	movf	__i2c_write@cntr& (0+255),w,b
 10543  0137D2  0D01               	mullw	1
 10544  0137D4  50F3               	movf	prodl,w,c
 10545  0137D6  2565               	addwf	__i2c_write@data& (0+255),w,b
 10546  0137D8  6ED9               	movwf	fsr2l,c
 10547  0137DA  50F4               	movf	prodh,w,c
 10548  0137DC  2166               	addwfc	(__i2c_write@data+1)& (0+255),w,b
 10549  0137DE  6EDA               	movwf	fsr2h,c
 10550  0137E0  50DF               	movf	indf2,w,c
 10551  0137E2  EC91  F0A1         	call	__i2c_send
 10552                           
 10553                           ;i2c.c: 96: _i2c_wait_idle();
 10554  0137E6  EC77  F097         	call	__i2c_wait_idle	;wreg free
 10555  0137EA  0100               	movlb	0	; () banked
 10556  0137EC  2B69               	incf	__i2c_write@cntr& (0+255),f,b
 10557  0137EE                     l1140:
 10558                           
 10559                           ; BSR set to: 0
 10560                           
 10561                           ; BSR set to: 0
 10562  0137EE  5167               	movf	__i2c_write@length& (0+255),w,b
 10563  0137F0  5D69               	subwf	__i2c_write@cntr& (0+255),w,b
 10564  0137F2  A0D8               	btfss	status,0,c
 10565  0137F4  D7ED               	goto	l1141
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;i2c.c: 97: };i2c.c: 99: _i2c_stop();
 10569                           
 10570                           ; BSR set to: 0
 10571  0137F6  ECA0  F0A1         	call	__i2c_stop	;wreg free
 10572  0137FA  0012               	return		;funcret
 10573  0137FC                     __end_of__i2c_write:
 10574                           	opt stack 0
 10575                           tblptru	equ	0xFF8
 10576                           tblptrh	equ	0xFF7
 10577                           tblptrl	equ	0xFF6
 10578                           tablat	equ	0xFF5
 10579                           prodh	equ	0xFF4
 10580                           prodl	equ	0xFF3
 10581                           postinc0	equ	0xFEE
 10582                           wreg	equ	0xFE8
 10583                           postdec1	equ	0xFE5
 10584                           plusw1	equ	0xFE3
 10585                           fsr1h	equ	0xFE2
 10586                           fsr1l	equ	0xFE1
 10587                           indf2	equ	0xFDF
 10588                           postinc2	equ	0xFDE
 10589                           plusw2	equ	0xFDB
 10590                           fsr2h	equ	0xFDA
 10591                           fsr2l	equ	0xFD9
 10592                           status	equ	0xFD8
 10593                           
 10594 ;; *************** function __i2c_wait_idle *****************
 10595 ;; Defined at:
 10596 ;;		line 39 in file "i2c.c"
 10597 ;; Parameters:    Size  Location     Type
 10598 ;;		None
 10599 ;; Auto vars:     Size  Location     Type
 10600 ;;		None
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  1    wreg      void 
 10603 ;; Registers used:
 10604 ;;		wreg, status,2, status,0
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10612 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10613 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10614 ;;Total ram usage:        5 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:   10
 10617 ;; This function calls:
 10618 ;;		Nothing
 10619 ;; This function is called by:
 10620 ;;		__i2c_write
 10621 ;;		_i2c_display_write_fixed
 10622 ;;		__i2c_read
 10623 ;;		_i2c_adc_read
 10624 ;;		__i2c_eeprom_busy
 10625 ;;		_i2c_display_write
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629                           	psect	text26
 10630  012EEE                     __ptext26:
 10631                           	opt stack 0
 10632  012EEE                     __i2c_wait_idle:
 10633                           	opt stack 17
 10634                           
 10635                           ;i2c.c: 41: while(SSP1CON2bits.ACKEN | SSP1CON2bits.RCEN1 | SSP1CON2bits.PEN | SSP1CON2b
      +                          its.RSEN | SSP1CON2bits.SEN | SSP1STATbits.R_W ){}
 10636                           
 10637                           ;incstack = 0
 10638  012EEE  A4C7               	btfss	4039,2,c	;volatile
 10639  012EF0  D004               	goto	u18310
 10640  012EF2  0100               	movlb	0	; () banked
 10641  012EF4  6B60               	clrf	??__i2c_wait_idle& (0+255),b
 10642  012EF6  2B60               	incf	??__i2c_wait_idle& (0+255),f,b
 10643  012EF8  D002               	goto	u18318
 10644  012EFA                     u18310:
 10645  012EFA  0100               	movlb	0	; () banked
 10646  012EFC  6B60               	clrf	??__i2c_wait_idle& (0+255),b
 10647  012EFE                     u18318:
 10648  012EFE  A0C5               	btfss	4037,0,c	;volatile
 10649  012F00  D003               	goto	u18320
 10650  012F02  6B61               	clrf	(??__i2c_wait_idle+1)& (0+255),b
 10651  012F04  2B61               	incf	(??__i2c_wait_idle+1)& (0+255),f,b
 10652  012F06  D002               	goto	u18328
 10653  012F08                     u18320:
 10654  012F08  0100               	movlb	0	; () banked
 10655  012F0A  6B61               	clrf	(??__i2c_wait_idle+1)& (0+255),b
 10656  012F0C                     u18328:
 10657  012F0C  A2C5               	btfss	4037,1,c	;volatile
 10658  012F0E  D003               	goto	u18330
 10659  012F10  6B62               	clrf	(??__i2c_wait_idle+2)& (0+255),b
 10660  012F12  2B62               	incf	(??__i2c_wait_idle+2)& (0+255),f,b
 10661  012F14  D002               	goto	u18338
 10662  012F16                     u18330:
 10663  012F16  0100               	movlb	0	; () banked
 10664  012F18  6B62               	clrf	(??__i2c_wait_idle+2)& (0+255),b
 10665  012F1A                     u18338:
 10666  012F1A  A4C5               	btfss	4037,2,c	;volatile
 10667  012F1C  D003               	goto	u18340
 10668  012F1E  6B63               	clrf	(??__i2c_wait_idle+3)& (0+255),b
 10669  012F20  2B63               	incf	(??__i2c_wait_idle+3)& (0+255),f,b
 10670  012F22  D002               	goto	u18348
 10671  012F24                     u18340:
 10672  012F24  0100               	movlb	0	; () banked
 10673  012F26  6B63               	clrf	(??__i2c_wait_idle+3)& (0+255),b
 10674  012F28                     u18348:
 10675  012F28  A6C5               	btfss	4037,3,c	;volatile
 10676  012F2A  D003               	goto	u18350
 10677  012F2C  6B64               	clrf	(??__i2c_wait_idle+4)& (0+255),b
 10678  012F2E  2B64               	incf	(??__i2c_wait_idle+4)& (0+255),f,b
 10679  012F30  D002               	goto	u18358
 10680  012F32                     u18350:
 10681  012F32  0100               	movlb	0	; () banked
 10682  012F34  6B64               	clrf	(??__i2c_wait_idle+4)& (0+255),b
 10683  012F36                     u18358:
 10684  012F36  A8C5               	btfss	4037,4,c	;volatile
 10685  012F38  D002               	goto	u18360
 10686  012F3A  0E01               	movlw	1
 10687  012F3C  D001               	goto	u18366
 10688  012F3E                     u18360:
 10689  012F3E  0E00               	movlw	0
 10690  012F40                     u18366:
 10691  012F40  1164               	iorwf	(??__i2c_wait_idle+4)& (0+255),w,b
 10692  012F42  1163               	iorwf	(??__i2c_wait_idle+3)& (0+255),w,b
 10693  012F44  1162               	iorwf	(??__i2c_wait_idle+2)& (0+255),w,b
 10694  012F46  1161               	iorwf	(??__i2c_wait_idle+1)& (0+255),w,b
 10695  012F48  1160               	iorwf	??__i2c_wait_idle& (0+255),w,b
 10696  012F4A  0900               	iorlw	0
 10697  012F4C  B4D8               	btfsc	status,2,c
 10698  012F4E  0012               	return	
 10699  012F50  D7CE               	goto	__i2c_wait_idle
 10700  012F52                     __end_of__i2c_wait_idle:
 10701                           	opt stack 0
 10702                           tblptru	equ	0xFF8
 10703                           tblptrh	equ	0xFF7
 10704                           tblptrl	equ	0xFF6
 10705                           tablat	equ	0xFF5
 10706                           prodh	equ	0xFF4
 10707                           prodl	equ	0xFF3
 10708                           postinc0	equ	0xFEE
 10709                           wreg	equ	0xFE8
 10710                           postdec1	equ	0xFE5
 10711                           plusw1	equ	0xFE3
 10712                           fsr1h	equ	0xFE2
 10713                           fsr1l	equ	0xFE1
 10714                           indf2	equ	0xFDF
 10715                           postinc2	equ	0xFDE
 10716                           plusw2	equ	0xFDB
 10717                           fsr2h	equ	0xFDA
 10718                           fsr2l	equ	0xFD9
 10719                           status	equ	0xFD8
 10720                           
 10721 ;; *************** function __i2c_stop *****************
 10722 ;; Defined at:
 10723 ;;		line 62 in file "i2c.c"
 10724 ;; Parameters:    Size  Location     Type
 10725 ;;		None
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;		None
 10728 ;; Return value:  Size  Location     Type
 10729 ;;                  1    wreg      void 
 10730 ;; Registers used:
 10731 ;;		None
 10732 ;; Tracked objects:
 10733 ;;		On entry : 0/0
 10734 ;;		On exit  : 0/0
 10735 ;;		Unchanged: 0/0
 10736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10741 ;;Total ram usage:        0 bytes
 10742 ;; Hardware stack levels used:    1
 10743 ;; Hardware stack levels required when called:   10
 10744 ;; This function calls:
 10745 ;;		Nothing
 10746 ;; This function is called by:
 10747 ;;		__i2c_write
 10748 ;;		_i2c_display_write_fixed
 10749 ;;		__i2c_read
 10750 ;;		_i2c_adc_read
 10751 ;;		__i2c_eeprom_busy
 10752 ;;		_i2c_display_write
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           	psect	text27
 10757  014340                     __ptext27:
 10758                           	opt stack 0
 10759  014340                     __i2c_stop:
 10760                           	opt stack 17
 10761                           
 10762                           ;i2c.c: 64: SSP1CON2bits.PEN = 1;
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;incstack = 0
 10766  014340  84C5               	bsf	4037,2,c	;volatile
 10767  014342  A4C5               	btfss	4037,2,c	;volatile
 10768  014344  0012               	return	
 10769  014346  D7FD               	goto	l1123
 10770  014348                     __end_of__i2c_stop:
 10771                           	opt stack 0
 10772                           tblptru	equ	0xFF8
 10773                           tblptrh	equ	0xFF7
 10774                           tblptrl	equ	0xFF6
 10775                           tablat	equ	0xFF5
 10776                           prodh	equ	0xFF4
 10777                           prodl	equ	0xFF3
 10778                           postinc0	equ	0xFEE
 10779                           wreg	equ	0xFE8
 10780                           postdec1	equ	0xFE5
 10781                           plusw1	equ	0xFE3
 10782                           fsr1h	equ	0xFE2
 10783                           fsr1l	equ	0xFE1
 10784                           indf2	equ	0xFDF
 10785                           postinc2	equ	0xFDE
 10786                           plusw2	equ	0xFDB
 10787                           fsr2h	equ	0xFDA
 10788                           fsr2l	equ	0xFD9
 10789                           status	equ	0xFD8
 10790                           
 10791 ;; *************** function __i2c_start *****************
 10792 ;; Defined at:
 10793 ;;		line 44 in file "i2c.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;		None
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;		None
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      void 
 10800 ;; Registers used:
 10801 ;;		None
 10802 ;; Tracked objects:
 10803 ;;		On entry : 0/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10811 ;;Total ram usage:        0 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:   10
 10814 ;; This function calls:
 10815 ;;		Nothing
 10816 ;; This function is called by:
 10817 ;;		__i2c_write
 10818 ;;		_i2c_display_write_fixed
 10819 ;;		__i2c_read
 10820 ;;		_i2c_adc_read
 10821 ;;		__i2c_eeprom_busy
 10822 ;;		_i2c_display_write
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           	psect	text28
 10827  014348                     __ptext28:
 10828                           	opt stack 0
 10829  014348                     __i2c_start:
 10830                           	opt stack 17
 10831                           
 10832                           ;i2c.c: 46: SSP1CON2bits.SEN=1;
 10833                           
 10834                           ;incstack = 0
 10835  014348  80C5               	bsf	4037,0,c	;volatile
 10836  01434A  A0C5               	btfss	4037,0,c	;volatile
 10837  01434C  0012               	return	
 10838  01434E  D7FD               	goto	l1108
 10839  014350                     __end_of__i2c_start:
 10840                           	opt stack 0
 10841                           tblptru	equ	0xFF8
 10842                           tblptrh	equ	0xFF7
 10843                           tblptrl	equ	0xFF6
 10844                           tablat	equ	0xFF5
 10845                           prodh	equ	0xFF4
 10846                           prodl	equ	0xFF3
 10847                           postinc0	equ	0xFEE
 10848                           wreg	equ	0xFE8
 10849                           postdec1	equ	0xFE5
 10850                           plusw1	equ	0xFE3
 10851                           fsr1h	equ	0xFE2
 10852                           fsr1l	equ	0xFE1
 10853                           indf2	equ	0xFDF
 10854                           postinc2	equ	0xFDE
 10855                           plusw2	equ	0xFDB
 10856                           fsr2h	equ	0xFDA
 10857                           fsr2l	equ	0xFD9
 10858                           status	equ	0xFD8
 10859                           
 10860 ;; *************** function __i2c_send *****************
 10861 ;; Defined at:
 10862 ;;		line 50 in file "i2c.c"
 10863 ;; Parameters:    Size  Location     Type
 10864 ;;  dat             1    wreg     unsigned char 
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;  dat             1    0[BANK0 ] unsigned char 
 10867 ;; Return value:  Size  Location     Type
 10868 ;;                  1    wreg      void 
 10869 ;; Registers used:
 10870 ;;		wreg
 10871 ;; Tracked objects:
 10872 ;;		On entry : 0/0
 10873 ;;		On exit  : 0/0
 10874 ;;		Unchanged: 0/0
 10875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10877 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10879 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10880 ;;Total ram usage:        1 bytes
 10881 ;; Hardware stack levels used:    1
 10882 ;; Hardware stack levels required when called:   10
 10883 ;; This function calls:
 10884 ;;		Nothing
 10885 ;; This function is called by:
 10886 ;;		__i2c_write
 10887 ;;		_i2c_display_write_fixed
 10888 ;;		__i2c_read
 10889 ;;		_i2c_adc_read
 10890 ;;		__i2c_eeprom_busy
 10891 ;;		_i2c_display_write
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           	psect	text29
 10896  014322                     __ptext29:
 10897                           	opt stack 0
 10898  014322                     __i2c_send:
 10899                           	opt stack 17
 10900                           
 10901                           ;incstack = 0
 10902                           ;__i2c_send@dat stored from wreg
 10903  014322  0100               	movlb	0	; () banked
 10904  014324  6F60               	movwf	__i2c_send@dat& (0+255),b
 10905                           
 10906                           ;i2c.c: 52: SSP1BUF = dat;
 10907  014326  C060  FFC9         	movff	__i2c_send@dat,4041	;volatile
 10908  01432A  0012               	return		;funcret
 10909  01432C                     __end_of__i2c_send:
 10910                           	opt stack 0
 10911                           tblptru	equ	0xFF8
 10912                           tblptrh	equ	0xFF7
 10913                           tblptrl	equ	0xFF6
 10914                           tablat	equ	0xFF5
 10915                           prodh	equ	0xFF4
 10916                           prodl	equ	0xFF3
 10917                           postinc0	equ	0xFEE
 10918                           wreg	equ	0xFE8
 10919                           postdec1	equ	0xFE5
 10920                           plusw1	equ	0xFE3
 10921                           fsr1h	equ	0xFE2
 10922                           fsr1l	equ	0xFE1
 10923                           indf2	equ	0xFDF
 10924                           postinc2	equ	0xFDE
 10925                           plusw2	equ	0xFDB
 10926                           fsr2h	equ	0xFDA
 10927                           fsr2l	equ	0xFD9
 10928                           status	equ	0xFD8
 10929                           
 10930 ;; *************** function _configFile_write *****************
 10931 ;; Defined at:
 10932 ;;		line 55 in file "config_file.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;		None
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;  file_size       4  133[BANK0 ] unsigned long 
 10937 ;;  file_number     1  132[BANK0 ] unsigned char 
 10938 ;; Return value:  Size  Location     Type
 10939 ;;                  1    wreg      void 
 10940 ;; Registers used:
 10941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10942 ;; Tracked objects:
 10943 ;;		On entry : 0/0
 10944 ;;		On exit  : 0/0
 10945 ;;		Unchanged: 0/0
 10946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 10947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10948 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10950 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10951 ;;Total ram usage:        6 bytes
 10952 ;; Hardware stack levels used:    1
 10953 ;; Hardware stack levels required when called:   18
 10954 ;; This function calls:
 10955 ;;		__add_item
 10956 ;;		_fat_create_file
 10957 ;;		_fat_find_file
 10958 ;;		_fat_modify_file
 10959 ;;		_fat_resize_file
 10960 ;; This function is called by:
 10961 ;;		_system_init
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text30
 10966  00CB6A                     __ptext30:
 10967                           	opt stack 0
 10968  00CB6A                     _configFile_write:
 10969                           	opt stack 11
 10970                           
 10971                           ;config_file.c: 57: uint8_t file_number;;config_file.c: 58: uint32_t file_size;;config_f
      +                          ile.c: 61: file_size = 0;
 10972                           
 10973                           ;incstack = 0
 10974  00CB6A  0E00               	movlw	0
 10975  00CB6C  0100               	movlb	0	; () banked
 10976  00CB6E  6FE5               	movwf	configFile_write@file_size& (0+255),b
 10977  00CB70  0E00               	movlw	0
 10978  00CB72  6FE6               	movwf	(configFile_write@file_size+1)& (0+255),b
 10979  00CB74  0E00               	movlw	0
 10980  00CB76  6FE7               	movwf	(configFile_write@file_size+2)& (0+255),b
 10981  00CB78  0E00               	movlw	0
 10982  00CB7A  6FE8               	movwf	(configFile_write@file_size+3)& (0+255),b
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;config_file.c: 62: file_size += _add_item(&full_circle_in_steps_string, (int32_t) confi
      +                          g.full_circle_in_steps, &ConfigFile_buffer[file_size]);
 10986  00CB7C  0EFD               	movlw	low _full_circle_in_steps_string
 10987  00CB7E  6F84               	movwf	__add_item@item_string& (0+255),b
 10988  00CB80  0EA1               	movlw	high _full_circle_in_steps_string
 10989  00CB82  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 10990  00CB84  C1A3  F086         	movff	_config,__add_item@value
 10991  00CB88  C1A4  F087         	movff	_config+1,__add_item@value+1
 10992  00CB8C  C1A5  F088         	movff	_config+2,__add_item@value+2
 10993  00CB90  C1A6  F089         	movff	_config+3,__add_item@value+3
 10994  00CB94  0E00               	movlw	low _ConfigFile_buffer
 10995  00CB96  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 10996  00CB98  6F8A               	movwf	__add_item@buffer& (0+255),b
 10997  00CB9A  0E08               	movlw	high _ConfigFile_buffer
 10998  00CB9C  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 10999  00CB9E  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11000  00CBA0  ECD5  F087         	call	__add_item	;wreg free
 11001  00CBA4  0100               	movlb	0	; () banked
 11002  00CBA6  6FE3               	movwf	??_configFile_write& (0+255),b
 11003  00CBA8  51E3               	movf	??_configFile_write& (0+255),w,b
 11004  00CBAA  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11005  00CBAC  0E00               	movlw	0
 11006  00CBAE  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11007  00CBB0  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11008  00CBB2  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;config_file.c: 63: file_size += _add_item(&inverse_direction_string, (int32_t) config.i
      +                          nverse_direction, &ConfigFile_buffer[file_size]);
 11012  00CBB4  0E49               	movlw	low _inverse_direction_string
 11013  00CBB6  6F84               	movwf	__add_item@item_string& (0+255),b
 11014  00CBB8  0EA2               	movlw	high _inverse_direction_string
 11015  00CBBA  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11016  00CBBC  0101               	movlb	1	; () banked
 11017  00CBBE  51A7               	movf	(_config+4)& (0+255),w,b
 11018  00CBC0  0100               	movlb	0	; () banked
 11019  00CBC2  6F86               	movwf	__add_item@value& (0+255),b
 11020  00CBC4  6B87               	clrf	(__add_item@value+1)& (0+255),b
 11021  00CBC6  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11022  00CBC8  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11023  00CBCA  0E00               	movlw	low _ConfigFile_buffer
 11024  00CBCC  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11025  00CBCE  6F8A               	movwf	__add_item@buffer& (0+255),b
 11026  00CBD0  0E08               	movlw	high _ConfigFile_buffer
 11027  00CBD2  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11028  00CBD4  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11029  00CBD6  ECD5  F087         	call	__add_item	;wreg free
 11030  00CBDA  0100               	movlb	0	; () banked
 11031  00CBDC  6FE3               	movwf	??_configFile_write& (0+255),b
 11032  00CBDE  51E3               	movf	??_configFile_write& (0+255),w,b
 11033  00CBE0  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11034  00CBE2  0E00               	movlw	0
 11035  00CBE4  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11036  00CBE6  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11037  00CBE8  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;config_file.c: 64: file_size += _add_item(&overshoot_in_steps_string, (int32_t) config.
      +                          overshoot_in_steps, &ConfigFile_buffer[file_size]);
 11041  00CBEA  0E12               	movlw	low _overshoot_in_steps_string
 11042  00CBEC  6F84               	movwf	__add_item@item_string& (0+255),b
 11043  00CBEE  0EA2               	movlw	high _overshoot_in_steps_string
 11044  00CBF0  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11045  00CBF2  C1A8  F086         	movff	_config+5,__add_item@value
 11046  00CBF6  C1A9  F087         	movff	_config+6,__add_item@value+1
 11047  00CBFA  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11048  00CBFC  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11049  00CBFE  0E00               	movlw	low _ConfigFile_buffer
 11050  00CC00  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11051  00CC02  6F8A               	movwf	__add_item@buffer& (0+255),b
 11052  00CC04  0E08               	movlw	high _ConfigFile_buffer
 11053  00CC06  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11054  00CC08  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11055  00CC0A  ECD5  F087         	call	__add_item	;wreg free
 11056  00CC0E  0100               	movlb	0	; () banked
 11057  00CC10  6FE3               	movwf	??_configFile_write& (0+255),b
 11058  00CC12  51E3               	movf	??_configFile_write& (0+255),w,b
 11059  00CC14  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11060  00CC16  0E00               	movlw	0
 11061  00CC18  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11062  00CC1A  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11063  00CC1C  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;config_file.c: 65: file_size += _add_item(&overshoot_cost_in_steps_string, (int32_t) co
      +                          nfig.overshoot_cost_in_steps, &ConfigFile_buffer[file_size]);
 11067  00CC1E  0EBB               	movlw	low _overshoot_cost_in_steps_string
 11068  00CC20  6F84               	movwf	__add_item@item_string& (0+255),b
 11069  00CC22  0EA1               	movlw	high _overshoot_cost_in_steps_string
 11070  00CC24  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11071  00CC26  C1AA  F086         	movff	_config+7,__add_item@value
 11072  00CC2A  C1AB  F087         	movff	_config+8,__add_item@value+1
 11073  00CC2E  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11074  00CC30  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11075  00CC32  0E00               	movlw	low _ConfigFile_buffer
 11076  00CC34  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11077  00CC36  6F8A               	movwf	__add_item@buffer& (0+255),b
 11078  00CC38  0E08               	movlw	high _ConfigFile_buffer
 11079  00CC3A  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11080  00CC3C  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11081  00CC3E  ECD5  F087         	call	__add_item	;wreg free
 11082  00CC42  0100               	movlb	0	; () banked
 11083  00CC44  6FE3               	movwf	??_configFile_write& (0+255),b
 11084  00CC46  51E3               	movf	??_configFile_write& (0+255),w,b
 11085  00CC48  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11086  00CC4A  0E00               	movlw	0
 11087  00CC4C  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11088  00CC4E  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11089  00CC50  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;config_file.c: 66: file_size += _add_item(&minimum_speed_string, (int32_t) config.minim
      +                          um_speed, &ConfigFile_buffer[file_size]);
 11093  00CC52  0E89               	movlw	low _minimum_speed_string
 11094  00CC54  6F84               	movwf	__add_item@item_string& (0+255),b
 11095  00CC56  0EA2               	movlw	high _minimum_speed_string
 11096  00CC58  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11097  00CC5A  C1AC  F086         	movff	_config+9,__add_item@value
 11098  00CC5E  C1AD  F087         	movff	_config+10,__add_item@value+1
 11099  00CC62  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11100  00CC64  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11101  00CC66  0E00               	movlw	low _ConfigFile_buffer
 11102  00CC68  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11103  00CC6A  6F8A               	movwf	__add_item@buffer& (0+255),b
 11104  00CC6C  0E08               	movlw	high _ConfigFile_buffer
 11105  00CC6E  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11106  00CC70  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11107  00CC72  ECD5  F087         	call	__add_item	;wreg free
 11108  00CC76  0100               	movlb	0	; () banked
 11109  00CC78  6FE3               	movwf	??_configFile_write& (0+255),b
 11110  00CC7A  51E3               	movf	??_configFile_write& (0+255),w,b
 11111  00CC7C  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11112  00CC7E  0E00               	movlw	0
 11113  00CC80  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11114  00CC82  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11115  00CC84  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;config_file.c: 67: file_size += _add_item(&maximum_speed_string, (int32_t) config.maxim
      +                          um_speed, &ConfigFile_buffer[file_size]);
 11119  00CC86  0E7B               	movlw	low _maximum_speed_string
 11120  00CC88  6F84               	movwf	__add_item@item_string& (0+255),b
 11121  00CC8A  0EA2               	movlw	high _maximum_speed_string
 11122  00CC8C  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11123  00CC8E  C1AE  F086         	movff	_config+11,__add_item@value
 11124  00CC92  C1AF  F087         	movff	_config+12,__add_item@value+1
 11125  00CC96  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11126  00CC98  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11127  00CC9A  0E00               	movlw	low _ConfigFile_buffer
 11128  00CC9C  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11129  00CC9E  6F8A               	movwf	__add_item@buffer& (0+255),b
 11130  00CCA0  0E08               	movlw	high _ConfigFile_buffer
 11131  00CCA2  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11132  00CCA4  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11133  00CCA6  ECD5  F087         	call	__add_item	;wreg free
 11134  00CCAA  0100               	movlb	0	; () banked
 11135  00CCAC  6FE3               	movwf	??_configFile_write& (0+255),b
 11136  00CCAE  51E3               	movf	??_configFile_write& (0+255),w,b
 11137  00CCB0  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11138  00CCB2  0E00               	movlw	0
 11139  00CCB4  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11140  00CCB6  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11141  00CCB8  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;config_file.c: 68: file_size += _add_item(&initial_speed_arc_string, (int32_t) config.i
      +                          nitial_speed_arc, &ConfigFile_buffer[file_size]);
 11145  00CCBA  0E37               	movlw	low _initial_speed_arc_string
 11146  00CCBC  6F84               	movwf	__add_item@item_string& (0+255),b
 11147  00CCBE  0EA2               	movlw	high _initial_speed_arc_string
 11148  00CCC0  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11149  00CCC2  C1B0  F086         	movff	_config+13,__add_item@value
 11150  00CCC6  C1B1  F087         	movff	_config+14,__add_item@value+1
 11151  00CCCA  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11152  00CCCC  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11153  00CCCE  0E00               	movlw	low _ConfigFile_buffer
 11154  00CCD0  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11155  00CCD2  6F8A               	movwf	__add_item@buffer& (0+255),b
 11156  00CCD4  0E08               	movlw	high _ConfigFile_buffer
 11157  00CCD6  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11158  00CCD8  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11159  00CCDA  ECD5  F087         	call	__add_item	;wreg free
 11160  00CCDE  0100               	movlb	0	; () banked
 11161  00CCE0  6FE3               	movwf	??_configFile_write& (0+255),b
 11162  00CCE2  51E3               	movf	??_configFile_write& (0+255),w,b
 11163  00CCE4  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11164  00CCE6  0E00               	movlw	0
 11165  00CCE8  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11166  00CCEA  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11167  00CCEC  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;config_file.c: 69: file_size += _add_item(&maximum_speed_arc_string, (int32_t) config.m
      +                          aximum_speed_arc, &ConfigFile_buffer[file_size]);
 11171  00CCEE  0E25               	movlw	low _maximum_speed_arc_string
 11172  00CCF0  6F84               	movwf	__add_item@item_string& (0+255),b
 11173  00CCF2  0EA2               	movlw	high _maximum_speed_arc_string
 11174  00CCF4  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11175  00CCF6  C1B2  F086         	movff	_config+15,__add_item@value
 11176  00CCFA  C1B3  F087         	movff	_config+16,__add_item@value+1
 11177  00CCFE  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11178  00CD00  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11179  00CD02  0E00               	movlw	low _ConfigFile_buffer
 11180  00CD04  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11181  00CD06  6F8A               	movwf	__add_item@buffer& (0+255),b
 11182  00CD08  0E08               	movlw	high _ConfigFile_buffer
 11183  00CD0A  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11184  00CD0C  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11185  00CD0E  ECD5  F087         	call	__add_item	;wreg free
 11186  00CD12  0100               	movlb	0	; () banked
 11187  00CD14  6FE3               	movwf	??_configFile_write& (0+255),b
 11188  00CD16  51E3               	movf	??_configFile_write& (0+255),w,b
 11189  00CD18  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11190  00CD1A  0E00               	movlw	0
 11191  00CD1C  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11192  00CD1E  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11193  00CD20  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11194                           
 11195                           ; BSR set to: 0
 11196                           ;config_file.c: 70: file_size += _add_item(&initial_speed_manual_string, (int32_t) confi
      +                          g.initial_speed_manual, &ConfigFile_buffer[file_size]);
 11197  00CD22  0EE8               	movlw	low _initial_speed_manual_string
 11198  00CD24  6F84               	movwf	__add_item@item_string& (0+255),b
 11199  00CD26  0EA1               	movlw	high _initial_speed_manual_string
 11200  00CD28  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11201  00CD2A  C1B4  F086         	movff	_config+17,__add_item@value
 11202  00CD2E  C1B5  F087         	movff	_config+18,__add_item@value+1
 11203  00CD32  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11204  00CD34  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11205  00CD36  0E00               	movlw	low _ConfigFile_buffer
 11206  00CD38  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11207  00CD3A  6F8A               	movwf	__add_item@buffer& (0+255),b
 11208  00CD3C  0E08               	movlw	high _ConfigFile_buffer
 11209  00CD3E  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11210  00CD40  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11211  00CD42  ECD5  F087         	call	__add_item	;wreg free
 11212  00CD46  0100               	movlb	0	; () banked
 11213  00CD48  6FE3               	movwf	??_configFile_write& (0+255),b
 11214  00CD4A  51E3               	movf	??_configFile_write& (0+255),w,b
 11215  00CD4C  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11216  00CD4E  0E00               	movlw	0
 11217  00CD50  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11218  00CD52  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11219  00CD54  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;config_file.c: 71: file_size += _add_item(&maximum_speed_manual_string, (int32_t) confi
      +                          g.maximum_speed_manual, &ConfigFile_buffer[file_size]);
 11223  00CD56  0ED3               	movlw	low _maximum_speed_manual_string
 11224  00CD58  6F84               	movwf	__add_item@item_string& (0+255),b
 11225  00CD5A  0EA1               	movlw	high _maximum_speed_manual_string
 11226  00CD5C  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11227  00CD5E  C1B6  F086         	movff	_config+19,__add_item@value
 11228  00CD62  C1B7  F087         	movff	_config+20,__add_item@value+1
 11229  00CD66  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11230  00CD68  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11231  00CD6A  0E00               	movlw	low _ConfigFile_buffer
 11232  00CD6C  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11233  00CD6E  6F8A               	movwf	__add_item@buffer& (0+255),b
 11234  00CD70  0E08               	movlw	high _ConfigFile_buffer
 11235  00CD72  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11236  00CD74  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11237  00CD76  ECD5  F087         	call	__add_item	;wreg free
 11238  00CD7A  0100               	movlb	0	; () banked
 11239  00CD7C  6FE3               	movwf	??_configFile_write& (0+255),b
 11240  00CD7E  51E3               	movf	??_configFile_write& (0+255),w,b
 11241  00CD80  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11242  00CD82  0E00               	movlw	0
 11243  00CD84  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11244  00CD86  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11245  00CD88  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;config_file.c: 72: file_size += _add_item(&beep_duration_string, (int32_t) config.beep_
      +                          duration, &ConfigFile_buffer[file_size]);
 11249  00CD8A  0E6D               	movlw	low _beep_duration_string
 11250  00CD8C  6F84               	movwf	__add_item@item_string& (0+255),b
 11251  00CD8E  0EA2               	movlw	high _beep_duration_string
 11252  00CD90  6F85               	movwf	(__add_item@item_string+1)& (0+255),b
 11253  00CD92  0101               	movlb	1	; () banked
 11254  00CD94  51B8               	movf	(_config+21)& (0+255),w,b
 11255  00CD96  0100               	movlb	0	; () banked
 11256  00CD98  6F86               	movwf	__add_item@value& (0+255),b
 11257  00CD9A  6B87               	clrf	(__add_item@value+1)& (0+255),b
 11258  00CD9C  6B88               	clrf	(__add_item@value+2)& (0+255),b
 11259  00CD9E  6B89               	clrf	(__add_item@value+3)& (0+255),b
 11260  00CDA0  0E00               	movlw	low _ConfigFile_buffer
 11261  00CDA2  25E5               	addwf	configFile_write@file_size& (0+255),w,b
 11262  00CDA4  6F8A               	movwf	__add_item@buffer& (0+255),b
 11263  00CDA6  0E08               	movlw	high _ConfigFile_buffer
 11264  00CDA8  21E6               	addwfc	(configFile_write@file_size+1)& (0+255),w,b
 11265  00CDAA  6F8B               	movwf	(__add_item@buffer+1)& (0+255),b
 11266  00CDAC  ECD5  F087         	call	__add_item	;wreg free
 11267  00CDB0  0100               	movlb	0	; () banked
 11268  00CDB2  6FE3               	movwf	??_configFile_write& (0+255),b
 11269  00CDB4  51E3               	movf	??_configFile_write& (0+255),w,b
 11270  00CDB6  27E5               	addwf	configFile_write@file_size& (0+255),f,b
 11271  00CDB8  0E00               	movlw	0
 11272  00CDBA  23E6               	addwfc	(configFile_write@file_size+1)& (0+255),f,b
 11273  00CDBC  23E7               	addwfc	(configFile_write@file_size+2)& (0+255),f,b
 11274  00CDBE  23E8               	addwfc	(configFile_write@file_size+3)& (0+255),f,b
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;config_file.c: 102: file_number = fat_find_file(&configFile_name, &configFile_extention
      +                          );
 11278  00CDC0  0EF0               	movlw	low _configFile_name
 11279  00CDC2  6F8B               	movwf	fat_find_file@name& (0+255),b
 11280  00CDC4  0E01               	movlw	high _configFile_name
 11281  00CDC6  6F8C               	movwf	(fat_find_file@name+1)& (0+255),b
 11282  00CDC8  0EF8               	movlw	low _configFile_extention
 11283  00CDCA  6F8D               	movwf	fat_find_file@extension& (0+255),b
 11284  00CDCC  0E01               	movlw	high _configFile_extention
 11285  00CDCE  6F8E               	movwf	(fat_find_file@extension+1)& (0+255),b
 11286  00CDD0  EC61  F087         	call	_fat_find_file	;wreg free
 11287  00CDD4  0100               	movlb	0	; () banked
 11288  00CDD6  6FE4               	movwf	configFile_write@file_number& (0+255),b
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;config_file.c: 103: if(file_number==0xFF)
 11292  00CDD8  29E4               	incf	configFile_write@file_number& (0+255),w,b
 11293  00CDDA  A4D8               	btfss	status,2,c
 11294  00CDDC  D015               	goto	l2780
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;config_file.c: 104: {;config_file.c: 105: file_number = fat_create_file(&configFile_nam
      +                          e, &configFile_extention, file_size);
 11298  00CDDE  0EF0               	movlw	low _configFile_name
 11299  00CDE0  6FAC               	movwf	fat_create_file@name& (0+255),b
 11300  00CDE2  0E01               	movlw	high _configFile_name
 11301  00CDE4  6FAD               	movwf	(fat_create_file@name+1)& (0+255),b
 11302  00CDE6  0EF8               	movlw	low _configFile_extention
 11303  00CDE8  6FAE               	movwf	fat_create_file@extension& (0+255),b
 11304  00CDEA  0E01               	movlw	high _configFile_extention
 11305  00CDEC  6FAF               	movwf	(fat_create_file@extension+1)& (0+255),b
 11306  00CDEE  C0E5  F0B0         	movff	configFile_write@file_size,fat_create_file@size
 11307  00CDF2  C0E6  F0B1         	movff	configFile_write@file_size+1,fat_create_file@size+1
 11308  00CDF6  C0E7  F0B2         	movff	configFile_write@file_size+2,fat_create_file@size+2
 11309  00CDFA  C0E8  F0B3         	movff	configFile_write@file_size+3,fat_create_file@size+3
 11310  00CDFE  ECCC  F07C         	call	_fat_create_file	;wreg free
 11311  00CE02  0100               	movlb	0	; () banked
 11312  00CE04  6FE4               	movwf	configFile_write@file_number& (0+255),b
 11313                           
 11314                           ;config_file.c: 106: }
 11315  00CE06  D00B               	goto	l2781
 11316  00CE08                     l2780:
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;config_file.c: 107: else;config_file.c: 108: {;config_file.c: 109: fat_resize_file(file
      +                          _number, file_size);
 11320                           
 11321                           ; BSR set to: 0
 11322  00CE08  C0E5  F0AC         	movff	configFile_write@file_size,fat_resize_file@new_file_size
 11323  00CE0C  C0E6  F0AD         	movff	configFile_write@file_size+1,fat_resize_file@new_file_size+1
 11324  00CE10  C0E7  F0AE         	movff	configFile_write@file_size+2,fat_resize_file@new_file_size+2
 11325  00CE14  C0E8  F0AF         	movff	configFile_write@file_size+3,fat_resize_file@new_file_size+3
 11326  00CE18  51E4               	movf	configFile_write@file_number& (0+255),w,b
 11327  00CE1A  EC78  F084         	call	_fat_resize_file
 11328  00CE1E                     l2781:
 11329                           
 11330                           ;config_file.c: 110: };config_file.c: 113: fat_modify_file(file_number, 0, file_size, &C
      +                          onfigFile_buffer[0]);
 11331  00CE1E  0E00               	movlw	0
 11332  00CE20  0100               	movlb	0	; () banked
 11333  00CE22  6FA1               	movwf	fat_modify_file@start_byte& (0+255),b
 11334  00CE24  0E00               	movlw	0
 11335  00CE26  6FA2               	movwf	(fat_modify_file@start_byte+1)& (0+255),b
 11336  00CE28  0E00               	movlw	0
 11337  00CE2A  6FA3               	movwf	(fat_modify_file@start_byte+2)& (0+255),b
 11338  00CE2C  0E00               	movlw	0
 11339  00CE2E  6FA4               	movwf	(fat_modify_file@start_byte+3)& (0+255),b
 11340  00CE30  C0E5  F0A5         	movff	configFile_write@file_size,fat_modify_file@length
 11341  00CE34  C0E6  F0A6         	movff	configFile_write@file_size+1,fat_modify_file@length+1
 11342  00CE38  0E00               	movlw	low _ConfigFile_buffer
 11343  00CE3A  6FA7               	movwf	fat_modify_file@data& (0+255),b
 11344  00CE3C  0E08               	movlw	high _ConfigFile_buffer
 11345  00CE3E  6FA8               	movwf	(fat_modify_file@data+1)& (0+255),b
 11346  00CE40  51E4               	movf	configFile_write@file_number& (0+255),w,b
 11347  00CE42  ECFD  F06E         	call	_fat_modify_file
 11348  00CE46  0012               	return		;funcret
 11349  00CE48                     __end_of_configFile_write:
 11350                           	opt stack 0
 11351                           tblptru	equ	0xFF8
 11352                           tblptrh	equ	0xFF7
 11353                           tblptrl	equ	0xFF6
 11354                           tablat	equ	0xFF5
 11355                           prodh	equ	0xFF4
 11356                           prodl	equ	0xFF3
 11357                           postinc0	equ	0xFEE
 11358                           wreg	equ	0xFE8
 11359                           postdec1	equ	0xFE5
 11360                           plusw1	equ	0xFE3
 11361                           fsr1h	equ	0xFE2
 11362                           fsr1l	equ	0xFE1
 11363                           indf2	equ	0xFDF
 11364                           postinc2	equ	0xFDE
 11365                           plusw2	equ	0xFDB
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8
 11369                           
 11370 ;; *************** function _fat_resize_file *****************
 11371 ;; Defined at:
 11372 ;;		line 910 in file "fat16.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  file_number     1    wreg     unsigned char 
 11375 ;;  new_file_siz    4   76[BANK0 ] unsigned long 
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;  file_number     1   90[BANK0 ] unsigned char 
 11378 ;;  root           32   91[BANK0 ] struct .
 11379 ;;  first_cluste    2   88[BANK0 ] unsigned int 
 11380 ;;  new_number_o    2   86[BANK0 ] unsigned int 
 11381 ;;  old_number_o    2   84[BANK0 ] unsigned int 
 11382 ;; Return value:  Size  Location     Type
 11383 ;;                  1    wreg      unsigned char 
 11384 ;; Registers used:
 11385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11386 ;; Tracked objects:
 11387 ;;		On entry : 0/0
 11388 ;;		On exit  : 0/0
 11389 ;;		Unchanged: 0/0
 11390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 11391 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11392 ;;      Locals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11393 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11394 ;;      Totals:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11395 ;;Total ram usage:       47 bytes
 11396 ;; Hardware stack levels used:    1
 11397 ;; Hardware stack levels required when called:   17
 11398 ;; This function calls:
 11399 ;;		__make_cluster_chain
 11400 ;;		__root_is_available
 11401 ;;		__write_root
 11402 ;;		_fat_get_file_information
 11403 ;; This function is called by:
 11404 ;;		_configFile_write
 11405 ;;		_fat_append_to_file
 11406 ;; This function uses a non-reentrant model
 11407 ;;
 11408                           
 11409                           	psect	text31
 11410  0108F0                     __ptext31:
 11411                           	opt stack 0
 11412  0108F0                     _fat_resize_file:
 11413                           	opt stack 11
 11414                           
 11415                           ;incstack = 0
 11416                           ;fat_resize_file@file_number stored from wreg
 11417  0108F0  0100               	movlb	0	; () banked
 11418  0108F2  6FBA               	movwf	fat_resize_file@file_number& (0+255),b
 11419                           
 11420                           ;fat16.c: 912: rootEntry_t root;;fat16.c: 913: uint16_t old_number_of_clusters;;fat16.c:
      +                           914: uint16_t new_number_of_clusters;;fat16.c: 915: uint16_t first_cluster;;fat16.c: 91
      +                          8: if(file_number>=64)
 11421  0108F4  0E3F               	movlw	63
 11422  0108F6  0100               	movlb	0	; () banked
 11423  0108F8  65BA               	cpfsgt	fat_resize_file@file_number& (0+255),b
 11424  0108FA  D002               	goto	l1852
 11425                           
 11426                           ; BSR set to: 0
 11427                           ;fat16.c: 919: {;fat16.c: 921: return 0xFF;
 11428  0108FC  0EFF               	movlw	255
 11429                           
 11430                           ; BSR set to: 0
 11431  0108FE  0012               	return	
 11432  010900                     l1852:
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;fat16.c: 922: };fat16.c: 925: if(_root_is_available(file_number))
 11436                           
 11437                           ; BSR set to: 0
 11438  010900  51BA               	movf	fat_resize_file@file_number& (0+255),w,b
 11439  010902  ECD8  F096         	call	__root_is_available
 11440  010906  0900               	iorlw	0
 11441  010908  B4D8               	btfsc	status,2,c
 11442  01090A  D002               	goto	l1854
 11443                           
 11444                           ;fat16.c: 926: {;fat16.c: 928: return 0xFE;
 11445  01090C  0EFE               	movlw	254
 11446  01090E  0012               	return	
 11447  010910                     l1854:
 11448                           
 11449                           ;fat16.c: 929: };fat16.c: 932: fat_get_file_information(file_number, &root);
 11450  010910  0EBB               	movlw	low fat_resize_file@root
 11451  010912  0100               	movlb	0	; () banked
 11452  010914  6F8F               	movwf	fat_get_file_information@data& (0+255),b
 11453  010916  0E00               	movlw	high fat_resize_file@root
 11454  010918  6F90               	movwf	(fat_get_file_information@data+1)& (0+255),b
 11455  01091A  51BA               	movf	fat_resize_file@file_number& (0+255),w,b
 11456  01091C  EC0E  F095         	call	_fat_get_file_information
 11457                           
 11458                           ;fat16.c: 935: old_number_of_clusters = (root.fileSize+512-1)>>9;
 11459  010920  EE20  F0D7         	lfsr	2,fat_resize_file@root+28
 11460  010924  0EFF               	movlw	255
 11461  010926  24DE               	addwf	postinc2,w,c
 11462  010928  0100               	movlb	0	; () banked
 11463  01092A  6FB0               	movwf	??_fat_resize_file& (0+255),b
 11464  01092C  0E01               	movlw	1
 11465  01092E  20DE               	addwfc	postinc2,w,c
 11466  010930  6FB1               	movwf	(??_fat_resize_file+1)& (0+255),b
 11467  010932  0E00               	movlw	0
 11468  010934  20DE               	addwfc	postinc2,w,c
 11469  010936  6FB2               	movwf	(??_fat_resize_file+2)& (0+255),b
 11470  010938  0E00               	movlw	0
 11471  01093A  20DE               	addwfc	postinc2,w,c
 11472  01093C  6FB3               	movwf	(??_fat_resize_file+3)& (0+255),b
 11473  01093E  0E0A               	movlw	10
 11474  010940  D005               	goto	u20880
 11475  010942                     u20885:
 11476  010942  90D8               	bcf	status,0,c
 11477  010944  33B3               	rrcf	(??_fat_resize_file+3)& (0+255),f,b
 11478  010946  33B2               	rrcf	(??_fat_resize_file+2)& (0+255),f,b
 11479  010948  33B1               	rrcf	(??_fat_resize_file+1)& (0+255),f,b
 11480  01094A  33B0               	rrcf	??_fat_resize_file& (0+255),f,b
 11481  01094C                     u20880:
 11482  01094C  2EE8               	decfsz	wreg,f,c
 11483  01094E  D7F9               	goto	u20885
 11484  010950  C0B0  F0B4         	movff	??_fat_resize_file,fat_resize_file@old_number_of_clusters
 11485  010954  C0B1  F0B5         	movff	??_fat_resize_file+1,fat_resize_file@old_number_of_clusters+1
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;fat16.c: 936: new_number_of_clusters = (new_file_size+512-1)>>9;
 11489  010958  0EFF               	movlw	255
 11490  01095A  25AC               	addwf	fat_resize_file@new_file_size& (0+255),w,b
 11491  01095C  6FB0               	movwf	??_fat_resize_file& (0+255),b
 11492  01095E  0E01               	movlw	1
 11493  010960  21AD               	addwfc	(fat_resize_file@new_file_size+1)& (0+255),w,b
 11494  010962  6FB1               	movwf	(??_fat_resize_file+1)& (0+255),b
 11495  010964  0E00               	movlw	0
 11496  010966  21AE               	addwfc	(fat_resize_file@new_file_size+2)& (0+255),w,b
 11497  010968  6FB2               	movwf	(??_fat_resize_file+2)& (0+255),b
 11498  01096A  0E00               	movlw	0
 11499  01096C  21AF               	addwfc	(fat_resize_file@new_file_size+3)& (0+255),w,b
 11500  01096E  6FB3               	movwf	(??_fat_resize_file+3)& (0+255),b
 11501  010970  0E0A               	movlw	10
 11502  010972  D005               	goto	u20890
 11503  010974                     u20895:
 11504  010974  90D8               	bcf	status,0,c
 11505  010976  33B3               	rrcf	(??_fat_resize_file+3)& (0+255),f,b
 11506  010978  33B2               	rrcf	(??_fat_resize_file+2)& (0+255),f,b
 11507  01097A  33B1               	rrcf	(??_fat_resize_file+1)& (0+255),f,b
 11508  01097C  33B0               	rrcf	??_fat_resize_file& (0+255),f,b
 11509  01097E                     u20890:
 11510  01097E  2EE8               	decfsz	wreg,f,c
 11511  010980  D7F9               	goto	u20895
 11512  010982  C0B0  F0B6         	movff	??_fat_resize_file,fat_resize_file@new_number_of_clusters
 11513  010986  C0B1  F0B7         	movff	??_fat_resize_file+1,fat_resize_file@new_number_of_clusters+1
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;fat16.c: 939: if(old_number_of_clusters!=new_number_of_clusters)
 11517  01098A  51B6               	movf	fat_resize_file@new_number_of_clusters& (0+255),w,b
 11518  01098C  19B4               	xorwf	fat_resize_file@old_number_of_clusters& (0+255),w,b
 11519  01098E  E104               	bnz	u20900
 11520  010990  51B7               	movf	(fat_resize_file@new_number_of_clusters+1)& (0+255),w,b
 11521  010992  19B5               	xorwf	(fat_resize_file@old_number_of_clusters+1)& (0+255),w,b
 11522  010994  B4D8               	btfsc	status,2,c
 11523  010996  D01A               	goto	l1855
 11524  010998                     u20900:
 11525                           
 11526                           ; BSR set to: 0
 11527                           ;fat16.c: 940: {;fat16.c: 941: first_cluster = _make_cluster_chain(root.firstCluster, ne
      +                          w_number_of_clusters);
 11528  010998  C0D5  F095         	movff	fat_resize_file@root+26,__make_cluster_chain@first_cluster
 11529  01099C  C0D6  F096         	movff	fat_resize_file@root+27,__make_cluster_chain@first_cluster+1
 11530  0109A0  C0B6  F097         	movff	fat_resize_file@new_number_of_clusters,__make_cluster_chain@number_of_clusters
 11531  0109A4  C0B7  F098         	movff	fat_resize_file@new_number_of_clusters+1,__make_cluster_chain@number_of_clusters+
      +                          1
 11532  0109A8  EC92  F068         	call	__make_cluster_chain	;wreg free
 11533  0109AC  C095  F0B8         	movff	?__make_cluster_chain,fat_resize_file@first_cluster
 11534  0109B0  C096  F0B9         	movff	?__make_cluster_chain+1,fat_resize_file@first_cluster+1
 11535                           
 11536                           ;fat16.c: 942: if(first_cluster==0xFFFF)
 11537  0109B4  0100               	movlb	0	; () banked
 11538  0109B6  29B8               	incf	fat_resize_file@first_cluster& (0+255),w,b
 11539  0109B8  E105               	bnz	l1856
 11540  0109BA  29B9               	incf	(fat_resize_file@first_cluster+1)& (0+255),w,b
 11541  0109BC  A4D8               	btfss	status,2,c
 11542  0109BE  D002               	goto	l1856
 11543                           
 11544                           ; BSR set to: 0
 11545                           ;fat16.c: 943: {;fat16.c: 945: return 0xFD;
 11546  0109C0  0EFD               	movlw	253
 11547                           
 11548                           ; BSR set to: 0
 11549  0109C2  0012               	return	
 11550  0109C4                     l1856:
 11551                           
 11552                           ; BSR set to: 0
 11553                           ;fat16.c: 946: };fat16.c: 949: root.firstCluster = first_cluster;
 11554  0109C4  C0B8  F0D5         	movff	fat_resize_file@first_cluster,fat_resize_file@root+26
 11555  0109C8  C0B9  F0D6         	movff	fat_resize_file@first_cluster+1,fat_resize_file@root+27
 11556  0109CC                     l1855:
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;fat16.c: 950: };fat16.c: 953: root.fileSize = new_file_size;
 11560  0109CC  C0AC  F0D7         	movff	fat_resize_file@new_file_size,fat_resize_file@root+28
 11561  0109D0  C0AD  F0D8         	movff	fat_resize_file@new_file_size+1,fat_resize_file@root+29
 11562  0109D4  C0AE  F0D9         	movff	fat_resize_file@new_file_size+2,fat_resize_file@root+30
 11563  0109D8  C0AF  F0DA         	movff	fat_resize_file@new_file_size+3,fat_resize_file@root+31
 11564                           
 11565                           ; BSR set to: 0
 11566                           ;fat16.c: 956: _write_root(file_number, &root);
 11567  0109DC  0EBB               	movlw	low fat_resize_file@root
 11568  0109DE  6F88               	movwf	__write_root@data& (0+255),b
 11569  0109E0  0E00               	movlw	high fat_resize_file@root
 11570  0109E2  6F89               	movwf	(__write_root@data+1)& (0+255),b
 11571  0109E4  51BA               	movf	fat_resize_file@file_number& (0+255),w,b
 11572  0109E6  EC26  F09C         	call	__write_root
 11573                           
 11574                           ;fat16.c: 959: return 0x00;
 11575  0109EA  0E00               	movlw	0
 11576  0109EC  0012               	return	
 11577  0109EE                     __end_of_fat_resize_file:
 11578                           	opt stack 0
 11579                           tblptru	equ	0xFF8
 11580                           tblptrh	equ	0xFF7
 11581                           tblptrl	equ	0xFF6
 11582                           tablat	equ	0xFF5
 11583                           prodh	equ	0xFF4
 11584                           prodl	equ	0xFF3
 11585                           postinc0	equ	0xFEE
 11586                           wreg	equ	0xFE8
 11587                           postdec1	equ	0xFE5
 11588                           plusw1	equ	0xFE3
 11589                           fsr1h	equ	0xFE2
 11590                           fsr1l	equ	0xFE1
 11591                           indf2	equ	0xFDF
 11592                           postinc2	equ	0xFDE
 11593                           plusw2	equ	0xFDB
 11594                           fsr2h	equ	0xFDA
 11595                           fsr2l	equ	0xFD9
 11596                           status	equ	0xFD8
 11597                           
 11598 ;; *************** function _fat_modify_file *****************
 11599 ;; Defined at:
 11600 ;;		line 962 in file "fat16.c"
 11601 ;; Parameters:    Size  Location     Type
 11602 ;;  file_number     1    wreg     unsigned char 
 11603 ;;  start_byte      4   65[BANK0 ] unsigned long 
 11604 ;;  length          2   69[BANK0 ] unsigned int 
 11605 ;;  data            2   71[BANK0 ] PTR unsigned char 
 11606 ;;		 -> ConfigFile_buffer(512), 
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;  file_number     1   85[BANK0 ] unsigned char 
 11609 ;;  root           32   99[BANK0 ] struct .
 11610 ;;  position        4   95[BANK0 ] unsigned long 
 11611 ;;  number_of_by    2   93[BANK0 ] unsigned int 
 11612 ;;  offset          2   91[BANK0 ] unsigned int 
 11613 ;;  cluster         2   89[BANK0 ] unsigned int 
 11614 ;;  sector          2   86[BANK0 ] unsigned int 
 11615 ;;  return_code     1   88[BANK0 ] unsigned char 
 11616 ;; Return value:  Size  Location     Type
 11617 ;;                  1    wreg      unsigned char 
 11618 ;; Registers used:
 11619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11620 ;; Tracked objects:
 11621 ;;		On entry : 0/0
 11622 ;;		On exit  : 0/0
 11623 ;;		Unchanged: 0/0
 11624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 11625 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11626 ;;      Locals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11627 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11628 ;;      Totals:         0      66       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11629 ;;Total ram usage:       66 bytes
 11630 ;; Hardware stack levels used:    1
 11631 ;; Hardware stack levels required when called:   17
 11632 ;; This function calls:
 11633 ;;		__data_sector_from_cluster
 11634 ;;		__find_nth_cluster
 11635 ;;		__read_fat
 11636 ;;		_fat_get_file_information
 11637 ;;		_flash_partial_write
 11638 ;; This function is called by:
 11639 ;;		_configFile_write
 11640 ;;		_fat_append_to_file
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           	psect	text32
 11645  00DDFA                     __ptext32:
 11646                           	opt stack 0
 11647  00DDFA                     _fat_modify_file:
 11648                           	opt stack 11
 11649                           
 11650                           ;incstack = 0
 11651                           ;fat_modify_file@file_number stored from wreg
 11652  00DDFA  0100               	movlb	0	; () banked
 11653  00DDFC  6FB5               	movwf	fat_modify_file@file_number& (0+255),b
 11654                           
 11655                           ;fat16.c: 964: rootEntry_t root;;fat16.c: 965: uint16_t cluster;;fat16.c: 966: uint32_t 
      +                          position;;fat16.c: 967: uint16_t offset;;fat16.c: 968: uint16_t sector;;fat16.c: 969: ui
      +                          nt16_t number_of_bytes;;fat16.c: 970: uint8_t return_code;;fat16.c: 973: return_code = f
      +                          at_get_file_information(file_number, &root);
 11656  00DDFE  0EC3               	movlw	low fat_modify_file@root
 11657  00DE00  0100               	movlb	0	; () banked
 11658  00DE02  6F8F               	movwf	fat_get_file_information@data& (0+255),b
 11659  00DE04  0E00               	movlw	high fat_modify_file@root
 11660  00DE06  6F90               	movwf	(fat_get_file_information@data+1)& (0+255),b
 11661  00DE08  51B5               	movf	fat_modify_file@file_number& (0+255),w,b
 11662  00DE0A  EC0E  F095         	call	_fat_get_file_information
 11663  00DE0E  0100               	movlb	0	; () banked
 11664  00DE10  6FB8               	movwf	fat_modify_file@return_code& (0+255),b
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;fat16.c: 974: if(return_code!=0x00)
 11668  00DE12  51B8               	movf	fat_modify_file@return_code& (0+255),w,b
 11669  00DE14  A4D8               	btfss	status,2,c
 11670  00DE16  0012               	return	
 11671                           
 11672                           ; BSR set to: 0
 11673                           ;fat16.c: 978: };fat16.c: 981: if(start_byte>root.fileSize)
 11674                           
 11675                           ; BSR set to: 0
 11676                           
 11677                           ; BSR set to: 0
 11678                           ;fat16.c: 975: {;fat16.c: 977: return return_code;;	Return value of _fat_modify_file is 
      +                          never used
 11679  00DE18  51A1               	movf	fat_modify_file@start_byte& (0+255),w,b
 11680  00DE1A  5DDF               	subwf	(fat_modify_file@root+28)& (0+255),w,b
 11681  00DE1C  51A2               	movf	(fat_modify_file@start_byte+1)& (0+255),w,b
 11682  00DE1E  59E0               	subwfb	(fat_modify_file@root+29)& (0+255),w,b
 11683  00DE20  51A3               	movf	(fat_modify_file@start_byte+2)& (0+255),w,b
 11684  00DE22  59E1               	subwfb	(fat_modify_file@root+30)& (0+255),w,b
 11685  00DE24  51A4               	movf	(fat_modify_file@start_byte+3)& (0+255),w,b
 11686  00DE26  59E2               	subwfb	(fat_modify_file@root+31)& (0+255),w,b
 11687  00DE28  A0D8               	btfss	status,0,c
 11688  00DE2A  0012               	return	
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;fat16.c: 985: };fat16.c: 987: if((start_byte+length) > root.fileSize)
 11692                           
 11693                           ; BSR set to: 0
 11694                           
 11695                           ; BSR set to: 0
 11696                           ;fat16.c: 982: {;fat16.c: 984: return 0xF0;;	Return value of _fat_modify_file is never u
      +                          sed
 11697  00DE2C  51A5               	movf	fat_modify_file@length& (0+255),w,b
 11698  00DE2E  25A1               	addwf	fat_modify_file@start_byte& (0+255),w,b
 11699  00DE30  6FA9               	movwf	??_fat_modify_file& (0+255),b
 11700  00DE32  51A6               	movf	(fat_modify_file@length+1)& (0+255),w,b
 11701  00DE34  21A2               	addwfc	(fat_modify_file@start_byte+1)& (0+255),w,b
 11702  00DE36  6FAA               	movwf	(??_fat_modify_file+1)& (0+255),b
 11703  00DE38  0E00               	movlw	0
 11704  00DE3A  21A3               	addwfc	(fat_modify_file@start_byte+2)& (0+255),w,b
 11705  00DE3C  6FAB               	movwf	(??_fat_modify_file+2)& (0+255),b
 11706  00DE3E  0E00               	movlw	0
 11707  00DE40  21A4               	addwfc	(fat_modify_file@start_byte+3)& (0+255),w,b
 11708  00DE42  6FAC               	movwf	(??_fat_modify_file+3)& (0+255),b
 11709  00DE44  51A9               	movf	??_fat_modify_file& (0+255),w,b
 11710  00DE46  5DDF               	subwf	(fat_modify_file@root+28)& (0+255),w,b
 11711  00DE48  51AA               	movf	(??_fat_modify_file+1)& (0+255),w,b
 11712  00DE4A  59E0               	subwfb	(fat_modify_file@root+29)& (0+255),w,b
 11713  00DE4C  51AB               	movf	(??_fat_modify_file+2)& (0+255),w,b
 11714  00DE4E  59E1               	subwfb	(fat_modify_file@root+30)& (0+255),w,b
 11715  00DE50  51AC               	movf	(??_fat_modify_file+3)& (0+255),w,b
 11716  00DE52  59E2               	subwfb	(fat_modify_file@root+31)& (0+255),w,b
 11717  00DE54  B0D8               	btfsc	status,0,c
 11718  00DE56  D00E               	goto	l1862
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;fat16.c: 988: {;fat16.c: 990: length = root.fileSize - start_byte;
 11722  00DE58  C0A1  F0A9         	movff	fat_modify_file@start_byte,??_fat_modify_file
 11723  00DE5C  C0A2  F0AA         	movff	fat_modify_file@start_byte+1,??_fat_modify_file+1
 11724  00DE60  1FA9               	comf	??_fat_modify_file& (0+255),f,b
 11725  00DE62  1FAA               	comf	(??_fat_modify_file+1)& (0+255),f,b
 11726  00DE64  4BA9               	infsnz	??_fat_modify_file& (0+255),f,b
 11727  00DE66  2BAA               	incf	(??_fat_modify_file+1)& (0+255),f,b
 11728  00DE68  51DF               	movf	(fat_modify_file@root+28)& (0+255),w,b
 11729  00DE6A  25A9               	addwf	??_fat_modify_file& (0+255),w,b
 11730  00DE6C  6FA5               	movwf	fat_modify_file@length& (0+255),b
 11731  00DE6E  51E0               	movf	(fat_modify_file@root+29)& (0+255),w,b
 11732  00DE70  21AA               	addwfc	(??_fat_modify_file+1)& (0+255),w,b
 11733  00DE72  6FA6               	movwf	(fat_modify_file@length+1)& (0+255),b
 11734  00DE74                     l1862:
 11735                           
 11736                           ; BSR set to: 0
 11737                           ;fat16.c: 991: };fat16.c: 994: cluster = _find_nth_cluster(root.firstCluster, (start_byt
      +                          e>>9));
 11738                           
 11739                           ; BSR set to: 0
 11740  00DE74  C0DD  F097         	movff	fat_modify_file@root+26,__find_nth_cluster@cluster
 11741  00DE78  C0DE  F098         	movff	fat_modify_file@root+27,__find_nth_cluster@cluster+1
 11742  00DE7C  C0A1  F0A9         	movff	fat_modify_file@start_byte,??_fat_modify_file
 11743  00DE80  C0A2  F0AA         	movff	fat_modify_file@start_byte+1,??_fat_modify_file+1
 11744  00DE84  C0A3  F0AB         	movff	fat_modify_file@start_byte+2,??_fat_modify_file+2
 11745  00DE88  C0A4  F0AC         	movff	fat_modify_file@start_byte+3,??_fat_modify_file+3
 11746  00DE8C  0E0A               	movlw	10
 11747  00DE8E  D005               	goto	u20950
 11748  00DE90                     u20955:
 11749  00DE90  90D8               	bcf	status,0,c
 11750  00DE92  33AC               	rrcf	(??_fat_modify_file+3)& (0+255),f,b
 11751  00DE94  33AB               	rrcf	(??_fat_modify_file+2)& (0+255),f,b
 11752  00DE96  33AA               	rrcf	(??_fat_modify_file+1)& (0+255),f,b
 11753  00DE98  33A9               	rrcf	??_fat_modify_file& (0+255),f,b
 11754  00DE9A                     u20950:
 11755  00DE9A  2EE8               	decfsz	wreg,f,c
 11756  00DE9C  D7F9               	goto	u20955
 11757  00DE9E  C0A9  F099         	movff	??_fat_modify_file,__find_nth_cluster@n
 11758  00DEA2  C0AA  F09A         	movff	??_fat_modify_file+1,__find_nth_cluster@n+1
 11759  00DEA6  EC22  F091         	call	__find_nth_cluster	;wreg free
 11760  00DEAA  C097  F0B9         	movff	?__find_nth_cluster,fat_modify_file@cluster
 11761  00DEAE  C098  F0BA         	movff	?__find_nth_cluster+1,fat_modify_file@cluster+1
 11762                           
 11763                           ;fat16.c: 997: position = start_byte & 0xFFFFFE00;
 11764  00DEB2  0E00               	movlw	0
 11765  00DEB4  0100               	movlb	0	; () banked
 11766  00DEB6  15A1               	andwf	fat_modify_file@start_byte& (0+255),w,b
 11767  00DEB8  6FBF               	movwf	fat_modify_file@position& (0+255),b
 11768  00DEBA  0EFE               	movlw	254
 11769  00DEBC  15A2               	andwf	(fat_modify_file@start_byte+1)& (0+255),w,b
 11770  00DEBE  6FC0               	movwf	(fat_modify_file@position+1)& (0+255),b
 11771  00DEC0  0EFF               	movlw	255
 11772  00DEC2  15A3               	andwf	(fat_modify_file@start_byte+2)& (0+255),w,b
 11773  00DEC4  6FC1               	movwf	(fat_modify_file@position+2)& (0+255),b
 11774  00DEC6  0EFF               	movlw	255
 11775  00DEC8  15A4               	andwf	(fat_modify_file@start_byte+3)& (0+255),w,b
 11776  00DECA  6FC2               	movwf	(fat_modify_file@position+3)& (0+255),b
 11777                           
 11778                           ; BSR set to: 0
 11779                           ;fat16.c: 1000: offset = (uint16_t) (start_byte-position);
 11780  00DECC  C0BF  F0A9         	movff	fat_modify_file@position,??_fat_modify_file
 11781  00DED0  C0C0  F0AA         	movff	fat_modify_file@position+1,??_fat_modify_file+1
 11782  00DED4  1FA9               	comf	??_fat_modify_file& (0+255),f,b
 11783  00DED6  1FAA               	comf	(??_fat_modify_file+1)& (0+255),f,b
 11784  00DED8  4BA9               	infsnz	??_fat_modify_file& (0+255),f,b
 11785  00DEDA  2BAA               	incf	(??_fat_modify_file+1)& (0+255),f,b
 11786  00DEDC  51A1               	movf	fat_modify_file@start_byte& (0+255),w,b
 11787  00DEDE  25A9               	addwf	??_fat_modify_file& (0+255),w,b
 11788  00DEE0  6FBB               	movwf	fat_modify_file@offset& (0+255),b
 11789  00DEE2  51A2               	movf	(fat_modify_file@start_byte+1)& (0+255),w,b
 11790  00DEE4  21AA               	addwfc	(??_fat_modify_file+1)& (0+255),w,b
 11791  00DEE6  6FBC               	movwf	(fat_modify_file@offset+1)& (0+255),b
 11792                           
 11793                           ; BSR set to: 0
 11794                           ;fat16.c: 1003: position = 0;
 11795  00DEE8  0E00               	movlw	0
 11796  00DEEA  6FBF               	movwf	fat_modify_file@position& (0+255),b
 11797  00DEEC  0E00               	movlw	0
 11798  00DEEE  6FC0               	movwf	(fat_modify_file@position+1)& (0+255),b
 11799  00DEF0  0E00               	movlw	0
 11800  00DEF2  6FC1               	movwf	(fat_modify_file@position+2)& (0+255),b
 11801  00DEF4  0E00               	movlw	0
 11802  00DEF6  6FC2               	movwf	(fat_modify_file@position+3)& (0+255),b
 11803                           
 11804                           ;fat16.c: 1004: while(position < length)
 11805  00DEF8  D089               	goto	l1863
 11806  00DEFA                     
 11807                           ; BSR set to: 0
 11808                           ;fat16.c: 1005: {;fat16.c: 1007: if(offset==512)
 11809                           
 11810                           ; BSR set to: 0
 11811  00DEFA  0E02               	movlw	2
 11812  00DEFC  19BC               	xorwf	(fat_modify_file@offset+1)& (0+255),w,b
 11813  00DEFE  11BB               	iorwf	fat_modify_file@offset& (0+255),w,b
 11814  00DF00  A4D8               	btfss	status,2,c
 11815  00DF02  D00F               	goto	l1865
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;fat16.c: 1008: {;fat16.c: 1010: cluster = _read_fat(cluster);
 11819  00DF04  C0B9  F08F         	movff	fat_modify_file@cluster,__read_fat@cluster
 11820  00DF08  C0BA  F090         	movff	fat_modify_file@cluster+1,__read_fat@cluster+1
 11821  00DF0C  EC03  F09A         	call	__read_fat	;wreg free
 11822  00DF10  C08F  F0B9         	movff	?__read_fat,fat_modify_file@cluster
 11823  00DF14  C090  F0BA         	movff	?__read_fat+1,fat_modify_file@cluster+1
 11824                           
 11825                           ;fat16.c: 1012: offset = 0;
 11826  00DF18  0E00               	movlw	0
 11827  00DF1A  0100               	movlb	0	; () banked
 11828  00DF1C  6FBC               	movwf	(fat_modify_file@offset+1)& (0+255),b
 11829  00DF1E  0E00               	movlw	0
 11830  00DF20  6FBB               	movwf	fat_modify_file@offset& (0+255),b
 11831  00DF22                     l1865:
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;fat16.c: 1013: };fat16.c: 1016: sector = _data_sector_from_cluster(cluster);
 11835                           
 11836                           ; BSR set to: 0
 11837  00DF22  C0B9  F060         	movff	fat_modify_file@cluster,__data_sector_from_cluster@fat_cluster
 11838  00DF26  C0BA  F061         	movff	fat_modify_file@cluster+1,__data_sector_from_cluster@fat_cluster+1
 11839  00DF2A  EC62  F0A1         	call	__data_sector_from_cluster	;wreg free
 11840  00DF2E  C060  F0B6         	movff	?__data_sector_from_cluster,fat_modify_file@sector
 11841  00DF32  C061  F0B7         	movff	?__data_sector_from_cluster+1,fat_modify_file@sector+1
 11842                           
 11843                           ;fat16.c: 1019: number_of_bytes = 512 - offset;
 11844  00DF36  C0BB  F0A9         	movff	fat_modify_file@offset,??_fat_modify_file
 11845  00DF3A  C0BC  F0AA         	movff	fat_modify_file@offset+1,??_fat_modify_file+1
 11846  00DF3E  0100               	movlb	0	; () banked
 11847  00DF40  1FA9               	comf	??_fat_modify_file& (0+255),f,b
 11848  00DF42  1FAA               	comf	(??_fat_modify_file+1)& (0+255),f,b
 11849  00DF44  4BA9               	infsnz	??_fat_modify_file& (0+255),f,b
 11850  00DF46  2BAA               	incf	(??_fat_modify_file+1)& (0+255),f,b
 11851  00DF48  0E00               	movlw	0
 11852  00DF4A  25A9               	addwf	??_fat_modify_file& (0+255),w,b
 11853  00DF4C  6FBD               	movwf	fat_modify_file@number_of_bytes& (0+255),b
 11854  00DF4E  0E02               	movlw	2
 11855  00DF50  21AA               	addwfc	(??_fat_modify_file+1)& (0+255),w,b
 11856  00DF52  6FBE               	movwf	(fat_modify_file@number_of_bytes+1)& (0+255),b
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;fat16.c: 1020: if(number_of_bytes > (length-position))
 11860  00DF54  51BD               	movf	fat_modify_file@number_of_bytes& (0+255),w,b
 11861  00DF56  6FA9               	movwf	??_fat_modify_file& (0+255),b
 11862  00DF58  51BE               	movf	(fat_modify_file@number_of_bytes+1)& (0+255),w,b
 11863  00DF5A  6FAA               	movwf	(??_fat_modify_file+1)& (0+255),b
 11864  00DF5C  6BAB               	clrf	(??_fat_modify_file+2)& (0+255),b
 11865  00DF5E  6BAC               	clrf	(??_fat_modify_file+3)& (0+255),b
 11866  00DF60  C0BF  F0AD         	movff	fat_modify_file@position,??_fat_modify_file+4
 11867  00DF64  C0C0  F0AE         	movff	fat_modify_file@position+1,??_fat_modify_file+5
 11868  00DF68  C0C1  F0AF         	movff	fat_modify_file@position+2,??_fat_modify_file+6
 11869  00DF6C  C0C2  F0B0         	movff	fat_modify_file@position+3,??_fat_modify_file+7
 11870  00DF70  1FAD               	comf	(??_fat_modify_file+4)& (0+255),f,b
 11871  00DF72  1FAE               	comf	(??_fat_modify_file+5)& (0+255),f,b
 11872  00DF74  1FAF               	comf	(??_fat_modify_file+6)& (0+255),f,b
 11873  00DF76  1FB0               	comf	(??_fat_modify_file+7)& (0+255),f,b
 11874  00DF78  2BAD               	incf	(??_fat_modify_file+4)& (0+255),f,b
 11875  00DF7A  0E00               	movlw	0
 11876  00DF7C  23AE               	addwfc	(??_fat_modify_file+5)& (0+255),f,b
 11877  00DF7E  23AF               	addwfc	(??_fat_modify_file+6)& (0+255),f,b
 11878  00DF80  23B0               	addwfc	(??_fat_modify_file+7)& (0+255),f,b
 11879  00DF82  51A5               	movf	fat_modify_file@length& (0+255),w,b
 11880  00DF84  25AD               	addwf	(??_fat_modify_file+4)& (0+255),w,b
 11881  00DF86  6FB1               	movwf	(??_fat_modify_file+8)& (0+255),b
 11882  00DF88  51A6               	movf	(fat_modify_file@length+1)& (0+255),w,b
 11883  00DF8A  21AE               	addwfc	(??_fat_modify_file+5)& (0+255),w,b
 11884  00DF8C  6FB2               	movwf	(??_fat_modify_file+9)& (0+255),b
 11885  00DF8E  0E00               	movlw	0
 11886  00DF90  21AF               	addwfc	(??_fat_modify_file+6)& (0+255),w,b
 11887  00DF92  6FB3               	movwf	(??_fat_modify_file+10)& (0+255),b
 11888  00DF94  0E00               	movlw	0
 11889  00DF96  21B0               	addwfc	(??_fat_modify_file+7)& (0+255),w,b
 11890  00DF98  6FB4               	movwf	(??_fat_modify_file+11)& (0+255),b
 11891  00DF9A  51A9               	movf	??_fat_modify_file& (0+255),w,b
 11892  00DF9C  5DB1               	subwf	(??_fat_modify_file+8)& (0+255),w,b
 11893  00DF9E  51AA               	movf	(??_fat_modify_file+1)& (0+255),w,b
 11894  00DFA0  59B2               	subwfb	(??_fat_modify_file+9)& (0+255),w,b
 11895  00DFA2  51AB               	movf	(??_fat_modify_file+2)& (0+255),w,b
 11896  00DFA4  59B3               	subwfb	(??_fat_modify_file+10)& (0+255),w,b
 11897  00DFA6  51AC               	movf	(??_fat_modify_file+3)& (0+255),w,b
 11898  00DFA8  59B4               	subwfb	(??_fat_modify_file+11)& (0+255),w,b
 11899  00DFAA  B0D8               	btfsc	status,0,c
 11900  00DFAC  D00E               	goto	l1866
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;fat16.c: 1021: {;fat16.c: 1022: number_of_bytes = length - position;
 11904  00DFAE  C0BF  F0A9         	movff	fat_modify_file@position,??_fat_modify_file
 11905  00DFB2  C0C0  F0AA         	movff	fat_modify_file@position+1,??_fat_modify_file+1
 11906  00DFB6  1FA9               	comf	??_fat_modify_file& (0+255),f,b
 11907  00DFB8  1FAA               	comf	(??_fat_modify_file+1)& (0+255),f,b
 11908  00DFBA  4BA9               	infsnz	??_fat_modify_file& (0+255),f,b
 11909  00DFBC  2BAA               	incf	(??_fat_modify_file+1)& (0+255),f,b
 11910  00DFBE  51A5               	movf	fat_modify_file@length& (0+255),w,b
 11911  00DFC0  25A9               	addwf	??_fat_modify_file& (0+255),w,b
 11912  00DFC2  6FBD               	movwf	fat_modify_file@number_of_bytes& (0+255),b
 11913  00DFC4  51A6               	movf	(fat_modify_file@length+1)& (0+255),w,b
 11914  00DFC6  21AA               	addwfc	(??_fat_modify_file+1)& (0+255),w,b
 11915  00DFC8  6FBE               	movwf	(fat_modify_file@number_of_bytes+1)& (0+255),b
 11916  00DFCA                     l1866:
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;fat16.c: 1023: };fat16.c: 1026: flash_partial_write(sector, offset, number_of_bytes, &d
      +                          ata[position]);
 11920                           
 11921                           ; BSR set to: 0
 11922  00DFCA  C0B6  F07F         	movff	fat_modify_file@sector,flash_partial_write@page
 11923  00DFCE  C0B7  F080         	movff	fat_modify_file@sector+1,flash_partial_write@page+1
 11924  00DFD2  C0BB  F081         	movff	fat_modify_file@offset,flash_partial_write@start
 11925  00DFD6  C0BC  F082         	movff	fat_modify_file@offset+1,flash_partial_write@start+1
 11926  00DFDA  C0BD  F083         	movff	fat_modify_file@number_of_bytes,flash_partial_write@length
 11927  00DFDE  C0BE  F084         	movff	fat_modify_file@number_of_bytes+1,flash_partial_write@length+1
 11928  00DFE2  51BF               	movf	fat_modify_file@position& (0+255),w,b
 11929  00DFE4  25A7               	addwf	fat_modify_file@data& (0+255),w,b
 11930  00DFE6  6F85               	movwf	flash_partial_write@data& (0+255),b
 11931  00DFE8  51C0               	movf	(fat_modify_file@position+1)& (0+255),w,b
 11932  00DFEA  21A8               	addwfc	(fat_modify_file@data+1)& (0+255),w,b
 11933  00DFEC  6F86               	movwf	(flash_partial_write@data+1)& (0+255),b
 11934  00DFEE  ECA2  F096         	call	_flash_partial_write	;wreg free
 11935                           
 11936                           ;fat16.c: 1029: position += number_of_bytes;
 11937  00DFF2  0100               	movlb	0	; () banked
 11938  00DFF4  51BD               	movf	fat_modify_file@number_of_bytes& (0+255),w,b
 11939  00DFF6  27BF               	addwf	fat_modify_file@position& (0+255),f,b
 11940  00DFF8  51BE               	movf	(fat_modify_file@number_of_bytes+1)& (0+255),w,b
 11941  00DFFA  23C0               	addwfc	(fat_modify_file@position+1)& (0+255),f,b
 11942  00DFFC  0E00               	movlw	0
 11943  00DFFE  23C1               	addwfc	(fat_modify_file@position+2)& (0+255),f,b
 11944  00E000  0E00               	movlw	0
 11945  00E002  23C2               	addwfc	(fat_modify_file@position+3)& (0+255),f,b
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;fat16.c: 1030: offset += number_of_bytes;
 11949  00E004  51BD               	movf	fat_modify_file@number_of_bytes& (0+255),w,b
 11950  00E006  27BB               	addwf	fat_modify_file@offset& (0+255),f,b
 11951  00E008  51BE               	movf	(fat_modify_file@number_of_bytes+1)& (0+255),w,b
 11952  00E00A  23BC               	addwfc	(fat_modify_file@offset+1)& (0+255),f,b
 11953  00E00C                     l1863:
 11954                           
 11955                           ; BSR set to: 0
 11956                           
 11957                           ; BSR set to: 0
 11958  00E00C  51A5               	movf	fat_modify_file@length& (0+255),w,b
 11959  00E00E  6FA9               	movwf	??_fat_modify_file& (0+255),b
 11960  00E010  51A6               	movf	(fat_modify_file@length+1)& (0+255),w,b
 11961  00E012  6FAA               	movwf	(??_fat_modify_file+1)& (0+255),b
 11962  00E014  6BAB               	clrf	(??_fat_modify_file+2)& (0+255),b
 11963  00E016  6BAC               	clrf	(??_fat_modify_file+3)& (0+255),b
 11964  00E018  51A9               	movf	??_fat_modify_file& (0+255),w,b
 11965  00E01A  5DBF               	subwf	fat_modify_file@position& (0+255),w,b
 11966  00E01C  51AA               	movf	(??_fat_modify_file+1)& (0+255),w,b
 11967  00E01E  59C0               	subwfb	(fat_modify_file@position+1)& (0+255),w,b
 11968  00E020  51AB               	movf	(??_fat_modify_file+2)& (0+255),w,b
 11969  00E022  59C1               	subwfb	(fat_modify_file@position+2)& (0+255),w,b
 11970  00E024  51AC               	movf	(??_fat_modify_file+3)& (0+255),w,b
 11971  00E026  59C2               	subwfb	(fat_modify_file@position+3)& (0+255),w,b
 11972  00E028  B0D8               	btfsc	status,0,c
 11973  00E02A  0012               	return	
 11974  00E02C  D766               	goto	l1864
 11975  00E02E                     __end_of_fat_modify_file:
 11976                           	opt stack 0
 11977                           tblptru	equ	0xFF8
 11978                           tblptrh	equ	0xFF7
 11979                           tblptrl	equ	0xFF6
 11980                           tablat	equ	0xFF5
 11981                           prodh	equ	0xFF4
 11982                           prodl	equ	0xFF3
 11983                           postinc0	equ	0xFEE
 11984                           wreg	equ	0xFE8
 11985                           postdec1	equ	0xFE5
 11986                           plusw1	equ	0xFE3
 11987                           fsr1h	equ	0xFE2
 11988                           fsr1l	equ	0xFE1
 11989                           indf2	equ	0xFDF
 11990                           postinc2	equ	0xFDE
 11991                           plusw2	equ	0xFDB
 11992                           fsr2h	equ	0xFDA
 11993                           fsr2l	equ	0xFD9
 11994                           status	equ	0xFD8
 11995                           
 11996 ;; *************** function _fat_get_file_information *****************
 11997 ;; Defined at:
 11998 ;;		line 1391 in file "fat16.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;  file_number     1    wreg     unsigned char 
 12001 ;;  data            2   47[BANK0 ] PTR struct .
 12002 ;;		 -> fat_modify_file@root(32), fat_resize_file@root(32), fat_read_from_file@root(32), fat_rename_file@root(32), 
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;  file_number     1   54[BANK0 ] unsigned char 
 12005 ;;  offset          2   52[BANK0 ] unsigned int 
 12006 ;;  root_sector     2   50[BANK0 ] unsigned int 
 12007 ;; Return value:  Size  Location     Type
 12008 ;;                  1    wreg      unsigned char 
 12009 ;; Registers used:
 12010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12011 ;; Tracked objects:
 12012 ;;		On entry : 0/0
 12013 ;;		On exit  : 0/0
 12014 ;;		Unchanged: 0/0
 12015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 12016 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12017 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12019 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12020 ;;Total ram usage:        8 bytes
 12021 ;; Hardware stack levels used:    1
 12022 ;; Hardware stack levels required when called:   15
 12023 ;; This function calls:
 12024 ;;		__offset_from_file_number
 12025 ;;		__sector_from_file_number
 12026 ;;		_flash_partial_read
 12027 ;; This function is called by:
 12028 ;;		_fat_resize_file
 12029 ;;		_fat_modify_file
 12030 ;;		_fat_rename_file
 12031 ;;		_fat_read_from_file
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text33
 12036  012A1C                     __ptext33:
 12037                           	opt stack 0
 12038  012A1C                     _fat_get_file_information:
 12039                           	opt stack 12
 12040                           
 12041                           ; BSR set to: 0
 12042                           ;incstack = 0
 12043                           ;fat_get_file_information@file_number stored from wreg
 12044  012A1C  0100               	movlb	0	; () banked
 12045  012A1E  6F96               	movwf	fat_get_file_information@file_number& (0+255),b
 12046                           
 12047                           ;fat16.c: 1393: uint16_t root_sector;;fat16.c: 1394: uint16_t offset;;fat16.c: 1396: if(
      +                          file_number>=64)
 12048  012A20  0E3F               	movlw	63
 12049  012A22  0100               	movlb	0	; () banked
 12050  012A24  6596               	cpfsgt	fat_get_file_information@file_number& (0+255),b
 12051  012A26  D002               	goto	l2030
 12052                           
 12053                           ; BSR set to: 0
 12054                           ;fat16.c: 1397: {;fat16.c: 1399: return 0x01;
 12055  012A28  0E01               	movlw	1
 12056                           
 12057                           ; BSR set to: 0
 12058  012A2A  0012               	return	
 12059  012A2C                     l2030:
 12060                           
 12061                           ; BSR set to: 0
 12062                           ;fat16.c: 1400: };fat16.c: 1403: root_sector = _sector_from_file_number(file_number);
 12063                           
 12064                           ; BSR set to: 0
 12065  012A2C  5196               	movf	fat_get_file_information@file_number& (0+255),w,b
 12066  012A2E  EC46  F09F         	call	__sector_from_file_number
 12067  012A32  C060  F092         	movff	?__sector_from_file_number,fat_get_file_information@root_sector
 12068  012A36  C061  F093         	movff	?__sector_from_file_number+1,fat_get_file_information@root_sector+1
 12069                           
 12070                           ;fat16.c: 1404: offset = _offset_from_file_number(file_number);
 12071  012A3A  0100               	movlb	0	; () banked
 12072  012A3C  5196               	movf	fat_get_file_information@file_number& (0+255),w,b
 12073  012A3E  EC3F  F0A0         	call	__offset_from_file_number
 12074  012A42  C060  F094         	movff	?__offset_from_file_number,fat_get_file_information@offset
 12075  012A46  C061  F095         	movff	?__offset_from_file_number+1,fat_get_file_information@offset+1
 12076                           
 12077                           ;fat16.c: 1407: flash_partial_read(root_sector, offset, 32, (uint8_t*) data);
 12078  012A4A  C092  F087         	movff	fat_get_file_information@root_sector,flash_partial_read@page
 12079  012A4E  C093  F088         	movff	fat_get_file_information@root_sector+1,flash_partial_read@page+1
 12080  012A52  C094  F089         	movff	fat_get_file_information@offset,flash_partial_read@start
 12081  012A56  C095  F08A         	movff	fat_get_file_information@offset+1,flash_partial_read@start+1
 12082  012A5A  0E00               	movlw	0
 12083  012A5C  0100               	movlb	0	; () banked
 12084  012A5E  6F8C               	movwf	(flash_partial_read@length+1)& (0+255),b
 12085  012A60  0E20               	movlw	32
 12086  012A62  6F8B               	movwf	flash_partial_read@length& (0+255),b
 12087  012A64  C08F  F08D         	movff	fat_get_file_information@data,flash_partial_read@data
 12088  012A68  C090  F08E         	movff	fat_get_file_information@data+1,flash_partial_read@data+1
 12089  012A6C  EC7C  F0A0         	call	_flash_partial_read	;wreg free
 12090                           
 12091                           ;fat16.c: 1410: if((data->fileName[0]==0x00) || (data->fileName[0]==0xE5))
 12092  012A70  C08F  FFD9         	movff	fat_get_file_information@data,fsr2l
 12093  012A74  C090  FFDA         	movff	fat_get_file_information@data+1,fsr2h
 12094  012A78  50DF               	movf	indf2,w,c
 12095  012A7A  B4D8               	btfsc	status,2,c
 12096  012A7C  D008               	goto	u19700
 12097  012A7E  C08F  FFD9         	movff	fat_get_file_information@data,fsr2l
 12098  012A82  C090  FFDA         	movff	fat_get_file_information@data+1,fsr2h
 12099  012A86  0EE5               	movlw	229
 12100  012A88  18DE               	xorwf	postinc2,w,c
 12101  012A8A  A4D8               	btfss	status,2,c
 12102  012A8C  D002               	goto	l2032
 12103  012A8E                     u19700:
 12104                           
 12105                           ;fat16.c: 1411: {;fat16.c: 1413: return 0x02;
 12106  012A8E  0E02               	movlw	2
 12107  012A90  0012               	return	
 12108  012A92                     l2032:
 12109                           
 12110                           ;fat16.c: 1414: };fat16.c: 1417: return 0x00;
 12111  012A92  0E00               	movlw	0
 12112  012A94  0012               	return	
 12113  012A96                     __end_of_fat_get_file_information:
 12114                           	opt stack 0
 12115                           tblptru	equ	0xFF8
 12116                           tblptrh	equ	0xFF7
 12117                           tblptrl	equ	0xFF6
 12118                           tablat	equ	0xFF5
 12119                           prodh	equ	0xFF4
 12120                           prodl	equ	0xFF3
 12121                           postinc0	equ	0xFEE
 12122                           wreg	equ	0xFE8
 12123                           postdec1	equ	0xFE5
 12124                           plusw1	equ	0xFE3
 12125                           fsr1h	equ	0xFE2
 12126                           fsr1l	equ	0xFE1
 12127                           indf2	equ	0xFDF
 12128                           postinc2	equ	0xFDE
 12129                           plusw2	equ	0xFDB
 12130                           fsr2h	equ	0xFDA
 12131                           fsr2l	equ	0xFD9
 12132                           status	equ	0xFD8
 12133                           
 12134 ;; *************** function __find_nth_cluster *****************
 12135 ;; Defined at:
 12136 ;;		line 182 in file "fat16.c"
 12137 ;; Parameters:    Size  Location     Type
 12138 ;;  cluster         2   55[BANK0 ] unsigned int 
 12139 ;;  n               2   57[BANK0 ] unsigned int 
 12140 ;; Auto vars:     Size  Location     Type
 12141 ;;  sector          2   63[BANK0 ] unsigned int 
 12142 ;;  sector_in_bu    2   61[BANK0 ] unsigned int 
 12143 ;;  offset          2   59[BANK0 ] unsigned int 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;                  2   55[BANK0 ] unsigned int 
 12146 ;; Registers used:
 12147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 12153 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12154 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12156 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12157 ;;Total ram usage:       10 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:   16
 12160 ;; This function calls:
 12161 ;;		__fat_offset_from_cluster
 12162 ;;		__fat_sector_from_cluster
 12163 ;;		__read_fat
 12164 ;;		__read_value_from_offset
 12165 ;;		_flash_sector_read
 12166 ;; This function is called by:
 12167 ;;		_fat_modify_file
 12168 ;;		_fat_read_from_file_fast
 12169 ;;		_fat_copy_sector_to_buffer
 12170 ;; This function uses a non-reentrant model
 12171 ;;
 12172                           
 12173                           	psect	text34
 12174  012244                     __ptext34:
 12175                           	opt stack 0
 12176  012244                     __find_nth_cluster:
 12177                           	opt stack 11
 12178                           
 12179                           ;fat16.c: 184: uint16_t sector;;fat16.c: 185: uint16_t offset;;fat16.c: 186: uint16_t se
      +                          ctor_in_buffer = 0;
 12180                           
 12181                           ;incstack = 0
 12182  012244  0E00               	movlw	0
 12183  012246  0100               	movlb	0	; () banked
 12184  012248  6F9E               	movwf	(__find_nth_cluster@sector_in_buffer+1)& (0+255),b
 12185  01224A  0E00               	movlw	0
 12186  01224C  6F9D               	movwf	__find_nth_cluster@sector_in_buffer& (0+255),b
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;fat16.c: 189: if(n==1)
 12190  01224E  0599               	decf	__find_nth_cluster@n& (0+255),w,b
 12191  012250  119A               	iorwf	(__find_nth_cluster@n+1)& (0+255),w,b
 12192  012252  A4D8               	btfss	status,2,c
 12193  012254  D040               	goto	l1719
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;fat16.c: 190: {;fat16.c: 191: return _read_fat(cluster);
 12197  012256  C097  F08F         	movff	__find_nth_cluster@cluster,__read_fat@cluster
 12198  01225A  C098  F090         	movff	__find_nth_cluster@cluster+1,__read_fat@cluster+1
 12199  01225E  EC03  F09A         	call	__read_fat	;wreg free
 12200  012262  C08F  F097         	movff	?__read_fat,?__find_nth_cluster
 12201  012266  C090  F098         	movff	?__read_fat+1,?__find_nth_cluster+1
 12202  01226A  0012               	return	
 12203  01226C                     
 12204                           ;fat16.c: 195: {;fat16.c: 197: sector = _fat_sector_from_cluster(cluster);
 12205  01226C  C097  F060         	movff	__find_nth_cluster@cluster,__fat_sector_from_cluster@cluster
 12206  012270  C098  F061         	movff	__find_nth_cluster@cluster+1,__fat_sector_from_cluster@cluster+1
 12207  012274  EC15  F0A1         	call	__fat_sector_from_cluster	;wreg free
 12208  012278  C060  F09F         	movff	?__fat_sector_from_cluster,__find_nth_cluster@sector
 12209  01227C  C061  F0A0         	movff	?__fat_sector_from_cluster+1,__find_nth_cluster@sector+1
 12210                           
 12211                           ;fat16.c: 198: offset = _fat_offset_from_cluster(cluster);
 12212  012280  C097  F060         	movff	__find_nth_cluster@cluster,__fat_offset_from_cluster@cluster
 12213  012284  C098  F061         	movff	__find_nth_cluster@cluster+1,__fat_offset_from_cluster@cluster+1
 12214  012288  EC22  F0A1         	call	__fat_offset_from_cluster	;wreg free
 12215  01228C  C060  F09B         	movff	?__fat_offset_from_cluster,__find_nth_cluster@offset
 12216  012290  C061  F09C         	movff	?__fat_offset_from_cluster+1,__find_nth_cluster@offset+1
 12217                           
 12218                           ;fat16.c: 201: if(sector != sector_in_buffer)
 12219  012294  0100               	movlb	0	; () banked
 12220  012296  519D               	movf	__find_nth_cluster@sector_in_buffer& (0+255),w,b
 12221  012298  199F               	xorwf	__find_nth_cluster@sector& (0+255),w,b
 12222  01229A  E104               	bnz	u19380
 12223  01229C  519E               	movf	(__find_nth_cluster@sector_in_buffer+1)& (0+255),w,b
 12224  01229E  19A0               	xorwf	(__find_nth_cluster@sector+1)& (0+255),w,b
 12225  0122A0  B4D8               	btfsc	status,2,c
 12226  0122A2  D00A               	goto	l1721
 12227  0122A4                     u19380:
 12228                           
 12229                           ; BSR set to: 0
 12230                           ;fat16.c: 202: {;fat16.c: 203: flash_sector_read(sector, buffer);
 12231  0122A4  C09F  F087         	movff	__find_nth_cluster@sector,flash_sector_read@page
 12232  0122A8  C0A0  F088         	movff	__find_nth_cluster@sector+1,flash_sector_read@page+1
 12233  0122AC  0E00               	movlw	low _buffer
 12234  0122AE  6F89               	movwf	flash_sector_read@data& (0+255),b
 12235  0122B0  0E0A               	movlw	high _buffer
 12236  0122B2  6F8A               	movwf	(flash_sector_read@data+1)& (0+255),b
 12237  0122B4  EC68  F0A0         	call	_flash_sector_read	;wreg free
 12238  0122B8                     l1721:
 12239                           
 12240                           ;fat16.c: 204: };fat16.c: 207: cluster = _read_value_from_offset(offset, buffer);
 12241  0122B8  C09B  F060         	movff	__find_nth_cluster@offset,__read_value_from_offset@offset
 12242  0122BC  C09C  F061         	movff	__find_nth_cluster@offset+1,__read_value_from_offset@offset+1
 12243  0122C0  0E00               	movlw	low _buffer
 12244  0122C2  0100               	movlb	0	; () banked
 12245  0122C4  6F62               	movwf	__read_value_from_offset@buffer& (0+255),b
 12246  0122C6  0E0A               	movlw	high _buffer
 12247  0122C8  6F63               	movwf	(__read_value_from_offset@buffer+1)& (0+255),b
 12248  0122CA  EC97  F09C         	call	__read_value_from_offset	;wreg free
 12249  0122CE  C060  F097         	movff	?__read_value_from_offset,__find_nth_cluster@cluster
 12250  0122D2  C061  F098         	movff	?__read_value_from_offset+1,__find_nth_cluster@cluster+1
 12251  0122D6                     l1719:
 12252  0122D6  0100               	movlb	0	; () banked
 12253  0122D8  5199               	movf	__find_nth_cluster@n& (0+255),w,b
 12254  0122DA  119A               	iorwf	(__find_nth_cluster@n+1)& (0+255),w,b
 12255  0122DC  A4D8               	btfss	status,2,c
 12256  0122DE  D7C6               	goto	l1720
 12257                           
 12258                           ; BSR set to: 0
 12259                           ;fat16.c: 208: };fat16.c: 210: return cluster;
 12260  0122E0  C097  F097         	movff	__find_nth_cluster@cluster,?__find_nth_cluster
 12261  0122E4  C098  F098         	movff	__find_nth_cluster@cluster+1,?__find_nth_cluster+1
 12262  0122E8  0012               	return		;funcret
 12263  0122EA                     __end_of__find_nth_cluster:
 12264                           	opt stack 0
 12265                           tblptru	equ	0xFF8
 12266                           tblptrh	equ	0xFF7
 12267                           tblptrl	equ	0xFF6
 12268                           tablat	equ	0xFF5
 12269                           prodh	equ	0xFF4
 12270                           prodl	equ	0xFF3
 12271                           postinc0	equ	0xFEE
 12272                           wreg	equ	0xFE8
 12273                           postdec1	equ	0xFE5
 12274                           plusw1	equ	0xFE3
 12275                           fsr1h	equ	0xFE2
 12276                           fsr1l	equ	0xFE1
 12277                           indf2	equ	0xFDF
 12278                           postinc2	equ	0xFDE
 12279                           plusw2	equ	0xFDB
 12280                           fsr2h	equ	0xFDA
 12281                           fsr2l	equ	0xFD9
 12282                           status	equ	0xFD8
 12283                           
 12284 ;; *************** function __read_fat *****************
 12285 ;; Defined at:
 12286 ;;		line 456 in file "fat16.c"
 12287 ;; Parameters:    Size  Location     Type
 12288 ;;  cluster         2   47[BANK0 ] unsigned int 
 12289 ;; Auto vars:     Size  Location     Type
 12290 ;;  value           2   53[BANK0 ] unsigned int 
 12291 ;;  offset          2   51[BANK0 ] unsigned int 
 12292 ;;  sector          2   49[BANK0 ] unsigned int 
 12293 ;; Return value:  Size  Location     Type
 12294 ;;                  2   47[BANK0 ] unsigned int 
 12295 ;; Registers used:
 12296 ;;		wreg, status,2, status,0, cstack
 12297 ;; Tracked objects:
 12298 ;;		On entry : 0/0
 12299 ;;		On exit  : 0/0
 12300 ;;		Unchanged: 0/0
 12301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 12302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12303 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12305 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12306 ;;Total ram usage:        8 bytes
 12307 ;; Hardware stack levels used:    1
 12308 ;; Hardware stack levels required when called:   15
 12309 ;; This function calls:
 12310 ;;		__fat_offset_from_cluster
 12311 ;;		__fat_sector_from_cluster
 12312 ;;		_flash_partial_read
 12313 ;; This function is called by:
 12314 ;;		__find_nth_cluster
 12315 ;;		_fat_modify_file
 12316 ;;		_fat_read_from_file_fast
 12317 ;; This function uses a non-reentrant model
 12318 ;;
 12319                           
 12320                           	psect	text35
 12321  013406                     __ptext35:
 12322                           	opt stack 0
 12323  013406                     __read_fat:
 12324                           	opt stack 12
 12325                           
 12326                           ;fat16.c: 458: uint16_t sector;;fat16.c: 459: uint16_t offset;;fat16.c: 460: uint16_t va
      +                          lue;;fat16.c: 463: sector = _fat_sector_from_cluster(cluster);
 12327                           
 12328                           ;incstack = 0
 12329  013406  C08F  F060         	movff	__read_fat@cluster,__fat_sector_from_cluster@cluster
 12330  01340A  C090  F061         	movff	__read_fat@cluster+1,__fat_sector_from_cluster@cluster+1
 12331  01340E  EC15  F0A1         	call	__fat_sector_from_cluster	;wreg free
 12332  013412  C060  F091         	movff	?__fat_sector_from_cluster,__read_fat@sector
 12333  013416  C061  F092         	movff	?__fat_sector_from_cluster+1,__read_fat@sector+1
 12334                           
 12335                           ;fat16.c: 464: offset = _fat_offset_from_cluster(cluster);
 12336  01341A  C08F  F060         	movff	__read_fat@cluster,__fat_offset_from_cluster@cluster
 12337  01341E  C090  F061         	movff	__read_fat@cluster+1,__fat_offset_from_cluster@cluster+1
 12338  013422  EC22  F0A1         	call	__fat_offset_from_cluster	;wreg free
 12339  013426  C060  F093         	movff	?__fat_offset_from_cluster,__read_fat@offset
 12340  01342A  C061  F094         	movff	?__fat_offset_from_cluster+1,__read_fat@offset+1
 12341                           
 12342                           ;fat16.c: 467: flash_partial_read(sector, offset, 2, &value);
 12343  01342E  C091  F087         	movff	__read_fat@sector,flash_partial_read@page
 12344  013432  C092  F088         	movff	__read_fat@sector+1,flash_partial_read@page+1
 12345  013436  C093  F089         	movff	__read_fat@offset,flash_partial_read@start
 12346  01343A  C094  F08A         	movff	__read_fat@offset+1,flash_partial_read@start+1
 12347  01343E  0E00               	movlw	0
 12348  013440  0100               	movlb	0	; () banked
 12349  013442  6F8C               	movwf	(flash_partial_read@length+1)& (0+255),b
 12350  013444  0E02               	movlw	2
 12351  013446  6F8B               	movwf	flash_partial_read@length& (0+255),b
 12352  013448  0E95               	movlw	low __read_fat@value
 12353  01344A  6F8D               	movwf	flash_partial_read@data& (0+255),b
 12354  01344C  0E00               	movlw	high __read_fat@value
 12355  01344E  6F8E               	movwf	(flash_partial_read@data+1)& (0+255),b
 12356  013450  EC7C  F0A0         	call	_flash_partial_read	;wreg free
 12357                           
 12358                           ;fat16.c: 470: return value;
 12359  013454  C095  F08F         	movff	__read_fat@value,?__read_fat
 12360  013458  C096  F090         	movff	__read_fat@value+1,?__read_fat+1
 12361  01345C  0012               	return	
 12362  01345E                     __end_of__read_fat:
 12363                           	opt stack 0
 12364                           tblptru	equ	0xFF8
 12365                           tblptrh	equ	0xFF7
 12366                           tblptrl	equ	0xFF6
 12367                           tablat	equ	0xFF5
 12368                           prodh	equ	0xFF4
 12369                           prodl	equ	0xFF3
 12370                           postinc0	equ	0xFEE
 12371                           wreg	equ	0xFE8
 12372                           postdec1	equ	0xFE5
 12373                           plusw1	equ	0xFE3
 12374                           fsr1h	equ	0xFE2
 12375                           fsr1l	equ	0xFE1
 12376                           indf2	equ	0xFDF
 12377                           postinc2	equ	0xFDE
 12378                           plusw2	equ	0xFDB
 12379                           fsr2h	equ	0xFDA
 12380                           fsr2l	equ	0xFD9
 12381                           status	equ	0xFD8
 12382                           
 12383 ;; *************** function __data_sector_from_cluster *****************
 12384 ;; Defined at:
 12385 ;;		line 70 in file "fat16.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;  fat_cluster     2    0[BANK0 ] unsigned int 
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;		None
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  2    0[BANK0 ] unsigned int 
 12392 ;; Registers used:
 12393 ;;		wreg, status,2, status,0
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 12399 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12402 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12403 ;;Total ram usage:        2 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:   10
 12406 ;; This function calls:
 12407 ;;		Nothing
 12408 ;; This function is called by:
 12409 ;;		_fat_modify_file
 12410 ;;		_fat_read_from_file_fast
 12411 ;;		_fat_copy_sector_to_buffer
 12412 ;; This function uses a non-reentrant model
 12413 ;;
 12414                           
 12415                           	psect	text36
 12416  0142C4                     __ptext36:
 12417                           	opt stack 0
 12418  0142C4                     __data_sector_from_cluster:
 12419                           	opt stack 17
 12420                           
 12421                           ;fat16.c: 72: return fat_cluster + 38 - 2;
 12422                           
 12423                           ;incstack = 0
 12424  0142C4  0E24               	movlw	36
 12425  0142C6  0100               	movlb	0	; () banked
 12426  0142C8  2560               	addwf	__data_sector_from_cluster@fat_cluster& (0+255),w,b
 12427  0142CA  6F60               	movwf	?__data_sector_from_cluster& (0+255),b
 12428  0142CC  0E00               	movlw	0
 12429  0142CE  2161               	addwfc	(__data_sector_from_cluster@fat_cluster+1)& (0+255),w,b
 12430  0142D0  6F61               	movwf	(?__data_sector_from_cluster+1)& (0+255),b
 12431  0142D2  0012               	return	
 12432  0142D4                     __end_of__data_sector_from_cluster:
 12433                           	opt stack 0
 12434                           tblptru	equ	0xFF8
 12435                           tblptrh	equ	0xFF7
 12436                           tblptrl	equ	0xFF6
 12437                           tablat	equ	0xFF5
 12438                           prodh	equ	0xFF4
 12439                           prodl	equ	0xFF3
 12440                           postinc0	equ	0xFEE
 12441                           wreg	equ	0xFE8
 12442                           postdec1	equ	0xFE5
 12443                           plusw1	equ	0xFE3
 12444                           fsr1h	equ	0xFE2
 12445                           fsr1l	equ	0xFE1
 12446                           indf2	equ	0xFDF
 12447                           postinc2	equ	0xFDE
 12448                           plusw2	equ	0xFDB
 12449                           fsr2h	equ	0xFDA
 12450                           fsr2l	equ	0xFD9
 12451                           status	equ	0xFD8
 12452                           
 12453 ;; *************** function _fat_create_file *****************
 12454 ;; Defined at:
 12455 ;;		line 586 in file "fat16.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;  name            2   76[BANK0 ] PTR unsigned char 
 12458 ;;		 -> configFile_name(8), 
 12459 ;;  extension       2   78[BANK0 ] PTR unsigned char 
 12460 ;;		 -> configFile_extention(3), 
 12461 ;;  size            4   80[BANK0 ] unsigned long 
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;  root_entry     32   93[BANK0 ] struct .
 12464 ;;  first_cluste    2   90[BANK0 ] unsigned int 
 12465 ;;  number_of_cl    2   88[BANK0 ] unsigned int 
 12466 ;;  file_number     1   92[BANK0 ] unsigned char 
 12467 ;; Return value:  Size  Location     Type
 12468 ;;                  1    wreg      unsigned char 
 12469 ;; Registers used:
 12470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 12476 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12477 ;;      Locals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12478 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12479 ;;      Totals:         0      49       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12480 ;;Total ram usage:       49 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:   17
 12483 ;; This function calls:
 12484 ;;		__get_available_root_entry
 12485 ;;		__get_date
 12486 ;;		__get_time
 12487 ;;		__make_cluster_chain
 12488 ;;		__write_root
 12489 ;;		_fat_find_file
 12490 ;;		_memcpy
 12491 ;; This function is called by:
 12492 ;;		_configFile_write
 12493 ;;		_fat_copy_file
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text37
 12498  00F998                     __ptext37:
 12499                           	opt stack 0
 12500  00F998                     _fat_create_file:
 12501                           	opt stack 11
 12502                           
 12503                           ;fat16.c: 588: rootEntry_t root_entry;;fat16.c: 589: uint8_t file_number;;fat16.c: 590: 
      +                          uint16_t number_of_clusters;;fat16.c: 591: uint16_t first_cluster;;fat16.c: 595: if(fat_
      +                          find_file(name, extension) != 0xFF)
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;incstack = 0
 12507  00F998  C0AC  F08B         	movff	fat_create_file@name,fat_find_file@name
 12508  00F99C  C0AD  F08C         	movff	fat_create_file@name+1,fat_find_file@name+1
 12509  00F9A0  C0AE  F08D         	movff	fat_create_file@extension,fat_find_file@extension
 12510  00F9A4  C0AF  F08E         	movff	fat_create_file@extension+1,fat_find_file@extension+1
 12511  00F9A8  EC61  F087         	call	_fat_find_file	;wreg free
 12512  00F9AC  0AFF               	xorlw	255
 12513  00F9AE  B4D8               	btfsc	status,2,c
 12514  00F9B0  D002               	goto	l1801
 12515                           
 12516                           ;fat16.c: 596: {;fat16.c: 599: return 0xFF;
 12517  00F9B2  0EFF               	movlw	255
 12518  00F9B4  0012               	return	
 12519  00F9B6                     l1801:
 12520                           
 12521                           ;fat16.c: 600: };fat16.c: 604: file_number = _get_available_root_entry();
 12522  00F9B6  EC2A  F0A0         	call	__get_available_root_entry	;wreg free
 12523  00F9BA  0100               	movlb	0	; () banked
 12524  00F9BC  6FBC               	movwf	fat_create_file@file_number& (0+255),b
 12525                           
 12526                           ; BSR set to: 0
 12527                           ;fat16.c: 605: if(file_number == 0xFF)
 12528  00F9BE  29BC               	incf	fat_create_file@file_number& (0+255),w,b
 12529  00F9C0  A4D8               	btfss	status,2,c
 12530  00F9C2  D002               	goto	l1803
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;fat16.c: 606: {;fat16.c: 609: return 0xFE;
 12534  00F9C4  0EFE               	movlw	254
 12535                           
 12536                           ; BSR set to: 0
 12537  00F9C6  0012               	return	
 12538  00F9C8                     l1803:
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;fat16.c: 610: };fat16.c: 613: number_of_clusters = (size + 512 - 1) >> 9;
 12542                           
 12543                           ; BSR set to: 0
 12544  00F9C8  0EFF               	movlw	255
 12545  00F9CA  25B0               	addwf	fat_create_file@size& (0+255),w,b
 12546  00F9CC  6FB4               	movwf	??_fat_create_file& (0+255),b
 12547  00F9CE  0E01               	movlw	1
 12548  00F9D0  21B1               	addwfc	(fat_create_file@size+1)& (0+255),w,b
 12549  00F9D2  6FB5               	movwf	(??_fat_create_file+1)& (0+255),b
 12550  00F9D4  0E00               	movlw	0
 12551  00F9D6  21B2               	addwfc	(fat_create_file@size+2)& (0+255),w,b
 12552  00F9D8  6FB6               	movwf	(??_fat_create_file+2)& (0+255),b
 12553  00F9DA  0E00               	movlw	0
 12554  00F9DC  21B3               	addwfc	(fat_create_file@size+3)& (0+255),w,b
 12555  00F9DE  6FB7               	movwf	(??_fat_create_file+3)& (0+255),b
 12556  00F9E0  0E0A               	movlw	10
 12557  00F9E2  D005               	goto	u20840
 12558  00F9E4                     u20845:
 12559  00F9E4  90D8               	bcf	status,0,c
 12560  00F9E6  33B7               	rrcf	(??_fat_create_file+3)& (0+255),f,b
 12561  00F9E8  33B6               	rrcf	(??_fat_create_file+2)& (0+255),f,b
 12562  00F9EA  33B5               	rrcf	(??_fat_create_file+1)& (0+255),f,b
 12563  00F9EC  33B4               	rrcf	??_fat_create_file& (0+255),f,b
 12564  00F9EE                     u20840:
 12565  00F9EE  2EE8               	decfsz	wreg,f,c
 12566  00F9F0  D7F9               	goto	u20845
 12567  00F9F2  C0B4  F0B8         	movff	??_fat_create_file,fat_create_file@number_of_clusters
 12568  00F9F6  C0B5  F0B9         	movff	??_fat_create_file+1,fat_create_file@number_of_clusters+1
 12569                           
 12570                           ; BSR set to: 0
 12571                           ;fat16.c: 616: first_cluster = _make_cluster_chain(0x0000, number_of_clusters);
 12572  00F9FA  0E00               	movlw	0
 12573  00F9FC  6F96               	movwf	(__make_cluster_chain@first_cluster+1)& (0+255),b
 12574  00F9FE  0E00               	movlw	0
 12575  00FA00  6F95               	movwf	__make_cluster_chain@first_cluster& (0+255),b
 12576  00FA02  C0B8  F097         	movff	fat_create_file@number_of_clusters,__make_cluster_chain@number_of_clusters
 12577  00FA06  C0B9  F098         	movff	fat_create_file@number_of_clusters+1,__make_cluster_chain@number_of_clusters+1
 12578  00FA0A  EC92  F068         	call	__make_cluster_chain	;wreg free
 12579  00FA0E  C095  F0BA         	movff	?__make_cluster_chain,fat_create_file@first_cluster
 12580  00FA12  C096  F0BB         	movff	?__make_cluster_chain+1,fat_create_file@first_cluster+1
 12581                           
 12582                           ;fat16.c: 619: if(first_cluster == 0xFFFF)
 12583  00FA16  0100               	movlb	0	; () banked
 12584  00FA18  29BA               	incf	fat_create_file@first_cluster& (0+255),w,b
 12585  00FA1A  E105               	bnz	l20958
 12586  00FA1C  29BB               	incf	(fat_create_file@first_cluster+1)& (0+255),w,b
 12587  00FA1E  A4D8               	btfss	status,2,c
 12588  00FA20  D002               	goto	l1804
 12589                           
 12590                           ; BSR set to: 0
 12591                           ;fat16.c: 620: {;fat16.c: 623: return 0xFD;
 12592  00FA22  0EFD               	movlw	253
 12593                           
 12594                           ; BSR set to: 0
 12595  00FA24  0012               	return	
 12596  00FA26                     l1804:
 12597  00FA26                     l20958:
 12598                           
 12599                           ; BSR set to: 0
 12600                           ;fat16.c: 624: };fat16.c: 627: memcpy(root_entry.fileName, name, 8);
 12601  00FA26  0EBD               	movlw	low fat_create_file@root_entry
 12602  00FA28  6F60               	movwf	memcpy@d1& (0+255),b
 12603  00FA2A  0E00               	movlw	high fat_create_file@root_entry
 12604  00FA2C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12605  00FA2E  C0AC  F062         	movff	fat_create_file@name,memcpy@s1
 12606  00FA32  C0AD  F063         	movff	fat_create_file@name+1,memcpy@s1+1
 12607  00FA36  0E00               	movlw	0
 12608  00FA38  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12609  00FA3A  0E08               	movlw	8
 12610  00FA3C  6F64               	movwf	memcpy@n& (0+255),b
 12611  00FA3E  EC3C  F098         	call	_memcpy	;wreg free
 12612                           
 12613                           ;fat16.c: 628: memcpy(root_entry.fileExtension, extension, 3);
 12614  00FA42  0EC5               	movlw	low (fat_create_file@root_entry+8)
 12615  00FA44  0100               	movlb	0	; () banked
 12616  00FA46  6F60               	movwf	memcpy@d1& (0+255),b
 12617  00FA48  0E00               	movlw	high (fat_create_file@root_entry+8)
 12618  00FA4A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 12619  00FA4C  C0AE  F062         	movff	fat_create_file@extension,memcpy@s1
 12620  00FA50  C0AF  F063         	movff	fat_create_file@extension+1,memcpy@s1+1
 12621  00FA54  0E00               	movlw	0
 12622  00FA56  6F65               	movwf	(memcpy@n+1)& (0+255),b
 12623  00FA58  0E03               	movlw	3
 12624  00FA5A  6F64               	movwf	memcpy@n& (0+255),b
 12625  00FA5C  EC3C  F098         	call	_memcpy	;wreg free
 12626                           
 12627                           ;fat16.c: 629: root_entry.attributes = 0x00;
 12628  00FA60  0E00               	movlw	0
 12629  00FA62  0100               	movlb	0	; () banked
 12630  00FA64  6FC8               	movwf	(fat_create_file@root_entry+11)& (0+255),b
 12631                           
 12632                           ; BSR set to: 0
 12633                           ;fat16.c: 630: root_entry.reserved1 = 0x00;
 12634  00FA66  0E00               	movlw	0
 12635  00FA68  6FC9               	movwf	(fat_create_file@root_entry+12)& (0+255),b
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;fat16.c: 631: root_entry.secondFractions = 0x00;
 12639  00FA6A  0E00               	movlw	0
 12640  00FA6C  6FCA               	movwf	(fat_create_file@root_entry+13)& (0+255),b
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;fat16.c: 632: root_entry.createdTime = _get_time();
 12644  00FA6E  EC79  F0A1         	call	__get_time	;wreg free
 12645  00FA72  C060  F0CB         	movff	?__get_time,fat_create_file@root_entry+14
 12646  00FA76  C061  F0CC         	movff	?__get_time+1,fat_create_file@root_entry+15
 12647                           
 12648                           ;fat16.c: 633: root_entry.createdDate = _get_date();
 12649  00FA7A  EC7F  F0A1         	call	__get_date	;wreg free
 12650  00FA7E  C060  F0CD         	movff	?__get_date,fat_create_file@root_entry+16
 12651  00FA82  C061  F0CE         	movff	?__get_date+1,fat_create_file@root_entry+17
 12652                           
 12653                           ;fat16.c: 634: root_entry.lastAccessDate = root_entry.createdDate;
 12654  00FA86  C0CD  F0CF         	movff	fat_create_file@root_entry+16,fat_create_file@root_entry+18
 12655  00FA8A  C0CE  F0D0         	movff	fat_create_file@root_entry+17,fat_create_file@root_entry+19
 12656                           
 12657                           ;fat16.c: 635: root_entry.reserved2 = 0x00;
 12658  00FA8E  0E00               	movlw	0
 12659  00FA90  0100               	movlb	0	; () banked
 12660  00FA92  6FD2               	movwf	(fat_create_file@root_entry+21)& (0+255),b
 12661  00FA94  0E00               	movlw	0
 12662  00FA96  6FD1               	movwf	(fat_create_file@root_entry+20)& (0+255),b
 12663                           
 12664                           ; BSR set to: 0
 12665                           ;fat16.c: 636: root_entry.modifiedTime = root_entry.createdTime;
 12666  00FA98  C0CB  F0D3         	movff	fat_create_file@root_entry+14,fat_create_file@root_entry+22
 12667  00FA9C  C0CC  F0D4         	movff	fat_create_file@root_entry+15,fat_create_file@root_entry+23
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;fat16.c: 637: root_entry.modifiedDate = root_entry.createdDate;
 12671  00FAA0  C0CD  F0D5         	movff	fat_create_file@root_entry+16,fat_create_file@root_entry+24
 12672  00FAA4  C0CE  F0D6         	movff	fat_create_file@root_entry+17,fat_create_file@root_entry+25
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;fat16.c: 638: root_entry.firstCluster = first_cluster;
 12676  00FAA8  C0BA  F0D7         	movff	fat_create_file@first_cluster,fat_create_file@root_entry+26
 12677  00FAAC  C0BB  F0D8         	movff	fat_create_file@first_cluster+1,fat_create_file@root_entry+27
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;fat16.c: 639: root_entry.fileSize = size;
 12681  00FAB0  C0B0  F0D9         	movff	fat_create_file@size,fat_create_file@root_entry+28
 12682  00FAB4  C0B1  F0DA         	movff	fat_create_file@size+1,fat_create_file@root_entry+29
 12683  00FAB8  C0B2  F0DB         	movff	fat_create_file@size+2,fat_create_file@root_entry+30
 12684  00FABC  C0B3  F0DC         	movff	fat_create_file@size+3,fat_create_file@root_entry+31
 12685                           
 12686                           ; BSR set to: 0
 12687                           ;fat16.c: 642: _write_root(file_number, &root_entry);
 12688  00FAC0  0EBD               	movlw	low fat_create_file@root_entry
 12689  00FAC2  6F88               	movwf	__write_root@data& (0+255),b
 12690  00FAC4  0E00               	movlw	high fat_create_file@root_entry
 12691  00FAC6  6F89               	movwf	(__write_root@data+1)& (0+255),b
 12692  00FAC8  51BC               	movf	fat_create_file@file_number& (0+255),w,b
 12693  00FACA  EC26  F09C         	call	__write_root
 12694                           
 12695                           ;fat16.c: 644: return file_number;
 12696  00FACE  0100               	movlb	0	; () banked
 12697  00FAD0  51BC               	movf	fat_create_file@file_number& (0+255),w,b
 12698  00FAD2  0012               	return	
 12699  00FAD4                     __end_of_fat_create_file:
 12700                           	opt stack 0
 12701                           tblptru	equ	0xFF8
 12702                           tblptrh	equ	0xFF7
 12703                           tblptrl	equ	0xFF6
 12704                           tablat	equ	0xFF5
 12705                           prodh	equ	0xFF4
 12706                           prodl	equ	0xFF3
 12707                           postinc0	equ	0xFEE
 12708                           wreg	equ	0xFE8
 12709                           postdec1	equ	0xFE5
 12710                           plusw1	equ	0xFE3
 12711                           fsr1h	equ	0xFE2
 12712                           fsr1l	equ	0xFE1
 12713                           indf2	equ	0xFDF
 12714                           postinc2	equ	0xFDE
 12715                           plusw2	equ	0xFDB
 12716                           fsr2h	equ	0xFDA
 12717                           fsr2l	equ	0xFD9
 12718                           status	equ	0xFD8
 12719                           
 12720 ;; *************** function _fat_find_file *****************
 12721 ;; Defined at:
 12722 ;;		line 517 in file "fat16.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;  name            2   43[BANK0 ] PTR unsigned char 
 12725 ;;		 -> configFile_name(8), 
 12726 ;;  extension       2   45[BANK0 ] PTR unsigned char 
 12727 ;;		 -> configFile_extention(3), 
 12728 ;; Auto vars:     Size  Location     Type
 12729 ;;  offset          2   52[BANK0 ] unsigned int 
 12730 ;;  sector          2   50[BANK0 ] unsigned int 
 12731 ;;  file_number     1   49[BANK0 ] unsigned char 
 12732 ;; Return value:  Size  Location     Type
 12733 ;;                  1    wreg      unsigned char 
 12734 ;; Registers used:
 12735 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12736 ;; Tracked objects:
 12737 ;;		On entry : 0/0
 12738 ;;		On exit  : 0/0
 12739 ;;		Unchanged: 0/0
 12740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 12741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12742 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12744 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12745 ;;Total ram usage:       11 bytes
 12746 ;; Hardware stack levels used:    1
 12747 ;; Hardware stack levels required when called:   15
 12748 ;; This function calls:
 12749 ;;		_flash_sector_read
 12750 ;;		_strncmp
 12751 ;; This function is called by:
 12752 ;;		_fat_create_file
 12753 ;;		_configFile_write
 12754 ;; This function uses a non-reentrant model
 12755 ;;
 12756                           
 12757                           	psect	text38
 12758  010EC2                     __ptext38:
 12759                           	opt stack 0
 12760  010EC2                     _fat_find_file:
 12761                           	opt stack 13
 12762                           
 12763                           ;fat16.c: 519: uint8_t file_number = 0;
 12764                           
 12765                           ;incstack = 0
 12766  010EC2  0E00               	movlw	0
 12767  010EC4  0100               	movlb	0	; () banked
 12768  010EC6  6F91               	movwf	fat_find_file@file_number& (0+255),b
 12769                           
 12770                           ;fat16.c: 520: uint16_t sector;;fat16.c: 521: uint16_t offset;;fat16.c: 523: for(sector 
      +                          = 34; sector <= 37; ++sector)
 12771  010EC8  0E00               	movlw	0
 12772  010ECA  6F93               	movwf	(fat_find_file@sector+1)& (0+255),b
 12773  010ECC  0E22               	movlw	34
 12774  010ECE  6F92               	movwf	fat_find_file@sector& (0+255),b
 12775                           
 12776                           ; BSR set to: 0
 12777  010ED0  5193               	movf	(fat_find_file@sector+1)& (0+255),w,b
 12778  010ED2  E169               	bnz	l1785
 12779  010ED4  0E26               	movlw	38
 12780  010ED6  5D92               	subwf	fat_find_file@sector& (0+255),w,b
 12781  010ED8  B0D8               	btfsc	status,0,c
 12782  010EDA  D065               	goto	u19670
 12783                           
 12784                           ; BSR set to: 0
 12785                           ;fat16.c: 524: {;fat16.c: 526: flash_sector_read(sector, buffer);
 12786                           
 12787                           ; BSR set to: 0
 12788                           
 12789                           ; BSR set to: 0
 12790  010EDC  C092  F087         	movff	fat_find_file@sector,flash_sector_read@page
 12791  010EE0  C093  F088         	movff	fat_find_file@sector+1,flash_sector_read@page+1
 12792  010EE4  0E00               	movlw	low _buffer
 12793  010EE6  6F89               	movwf	flash_sector_read@data& (0+255),b
 12794  010EE8  0E0A               	movlw	high _buffer
 12795  010EEA  6F8A               	movwf	(flash_sector_read@data+1)& (0+255),b
 12796  010EEC  EC68  F0A0         	call	_flash_sector_read	;wreg free
 12797                           
 12798                           ;fat16.c: 528: for(offset = 0; offset<512; offset += 32)
 12799  010EF0  0E00               	movlw	0
 12800  010EF2  0100               	movlb	0	; () banked
 12801  010EF4  6F95               	movwf	(fat_find_file@offset+1)& (0+255),b
 12802  010EF6  0E00               	movlw	0
 12803  010EF8  6F94               	movwf	fat_find_file@offset& (0+255),b
 12804  010EFA                     l19716:
 12805                           
 12806                           ; BSR set to: 0
 12807  010EFA  0E02               	movlw	2
 12808  010EFC  5D95               	subwf	(fat_find_file@offset+1)& (0+255),w,b
 12809  010EFE  B0D8               	btfsc	status,0,c
 12810  010F00  D04D               	goto	u19660
 12811                           
 12812                           ; BSR set to: 0
 12813                           ;fat16.c: 529: {;fat16.c: 530: if(buffer[offset]==0x00)
 12814                           
 12815                           ; BSR set to: 0
 12816                           
 12817                           ; BSR set to: 0
 12818  010F02  0E00               	movlw	low _buffer
 12819  010F04  2594               	addwf	fat_find_file@offset& (0+255),w,b
 12820  010F06  6ED9               	movwf	fsr2l,c
 12821  010F08  0E0A               	movlw	high _buffer
 12822  010F0A  2195               	addwfc	(fat_find_file@offset+1)& (0+255),w,b
 12823  010F0C  6EDA               	movwf	fsr2h,c
 12824  010F0E  50DF               	movf	indf2,w,c
 12825  010F10  A4D8               	btfss	status,2,c
 12826  010F12  D002               	goto	l1788
 12827                           
 12828                           ; BSR set to: 0
 12829                           ;fat16.c: 531: {;fat16.c: 534: return 0xFF;
 12830  010F14  0EFF               	movlw	255
 12831                           
 12832                           ; BSR set to: 0
 12833  010F16  0012               	return	
 12834  010F18                     l1788:
 12835                           
 12836                           ; BSR set to: 0
 12837                           ;fat16.c: 536: else if(buffer[offset]==0xE5)
 12838                           
 12839                           ; BSR set to: 0
 12840  010F18  0E00               	movlw	low _buffer
 12841  010F1A  2594               	addwf	fat_find_file@offset& (0+255),w,b
 12842  010F1C  6ED9               	movwf	fsr2l,c
 12843  010F1E  0E0A               	movlw	high _buffer
 12844  010F20  2195               	addwfc	(fat_find_file@offset+1)& (0+255),w,b
 12845  010F22  6EDA               	movwf	fsr2h,c
 12846  010F24  0EE5               	movlw	229
 12847  010F26  18DE               	xorwf	postinc2,w,c
 12848  010F28  B4D8               	btfsc	status,2,c
 12849  010F2A  D032               	goto	l1794
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;fat16.c: 542: else;fat16.c: 543: {;fat16.c: 545: if(strncmp(name, &buffer[offset], 8) =
      +                          = 0)
 12853                           
 12854                           ; BSR set to: 0
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;fat16.c: 537: {;fat16.c: 541: }
 12858  010F2C  C08B  F060         	movff	fat_find_file@name,strncmp@s1
 12859  010F30  C08C  F061         	movff	fat_find_file@name+1,strncmp@s1+1
 12860  010F34  0E00               	movlw	low _buffer
 12861  010F36  2594               	addwf	fat_find_file@offset& (0+255),w,b
 12862  010F38  6F62               	movwf	strncmp@s2& (0+255),b
 12863  010F3A  0E0A               	movlw	high _buffer
 12864  010F3C  2195               	addwfc	(fat_find_file@offset+1)& (0+255),w,b
 12865  010F3E  6F63               	movwf	(strncmp@s2+1)& (0+255),b
 12866  010F40  0E00               	movlw	0
 12867  010F42  6F65               	movwf	(strncmp@len+1)& (0+255),b
 12868  010F44  0E08               	movlw	8
 12869  010F46  6F64               	movwf	strncmp@len& (0+255),b
 12870  010F48  EC52  F094         	call	_strncmp	;wreg free
 12871  010F4C  0100               	movlb	0	; () banked
 12872  010F4E  5160               	movf	?_strncmp& (0+255),w,b
 12873  010F50  1161               	iorwf	(?_strncmp+1)& (0+255),w,b
 12874  010F52  A4D8               	btfss	status,2,c
 12875  010F54  D01D               	goto	l1794
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;fat16.c: 546: {;fat16.c: 548: if(strncmp(extension, &buffer[offset+8], 3) == 0)
 12879  010F56  C08D  F060         	movff	fat_find_file@extension,strncmp@s1
 12880  010F5A  C08E  F061         	movff	fat_find_file@extension+1,strncmp@s1+1
 12881  010F5E  0E08               	movlw	8
 12882  010F60  2594               	addwf	fat_find_file@offset& (0+255),w,b
 12883  010F62  6F8F               	movwf	??_fat_find_file& (0+255),b
 12884  010F64  0E00               	movlw	0
 12885  010F66  2195               	addwfc	(fat_find_file@offset+1)& (0+255),w,b
 12886  010F68  6F90               	movwf	(??_fat_find_file+1)& (0+255),b
 12887  010F6A  0E00               	movlw	low _buffer
 12888  010F6C  258F               	addwf	??_fat_find_file& (0+255),w,b
 12889  010F6E  6F62               	movwf	strncmp@s2& (0+255),b
 12890  010F70  0E0A               	movlw	high _buffer
 12891  010F72  2190               	addwfc	(??_fat_find_file+1)& (0+255),w,b
 12892  010F74  6F63               	movwf	(strncmp@s2+1)& (0+255),b
 12893  010F76  0E00               	movlw	0
 12894  010F78  6F65               	movwf	(strncmp@len+1)& (0+255),b
 12895  010F7A  0E03               	movlw	3
 12896  010F7C  6F64               	movwf	strncmp@len& (0+255),b
 12897  010F7E  EC52  F094         	call	_strncmp	;wreg free
 12898  010F82  0100               	movlb	0	; () banked
 12899  010F84  5160               	movf	?_strncmp& (0+255),w,b
 12900  010F86  1161               	iorwf	(?_strncmp+1)& (0+255),w,b
 12901  010F88  A4D8               	btfss	status,2,c
 12902  010F8A  D002               	goto	l1794
 12903                           
 12904                           ; BSR set to: 0
 12905                           ;fat16.c: 549: {;fat16.c: 552: return file_number;
 12906  010F8C  5191               	movf	fat_find_file@file_number& (0+255),w,b
 12907                           
 12908                           ; BSR set to: 0
 12909  010F8E  0012               	return	
 12910  010F90                     l1794:
 12911                           
 12912                           ; BSR set to: 0
 12913                           ;fat16.c: 553: };fat16.c: 554: };fat16.c: 555: };fat16.c: 556: ++file_number;
 12914                           
 12915                           ; BSR set to: 0
 12916                           
 12917                           ; BSR set to: 0
 12918                           
 12919                           ; BSR set to: 0
 12920                           
 12921                           ; BSR set to: 0
 12922  010F90  2B91               	incf	fat_find_file@file_number& (0+255),f,b
 12923                           
 12924                           ; BSR set to: 0
 12925  010F92  0E20               	movlw	32
 12926  010F94  2794               	addwf	fat_find_file@offset& (0+255),f,b
 12927  010F96  0E00               	movlw	0
 12928  010F98  2395               	addwfc	(fat_find_file@offset+1)& (0+255),f,b
 12929  010F9A  D7AF               	goto	l19716
 12930  010F9C                     u19660:
 12931                           
 12932                           ; BSR set to: 0
 12933                           
 12934                           ; BSR set to: 0
 12935  010F9C  4B92               	infsnz	fat_find_file@sector& (0+255),f,b
 12936  010F9E  2B93               	incf	(fat_find_file@sector+1)& (0+255),f,b
 12937                           
 12938                           ; BSR set to: 0
 12939  010FA0  5193               	movf	(fat_find_file@sector+1)& (0+255),w,b
 12940  010FA2  E101               	bnz	l19750
 12941  010FA4  D797               	goto	L1
 12942  010FA6                     u19670:
 12943  010FA6                     l1785:
 12944  010FA6                     l19750:
 12945                           
 12946                           ; BSR set to: 0
 12947                           ;fat16.c: 557: };fat16.c: 558: };fat16.c: 559: return 0xFF;
 12948  010FA6  0EFF               	movlw	255
 12949  010FA8  0012               	return	
 12950  010FAA                     __end_of_fat_find_file:
 12951                           	opt stack 0
 12952                           tblptru	equ	0xFF8
 12953                           tblptrh	equ	0xFF7
 12954                           tblptrl	equ	0xFF6
 12955                           tablat	equ	0xFF5
 12956                           prodh	equ	0xFF4
 12957                           prodl	equ	0xFF3
 12958                           postinc0	equ	0xFEE
 12959                           wreg	equ	0xFE8
 12960                           postdec1	equ	0xFE5
 12961                           plusw1	equ	0xFE3
 12962                           fsr1h	equ	0xFE2
 12963                           fsr1l	equ	0xFE1
 12964                           indf2	equ	0xFDF
 12965                           postinc2	equ	0xFDE
 12966                           plusw2	equ	0xFDB
 12967                           fsr2h	equ	0xFDA
 12968                           fsr2l	equ	0xFD9
 12969                           status	equ	0xFD8
 12970                           
 12971 ;; *************** function _strncmp *****************
 12972 ;; Defined at:
 12973 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strncmp.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 12976 ;;		 -> configFile_extention(3), configFile_name(8), 
 12977 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 12978 ;;		 -> buffer(512), 
 12979 ;;  len             2    4[BANK0 ] unsigned int 
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;		None
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  2    0[BANK0 ] int 
 12984 ;; Registers used:
 12985 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 12991 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12993 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12994 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 12995 ;;Total ram usage:        9 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:   10
 12998 ;; This function calls:
 12999 ;;		Nothing
 13000 ;; This function is called by:
 13001 ;;		_fat_find_file
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           	psect	text39
 13006  0128A4                     __ptext39:
 13007                           	opt stack 0
 13008  0128A4                     _strncmp:
 13009                           	opt stack 17
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;incstack = 0
 13013  0128A4  D031               	goto	l3496
 13014  0128A6                     l19340:
 13015  0128A6  C060  FFD9         	movff	strncmp@s1,fsr2l
 13016  0128AA  C061  FFDA         	movff	strncmp@s1+1,fsr2h
 13017  0128AE  50DF               	movf	indf2,w,c
 13018  0128B0  B4D8               	btfsc	status,2,c
 13019  0128B2  D00C               	goto	u19230
 13020  0128B4  C062  FFD9         	movff	strncmp@s2,fsr2l
 13021  0128B8  C063  FFDA         	movff	strncmp@s2+1,fsr2h
 13022  0128BC  C060  FFE1         	movff	strncmp@s1,fsr1l
 13023  0128C0  C061  FFE2         	movff	strncmp@s1+1,fsr1h
 13024  0128C4  50DE               	movf	postinc2,w,c
 13025  0128C6  18E6               	xorwf	postinc1,w,c
 13026  0128C8  B4D8               	btfsc	status,2,c
 13027  0128CA  D019               	goto	l3498
 13028  0128CC                     u19230:
 13029  0128CC  C062  FFD9         	movff	strncmp@s2,fsr2l
 13030  0128D0  C063  FFDA         	movff	strncmp@s2+1,fsr2h
 13031  0128D4  50DF               	movf	indf2,w,c
 13032  0128D6  0100               	movlb	0	; () banked
 13033  0128D8  6F66               	movwf	??_strncmp& (0+255),b
 13034  0128DA  6B67               	clrf	(??_strncmp+1)& (0+255),b
 13035  0128DC  1F66               	comf	??_strncmp& (0+255),f,b
 13036  0128DE  1F67               	comf	(??_strncmp+1)& (0+255),f,b
 13037  0128E0  4B66               	infsnz	??_strncmp& (0+255),f,b
 13038  0128E2  2B67               	incf	(??_strncmp+1)& (0+255),f,b
 13039  0128E4  C060  FFD9         	movff	strncmp@s1,fsr2l
 13040  0128E8  C061  FFDA         	movff	strncmp@s1+1,fsr2h
 13041  0128EC  50DF               	movf	indf2,w,c
 13042  0128EE  6F68               	movwf	(??_strncmp+2)& (0+255),b
 13043  0128F0  5168               	movf	(??_strncmp+2)& (0+255),w,b
 13044  0128F2  2566               	addwf	??_strncmp& (0+255),w,b
 13045  0128F4  6F60               	movwf	?_strncmp& (0+255),b
 13046  0128F6  0E00               	movlw	0
 13047  0128F8  2167               	addwfc	(??_strncmp+1)& (0+255),w,b
 13048  0128FA  6F61               	movwf	(?_strncmp+1)& (0+255),b
 13049                           
 13050                           ; BSR set to: 0
 13051  0128FC  0012               	return	
 13052  0128FE                     l3498:
 13053                           
 13054                           ; BSR set to: 0
 13055  0128FE  0100               	movlb	0	; () banked
 13056  012900  4B60               	infsnz	strncmp@s1& (0+255),f,b
 13057  012902  2B61               	incf	(strncmp@s1+1)& (0+255),f,b
 13058  012904  4B62               	infsnz	strncmp@s2& (0+255),f,b
 13059  012906  2B63               	incf	(strncmp@s2+1)& (0+255),f,b
 13060  012908                     l3496:
 13061                           
 13062                           ; BSR set to: 0
 13063  012908  0100               	movlb	0	; () banked
 13064  01290A  0764               	decf	strncmp@len& (0+255),f,b
 13065  01290C  A0D8               	btfss	status,0,c
 13066  01290E  0765               	decf	(strncmp@len+1)& (0+255),f,b
 13067  012910  2964               	incf	strncmp@len& (0+255),w,b
 13068  012912  E1C9               	bnz	l19340
 13069  012914  2965               	incf	(strncmp@len+1)& (0+255),w,b
 13070  012916  A4D8               	btfss	status,2,c
 13071  012918  D7C6               	goto	l3497
 13072                           
 13073                           ; BSR set to: 0
 13074                           
 13075                           ; BSR set to: 0
 13076  01291A  0E00               	movlw	0
 13077  01291C  6F61               	movwf	(?_strncmp+1)& (0+255),b
 13078  01291E  0E00               	movlw	0
 13079  012920  6F60               	movwf	?_strncmp& (0+255),b
 13080  012922  0012               	return	
 13081  012924                     __end_of_strncmp:
 13082                           	opt stack 0
 13083                           tblptru	equ	0xFF8
 13084                           tblptrh	equ	0xFF7
 13085                           tblptrl	equ	0xFF6
 13086                           tablat	equ	0xFF5
 13087                           prodh	equ	0xFF4
 13088                           prodl	equ	0xFF3
 13089                           postinc0	equ	0xFEE
 13090                           wreg	equ	0xFE8
 13091                           postinc1	equ	0xFE6
 13092                           postdec1	equ	0xFE5
 13093                           plusw1	equ	0xFE3
 13094                           fsr1h	equ	0xFE2
 13095                           fsr1l	equ	0xFE1
 13096                           indf2	equ	0xFDF
 13097                           postinc2	equ	0xFDE
 13098                           plusw2	equ	0xFDB
 13099                           fsr2h	equ	0xFDA
 13100                           fsr2l	equ	0xFD9
 13101                           status	equ	0xFD8
 13102                           
 13103 ;; *************** function __write_root *****************
 13104 ;; Defined at:
 13105 ;;		line 473 in file "fat16.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;  file_number     1    wreg     unsigned char 
 13108 ;;  data            2   40[BANK0 ] PTR struct .
 13109 ;;		 -> fat_resize_file@root(32), fat_rename_file@root(32), fat_create_file@root_entry(32), 
 13110 ;; Auto vars:     Size  Location     Type
 13111 ;;  file_number     1   46[BANK0 ] unsigned char 
 13112 ;;  offset          2   44[BANK0 ] unsigned int 
 13113 ;;  sector          2   42[BANK0 ] unsigned int 
 13114 ;; Return value:  Size  Location     Type
 13115 ;;                  1    wreg      void 
 13116 ;; Registers used:
 13117 ;;		wreg, status,2, status,0, cstack
 13118 ;; Tracked objects:
 13119 ;;		On entry : 0/0
 13120 ;;		On exit  : 0/0
 13121 ;;		Unchanged: 0/0
 13122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 13123 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13124 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13126 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13127 ;;Total ram usage:        7 bytes
 13128 ;; Hardware stack levels used:    1
 13129 ;; Hardware stack levels required when called:   15
 13130 ;; This function calls:
 13131 ;;		__offset_from_file_number
 13132 ;;		__sector_from_file_number
 13133 ;;		_flash_partial_write
 13134 ;; This function is called by:
 13135 ;;		_fat_create_file
 13136 ;;		_fat_resize_file
 13137 ;;		_fat_rename_file
 13138 ;; This function uses a non-reentrant model
 13139 ;;
 13140                           
 13141                           	psect	text40
 13142  01384C                     __ptext40:
 13143                           	opt stack 0
 13144  01384C                     __write_root:
 13145                           	opt stack 12
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;incstack = 0
 13149                           ;__write_root@file_number stored from wreg
 13150  01384C  0100               	movlb	0	; () banked
 13151  01384E  6F8E               	movwf	__write_root@file_number& (0+255),b
 13152                           
 13153                           ;fat16.c: 475: uint16_t sector;;fat16.c: 476: uint16_t offset;;fat16.c: 479: sector = _s
      +                          ector_from_file_number(file_number);
 13154  013850  0100               	movlb	0	; () banked
 13155  013852  518E               	movf	__write_root@file_number& (0+255),w,b
 13156  013854  EC46  F09F         	call	__sector_from_file_number
 13157  013858  C060  F08A         	movff	?__sector_from_file_number,__write_root@sector
 13158  01385C  C061  F08B         	movff	?__sector_from_file_number+1,__write_root@sector+1
 13159                           
 13160                           ;fat16.c: 480: offset = _offset_from_file_number(file_number);
 13161  013860  0100               	movlb	0	; () banked
 13162  013862  518E               	movf	__write_root@file_number& (0+255),w,b
 13163  013864  EC3F  F0A0         	call	__offset_from_file_number
 13164  013868  C060  F08C         	movff	?__offset_from_file_number,__write_root@offset
 13165  01386C  C061  F08D         	movff	?__offset_from_file_number+1,__write_root@offset+1
 13166                           
 13167                           ;fat16.c: 483: flash_partial_write(sector, offset, 32, data);
 13168  013870  C08A  F07F         	movff	__write_root@sector,flash_partial_write@page
 13169  013874  C08B  F080         	movff	__write_root@sector+1,flash_partial_write@page+1
 13170  013878  C08C  F081         	movff	__write_root@offset,flash_partial_write@start
 13171  01387C  C08D  F082         	movff	__write_root@offset+1,flash_partial_write@start+1
 13172  013880  0E00               	movlw	0
 13173  013882  0100               	movlb	0	; () banked
 13174  013884  6F84               	movwf	(flash_partial_write@length+1)& (0+255),b
 13175  013886  0E20               	movlw	32
 13176  013888  6F83               	movwf	flash_partial_write@length& (0+255),b
 13177  01388A  C088  F085         	movff	__write_root@data,flash_partial_write@data
 13178  01388E  C089  F086         	movff	__write_root@data+1,flash_partial_write@data+1
 13179  013892  ECA2  F096         	call	_flash_partial_write	;wreg free
 13180  013896  0012               	return		;funcret
 13181  013898                     __end_of__write_root:
 13182                           	opt stack 0
 13183                           tblptru	equ	0xFF8
 13184                           tblptrh	equ	0xFF7
 13185                           tblptrl	equ	0xFF6
 13186                           tablat	equ	0xFF5
 13187                           prodh	equ	0xFF4
 13188                           prodl	equ	0xFF3
 13189                           postinc0	equ	0xFEE
 13190                           wreg	equ	0xFE8
 13191                           postinc1	equ	0xFE6
 13192                           postdec1	equ	0xFE5
 13193                           plusw1	equ	0xFE3
 13194                           fsr1h	equ	0xFE2
 13195                           fsr1l	equ	0xFE1
 13196                           indf2	equ	0xFDF
 13197                           postinc2	equ	0xFDE
 13198                           plusw2	equ	0xFDB
 13199                           fsr2h	equ	0xFDA
 13200                           fsr2l	equ	0xFD9
 13201                           status	equ	0xFD8
 13202                           
 13203 ;; *************** function _flash_partial_write *****************
 13204 ;; Defined at:
 13205 ;;		line 460 in file "flash.c"
 13206 ;; Parameters:    Size  Location     Type
 13207 ;;  page            2   31[BANK0 ] unsigned int 
 13208 ;;  start           2   33[BANK0 ] unsigned int 
 13209 ;;  length          2   35[BANK0 ] unsigned int 
 13210 ;;  data            2   37[BANK0 ] PTR unsigned char 
 13211 ;;		 -> ConfigFile_buffer(512), fat_resize_file@root(32), fat_rename_file@root(32), fat_create_file@root_entry(32), 
 13212 ;;		 -> _delete_root@deleted_value(1), 
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;  match           1   39[BANK0 ] enum E6978
 13215 ;; Return value:  Size  Location     Type
 13216 ;;                  1    wreg      void 
 13217 ;; Registers used:
 13218 ;;		wreg, status,2, status,0, cstack
 13219 ;; Tracked objects:
 13220 ;;		On entry : 0/0
 13221 ;;		On exit  : 0/0
 13222 ;;		Unchanged: 0/0
 13223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 13224 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13227 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13228 ;;Total ram usage:        9 bytes
 13229 ;; Hardware stack levels used:    1
 13230 ;; Hardware stack levels required when called:   14
 13231 ;; This function calls:
 13232 ;;		__flash_compare_page_to_buffer
 13233 ;;		__flash_copy_page_to_buffer
 13234 ;;		__flash_is_busy
 13235 ;;		__flash_write_page_from_buffer
 13236 ;;		__flash_write_to_buffer
 13237 ;; This function is called by:
 13238 ;;		__write_root
 13239 ;;		_fat_modify_file
 13240 ;;		__delete_root
 13241 ;; This function uses a non-reentrant model
 13242 ;;
 13243                           
 13244                           	psect	text41
 13245  012D44                     __ptext41:
 13246                           	opt stack 0
 13247  012D44                     _flash_partial_write:
 13248                           	opt stack 12
 13249                           
 13250                           ;flash.c: 462: flashMatchResult_t match;;flash.c: 465: while(_flash_is_busy());
 13251                           
 13252                           ;incstack = 0
 13253  012D44  ECB3  F0A0         	call	__flash_is_busy	;wreg free
 13254  012D48  0900               	iorlw	0
 13255  012D4A  A4D8               	btfss	status,2,c
 13256  012D4C  D7FB               	goto	_flash_partial_write
 13257                           
 13258                           ;flash.c: 468: _flash_copy_page_to_buffer(page, FLASH_BUFFER_1);
 13259  012D4E  C07F  F073         	movff	flash_partial_write@page,__flash_copy_page_to_buffer@page
 13260  012D52  C080  F074         	movff	flash_partial_write@page+1,__flash_copy_page_to_buffer@page+1
 13261  012D56  0E00               	movlw	0
 13262  012D58  0100               	movlb	0	; () banked
 13263  012D5A  6F75               	movwf	__flash_copy_page_to_buffer@buffer& (0+255),b
 13264  012D5C  ECF7  F098         	call	__flash_copy_page_to_buffer	;wreg free
 13265                           
 13266                           ;flash.c: 471: _flash_write_to_buffer(start, data, length, FLASH_BUFFER_1);
 13267  012D60  C081  F073         	movff	flash_partial_write@start,__flash_write_to_buffer@start
 13268  012D64  C082  F074         	movff	flash_partial_write@start+1,__flash_write_to_buffer@start+1
 13269  012D68  C085  F075         	movff	flash_partial_write@data,__flash_write_to_buffer@data
 13270  012D6C  C086  F076         	movff	flash_partial_write@data+1,__flash_write_to_buffer@data+1
 13271  012D70  C083  F077         	movff	flash_partial_write@length,__flash_write_to_buffer@data_length
 13272  012D74  C084  F078         	movff	flash_partial_write@length+1,__flash_write_to_buffer@data_length+1
 13273  012D78  0E00               	movlw	0
 13274  012D7A  0100               	movlb	0	; () banked
 13275  012D7C  6F79               	movwf	__flash_write_to_buffer@buffer& (0+255),b
 13276  012D7E  EC85  F09B         	call	__flash_write_to_buffer	;wreg free
 13277                           
 13278                           ;flash.c: 474: match = _flash_compare_page_to_buffer(page, FLASH_BUFFER_1);
 13279  012D82  C07F  F073         	movff	flash_partial_write@page,__flash_compare_page_to_buffer@page
 13280  012D86  C080  F074         	movff	flash_partial_write@page+1,__flash_compare_page_to_buffer@page+1
 13281  012D8A  0E00               	movlw	0
 13282  012D8C  0100               	movlb	0	; () banked
 13283  012D8E  6F75               	movwf	__flash_compare_page_to_buffer@buffer& (0+255),b
 13284  012D90  ECD0  F094         	call	__flash_compare_page_to_buffer	;wreg free
 13285  012D94  0100               	movlb	0	; () banked
 13286  012D96  6F87               	movwf	flash_partial_write@match& (0+255),b
 13287                           
 13288                           ; BSR set to: 0
 13289                           ;flash.c: 477: if(match==DATA_DOES_NOT_MATCH)
 13290  012D98  0587               	decf	flash_partial_write@match& (0+255),w,b
 13291  012D9A  A4D8               	btfss	status,2,c
 13292  012D9C  0012               	return	
 13293                           
 13294                           ; BSR set to: 0
 13295                           ;flash.c: 478: {;flash.c: 479: _flash_write_page_from_buffer(page, FLASH_BUFFER_1);
 13296  012D9E  C07F  F073         	movff	flash_partial_write@page,__flash_write_page_from_buffer@page
 13297  012DA2  C080  F074         	movff	flash_partial_write@page+1,__flash_write_page_from_buffer@page+1
 13298  012DA6  0E00               	movlw	0
 13299  012DA8  6F75               	movwf	__flash_write_page_from_buffer@buffer& (0+255),b
 13300  012DAA  EC51  F099         	call	__flash_write_page_from_buffer	;wreg free
 13301  012DAE  0012               	return	
 13302  012DB0                     __end_of_flash_partial_write:
 13303                           	opt stack 0
 13304                           tblptru	equ	0xFF8
 13305                           tblptrh	equ	0xFF7
 13306                           tblptrl	equ	0xFF6
 13307                           tablat	equ	0xFF5
 13308                           prodh	equ	0xFF4
 13309                           prodl	equ	0xFF3
 13310                           postinc0	equ	0xFEE
 13311                           wreg	equ	0xFE8
 13312                           postinc1	equ	0xFE6
 13313                           postdec1	equ	0xFE5
 13314                           plusw1	equ	0xFE3
 13315                           fsr1h	equ	0xFE2
 13316                           fsr1l	equ	0xFE1
 13317                           indf2	equ	0xFDF
 13318                           postinc2	equ	0xFDE
 13319                           plusw2	equ	0xFDB
 13320                           fsr2h	equ	0xFDA
 13321                           fsr2l	equ	0xFD9
 13322                           status	equ	0xFD8
 13323                           
 13324 ;; *************** function __flash_copy_page_to_buffer *****************
 13325 ;; Defined at:
 13326 ;;		line 154 in file "flash.c"
 13327 ;; Parameters:    Size  Location     Type
 13328 ;;  page            2   19[BANK0 ] unsigned int 
 13329 ;;  buffer          1   21[BANK0 ] enum E6974
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;  command         4   25[BANK0 ] unsigned char [4]
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  1    wreg      void 
 13334 ;; Registers used:
 13335 ;;		wreg, status,2, status,0, cstack
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 13341 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13342 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13343 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13344 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13345 ;;Total ram usage:       10 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:   13
 13348 ;; This function calls:
 13349 ;;		__flash_is_busy
 13350 ;;		_spi_tx
 13351 ;; This function is called by:
 13352 ;;		_flash_partial_write
 13353 ;;		_flash_copy_page_to_buffer
 13354 ;; This function uses a non-reentrant model
 13355 ;;
 13356                           
 13357                           	psect	text42
 13358  0131EE                     __ptext42:
 13359                           	opt stack 0
 13360  0131EE                     __flash_copy_page_to_buffer:
 13361                           	opt stack 12
 13362                           
 13363                           ;flash.c: 156: uint8_t command[4];;flash.c: 159: while(_flash_is_busy());
 13364                           
 13365                           ;incstack = 0
 13366  0131EE  ECB3  F0A0         	call	__flash_is_busy	;wreg free
 13367  0131F2  0900               	iorlw	0
 13368  0131F4  A4D8               	btfss	status,2,c
 13369  0131F6  D7FB               	goto	__flash_copy_page_to_buffer
 13370                           
 13371                           ;flash.c: 162: if(buffer==FLASH_BUFFER_1)
 13372  0131F8  0100               	movlb	0	; () banked
 13373  0131FA  5175               	movf	__flash_copy_page_to_buffer@buffer& (0+255),w,b
 13374  0131FC  A4D8               	btfss	status,2,c
 13375  0131FE  D002               	goto	l1492
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;flash.c: 163: command[0] = 0x53;
 13379  013200  0E53               	movlw	83
 13380  013202  6F79               	movwf	__flash_copy_page_to_buffer@command& (0+255),b
 13381  013204                     l1492:
 13382                           
 13383                           ; BSR set to: 0
 13384                           ;flash.c: 164: if(buffer==FLASH_BUFFER_2)
 13385                           
 13386                           ; BSR set to: 0
 13387  013204  0575               	decf	__flash_copy_page_to_buffer@buffer& (0+255),w,b
 13388  013206  A4D8               	btfss	status,2,c
 13389  013208  D002               	goto	l1493
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;flash.c: 165: command[0] = 0x55;
 13393  01320A  0E55               	movlw	85
 13394  01320C  6F79               	movwf	__flash_copy_page_to_buffer@command& (0+255),b
 13395  01320E                     l1493:
 13396                           
 13397                           ; BSR set to: 0
 13398                           ;flash.c: 167: command[1] = ((unsigned char)(((page<<1)>>8)&0xFF));
 13399                           
 13400                           ; BSR set to: 0
 13401  01320E  C073  F076         	movff	__flash_copy_page_to_buffer@page,??__flash_copy_page_to_buffer
 13402  013212  C074  F077         	movff	__flash_copy_page_to_buffer@page+1,??__flash_copy_page_to_buffer+1
 13403  013216  0E07               	movlw	7
 13404  013218  6F78               	movwf	(??__flash_copy_page_to_buffer+2)& (0+255),b
 13405  01321A                     u18435:
 13406  01321A  90D8               	bcf	status,0,c
 13407  01321C  3377               	rrcf	(??__flash_copy_page_to_buffer+1)& (0+255),f,b
 13408  01321E  3376               	rrcf	??__flash_copy_page_to_buffer& (0+255),f,b
 13409  013220  2F78               	decfsz	(??__flash_copy_page_to_buffer+2)& (0+255),f,b
 13410  013222  D7FB               	goto	u18435
 13411  013224  5176               	movf	??__flash_copy_page_to_buffer& (0+255),w,b
 13412  013226  6F7A               	movwf	(__flash_copy_page_to_buffer@command+1)& (0+255),b
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;flash.c: 168: command[2] = ((unsigned char)((page<<1)&0xFF));
 13416  013228  5173               	movf	__flash_copy_page_to_buffer@page& (0+255),w,b
 13417  01322A  2573               	addwf	__flash_copy_page_to_buffer@page& (0+255),w,b
 13418  01322C  6F7B               	movwf	(__flash_copy_page_to_buffer@command+2)& (0+255),b
 13419                           
 13420                           ;flash.c: 169: command[3] = 0x00;
 13421  01322E  0E00               	movlw	0
 13422  013230  6F7C               	movwf	(__flash_copy_page_to_buffer@command+3)& (0+255),b
 13423                           
 13424                           ; BSR set to: 0
 13425                           ;flash.c: 172: spi_tx(command, 4);
 13426  013232  0E79               	movlw	low __flash_copy_page_to_buffer@command
 13427  013234  6F60               	movwf	spi_tx@data& (0+255),b
 13428  013236  0E00               	movlw	high __flash_copy_page_to_buffer@command
 13429  013238  6F61               	movwf	(spi_tx@data+1)& (0+255),b
 13430  01323A  0E00               	movlw	0
 13431  01323C  6F63               	movwf	(spi_tx@length+1)& (0+255),b
 13432  01323E  0E04               	movlw	4
 13433  013240  6F62               	movwf	spi_tx@length& (0+255),b
 13434  013242  EC7E  F099         	call	_spi_tx	;wreg free
 13435  013246  0012               	return		;funcret
 13436  013248                     __end_of__flash_copy_page_to_buffer:
 13437                           	opt stack 0
 13438                           tblptru	equ	0xFF8
 13439                           tblptrh	equ	0xFF7
 13440                           tblptrl	equ	0xFF6
 13441                           tablat	equ	0xFF5
 13442                           prodh	equ	0xFF4
 13443                           prodl	equ	0xFF3
 13444                           postinc0	equ	0xFEE
 13445                           wreg	equ	0xFE8
 13446                           postinc1	equ	0xFE6
 13447                           postdec1	equ	0xFE5
 13448                           plusw1	equ	0xFE3
 13449                           fsr1h	equ	0xFE2
 13450                           fsr1l	equ	0xFE1
 13451                           indf2	equ	0xFDF
 13452                           postinc2	equ	0xFDE
 13453                           plusw2	equ	0xFDB
 13454                           fsr2h	equ	0xFDA
 13455                           fsr2l	equ	0xFD9
 13456                           status	equ	0xFD8
 13457                           
 13458 ;; *************** function __make_cluster_chain *****************
 13459 ;; Defined at:
 13460 ;;		line 213 in file "fat16.c"
 13461 ;; Parameters:    Size  Location     Type
 13462 ;;  first_cluste    2   53[BANK0 ] unsigned int 
 13463 ;;  number_of_cl    2   55[BANK0 ] unsigned int 
 13464 ;; Auto vars:     Size  Location     Type
 13465 ;;  next_cluster    2   74[BANK0 ] unsigned int 
 13466 ;;  offset          2   72[BANK0 ] unsigned int 
 13467 ;;  sector_in_bu    2   70[BANK0 ] unsigned int 
 13468 ;;  sector          2   68[BANK0 ] unsigned int 
 13469 ;;  remaining_cl    2   66[BANK0 ] unsigned int 
 13470 ;;  different_se    2   63[BANK0 ] unsigned int 
 13471 ;;  minimum_sect    2   61[BANK0 ] unsigned int 
 13472 ;;  next_offset     2   59[BANK0 ] unsigned int 
 13473 ;;  data_changed    1   65[BANK0 ] unsigned char 
 13474 ;; Return value:  Size  Location     Type
 13475 ;;                  2   53[BANK0 ] unsigned int 
 13476 ;; Registers used:
 13477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13478 ;; Tracked objects:
 13479 ;;		On entry : 0/0
 13480 ;;		On exit  : 0/0
 13481 ;;		Unchanged: 0/0
 13482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 13483 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13484 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13486 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 13487 ;;Total ram usage:       23 bytes
 13488 ;; Hardware stack levels used:    1
 13489 ;; Hardware stack levels required when called:   16
 13490 ;; This function calls:
 13491 ;;		__fat_offset_from_cluster
 13492 ;;		__fat_sector_from_cluster
 13493 ;;		__get_available_cluster
 13494 ;;		__get_available_offset_from_buffer
 13495 ;;		__read_value_from_offset
 13496 ;;		__write_value_to_offset
 13497 ;;		_flash_sector_read
 13498 ;;		_flash_sector_write
 13499 ;; This function is called by:
 13500 ;;		_fat_create_file
 13501 ;;		_fat_resize_file
 13502 ;;		_fat_delete_file
 13503 ;; This function uses a non-reentrant model
 13504 ;;
 13505                           
 13506                           	psect	text43
 13507  00D124                     __ptext43:
 13508                           	opt stack 0
 13509  00D124                     __make_cluster_chain:
 13510                           	opt stack 11
 13511                           
 13512                           ;fat16.c: 215: uint16_t remaining_clusters;;fat16.c: 216: uint16_t minimum_sector;;fat16
      +                          .c: 217: uint16_t sector;;fat16.c: 218: uint16_t offset;;fat16.c: 219: uint16_t next_off
      +                          set;;fat16.c: 220: uint16_t sector_in_buffer;;fat16.c: 221: uint16_t next_cluster;;fat16
      +                          .c: 222: uint16_t different_sector_cluster;;fat16.c: 223: uint8_t data_changed;;fat16.c:
      +                           226: sector_in_buffer = 0;
 13513                           
 13514                           ;incstack = 0
 13515  00D124  0E00               	movlw	0
 13516  00D126  0100               	movlb	0	; () banked
 13517  00D128  6FA7               	movwf	(__make_cluster_chain@sector_in_buffer+1)& (0+255),b
 13518  00D12A  0E00               	movlw	0
 13519  00D12C  6FA6               	movwf	__make_cluster_chain@sector_in_buffer& (0+255),b
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;fat16.c: 227: remaining_clusters = number_of_clusters;
 13523  00D12E  C097  F0A2         	movff	__make_cluster_chain@number_of_clusters,__make_cluster_chain@remaining_clusters
 13524  00D132  C098  F0A3         	movff	__make_cluster_chain@number_of_clusters+1,__make_cluster_chain@remaining_clusters
      +                          +1
 13525                           
 13526                           ;fat16.c: 228: minimum_sector = 2;
 13527  00D136  0E00               	movlw	0
 13528  00D138  6F9E               	movwf	(__make_cluster_chain@minimum_sector+1)& (0+255),b
 13529  00D13A  0E02               	movlw	2
 13530  00D13C  6F9D               	movwf	__make_cluster_chain@minimum_sector& (0+255),b
 13531                           
 13532                           ;fat16.c: 229: data_changed = 0;
 13533  00D13E  0E00               	movlw	0
 13534  00D140  6FA1               	movwf	__make_cluster_chain@data_changed& (0+255),b
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;fat16.c: 232: if((first_cluster==0) && (number_of_clusters>0))
 13538  00D142  5195               	movf	__make_cluster_chain@first_cluster& (0+255),w,b
 13539  00D144  1196               	iorwf	(__make_cluster_chain@first_cluster+1)& (0+255),w,b
 13540  00D146  A4D8               	btfss	status,2,c
 13541  00D148  D024               	goto	l1726
 13542                           
 13543                           ; BSR set to: 0
 13544  00D14A  5197               	movf	__make_cluster_chain@number_of_clusters& (0+255),w,b
 13545  00D14C  1198               	iorwf	(__make_cluster_chain@number_of_clusters+1)& (0+255),w,b
 13546  00D14E  B4D8               	btfsc	status,2,c
 13547  00D150  D020               	goto	l1726
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;fat16.c: 233: {;fat16.c: 234: first_cluster = _get_available_cluster(minimum_sector, 0)
      +                          ;
 13551  00D152  C09D  F08B         	movff	__make_cluster_chain@minimum_sector,__get_available_cluster@first_sector
 13552  00D156  C09E  F08C         	movff	__make_cluster_chain@minimum_sector+1,__get_available_cluster@first_sector+1
 13553  00D15A  0E00               	movlw	0
 13554  00D15C  6F8E               	movwf	(__get_available_cluster@skip_sector+1)& (0+255),b
 13555  00D15E  0E00               	movlw	0
 13556  00D160  6F8D               	movwf	__get_available_cluster@skip_sector& (0+255),b
 13557  00D162  EC18  F08C         	call	__get_available_cluster	;wreg free
 13558  00D166  C08B  F095         	movff	?__get_available_cluster,__make_cluster_chain@first_cluster
 13559  00D16A  C08C  F096         	movff	?__get_available_cluster+1,__make_cluster_chain@first_cluster+1
 13560                           
 13561                           ;fat16.c: 236: minimum_sector = _fat_sector_from_cluster(first_cluster);
 13562  00D16E  C095  F060         	movff	__make_cluster_chain@first_cluster,__fat_sector_from_cluster@cluster
 13563  00D172  C096  F061         	movff	__make_cluster_chain@first_cluster+1,__fat_sector_from_cluster@cluster+1
 13564  00D176  EC15  F0A1         	call	__fat_sector_from_cluster	;wreg free
 13565  00D17A  C060  F09D         	movff	?__fat_sector_from_cluster,__make_cluster_chain@minimum_sector
 13566  00D17E  C061  F09E         	movff	?__fat_sector_from_cluster+1,__make_cluster_chain@minimum_sector+1
 13567                           
 13568                           ;fat16.c: 237: if(first_cluster == 0)
 13569  00D182  0100               	movlb	0	; () banked
 13570  00D184  5195               	movf	__make_cluster_chain@first_cluster& (0+255),w,b
 13571  00D186  1196               	iorwf	(__make_cluster_chain@first_cluster+1)& (0+255),w,b
 13572  00D188  A4D8               	btfss	status,2,c
 13573  00D18A  D003               	goto	l1726
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;fat16.c: 238: {;fat16.c: 239: return 0xFFFF;
 13577  00D18C  6995               	setf	?__make_cluster_chain& (0+255),b
 13578  00D18E  6996               	setf	(?__make_cluster_chain+1)& (0+255),b
 13579  00D190  0012               	return	
 13580  00D192                     l1726:
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;fat16.c: 240: };fat16.c: 241: };fat16.c: 242: next_cluster = first_cluster;
 13584                           
 13585                           ; BSR set to: 0
 13586  00D192  C095  F0AA         	movff	__make_cluster_chain@first_cluster,__make_cluster_chain@next_cluster
 13587  00D196  C096  F0AB         	movff	__make_cluster_chain@first_cluster+1,__make_cluster_chain@next_cluster+1
 13588                           
 13589                           ;fat16.c: 245: while ((remaining_clusters > 0) || ((next_cluster>=2) && (next_cluster<=8
      +                          153)))
 13590  00D19A  D103               	goto	l1743
 13591  00D19C                     
 13592                           ; BSR set to: 0
 13593                           ;fat16.c: 246: {;fat16.c: 259: sector = _fat_sector_from_cluster(next_cluster);
 13594                           
 13595                           ; BSR set to: 0
 13596  00D19C  C0AA  F060         	movff	__make_cluster_chain@next_cluster,__fat_sector_from_cluster@cluster
 13597  00D1A0  C0AB  F061         	movff	__make_cluster_chain@next_cluster+1,__fat_sector_from_cluster@cluster+1
 13598  00D1A4  EC15  F0A1         	call	__fat_sector_from_cluster	;wreg free
 13599  00D1A8  C060  F0A4         	movff	?__fat_sector_from_cluster,__make_cluster_chain@sector
 13600  00D1AC  C061  F0A5         	movff	?__fat_sector_from_cluster+1,__make_cluster_chain@sector+1
 13601                           
 13602                           ;fat16.c: 260: offset = _fat_offset_from_cluster(next_cluster);
 13603  00D1B0  C0AA  F060         	movff	__make_cluster_chain@next_cluster,__fat_offset_from_cluster@cluster
 13604  00D1B4  C0AB  F061         	movff	__make_cluster_chain@next_cluster+1,__fat_offset_from_cluster@cluster+1
 13605  00D1B8  EC22  F0A1         	call	__fat_offset_from_cluster	;wreg free
 13606  00D1BC  C060  F0A8         	movff	?__fat_offset_from_cluster,__make_cluster_chain@offset
 13607  00D1C0  C061  F0A9         	movff	?__fat_offset_from_cluster+1,__make_cluster_chain@offset+1
 13608                           
 13609                           ;fat16.c: 263: if(sector != sector_in_buffer)
 13610  00D1C4  0100               	movlb	0	; () banked
 13611  00D1C6  51A6               	movf	__make_cluster_chain@sector_in_buffer& (0+255),w,b
 13612  00D1C8  19A4               	xorwf	__make_cluster_chain@sector& (0+255),w,b
 13613  00D1CA  E104               	bnz	u19430
 13614  00D1CC  51A7               	movf	(__make_cluster_chain@sector_in_buffer+1)& (0+255),w,b
 13615  00D1CE  19A5               	xorwf	(__make_cluster_chain@sector+1)& (0+255),w,b
 13616  00D1D0  B4D8               	btfsc	status,2,c
 13617  00D1D2  D037               	goto	l1730
 13618  00D1D4                     u19430:
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;fat16.c: 264: {;fat16.c: 266: if(data_changed)
 13622  00D1D4  51A1               	movf	__make_cluster_chain@data_changed& (0+255),w,b
 13623  00D1D6  B4D8               	btfsc	status,2,c
 13624  00D1D8  D00A               	goto	l1731
 13625                           
 13626                           ; BSR set to: 0
 13627                           ;fat16.c: 267: {;fat16.c: 268: flash_sector_write(sector_in_buffer, buffer);
 13628  00D1DA  C0A6  F07F         	movff	__make_cluster_chain@sector_in_buffer,flash_sector_write@page
 13629  00D1DE  C0A7  F080         	movff	__make_cluster_chain@sector_in_buffer+1,flash_sector_write@page+1
 13630  00D1E2  0E00               	movlw	low _buffer
 13631  00D1E4  6F81               	movwf	flash_sector_write@data& (0+255),b
 13632  00D1E6  0E0A               	movlw	high _buffer
 13633  00D1E8  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
 13634  00D1EA  ECFE  F09B         	call	_flash_sector_write	;wreg free
 13635  00D1EE                     l1731:
 13636                           
 13637                           ;fat16.c: 269: };fat16.c: 272: different_sector_cluster = _get_available_cluster(minimum
      +                          _sector, sector);
 13638  00D1EE  C09D  F08B         	movff	__make_cluster_chain@minimum_sector,__get_available_cluster@first_sector
 13639  00D1F2  C09E  F08C         	movff	__make_cluster_chain@minimum_sector+1,__get_available_cluster@first_sector+1
 13640  00D1F6  C0A4  F08D         	movff	__make_cluster_chain@sector,__get_available_cluster@skip_sector
 13641  00D1FA  C0A5  F08E         	movff	__make_cluster_chain@sector+1,__get_available_cluster@skip_sector+1
 13642  00D1FE  EC18  F08C         	call	__get_available_cluster	;wreg free
 13643  00D202  C08B  F09F         	movff	?__get_available_cluster,__make_cluster_chain@different_sector_cluster
 13644  00D206  C08C  F0A0         	movff	?__get_available_cluster+1,__make_cluster_chain@different_sector_cluster+1
 13645                           
 13646                           ;fat16.c: 275: minimum_sector = _fat_sector_from_cluster(different_sector_cluster);
 13647  00D20A  C09F  F060         	movff	__make_cluster_chain@different_sector_cluster,__fat_sector_from_cluster@cluster
 13648  00D20E  C0A0  F061         	movff	__make_cluster_chain@different_sector_cluster+1,__fat_sector_from_cluster@cluster
      +                          +1
 13649  00D212  EC15  F0A1         	call	__fat_sector_from_cluster	;wreg free
 13650  00D216  C060  F09D         	movff	?__fat_sector_from_cluster,__make_cluster_chain@minimum_sector
 13651  00D21A  C061  F09E         	movff	?__fat_sector_from_cluster+1,__make_cluster_chain@minimum_sector+1
 13652                           
 13653                           ;fat16.c: 278: flash_sector_read(sector, buffer);
 13654  00D21E  C0A4  F087         	movff	__make_cluster_chain@sector,flash_sector_read@page
 13655  00D222  C0A5  F088         	movff	__make_cluster_chain@sector+1,flash_sector_read@page+1
 13656  00D226  0E00               	movlw	low _buffer
 13657  00D228  0100               	movlb	0	; () banked
 13658  00D22A  6F89               	movwf	flash_sector_read@data& (0+255),b
 13659  00D22C  0E0A               	movlw	high _buffer
 13660  00D22E  6F8A               	movwf	(flash_sector_read@data+1)& (0+255),b
 13661  00D230  EC68  F0A0         	call	_flash_sector_read	;wreg free
 13662                           
 13663                           ;fat16.c: 279: sector_in_buffer = sector;
 13664  00D234  C0A4  F0A6         	movff	__make_cluster_chain@sector,__make_cluster_chain@sector_in_buffer
 13665  00D238  C0A5  F0A7         	movff	__make_cluster_chain@sector+1,__make_cluster_chain@sector_in_buffer+1
 13666                           
 13667                           ;fat16.c: 280: data_changed = 0;
 13668  00D23C  0E00               	movlw	0
 13669  00D23E  0100               	movlb	0	; () banked
 13670  00D240  6FA1               	movwf	__make_cluster_chain@data_changed& (0+255),b
 13671  00D242                     l1730:
 13672                           
 13673                           ; BSR set to: 0
 13674                           ;fat16.c: 281: };fat16.c: 284: if(remaining_clusters > 1)
 13675                           
 13676                           ; BSR set to: 0
 13677  00D242  51A3               	movf	(__make_cluster_chain@remaining_clusters+1)& (0+255),w,b
 13678  00D244  E104               	bnz	u19450
 13679  00D246  0E02               	movlw	2
 13680  00D248  5DA2               	subwf	__make_cluster_chain@remaining_clusters& (0+255),w,b
 13681  00D24A  A0D8               	btfss	status,0,c
 13682  00D24C  D05E               	goto	l1732
 13683  00D24E                     u19450:
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;fat16.c: 285: {;fat16.c: 287: next_cluster = _read_value_from_offset(offset, buffer);
 13687  00D24E  C0A8  F060         	movff	__make_cluster_chain@offset,__read_value_from_offset@offset
 13688  00D252  C0A9  F061         	movff	__make_cluster_chain@offset+1,__read_value_from_offset@offset+1
 13689  00D256  0E00               	movlw	low _buffer
 13690  00D258  6F62               	movwf	__read_value_from_offset@buffer& (0+255),b
 13691  00D25A  0E0A               	movlw	high _buffer
 13692  00D25C  6F63               	movwf	(__read_value_from_offset@buffer+1)& (0+255),b
 13693  00D25E  EC97  F09C         	call	__read_value_from_offset	;wreg free
 13694  00D262  C060  F0AA         	movff	?__read_value_from_offset,__make_cluster_chain@next_cluster
 13695  00D266  C061  F0AB         	movff	?__read_value_from_offset+1,__make_cluster_chain@next_cluster+1
 13696                           
 13697                           ;fat16.c: 290: if((next_cluster < 2) || (next_cluster > 8153))
 13698  00D26A  0100               	movlb	0	; () banked
 13699  00D26C  51AB               	movf	(__make_cluster_chain@next_cluster+1)& (0+255),w,b
 13700  00D26E  E104               	bnz	u19460
 13701  00D270  0E02               	movlw	2
 13702  00D272  5DAA               	subwf	__make_cluster_chain@next_cluster& (0+255),w,b
 13703  00D274  A0D8               	btfss	status,0,c
 13704  00D276  D006               	goto	u19470
 13705  00D278                     u19460:
 13706                           
 13707                           ; BSR set to: 0
 13708  00D278  0EDA               	movlw	218
 13709  00D27A  5DAA               	subwf	__make_cluster_chain@next_cluster& (0+255),w,b
 13710  00D27C  0E1F               	movlw	31
 13711  00D27E  59AB               	subwfb	(__make_cluster_chain@next_cluster+1)& (0+255),w,b
 13712  00D280  A0D8               	btfss	status,0,c
 13713  00D282  D06B               	goto	l1742
 13714  00D284                     u19470:
 13715                           
 13716                           ; BSR set to: 0
 13717                           ;fat16.c: 291: {;fat16.c: 293: next_offset = _get_available_offset_from_buffer(offset+2,
      +                           buffer);
 13718                           
 13719                           ; BSR set to: 0
 13720  00D284  0E02               	movlw	2
 13721  00D286  25A8               	addwf	__make_cluster_chain@offset& (0+255),w,b
 13722  00D288  6F60               	movwf	__get_available_offset_from_buffer@minimum_offset& (0+255),b
 13723  00D28A  0E00               	movlw	0
 13724  00D28C  21A9               	addwfc	(__make_cluster_chain@offset+1)& (0+255),w,b
 13725  00D28E  6F61               	movwf	(__get_available_offset_from_buffer@minimum_offset+1)& (0+255),b
 13726  00D290  0E00               	movlw	low _buffer
 13727  00D292  6F62               	movwf	__get_available_offset_from_buffer@buffer& (0+255),b
 13728  00D294  0E0A               	movlw	high _buffer
 13729  00D296  6F63               	movwf	(__get_available_offset_from_buffer@buffer+1)& (0+255),b
 13730  00D298  EC6C  F098         	call	__get_available_offset_from_buffer	;wreg free
 13731  00D29C  C060  F09B         	movff	?__get_available_offset_from_buffer,__make_cluster_chain@next_offset
 13732  00D2A0  C061  F09C         	movff	?__get_available_offset_from_buffer+1,__make_cluster_chain@next_offset+1
 13733                           
 13734                           ;fat16.c: 295: if(next_offset != 0xFFFF)
 13735  00D2A4  0100               	movlb	0	; () banked
 13736  00D2A6  299B               	incf	__make_cluster_chain@next_offset& (0+255),w,b
 13737  00D2A8  E103               	bnz	u19480
 13738  00D2AA  299C               	incf	(__make_cluster_chain@next_offset+1)& (0+255),w,b
 13739  00D2AC  B4D8               	btfsc	status,2,c
 13740  00D2AE  D013               	goto	l1736
 13741  00D2B0                     u19480:
 13742                           
 13743                           ; BSR set to: 0
 13744                           ;fat16.c: 296: {;fat16.c: 298: next_cluster = sector_in_buffer - 2;
 13745  00D2B0  0EFE               	movlw	254
 13746  00D2B2  25A6               	addwf	__make_cluster_chain@sector_in_buffer& (0+255),w,b
 13747  00D2B4  6FAA               	movwf	__make_cluster_chain@next_cluster& (0+255),b
 13748  00D2B6  0EFF               	movlw	255
 13749  00D2B8  21A7               	addwfc	(__make_cluster_chain@sector_in_buffer+1)& (0+255),w,b
 13750  00D2BA  6FAB               	movwf	(__make_cluster_chain@next_cluster+1)& (0+255),b
 13751                           
 13752                           ; BSR set to: 0
 13753                           ;fat16.c: 299: next_cluster <<= 8;
 13754  00D2BC  51AA               	movf	__make_cluster_chain@next_cluster& (0+255),w,b
 13755  00D2BE  6FAB               	movwf	(__make_cluster_chain@next_cluster+1)& (0+255),b
 13756  00D2C0  6BAA               	clrf	__make_cluster_chain@next_cluster& (0+255),b
 13757                           
 13758                           ; BSR set to: 0
 13759                           ;fat16.c: 300: next_cluster |= (next_offset>>1);
 13760  00D2C2  90D8               	bcf	status,0,c
 13761  00D2C4  319C               	rrcf	(__make_cluster_chain@next_offset+1)& (0+255),w,b
 13762  00D2C6  6F9A               	movwf	(??__make_cluster_chain+1)& (0+255),b
 13763  00D2C8  319B               	rrcf	__make_cluster_chain@next_offset& (0+255),w,b
 13764  00D2CA  6F99               	movwf	??__make_cluster_chain& (0+255),b
 13765  00D2CC  5199               	movf	??__make_cluster_chain& (0+255),w,b
 13766  00D2CE  13AA               	iorwf	__make_cluster_chain@next_cluster& (0+255),f,b
 13767  00D2D0  519A               	movf	(??__make_cluster_chain+1)& (0+255),w,b
 13768  00D2D2  13AB               	iorwf	(__make_cluster_chain@next_cluster+1)& (0+255),f,b
 13769                           
 13770                           ;fat16.c: 301: }
 13771  00D2D4  D00B               	goto	l1739
 13772  00D2D6                     l1736:
 13773                           
 13774                           ; BSR set to: 0
 13775                           ;fat16.c: 302: else;fat16.c: 303: {;fat16.c: 304: if(different_sector_cluster == 0x0000)
 13776                           
 13777                           ; BSR set to: 0
 13778  00D2D6  519F               	movf	__make_cluster_chain@different_sector_cluster& (0+255),w,b
 13779  00D2D8  11A0               	iorwf	(__make_cluster_chain@different_sector_cluster+1)& (0+255),w,b
 13780  00D2DA  A4D8               	btfss	status,2,c
 13781  00D2DC  D003               	goto	l1738
 13782                           
 13783                           ; BSR set to: 0
 13784                           ;fat16.c: 305: {;fat16.c: 307: return 0xFFFF;
 13785  00D2DE  6995               	setf	?__make_cluster_chain& (0+255),b
 13786  00D2E0  6996               	setf	(?__make_cluster_chain+1)& (0+255),b
 13787  00D2E2  0012               	return	
 13788  00D2E4                     l1738:
 13789                           
 13790                           ; BSR set to: 0
 13791                           ;fat16.c: 309: else;fat16.c: 310: {;fat16.c: 312: next_cluster = different_sector_cluste
      +                          r;
 13792  00D2E4  C09F  F0AA         	movff	__make_cluster_chain@different_sector_cluster,__make_cluster_chain@next_cluster
 13793  00D2E8  C0A0  F0AB         	movff	__make_cluster_chain@different_sector_cluster+1,__make_cluster_chain@next_cluster
      +                          +1
 13794  00D2EC                     l1739:
 13795                           
 13796                           ; BSR set to: 0
 13797                           ;fat16.c: 313: };fat16.c: 314: };fat16.c: 316: _write_value_to_offset(offset, buffer, ne
      +                          xt_cluster);
 13798                           
 13799                           ; BSR set to: 0
 13800                           
 13801                           ; BSR set to: 0
 13802  00D2EC  C0A8  F060         	movff	__make_cluster_chain@offset,__write_value_to_offset@offset
 13803  00D2F0  C0A9  F061         	movff	__make_cluster_chain@offset+1,__write_value_to_offset@offset+1
 13804  00D2F4  0E00               	movlw	low _buffer
 13805  00D2F6  6F62               	movwf	__write_value_to_offset@buffer& (0+255),b
 13806  00D2F8  0E0A               	movlw	high _buffer
 13807  00D2FA  6F63               	movwf	(__write_value_to_offset@buffer+1)& (0+255),b
 13808  00D2FC  C0AA  F064         	movff	__make_cluster_chain@next_cluster,__write_value_to_offset@value
 13809  00D300  C0AB  F065         	movff	__make_cluster_chain@next_cluster+1,__write_value_to_offset@value+1
 13810  00D304  EC8F  F09E         	call	__write_value_to_offset	;wreg free
 13811  00D308  D025               	goto	L85
 13812  00D30A                     l1732:
 13813                           
 13814                           ; BSR set to: 0
 13815                           ;fat16.c: 326: else if(remaining_clusters == 1)
 13816                           
 13817                           ; BSR set to: 0
 13818  00D30A  05A2               	decf	__make_cluster_chain@remaining_clusters& (0+255),w,b
 13819  00D30C  11A3               	iorwf	(__make_cluster_chain@remaining_clusters+1)& (0+255),w,b
 13820  00D30E  A4D8               	btfss	status,2,c
 13821  00D310  D028               	goto	l1741
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;fat16.c: 327: {;fat16.c: 329: next_cluster = _read_value_from_offset(offset, buffer);
 13825  00D312  C0A8  F060         	movff	__make_cluster_chain@offset,__read_value_from_offset@offset
 13826  00D316  C0A9  F061         	movff	__make_cluster_chain@offset+1,__read_value_from_offset@offset+1
 13827  00D31A  0E00               	movlw	low _buffer
 13828  00D31C  6F62               	movwf	__read_value_from_offset@buffer& (0+255),b
 13829  00D31E  0E0A               	movlw	high _buffer
 13830  00D320  6F63               	movwf	(__read_value_from_offset@buffer+1)& (0+255),b
 13831  00D322  EC97  F09C         	call	__read_value_from_offset	;wreg free
 13832  00D326  C060  F0AA         	movff	?__read_value_from_offset,__make_cluster_chain@next_cluster
 13833  00D32A  C061  F0AB         	movff	?__read_value_from_offset+1,__make_cluster_chain@next_cluster+1
 13834                           
 13835                           ;fat16.c: 331: if(next_cluster != 0xFFFF)
 13836  00D32E  0100               	movlb	0	; () banked
 13837  00D330  29AA               	incf	__make_cluster_chain@next_cluster& (0+255),w,b
 13838  00D332  E103               	bnz	u19510
 13839  00D334  29AB               	incf	(__make_cluster_chain@next_cluster+1)& (0+255),w,b
 13840  00D336  B4D8               	btfsc	status,2,c
 13841  00D338  D010               	goto	l1742
 13842  00D33A                     u19510:
 13843                           
 13844                           ; BSR set to: 0
 13845                           ;fat16.c: 332: {;fat16.c: 334: _write_value_to_offset(offset, buffer, 0xFFFF);
 13846  00D33A  C0A8  F060         	movff	__make_cluster_chain@offset,__write_value_to_offset@offset
 13847  00D33E  C0A9  F061         	movff	__make_cluster_chain@offset+1,__write_value_to_offset@offset+1
 13848  00D342  0E00               	movlw	low _buffer
 13849  00D344  6F62               	movwf	__write_value_to_offset@buffer& (0+255),b
 13850  00D346  0E0A               	movlw	high _buffer
 13851  00D348  6F63               	movwf	(__write_value_to_offset@buffer+1)& (0+255),b
 13852  00D34A  0EFF               	movlw	255
 13853  00D34C  6F65               	movwf	(__write_value_to_offset@value+1)& (0+255),b
 13854  00D34E  6964               	setf	__write_value_to_offset@value& (0+255),b
 13855  00D350  EC8F  F09E         	call	__write_value_to_offset	;wreg free
 13856  00D354                     L85:
 13857                           
 13858                           ;fat16.c: 336: data_changed = 1;
 13859  00D354  0E01               	movlw	1
 13860  00D356  0100               	movlb	0	; () banked
 13861  00D358  6FA1               	movwf	__make_cluster_chain@data_changed& (0+255),b
 13862  00D35A                     l1742:
 13863                           
 13864                           ; BSR set to: 0
 13865                           ;fat16.c: 337: };fat16.c: 340: --remaining_clusters;
 13866                           
 13867                           ; BSR set to: 0
 13868  00D35A  07A2               	decf	__make_cluster_chain@remaining_clusters& (0+255),f,b
 13869  00D35C  A0D8               	btfss	status,0,c
 13870  00D35E  07A3               	decf	(__make_cluster_chain@remaining_clusters+1)& (0+255),f,b
 13871                           
 13872                           ;fat16.c: 341: }
 13873  00D360  D020               	goto	l1743
 13874  00D362                     l1741:
 13875                           
 13876                           ; BSR set to: 0
 13877                           ;fat16.c: 344: else;fat16.c: 345: {;fat16.c: 347: next_cluster = _read_value_from_offset
      +                          (offset, buffer);
 13878                           
 13879                           ; BSR set to: 0
 13880  00D362  C0A8  F060         	movff	__make_cluster_chain@offset,__read_value_from_offset@offset
 13881  00D366  C0A9  F061         	movff	__make_cluster_chain@offset+1,__read_value_from_offset@offset+1
 13882  00D36A  0E00               	movlw	low _buffer
 13883  00D36C  6F62               	movwf	__read_value_from_offset@buffer& (0+255),b
 13884  00D36E  0E0A               	movlw	high _buffer
 13885  00D370  6F63               	movwf	(__read_value_from_offset@buffer+1)& (0+255),b
 13886  00D372  EC97  F09C         	call	__read_value_from_offset	;wreg free
 13887  00D376  C060  F0AA         	movff	?__read_value_from_offset,__make_cluster_chain@next_cluster
 13888  00D37A  C061  F0AB         	movff	?__read_value_from_offset+1,__make_cluster_chain@next_cluster+1
 13889                           
 13890                           ;fat16.c: 350: _write_value_to_offset(offset, buffer, 0x0000);
 13891  00D37E  C0A8  F060         	movff	__make_cluster_chain@offset,__write_value_to_offset@offset
 13892  00D382  C0A9  F061         	movff	__make_cluster_chain@offset+1,__write_value_to_offset@offset+1
 13893  00D386  0E00               	movlw	low _buffer
 13894  00D388  0100               	movlb	0	; () banked
 13895  00D38A  6F62               	movwf	__write_value_to_offset@buffer& (0+255),b
 13896  00D38C  0E0A               	movlw	high _buffer
 13897  00D38E  6F63               	movwf	(__write_value_to_offset@buffer+1)& (0+255),b
 13898  00D390  0E00               	movlw	0
 13899  00D392  6F65               	movwf	(__write_value_to_offset@value+1)& (0+255),b
 13900  00D394  0E00               	movlw	0
 13901  00D396  6F64               	movwf	__write_value_to_offset@value& (0+255),b
 13902  00D398  EC8F  F09E         	call	__write_value_to_offset	;wreg free
 13903                           
 13904                           ;fat16.c: 352: data_changed = 1;
 13905  00D39C  0E01               	movlw	1
 13906  00D39E  0100               	movlb	0	; () banked
 13907  00D3A0  6FA1               	movwf	__make_cluster_chain@data_changed& (0+255),b
 13908  00D3A2                     l1743:
 13909                           
 13910                           ; BSR set to: 0
 13911                           
 13912                           ; BSR set to: 0
 13913                           
 13914                           ; BSR set to: 0
 13915                           
 13916                           ; BSR set to: 0
 13917  00D3A2  51A2               	movf	__make_cluster_chain@remaining_clusters& (0+255),w,b
 13918  00D3A4  11A3               	iorwf	(__make_cluster_chain@remaining_clusters+1)& (0+255),w,b
 13919  00D3A6  A4D8               	btfss	status,2,c
 13920  00D3A8  D6F9               	goto	l1729
 13921                           
 13922                           ; BSR set to: 0
 13923  00D3AA  51AB               	movf	(__make_cluster_chain@next_cluster+1)& (0+255),w,b
 13924  00D3AC  E104               	bnz	u19530
 13925  00D3AE  0E02               	movlw	2
 13926  00D3B0  5DAA               	subwf	__make_cluster_chain@next_cluster& (0+255),w,b
 13927  00D3B2  A0D8               	btfss	status,0,c
 13928  00D3B4  D006               	goto	u19540
 13929  00D3B6                     u19530:
 13930                           
 13931                           ; BSR set to: 0
 13932  00D3B6  0EDA               	movlw	218
 13933  00D3B8  5DAA               	subwf	__make_cluster_chain@next_cluster& (0+255),w,b
 13934  00D3BA  0E1F               	movlw	31
 13935  00D3BC  59AB               	subwfb	(__make_cluster_chain@next_cluster+1)& (0+255),w,b
 13936  00D3BE  A0D8               	btfss	status,0,c
 13937  00D3C0  D6ED               	goto	l1729
 13938  00D3C2                     u19540:
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;fat16.c: 353: };fat16.c: 355: };fat16.c: 358: if(data_changed)
 13942                           
 13943                           ; BSR set to: 0
 13944                           
 13945                           ; BSR set to: 0
 13946  00D3C2  51A1               	movf	__make_cluster_chain@data_changed& (0+255),w,b
 13947  00D3C4  B4D8               	btfsc	status,2,c
 13948  00D3C6  D00A               	goto	l1747
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;fat16.c: 359: {;fat16.c: 360: flash_sector_write(sector_in_buffer, buffer);
 13952  00D3C8  C0A6  F07F         	movff	__make_cluster_chain@sector_in_buffer,flash_sector_write@page
 13953  00D3CC  C0A7  F080         	movff	__make_cluster_chain@sector_in_buffer+1,flash_sector_write@page+1
 13954  00D3D0  0E00               	movlw	low _buffer
 13955  00D3D2  6F81               	movwf	flash_sector_write@data& (0+255),b
 13956  00D3D4  0E0A               	movlw	high _buffer
 13957  00D3D6  6F82               	movwf	(flash_sector_write@data+1)& (0+255),b
 13958  00D3D8  ECFE  F09B         	call	_flash_sector_write	;wreg free
 13959  00D3DC                     l1747:
 13960                           
 13961                           ;fat16.c: 361: };fat16.c: 364: if(number_of_clusters>0)
 13962  00D3DC  0100               	movlb	0	; () banked
 13963  00D3DE  5197               	movf	__make_cluster_chain@number_of_clusters& (0+255),w,b
 13964  00D3E0  1198               	iorwf	(__make_cluster_chain@number_of_clusters+1)& (0+255),w,b
 13965  00D3E2  B4D8               	btfsc	status,2,c
 13966  00D3E4  D005               	goto	l1748
 13967                           
 13968                           ; BSR set to: 0
 13969                           ;fat16.c: 365: {;fat16.c: 366: return first_cluster;
 13970  00D3E6  C095  F095         	movff	__make_cluster_chain@first_cluster,?__make_cluster_chain
 13971  00D3EA  C096  F096         	movff	__make_cluster_chain@first_cluster+1,?__make_cluster_chain+1
 13972                           
 13973                           ; BSR set to: 0
 13974                           ;fat16.c: 367: }
 13975  00D3EE  0012               	return	
 13976  00D3F0                     l1748:
 13977                           
 13978                           ; BSR set to: 0
 13979                           ;fat16.c: 368: else;fat16.c: 369: {;fat16.c: 370: return 0x0000;
 13980                           
 13981                           ; BSR set to: 0
 13982  00D3F0  0E00               	movlw	0
 13983  00D3F2  6F96               	movwf	(?__make_cluster_chain+1)& (0+255),b
 13984  00D3F4  0E00               	movlw	0
 13985  00D3F6  6F95               	movwf	?__make_cluster_chain& (0+255),b
 13986                           
 13987                           ; BSR set to: 0
 13988  00D3F8  0012               	return	
 13989  00D3FA                     __end_of__make_cluster_chain:
 13990                           	opt stack 0
 13991                           tblptru	equ	0xFF8
 13992                           tblptrh	equ	0xFF7
 13993                           tblptrl	equ	0xFF6
 13994                           tablat	equ	0xFF5
 13995                           prodh	equ	0xFF4
 13996                           prodl	equ	0xFF3
 13997                           postinc0	equ	0xFEE
 13998                           wreg	equ	0xFE8
 13999                           postinc1	equ	0xFE6
 14000                           postdec1	equ	0xFE5
 14001                           plusw1	equ	0xFE3
 14002                           fsr1h	equ	0xFE2
 14003                           fsr1l	equ	0xFE1
 14004                           indf2	equ	0xFDF
 14005                           postinc2	equ	0xFDE
 14006                           plusw2	equ	0xFDB
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function __write_value_to_offset *****************
 14012 ;; Defined at:
 14013 ;;		line 123 in file "fat16.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  offset          2    0[BANK0 ] unsigned int 
 14016 ;;  buffer          2    2[BANK0 ] PTR unsigned char 
 14017 ;;		 -> buffer(512), 
 14018 ;;  value           2    4[BANK0 ] unsigned int 
 14019 ;; Auto vars:     Size  Location     Type
 14020 ;;		None
 14021 ;; Return value:  Size  Location     Type
 14022 ;;                  1    wreg      void 
 14023 ;; Registers used:
 14024 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14025 ;; Tracked objects:
 14026 ;;		On entry : 0/0
 14027 ;;		On exit  : 0/0
 14028 ;;		Unchanged: 0/0
 14029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14030 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14033 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14034 ;;Total ram usage:        8 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; Hardware stack levels required when called:   10
 14037 ;; This function calls:
 14038 ;;		Nothing
 14039 ;; This function is called by:
 14040 ;;		__make_cluster_chain
 14041 ;; This function uses a non-reentrant model
 14042 ;;
 14043                           
 14044                           	psect	text44
 14045  013D1E                     __ptext44:
 14046                           	opt stack 0
 14047  013D1E                     __write_value_to_offset:
 14048                           	opt stack 16
 14049                           
 14050                           ;fat16.c: 125: buffer[offset] = (uint8_t) (value & 0xFF);
 14051                           
 14052                           ; BSR set to: 0
 14053                           ;incstack = 0
 14054  013D1E  0100               	movlb	0	; () banked
 14055  013D20  5160               	movf	__write_value_to_offset@offset& (0+255),w,b
 14056  013D22  2562               	addwf	__write_value_to_offset@buffer& (0+255),w,b
 14057  013D24  6ED9               	movwf	fsr2l,c
 14058  013D26  5161               	movf	(__write_value_to_offset@offset+1)& (0+255),w,b
 14059  013D28  2163               	addwfc	(__write_value_to_offset@buffer+1)& (0+255),w,b
 14060  013D2A  6EDA               	movwf	fsr2h,c
 14061  013D2C  C064  FFDF         	movff	__write_value_to_offset@value,indf2
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;fat16.c: 126: value >>= 8;
 14065  013D30  5165               	movf	(__write_value_to_offset@value+1)& (0+255),w,b
 14066  013D32  6F64               	movwf	__write_value_to_offset@value& (0+255),b
 14067  013D34  6B65               	clrf	(__write_value_to_offset@value+1)& (0+255),b
 14068                           
 14069                           ; BSR set to: 0
 14070                           ;fat16.c: 127: buffer[offset+1] = (uint8_t) (value & 0xFF);
 14071  013D36  0E01               	movlw	1
 14072  013D38  2560               	addwf	__write_value_to_offset@offset& (0+255),w,b
 14073  013D3A  6F66               	movwf	??__write_value_to_offset& (0+255),b
 14074  013D3C  0E00               	movlw	0
 14075  013D3E  2161               	addwfc	(__write_value_to_offset@offset+1)& (0+255),w,b
 14076  013D40  6F67               	movwf	(??__write_value_to_offset+1)& (0+255),b
 14077  013D42  5166               	movf	??__write_value_to_offset& (0+255),w,b
 14078  013D44  2562               	addwf	__write_value_to_offset@buffer& (0+255),w,b
 14079  013D46  6ED9               	movwf	fsr2l,c
 14080  013D48  5167               	movf	(??__write_value_to_offset+1)& (0+255),w,b
 14081  013D4A  2163               	addwfc	(__write_value_to_offset@buffer+1)& (0+255),w,b
 14082  013D4C  6EDA               	movwf	fsr2h,c
 14083  013D4E  C064  FFDF         	movff	__write_value_to_offset@value,indf2
 14084                           
 14085                           ; BSR set to: 0
 14086  013D52  0012               	return		;funcret
 14087  013D54                     __end_of__write_value_to_offset:
 14088                           	opt stack 0
 14089                           tblptru	equ	0xFF8
 14090                           tblptrh	equ	0xFF7
 14091                           tblptrl	equ	0xFF6
 14092                           tablat	equ	0xFF5
 14093                           prodh	equ	0xFF4
 14094                           prodl	equ	0xFF3
 14095                           postinc0	equ	0xFEE
 14096                           wreg	equ	0xFE8
 14097                           postinc1	equ	0xFE6
 14098                           postdec1	equ	0xFE5
 14099                           plusw1	equ	0xFE3
 14100                           fsr1h	equ	0xFE2
 14101                           fsr1l	equ	0xFE1
 14102                           indf2	equ	0xFDF
 14103                           postinc2	equ	0xFDE
 14104                           plusw2	equ	0xFDB
 14105                           fsr2h	equ	0xFDA
 14106                           fsr2l	equ	0xFD9
 14107                           status	equ	0xFD8
 14108                           
 14109 ;; *************** function __read_value_from_offset *****************
 14110 ;; Defined at:
 14111 ;;		line 114 in file "fat16.c"
 14112 ;; Parameters:    Size  Location     Type
 14113 ;;  offset          2    0[BANK0 ] unsigned int 
 14114 ;;  buffer          2    2[BANK0 ] PTR unsigned char 
 14115 ;;		 -> buffer(512), 
 14116 ;; Auto vars:     Size  Location     Type
 14117 ;;  value           2    7[BANK0 ] unsigned int 
 14118 ;; Return value:  Size  Location     Type
 14119 ;;                  2    0[BANK0 ] unsigned int 
 14120 ;; Registers used:
 14121 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14122 ;; Tracked objects:
 14123 ;;		On entry : 0/0
 14124 ;;		On exit  : 0/0
 14125 ;;		Unchanged: 0/0
 14126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14127 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14128 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14129 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14130 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14131 ;;Total ram usage:        9 bytes
 14132 ;; Hardware stack levels used:    1
 14133 ;; Hardware stack levels required when called:   10
 14134 ;; This function calls:
 14135 ;;		Nothing
 14136 ;; This function is called by:
 14137 ;;		__find_nth_cluster
 14138 ;;		__make_cluster_chain
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text45
 14143  01392E                     __ptext45:
 14144                           	opt stack 0
 14145  01392E                     __read_value_from_offset:
 14146                           	opt stack 16
 14147                           
 14148                           ;fat16.c: 116: uint16_t value;;fat16.c: 117: value = buffer[offset+1];
 14149                           
 14150                           ; BSR set to: 0
 14151                           ;incstack = 0
 14152  01392E  0E01               	movlw	1
 14153  013930  0100               	movlb	0	; () banked
 14154  013932  2560               	addwf	__read_value_from_offset@offset& (0+255),w,b
 14155  013934  6F64               	movwf	??__read_value_from_offset& (0+255),b
 14156  013936  0E00               	movlw	0
 14157  013938  2161               	addwfc	(__read_value_from_offset@offset+1)& (0+255),w,b
 14158  01393A  6F65               	movwf	(??__read_value_from_offset+1)& (0+255),b
 14159  01393C  5164               	movf	??__read_value_from_offset& (0+255),w,b
 14160  01393E  2562               	addwf	__read_value_from_offset@buffer& (0+255),w,b
 14161  013940  6ED9               	movwf	fsr2l,c
 14162  013942  5165               	movf	(??__read_value_from_offset+1)& (0+255),w,b
 14163  013944  2163               	addwfc	(__read_value_from_offset@buffer+1)& (0+255),w,b
 14164  013946  6EDA               	movwf	fsr2h,c
 14165  013948  50DF               	movf	indf2,w,c
 14166  01394A  6F66               	movwf	(??__read_value_from_offset+2)& (0+255),b
 14167  01394C  5166               	movf	(??__read_value_from_offset+2)& (0+255),w,b
 14168  01394E  6F67               	movwf	__read_value_from_offset@value& (0+255),b
 14169  013950  6B68               	clrf	(__read_value_from_offset@value+1)& (0+255),b
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;fat16.c: 118: value <<= 8;
 14173  013952  5167               	movf	__read_value_from_offset@value& (0+255),w,b
 14174  013954  6F68               	movwf	(__read_value_from_offset@value+1)& (0+255),b
 14175  013956  6B67               	clrf	__read_value_from_offset@value& (0+255),b
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;fat16.c: 119: value |= buffer[offset];
 14179  013958  5160               	movf	__read_value_from_offset@offset& (0+255),w,b
 14180  01395A  2562               	addwf	__read_value_from_offset@buffer& (0+255),w,b
 14181  01395C  6ED9               	movwf	fsr2l,c
 14182  01395E  5161               	movf	(__read_value_from_offset@offset+1)& (0+255),w,b
 14183  013960  2163               	addwfc	(__read_value_from_offset@buffer+1)& (0+255),w,b
 14184  013962  6EDA               	movwf	fsr2h,c
 14185  013964  50DF               	movf	indf2,w,c
 14186  013966  6F64               	movwf	??__read_value_from_offset& (0+255),b
 14187  013968  5164               	movf	??__read_value_from_offset& (0+255),w,b
 14188  01396A  1367               	iorwf	__read_value_from_offset@value& (0+255),f,b
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;fat16.c: 120: return value;
 14192  01396C  C067  F060         	movff	__read_value_from_offset@value,?__read_value_from_offset
 14193  013970  C068  F061         	movff	__read_value_from_offset@value+1,?__read_value_from_offset+1
 14194  013974  0012               	return	
 14195  013976                     __end_of__read_value_from_offset:
 14196                           	opt stack 0
 14197                           tblptru	equ	0xFF8
 14198                           tblptrh	equ	0xFF7
 14199                           tblptrl	equ	0xFF6
 14200                           tablat	equ	0xFF5
 14201                           prodh	equ	0xFF4
 14202                           prodl	equ	0xFF3
 14203                           postinc0	equ	0xFEE
 14204                           wreg	equ	0xFE8
 14205                           postinc1	equ	0xFE6
 14206                           postdec1	equ	0xFE5
 14207                           plusw1	equ	0xFE3
 14208                           fsr1h	equ	0xFE2
 14209                           fsr1l	equ	0xFE1
 14210                           indf2	equ	0xFDF
 14211                           postinc2	equ	0xFDE
 14212                           plusw2	equ	0xFDB
 14213                           fsr2h	equ	0xFDA
 14214                           fsr2l	equ	0xFD9
 14215                           status	equ	0xFD8
 14216                           
 14217 ;; *************** function __get_available_cluster *****************
 14218 ;; Defined at:
 14219 ;;		line 130 in file "fat16.c"
 14220 ;; Parameters:    Size  Location     Type
 14221 ;;  first_sector    2   43[BANK0 ] unsigned int 
 14222 ;;  skip_sector     2   45[BANK0 ] unsigned int 
 14223 ;; Auto vars:     Size  Location     Type
 14224 ;;  sector          2   51[BANK0 ] unsigned int 
 14225 ;;  offset          2   49[BANK0 ] unsigned int 
 14226 ;;  cluster         2   47[BANK0 ] unsigned int 
 14227 ;; Return value:  Size  Location     Type
 14228 ;;                  2   43[BANK0 ] unsigned int 
 14229 ;; Registers used:
 14230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14231 ;; Tracked objects:
 14232 ;;		On entry : 0/0
 14233 ;;		On exit  : 0/0
 14234 ;;		Unchanged: 0/0
 14235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14236 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14237 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14239 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14240 ;;Total ram usage:       10 bytes
 14241 ;; Hardware stack levels used:    1
 14242 ;; Hardware stack levels required when called:   15
 14243 ;; This function calls:
 14244 ;;		__cluster_from_sector_and_offset
 14245 ;;		__get_available_offset_from_buffer
 14246 ;;		_flash_sector_read
 14247 ;; This function is called by:
 14248 ;;		__make_cluster_chain
 14249 ;; This function uses a non-reentrant model
 14250 ;;
 14251                           
 14252                           	psect	text46
 14253  011830                     __ptext46:
 14254                           	opt stack 0
 14255  011830                     __get_available_cluster:
 14256                           	opt stack 11
 14257                           
 14258                           ;fat16.c: 132: uint16_t cluster;;fat16.c: 133: uint16_t sector;;fat16.c: 134: uint16_t o
      +                          ffset;;fat16.c: 137: for (sector=first_sector; sector<=33; ++sector)
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;incstack = 0
 14262  011830  C08B  F093         	movff	__get_available_cluster@first_sector,__get_available_cluster@sector
 14263  011834  C08C  F094         	movff	__get_available_cluster@first_sector+1,__get_available_cluster@sector+1
 14264  011838  0100               	movlb	0	; () banked
 14265  01183A  5194               	movf	(__get_available_cluster@sector+1)& (0+255),w,b
 14266  01183C  E15B               	bnz	l19306
 14267  01183E  0E22               	movlw	34
 14268  011840  5D93               	subwf	__get_available_cluster@sector& (0+255),w,b
 14269  011842  B0D8               	btfsc	status,0,c
 14270  011844  D057               	goto	u19180
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;fat16.c: 138: {;fat16.c: 140: if(sector == skip_sector)
 14274                           
 14275                           ; BSR set to: 0
 14276                           
 14277                           ; BSR set to: 0
 14278  011846  518D               	movf	__get_available_cluster@skip_sector& (0+255),w,b
 14279  011848  1993               	xorwf	__get_available_cluster@sector& (0+255),w,b
 14280  01184A  E104               	bnz	l19282
 14281  01184C  518E               	movf	(__get_available_cluster@skip_sector+1)& (0+255),w,b
 14282  01184E  1994               	xorwf	(__get_available_cluster@sector+1)& (0+255),w,b
 14283  011850  B4D8               	btfsc	status,2,c
 14284  011852  D04D               	goto	l1714
 14285  011854                     l19282:
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;fat16.c: 143: };fat16.c: 146: flash_sector_read(sector, buffer);
 14289  011854  C093  F087         	movff	__get_available_cluster@sector,flash_sector_read@page
 14290  011858  C094  F088         	movff	__get_available_cluster@sector+1,flash_sector_read@page+1
 14291  01185C  0E00               	movlw	low _buffer
 14292  01185E  6F89               	movwf	flash_sector_read@data& (0+255),b
 14293  011860  0E0A               	movlw	high _buffer
 14294  011862  6F8A               	movwf	(flash_sector_read@data+1)& (0+255),b
 14295  011864  EC68  F0A0         	call	_flash_sector_read	;wreg free
 14296                           
 14297                           ;fat16.c: 149: if(sector == 2)
 14298  011868  0E02               	movlw	2
 14299  01186A  0100               	movlb	0	; () banked
 14300  01186C  1993               	xorwf	__get_available_cluster@sector& (0+255),w,b
 14301  01186E  1194               	iorwf	(__get_available_cluster@sector+1)& (0+255),w,b
 14302  011870  A4D8               	btfss	status,2,c
 14303  011872  D00B               	goto	l1709
 14304                           
 14305                           ; BSR set to: 0
 14306                           ;fat16.c: 150: {;fat16.c: 152: offset = _get_available_offset_from_buffer(4, buffer);
 14307  011874  0E00               	movlw	0
 14308  011876  6F61               	movwf	(__get_available_offset_from_buffer@minimum_offset+1)& (0+255),b
 14309  011878  0E04               	movlw	4
 14310  01187A  6F60               	movwf	__get_available_offset_from_buffer@minimum_offset& (0+255),b
 14311  01187C  0E00               	movlw	low _buffer
 14312  01187E  6F62               	movwf	__get_available_offset_from_buffer@buffer& (0+255),b
 14313  011880  0E0A               	movlw	high _buffer
 14314  011882  6F63               	movwf	(__get_available_offset_from_buffer@buffer+1)& (0+255),b
 14315  011884  EC6C  F098         	call	__get_available_offset_from_buffer	;wreg free
 14316  011888  D00B               	goto	L2
 14317  01188A                     l1709:
 14318                           
 14319                           ;fat16.c: 154: else;fat16.c: 155: {;fat16.c: 156: offset = _get_available_offset_from_bu
      +                          ffer(0, buffer);
 14320  01188A  0E00               	movlw	0
 14321  01188C  0100               	movlb	0	; () banked
 14322  01188E  6F61               	movwf	(__get_available_offset_from_buffer@minimum_offset+1)& (0+255),b
 14323  011890  0E00               	movlw	0
 14324  011892  6F60               	movwf	__get_available_offset_from_buffer@minimum_offset& (0+255),b
 14325  011894  0E00               	movlw	low _buffer
 14326  011896  6F62               	movwf	__get_available_offset_from_buffer@buffer& (0+255),b
 14327  011898  0E0A               	movlw	high _buffer
 14328  01189A  6F63               	movwf	(__get_available_offset_from_buffer@buffer+1)& (0+255),b
 14329  01189C  EC6C  F098         	call	__get_available_offset_from_buffer	;wreg free
 14330  0118A0                     L2:
 14331  0118A0  C060  F091         	movff	?__get_available_offset_from_buffer,__get_available_cluster@offset
 14332  0118A4  C061  F092         	movff	?__get_available_offset_from_buffer+1,__get_available_cluster@offset+1
 14333                           
 14334                           ;fat16.c: 157: };fat16.c: 160: if(offset != 0xFFFF)
 14335  0118A8  0100               	movlb	0	; () banked
 14336  0118AA  2991               	incf	__get_available_cluster@offset& (0+255),w,b
 14337  0118AC  E103               	bnz	u19160
 14338  0118AE  2992               	incf	(__get_available_cluster@offset+1)& (0+255),w,b
 14339  0118B0  B4D8               	btfsc	status,2,c
 14340  0118B2  D01D               	goto	l1714
 14341  0118B4                     u19160:
 14342                           
 14343                           ; BSR set to: 0
 14344                           ;fat16.c: 161: {;fat16.c: 163: cluster = _cluster_from_sector_and_offset(sector, offset)
      +                          ;
 14345  0118B4  C093  F060         	movff	__get_available_cluster@sector,__cluster_from_sector_and_offset@sector
 14346  0118B8  C094  F061         	movff	__get_available_cluster@sector+1,__cluster_from_sector_and_offset@sector+1
 14347  0118BC  C091  F062         	movff	__get_available_cluster@offset,__cluster_from_sector_and_offset@offset
 14348  0118C0  C092  F063         	movff	__get_available_cluster@offset+1,__cluster_from_sector_and_offset@offset+1
 14349  0118C4  EC54  F0A0         	call	__cluster_from_sector_and_offset	;wreg free
 14350  0118C8  C060  F08F         	movff	?__cluster_from_sector_and_offset,__get_available_cluster@cluster
 14351  0118CC  C061  F090         	movff	?__cluster_from_sector_and_offset+1,__get_available_cluster@cluster+1
 14352                           
 14353                           ;fat16.c: 165: if(cluster > 8191)
 14354  0118D0  0E20               	movlw	32
 14355  0118D2  0100               	movlb	0	; () banked
 14356  0118D4  5D90               	subwf	(__get_available_cluster@cluster+1)& (0+255),w,b
 14357  0118D6  A0D8               	btfss	status,0,c
 14358  0118D8  D005               	goto	l1712
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;fat16.c: 166: {;fat16.c: 168: return 0x0000;
 14362  0118DA  0E00               	movlw	0
 14363  0118DC  6F8C               	movwf	(?__get_available_cluster+1)& (0+255),b
 14364  0118DE  0E00               	movlw	0
 14365  0118E0  6F8B               	movwf	?__get_available_cluster& (0+255),b
 14366                           
 14367                           ; BSR set to: 0
 14368  0118E2  0012               	return	
 14369  0118E4                     l1712:
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;fat16.c: 170: else;fat16.c: 171: {;fat16.c: 173: return cluster;
 14373  0118E4  C08F  F08B         	movff	__get_available_cluster@cluster,?__get_available_cluster
 14374  0118E8  C090  F08C         	movff	__get_available_cluster@cluster+1,?__get_available_cluster+1
 14375  0118EC  0012               	return	
 14376  0118EE                     l1714:
 14377                           
 14378                           ; BSR set to: 0
 14379                           
 14380                           ; BSR set to: 0
 14381                           
 14382                           ; BSR set to: 0
 14383                           
 14384                           ; BSR set to: 0
 14385  0118EE  4B93               	infsnz	__get_available_cluster@sector& (0+255),f,b
 14386  0118F0  2B94               	incf	(__get_available_cluster@sector+1)& (0+255),f,b
 14387  0118F2  D7A3               	goto	L3
 14388  0118F4                     u19180:
 14389  0118F4                     l19306:
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;fat16.c: 174: };fat16.c: 175: };fat16.c: 176: };fat16.c: 179: return 0x0000;
 14393  0118F4  0E00               	movlw	0
 14394  0118F6  6F8C               	movwf	(?__get_available_cluster+1)& (0+255),b
 14395  0118F8  0E00               	movlw	0
 14396  0118FA  6F8B               	movwf	?__get_available_cluster& (0+255),b
 14397  0118FC  0012               	return	
 14398  0118FE                     __end_of__get_available_cluster:
 14399                           	opt stack 0
 14400                           tblptru	equ	0xFF8
 14401                           tblptrh	equ	0xFF7
 14402                           tblptrl	equ	0xFF6
 14403                           tablat	equ	0xFF5
 14404                           prodh	equ	0xFF4
 14405                           prodl	equ	0xFF3
 14406                           postinc0	equ	0xFEE
 14407                           wreg	equ	0xFE8
 14408                           postinc1	equ	0xFE6
 14409                           postdec1	equ	0xFE5
 14410                           plusw1	equ	0xFE3
 14411                           fsr1h	equ	0xFE2
 14412                           fsr1l	equ	0xFE1
 14413                           indf2	equ	0xFDF
 14414                           postinc2	equ	0xFDE
 14415                           plusw2	equ	0xFDB
 14416                           fsr2h	equ	0xFDA
 14417                           fsr2l	equ	0xFD9
 14418                           status	equ	0xFD8
 14419                           
 14420 ;; *************** function __get_available_offset_from_buffer *****************
 14421 ;; Defined at:
 14422 ;;		line 98 in file "fat16.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;  minimum_offs    2    0[BANK0 ] unsigned int 
 14425 ;;  buffer          2    2[BANK0 ] PTR unsigned char 
 14426 ;;		 -> buffer(512), 
 14427 ;; Auto vars:     Size  Location     Type
 14428 ;;  offset          2    6[BANK0 ] unsigned int 
 14429 ;; Return value:  Size  Location     Type
 14430 ;;                  2    0[BANK0 ] unsigned int 
 14431 ;; Registers used:
 14432 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14433 ;; Tracked objects:
 14434 ;;		On entry : 0/0
 14435 ;;		On exit  : 0/0
 14436 ;;		Unchanged: 0/0
 14437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14439 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14440 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14441 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14442 ;;Total ram usage:        8 bytes
 14443 ;; Hardware stack levels used:    1
 14444 ;; Hardware stack levels required when called:   10
 14445 ;; This function calls:
 14446 ;;		Nothing
 14447 ;; This function is called by:
 14448 ;;		__get_available_cluster
 14449 ;;		__make_cluster_chain
 14450 ;; This function uses a non-reentrant model
 14451 ;;
 14452                           
 14453                           	psect	text47
 14454  0130D8                     __ptext47:
 14455                           	opt stack 0
 14456  0130D8                     __get_available_offset_from_buffer:
 14457                           	opt stack 16
 14458                           
 14459                           ;fat16.c: 100: uint16_t offset;;fat16.c: 102: for(offset = minimum_offset; offset<512; o
      +                          ffset += 2)
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;incstack = 0
 14463  0130D8  C060  F066         	movff	__get_available_offset_from_buffer@minimum_offset,__get_available_offset_from_buf
      +                          fer@offset
 14464  0130DC  C061  F067         	movff	__get_available_offset_from_buffer@minimum_offset+1,__get_available_offset_from_b
      +                          uffer@offset+1
 14465  0130E0  0E02               	movlw	2
 14466  0130E2  0100               	movlb	0	; () banked
 14467  0130E4  D022               	goto	L4
 14468  0130E6                     
 14469                           ; BSR set to: 0
 14470                           ;fat16.c: 103: {;fat16.c: 104: if((buffer[offset] == 0x00) && (buffer[offset + 1] == 0x0
      +                          0))
 14471                           
 14472                           ; BSR set to: 0
 14473  0130E6  5166               	movf	__get_available_offset_from_buffer@offset& (0+255),w,b
 14474  0130E8  2562               	addwf	__get_available_offset_from_buffer@buffer& (0+255),w,b
 14475  0130EA  6ED9               	movwf	fsr2l,c
 14476  0130EC  5167               	movf	(__get_available_offset_from_buffer@offset+1)& (0+255),w,b
 14477  0130EE  2163               	addwfc	(__get_available_offset_from_buffer@buffer+1)& (0+255),w,b
 14478  0130F0  6EDA               	movwf	fsr2h,c
 14479  0130F2  50DF               	movf	indf2,w,c
 14480  0130F4  A4D8               	btfss	status,2,c
 14481  0130F6  D014               	goto	l1695
 14482                           
 14483                           ; BSR set to: 0
 14484  0130F8  0E01               	movlw	1
 14485  0130FA  2566               	addwf	__get_available_offset_from_buffer@offset& (0+255),w,b
 14486  0130FC  6F64               	movwf	??__get_available_offset_from_buffer& (0+255),b
 14487  0130FE  0E00               	movlw	0
 14488  013100  2167               	addwfc	(__get_available_offset_from_buffer@offset+1)& (0+255),w,b
 14489  013102  6F65               	movwf	(??__get_available_offset_from_buffer+1)& (0+255),b
 14490  013104  5164               	movf	??__get_available_offset_from_buffer& (0+255),w,b
 14491  013106  2562               	addwf	__get_available_offset_from_buffer@buffer& (0+255),w,b
 14492  013108  6ED9               	movwf	fsr2l,c
 14493  01310A  5165               	movf	(??__get_available_offset_from_buffer+1)& (0+255),w,b
 14494  01310C  2163               	addwfc	(__get_available_offset_from_buffer@buffer+1)& (0+255),w,b
 14495  01310E  6EDA               	movwf	fsr2h,c
 14496  013110  50DF               	movf	indf2,w,c
 14497  013112  A4D8               	btfss	status,2,c
 14498  013114  D005               	goto	l1695
 14499                           
 14500                           ; BSR set to: 0
 14501                           ;fat16.c: 105: {;fat16.c: 106: return offset;
 14502  013116  C066  F060         	movff	__get_available_offset_from_buffer@offset,?__get_available_offset_from_buffer
 14503  01311A  C067  F061         	movff	__get_available_offset_from_buffer@offset+1,?__get_available_offset_from_buffer+1
 14504  01311E  0012               	return	
 14505  013120                     l1695:
 14506                           
 14507                           ; BSR set to: 0
 14508                           
 14509                           ; BSR set to: 0
 14510  013120  0E02               	movlw	2
 14511  013122  2766               	addwf	__get_available_offset_from_buffer@offset& (0+255),f,b
 14512  013124  0E00               	movlw	0
 14513  013126  2367               	addwfc	(__get_available_offset_from_buffer@offset+1)& (0+255),f,b
 14514  013128  0E02               	movlw	2
 14515  01312A                     L4:
 14516  01312A  5D67               	subwf	(__get_available_offset_from_buffer@offset+1)& (0+255),w,b
 14517  01312C  A0D8               	btfss	status,0,c
 14518  01312E  D7DB               	goto	l1693
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;fat16.c: 107: };fat16.c: 108: };fat16.c: 111: return 0xFFFF;
 14522  013130  6960               	setf	?__get_available_offset_from_buffer& (0+255),b
 14523  013132  6961               	setf	(?__get_available_offset_from_buffer+1)& (0+255),b
 14524                           
 14525                           ; BSR set to: 0
 14526  013134  0012               	return		;funcret
 14527  013136                     __end_of__get_available_offset_from_buffer:
 14528                           	opt stack 0
 14529                           tblptru	equ	0xFF8
 14530                           tblptrh	equ	0xFF7
 14531                           tblptrl	equ	0xFF6
 14532                           tablat	equ	0xFF5
 14533                           prodh	equ	0xFF4
 14534                           prodl	equ	0xFF3
 14535                           postinc0	equ	0xFEE
 14536                           wreg	equ	0xFE8
 14537                           postinc1	equ	0xFE6
 14538                           postdec1	equ	0xFE5
 14539                           plusw1	equ	0xFE3
 14540                           fsr1h	equ	0xFE2
 14541                           fsr1l	equ	0xFE1
 14542                           indf2	equ	0xFDF
 14543                           postinc2	equ	0xFDE
 14544                           plusw2	equ	0xFDB
 14545                           fsr2h	equ	0xFDA
 14546                           fsr2l	equ	0xFD9
 14547                           status	equ	0xFD8
 14548                           
 14549 ;; *************** function __cluster_from_sector_and_offset *****************
 14550 ;; Defined at:
 14551 ;;		line 89 in file "fat16.c"
 14552 ;; Parameters:    Size  Location     Type
 14553 ;;  sector          2    0[BANK0 ] unsigned int 
 14554 ;;  offset          2    2[BANK0 ] unsigned int 
 14555 ;; Auto vars:     Size  Location     Type
 14556 ;;		None
 14557 ;; Return value:  Size  Location     Type
 14558 ;;                  2    0[BANK0 ] unsigned int 
 14559 ;; Registers used:
 14560 ;;		wreg, status,2, status,0
 14561 ;; Tracked objects:
 14562 ;;		On entry : 0/0
 14563 ;;		On exit  : 0/0
 14564 ;;		Unchanged: 0/0
 14565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14566 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14569 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14570 ;;Total ram usage:        4 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; Hardware stack levels required when called:   10
 14573 ;; This function calls:
 14574 ;;		Nothing
 14575 ;; This function is called by:
 14576 ;;		__get_available_cluster
 14577 ;; This function uses a non-reentrant model
 14578 ;;
 14579                           
 14580                           	psect	text48
 14581  0140A8                     __ptext48:
 14582                           	opt stack 0
 14583  0140A8                     __cluster_from_sector_and_offset:
 14584                           	opt stack 15
 14585                           
 14586                           ;fat16.c: 91: offset >>= 1;
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;incstack = 0
 14590  0140A8  0100               	movlb	0	; () banked
 14591  0140AA  90D8               	bcf	status,0,c
 14592  0140AC  3363               	rrcf	(__cluster_from_sector_and_offset@offset+1)& (0+255),f,b
 14593  0140AE  3362               	rrcf	__cluster_from_sector_and_offset@offset& (0+255),f,b
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;fat16.c: 92: sector -= 2;
 14597  0140B0  0E02               	movlw	2
 14598  0140B2  5F60               	subwf	__cluster_from_sector_and_offset@sector& (0+255),f,b
 14599  0140B4  0E00               	movlw	0
 14600  0140B6  5B61               	subwfb	(__cluster_from_sector_and_offset@sector+1)& (0+255),f,b
 14601                           
 14602                           ; BSR set to: 0
 14603                           ;fat16.c: 93: sector <<= 8;
 14604  0140B8  5160               	movf	__cluster_from_sector_and_offset@sector& (0+255),w,b
 14605  0140BA  6F61               	movwf	(__cluster_from_sector_and_offset@sector+1)& (0+255),b
 14606  0140BC  6B60               	clrf	__cluster_from_sector_and_offset@sector& (0+255),b
 14607                           
 14608                           ; BSR set to: 0
 14609                           ;fat16.c: 94: sector |= offset;
 14610  0140BE  5162               	movf	__cluster_from_sector_and_offset@offset& (0+255),w,b
 14611  0140C0  1360               	iorwf	__cluster_from_sector_and_offset@sector& (0+255),f,b
 14612  0140C2  5163               	movf	(__cluster_from_sector_and_offset@offset+1)& (0+255),w,b
 14613  0140C4  1361               	iorwf	(__cluster_from_sector_and_offset@sector+1)& (0+255),f,b
 14614                           
 14615                           ; BSR set to: 0
 14616                           ;fat16.c: 95: return sector;
 14617  0140C6  C060  F060         	movff	__cluster_from_sector_and_offset@sector,?__cluster_from_sector_and_offset
 14618  0140CA  C061  F061         	movff	__cluster_from_sector_and_offset@sector+1,?__cluster_from_sector_and_offset+1
 14619  0140CE  0012               	return	
 14620  0140D0                     __end_of__cluster_from_sector_and_offset:
 14621                           	opt stack 0
 14622                           tblptru	equ	0xFF8
 14623                           tblptrh	equ	0xFF7
 14624                           tblptrl	equ	0xFF6
 14625                           tablat	equ	0xFF5
 14626                           prodh	equ	0xFF4
 14627                           prodl	equ	0xFF3
 14628                           postinc0	equ	0xFEE
 14629                           wreg	equ	0xFE8
 14630                           postinc1	equ	0xFE6
 14631                           postdec1	equ	0xFE5
 14632                           plusw1	equ	0xFE3
 14633                           fsr1h	equ	0xFE2
 14634                           fsr1l	equ	0xFE1
 14635                           indf2	equ	0xFDF
 14636                           postinc2	equ	0xFDE
 14637                           plusw2	equ	0xFDB
 14638                           fsr2h	equ	0xFDA
 14639                           fsr2l	equ	0xFD9
 14640                           status	equ	0xFD8
 14641                           
 14642 ;; *************** function __fat_sector_from_cluster *****************
 14643 ;; Defined at:
 14644 ;;		line 75 in file "fat16.c"
 14645 ;; Parameters:    Size  Location     Type
 14646 ;;  cluster         2    0[BANK0 ] unsigned int 
 14647 ;; Auto vars:     Size  Location     Type
 14648 ;;		None
 14649 ;; Return value:  Size  Location     Type
 14650 ;;                  2    0[BANK0 ] unsigned int 
 14651 ;; Registers used:
 14652 ;;		wreg, status,2, status,0
 14653 ;; Tracked objects:
 14654 ;;		On entry : 0/0
 14655 ;;		On exit  : 0/0
 14656 ;;		Unchanged: 0/0
 14657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14658 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14661 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14662 ;;Total ram usage:        2 bytes
 14663 ;; Hardware stack levels used:    1
 14664 ;; Hardware stack levels required when called:   10
 14665 ;; This function calls:
 14666 ;;		Nothing
 14667 ;; This function is called by:
 14668 ;;		__find_nth_cluster
 14669 ;;		__make_cluster_chain
 14670 ;;		__read_fat
 14671 ;; This function uses a non-reentrant model
 14672 ;;
 14673                           
 14674                           	psect	text49
 14675  01422A                     __ptext49:
 14676                           	opt stack 0
 14677  01422A                     __fat_sector_from_cluster:
 14678                           	opt stack 16
 14679                           
 14680                           ;fat16.c: 77: cluster >>= 8;
 14681                           
 14682                           ; BSR set to: 0
 14683                           ;incstack = 0
 14684  01422A  0100               	movlb	0	; () banked
 14685  01422C  5161               	movf	(__fat_sector_from_cluster@cluster+1)& (0+255),w,b
 14686  01422E  6F60               	movwf	__fat_sector_from_cluster@cluster& (0+255),b
 14687  014230  6B61               	clrf	(__fat_sector_from_cluster@cluster+1)& (0+255),b
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;fat16.c: 78: cluster += 2;
 14691  014232  0E02               	movlw	2
 14692  014234  2760               	addwf	__fat_sector_from_cluster@cluster& (0+255),f,b
 14693  014236  0E00               	movlw	0
 14694  014238  2361               	addwfc	(__fat_sector_from_cluster@cluster+1)& (0+255),f,b
 14695                           
 14696                           ; BSR set to: 0
 14697                           ;fat16.c: 79: return cluster;
 14698  01423A  C060  F060         	movff	__fat_sector_from_cluster@cluster,?__fat_sector_from_cluster
 14699  01423E  C061  F061         	movff	__fat_sector_from_cluster@cluster+1,?__fat_sector_from_cluster+1
 14700  014242  0012               	return	
 14701  014244                     __end_of__fat_sector_from_cluster:
 14702                           	opt stack 0
 14703                           tblptru	equ	0xFF8
 14704                           tblptrh	equ	0xFF7
 14705                           tblptrl	equ	0xFF6
 14706                           tablat	equ	0xFF5
 14707                           prodh	equ	0xFF4
 14708                           prodl	equ	0xFF3
 14709                           postinc0	equ	0xFEE
 14710                           wreg	equ	0xFE8
 14711                           postinc1	equ	0xFE6
 14712                           postdec1	equ	0xFE5
 14713                           plusw1	equ	0xFE3
 14714                           fsr1h	equ	0xFE2
 14715                           fsr1l	equ	0xFE1
 14716                           indf2	equ	0xFDF
 14717                           postinc2	equ	0xFDE
 14718                           plusw2	equ	0xFDB
 14719                           fsr2h	equ	0xFDA
 14720                           fsr2l	equ	0xFD9
 14721                           status	equ	0xFD8
 14722                           
 14723 ;; *************** function __fat_offset_from_cluster *****************
 14724 ;; Defined at:
 14725 ;;		line 82 in file "fat16.c"
 14726 ;; Parameters:    Size  Location     Type
 14727 ;;  cluster         2    0[BANK0 ] unsigned int 
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;		None
 14730 ;; Return value:  Size  Location     Type
 14731 ;;                  2    0[BANK0 ] unsigned int 
 14732 ;; Registers used:
 14733 ;;		wreg, status,2, status,0
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14739 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14743 ;;Total ram usage:        2 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; Hardware stack levels required when called:   10
 14746 ;; This function calls:
 14747 ;;		Nothing
 14748 ;; This function is called by:
 14749 ;;		__find_nth_cluster
 14750 ;;		__make_cluster_chain
 14751 ;;		__read_fat
 14752 ;; This function uses a non-reentrant model
 14753 ;;
 14754                           
 14755                           	psect	text50
 14756  014244                     __ptext50:
 14757                           	opt stack 0
 14758  014244                     __fat_offset_from_cluster:
 14759                           	opt stack 16
 14760                           
 14761                           ;fat16.c: 84: cluster &= 0xFF;
 14762                           
 14763                           ; BSR set to: 0
 14764                           ;incstack = 0
 14765  014244  0EFF               	movlw	255
 14766  014246  0100               	movlb	0	; () banked
 14767  014248  1760               	andwf	__fat_offset_from_cluster@cluster& (0+255),f,b
 14768  01424A  0E00               	movlw	0
 14769  01424C  1761               	andwf	(__fat_offset_from_cluster@cluster+1)& (0+255),f,b
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;fat16.c: 85: cluster <<= 1;
 14773  01424E  90D8               	bcf	status,0,c
 14774  014250  3760               	rlcf	__fat_offset_from_cluster@cluster& (0+255),f,b
 14775  014252  3761               	rlcf	(__fat_offset_from_cluster@cluster+1)& (0+255),f,b
 14776                           
 14777                           ; BSR set to: 0
 14778                           ;fat16.c: 86: return cluster;
 14779  014254  C060  F060         	movff	__fat_offset_from_cluster@cluster,?__fat_offset_from_cluster
 14780  014258  C061  F061         	movff	__fat_offset_from_cluster@cluster+1,?__fat_offset_from_cluster+1
 14781  01425C  0012               	return	
 14782  01425E                     __end_of__fat_offset_from_cluster:
 14783                           	opt stack 0
 14784                           tblptru	equ	0xFF8
 14785                           tblptrh	equ	0xFF7
 14786                           tblptrl	equ	0xFF6
 14787                           tablat	equ	0xFF5
 14788                           prodh	equ	0xFF4
 14789                           prodl	equ	0xFF3
 14790                           postinc0	equ	0xFEE
 14791                           wreg	equ	0xFE8
 14792                           postinc1	equ	0xFE6
 14793                           postdec1	equ	0xFE5
 14794                           plusw1	equ	0xFE3
 14795                           fsr1h	equ	0xFE2
 14796                           fsr1l	equ	0xFE1
 14797                           indf2	equ	0xFDF
 14798                           postinc2	equ	0xFDE
 14799                           plusw2	equ	0xFDB
 14800                           fsr2h	equ	0xFDA
 14801                           fsr2l	equ	0xFD9
 14802                           status	equ	0xFD8
 14803                           
 14804 ;; *************** function __get_time *****************
 14805 ;; Defined at:
 14806 ;;		line 376 in file "fat16.c"
 14807 ;; Parameters:    Size  Location     Type
 14808 ;;		None
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;		None
 14811 ;; Return value:  Size  Location     Type
 14812 ;;                  2    0[BANK0 ] unsigned int 
 14813 ;; Registers used:
 14814 ;;		wreg, status,2
 14815 ;; Tracked objects:
 14816 ;;		On entry : 0/0
 14817 ;;		On exit  : 0/0
 14818 ;;		Unchanged: 0/0
 14819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14820 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14823 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14824 ;;Total ram usage:        2 bytes
 14825 ;; Hardware stack levels used:    1
 14826 ;; Hardware stack levels required when called:   10
 14827 ;; This function calls:
 14828 ;;		Nothing
 14829 ;; This function is called by:
 14830 ;;		_fat_create_file
 14831 ;; This function uses a non-reentrant model
 14832 ;;
 14833                           
 14834                           	psect	text51
 14835  0142F2                     __ptext51:
 14836                           	opt stack 0
 14837  0142F2                     __get_time:
 14838                           	opt stack 17
 14839                           
 14840                           ;fat16.c: 388: return 0x0000;
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;incstack = 0
 14844  0142F2  0E00               	movlw	0
 14845  0142F4  0100               	movlb	0	; () banked
 14846  0142F6  6F61               	movwf	(?__get_time+1)& (0+255),b
 14847  0142F8  0E00               	movlw	0
 14848  0142FA  6F60               	movwf	?__get_time& (0+255),b
 14849  0142FC  0012               	return	
 14850  0142FE                     __end_of__get_time:
 14851                           	opt stack 0
 14852                           tblptru	equ	0xFF8
 14853                           tblptrh	equ	0xFF7
 14854                           tblptrl	equ	0xFF6
 14855                           tablat	equ	0xFF5
 14856                           prodh	equ	0xFF4
 14857                           prodl	equ	0xFF3
 14858                           postinc0	equ	0xFEE
 14859                           wreg	equ	0xFE8
 14860                           postinc1	equ	0xFE6
 14861                           postdec1	equ	0xFE5
 14862                           plusw1	equ	0xFE3
 14863                           fsr1h	equ	0xFE2
 14864                           fsr1l	equ	0xFE1
 14865                           indf2	equ	0xFDF
 14866                           postinc2	equ	0xFDE
 14867                           plusw2	equ	0xFDB
 14868                           fsr2h	equ	0xFDA
 14869                           fsr2l	equ	0xFD9
 14870                           status	equ	0xFD8
 14871                           
 14872 ;; *************** function __get_date *****************
 14873 ;; Defined at:
 14874 ;;		line 392 in file "fat16.c"
 14875 ;; Parameters:    Size  Location     Type
 14876 ;;		None
 14877 ;; Auto vars:     Size  Location     Type
 14878 ;;		None
 14879 ;; Return value:  Size  Location     Type
 14880 ;;                  2    0[BANK0 ] unsigned int 
 14881 ;; Registers used:
 14882 ;;		wreg, status,2
 14883 ;; Tracked objects:
 14884 ;;		On entry : 0/0
 14885 ;;		On exit  : 0/0
 14886 ;;		Unchanged: 0/0
 14887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14888 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14891 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14892 ;;Total ram usage:        2 bytes
 14893 ;; Hardware stack levels used:    1
 14894 ;; Hardware stack levels required when called:   10
 14895 ;; This function calls:
 14896 ;;		Nothing
 14897 ;; This function is called by:
 14898 ;;		_fat_create_file
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           	psect	text52
 14903  0142FE                     __ptext52:
 14904                           	opt stack 0
 14905  0142FE                     __get_date:
 14906                           	opt stack 17
 14907                           
 14908                           ;fat16.c: 404: return 0x0000;
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;incstack = 0
 14912  0142FE  0E00               	movlw	0
 14913  014300  0100               	movlb	0	; () banked
 14914  014302  6F61               	movwf	(?__get_date+1)& (0+255),b
 14915  014304  0E00               	movlw	0
 14916  014306  6F60               	movwf	?__get_date& (0+255),b
 14917  014308  0012               	return	
 14918  01430A                     __end_of__get_date:
 14919                           	opt stack 0
 14920                           tblptru	equ	0xFF8
 14921                           tblptrh	equ	0xFF7
 14922                           tblptrl	equ	0xFF6
 14923                           tablat	equ	0xFF5
 14924                           prodh	equ	0xFF4
 14925                           prodl	equ	0xFF3
 14926                           postinc0	equ	0xFEE
 14927                           wreg	equ	0xFE8
 14928                           postinc1	equ	0xFE6
 14929                           postdec1	equ	0xFE5
 14930                           plusw1	equ	0xFE3
 14931                           fsr1h	equ	0xFE2
 14932                           fsr1l	equ	0xFE1
 14933                           indf2	equ	0xFDF
 14934                           postinc2	equ	0xFDE
 14935                           plusw2	equ	0xFDB
 14936                           fsr2h	equ	0xFDA
 14937                           fsr2l	equ	0xFD9
 14938                           status	equ	0xFD8
 14939                           
 14940 ;; *************** function __get_available_root_entry *****************
 14941 ;; Defined at:
 14942 ;;		line 442 in file "fat16.c"
 14943 ;; Parameters:    Size  Location     Type
 14944 ;;		None
 14945 ;; Auto vars:     Size  Location     Type
 14946 ;;  file_number     1   53[BANK0 ] unsigned char 
 14947 ;; Return value:  Size  Location     Type
 14948 ;;                  1    wreg      unsigned char 
 14949 ;; Registers used:
 14950 ;;		wreg, status,2, status,0, cstack
 14951 ;; Tracked objects:
 14952 ;;		On entry : 0/0
 14953 ;;		On exit  : 0/0
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 14956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14959 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 14960 ;;Total ram usage:        1 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:   16
 14963 ;; This function calls:
 14964 ;;		__root_is_available
 14965 ;; This function is called by:
 14966 ;;		_fat_create_file
 14967 ;; This function uses a non-reentrant model
 14968 ;;
 14969                           
 14970                           	psect	text53
 14971  014054                     __ptext53:
 14972                           	opt stack 0
 14973  014054                     __get_available_root_entry:
 14974                           	opt stack 11
 14975                           
 14976                           ;fat16.c: 444: uint8_t file_number;;fat16.c: 446: for(file_number=0; file_number<64; ++f
      +                          ile_number)
 14977                           
 14978                           ; BSR set to: 0
 14979                           ;incstack = 0
 14980  014054  0E00               	movlw	0
 14981  014056  0100               	movlb	0	; () banked
 14982  014058  6F95               	movwf	__get_available_root_entry@file_number& (0+255),b
 14983  01405A                     l19686:
 14984                           
 14985                           ; BSR set to: 0
 14986  01405A  0E3F               	movlw	63
 14987  01405C  6595               	cpfsgt	__get_available_root_entry@file_number& (0+255),b
 14988  01405E  D001               	goto	l1766
 14989  014060  D00C               	goto	u19590
 14990  014062                     l1766:
 14991                           
 14992                           ; BSR set to: 0
 14993                           ;fat16.c: 447: {;fat16.c: 448: if(_root_is_available(file_number))
 14994                           
 14995                           ; BSR set to: 0
 14996  014062  5195               	movf	__get_available_root_entry@file_number& (0+255),w,b
 14997  014064  ECD8  F096         	call	__root_is_available
 14998  014068  0900               	iorlw	0
 14999  01406A  B4D8               	btfsc	status,2,c
 15000  01406C  D003               	goto	l1768
 15001                           
 15002                           ;fat16.c: 449: {;fat16.c: 450: return file_number;
 15003  01406E  0100               	movlb	0	; () banked
 15004  014070  5195               	movf	__get_available_root_entry@file_number& (0+255),w,b
 15005                           
 15006                           ; BSR set to: 0
 15007  014072  0012               	return	
 15008  014074                     l1768:
 15009                           
 15010                           ; BSR set to: 0
 15011  014074  0100               	movlb	0	; () banked
 15012  014076  2B95               	incf	__get_available_root_entry@file_number& (0+255),f,b
 15013  014078  D7F0               	goto	l19686
 15014  01407A                     u19590:
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;fat16.c: 451: };fat16.c: 452: };fat16.c: 453: return 0xFF;
 15018                           
 15019                           ; BSR set to: 0
 15020  01407A  0EFF               	movlw	255
 15021  01407C  0012               	return	
 15022  01407E                     __end_of__get_available_root_entry:
 15023                           	opt stack 0
 15024                           tblptru	equ	0xFF8
 15025                           tblptrh	equ	0xFF7
 15026                           tblptrl	equ	0xFF6
 15027                           tablat	equ	0xFF5
 15028                           prodh	equ	0xFF4
 15029                           prodl	equ	0xFF3
 15030                           postinc0	equ	0xFEE
 15031                           wreg	equ	0xFE8
 15032                           postinc1	equ	0xFE6
 15033                           postdec1	equ	0xFE5
 15034                           plusw1	equ	0xFE3
 15035                           fsr1h	equ	0xFE2
 15036                           fsr1l	equ	0xFE1
 15037                           indf2	equ	0xFDF
 15038                           postinc2	equ	0xFDE
 15039                           plusw2	equ	0xFDB
 15040                           fsr2h	equ	0xFDA
 15041                           fsr2l	equ	0xFD9
 15042                           status	equ	0xFD8
 15043                           
 15044 ;; *************** function __root_is_available *****************
 15045 ;; Defined at:
 15046 ;;		line 408 in file "fat16.c"
 15047 ;; Parameters:    Size  Location     Type
 15048 ;;  file_number     1    wreg     unsigned char 
 15049 ;; Auto vars:     Size  Location     Type
 15050 ;;  file_number     1   51[BANK0 ] unsigned char 
 15051 ;;  offset          2   49[BANK0 ] unsigned int 
 15052 ;;  root_sector     2   47[BANK0 ] unsigned int 
 15053 ;;  first_byte      1   52[BANK0 ] unsigned char 
 15054 ;; Return value:  Size  Location     Type
 15055 ;;                  1    wreg      unsigned char 
 15056 ;; Registers used:
 15057 ;;		wreg, status,2, status,0, cstack
 15058 ;; Tracked objects:
 15059 ;;		On entry : 0/0
 15060 ;;		On exit  : 0/0
 15061 ;;		Unchanged: 0/0
 15062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15064 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15066 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15067 ;;Total ram usage:        6 bytes
 15068 ;; Hardware stack levels used:    1
 15069 ;; Hardware stack levels required when called:   15
 15070 ;; This function calls:
 15071 ;;		__offset_from_file_number
 15072 ;;		__sector_from_file_number
 15073 ;;		_flash_partial_read
 15074 ;; This function is called by:
 15075 ;;		__get_available_root_entry
 15076 ;;		_fat_resize_file
 15077 ;;		_fat_get_file_size
 15078 ;;		_fat_delete_file
 15079 ;;		_fat_append_to_file
 15080 ;;		_fat_copy_file
 15081 ;;		_fat_copy_sector_to_buffer
 15082 ;;		_fat_write_sector_from_buffer
 15083 ;; This function uses a non-reentrant model
 15084 ;;
 15085                           
 15086                           	psect	text54
 15087  012DB0                     __ptext54:
 15088                           	opt stack 0
 15089  012DB0                     __root_is_available:
 15090                           	opt stack 12
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;incstack = 0
 15094                           ;__root_is_available@file_number stored from wreg
 15095  012DB0  0100               	movlb	0	; () banked
 15096  012DB2  6F93               	movwf	__root_is_available@file_number& (0+255),b
 15097                           
 15098                           ;fat16.c: 410: uint16_t root_sector;;fat16.c: 411: uint16_t offset;;fat16.c: 412: uint8_
      +                          t first_byte;;fat16.c: 416: if(file_number>=64)
 15099  012DB4  0E3F               	movlw	63
 15100  012DB6  0100               	movlb	0	; () banked
 15101  012DB8  6593               	cpfsgt	__root_is_available@file_number& (0+255),b
 15102  012DBA  D002               	goto	l1758
 15103                           
 15104                           ; BSR set to: 0
 15105                           ;fat16.c: 417: {;fat16.c: 419: return 0;
 15106  012DBC  0E00               	movlw	0
 15107                           
 15108                           ; BSR set to: 0
 15109  012DBE  0012               	return	
 15110  012DC0                     l1758:
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;fat16.c: 420: };fat16.c: 423: root_sector = _sector_from_file_number(file_number);
 15114                           
 15115                           ; BSR set to: 0
 15116  012DC0  5193               	movf	__root_is_available@file_number& (0+255),w,b
 15117  012DC2  EC46  F09F         	call	__sector_from_file_number
 15118  012DC6  C060  F08F         	movff	?__sector_from_file_number,__root_is_available@root_sector
 15119  012DCA  C061  F090         	movff	?__sector_from_file_number+1,__root_is_available@root_sector+1
 15120                           
 15121                           ;fat16.c: 424: offset = _offset_from_file_number(file_number);
 15122  012DCE  0100               	movlb	0	; () banked
 15123  012DD0  5193               	movf	__root_is_available@file_number& (0+255),w,b
 15124  012DD2  EC3F  F0A0         	call	__offset_from_file_number
 15125  012DD6  C060  F091         	movff	?__offset_from_file_number,__root_is_available@offset
 15126  012DDA  C061  F092         	movff	?__offset_from_file_number+1,__root_is_available@offset+1
 15127                           
 15128                           ;fat16.c: 427: flash_partial_read(root_sector, offset, 1, &first_byte);
 15129  012DDE  C08F  F087         	movff	__root_is_available@root_sector,flash_partial_read@page
 15130  012DE2  C090  F088         	movff	__root_is_available@root_sector+1,flash_partial_read@page+1
 15131  012DE6  C091  F089         	movff	__root_is_available@offset,flash_partial_read@start
 15132  012DEA  C092  F08A         	movff	__root_is_available@offset+1,flash_partial_read@start+1
 15133  012DEE  0E00               	movlw	0
 15134  012DF0  0100               	movlb	0	; () banked
 15135  012DF2  6F8C               	movwf	(flash_partial_read@length+1)& (0+255),b
 15136  012DF4  0E01               	movlw	1
 15137  012DF6  6F8B               	movwf	flash_partial_read@length& (0+255),b
 15138  012DF8  0E94               	movlw	low __root_is_available@first_byte
 15139  012DFA  6F8D               	movwf	flash_partial_read@data& (0+255),b
 15140  012DFC  0E00               	movlw	high __root_is_available@first_byte
 15141  012DFE  6F8E               	movwf	(flash_partial_read@data+1)& (0+255),b
 15142  012E00  EC7C  F0A0         	call	_flash_partial_read	;wreg free
 15143                           
 15144                           ;fat16.c: 430: if((first_byte==0x00) || (first_byte==0xE5))
 15145  012E04  0100               	movlb	0	; () banked
 15146  012E06  5194               	movf	__root_is_available@first_byte& (0+255),w,b
 15147  012E08  B4D8               	btfsc	status,2,c
 15148  012E0A  D004               	goto	u19210
 15149                           
 15150                           ; BSR set to: 0
 15151  012E0C  0EE5               	movlw	229
 15152  012E0E  1994               	xorwf	__root_is_available@first_byte& (0+255),w,b
 15153  012E10  A4D8               	btfss	status,2,c
 15154  012E12  D002               	goto	l1760
 15155  012E14                     u19210:
 15156                           
 15157                           ; BSR set to: 0
 15158                           ;fat16.c: 431: {;fat16.c: 433: return 1;
 15159                           
 15160                           ; BSR set to: 0
 15161  012E14  0E01               	movlw	1
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;fat16.c: 434: }
 15165                           
 15166                           ; BSR set to: 0
 15167  012E16  0012               	return	
 15168  012E18                     l1760:
 15169                           
 15170                           ; BSR set to: 0
 15171                           ;fat16.c: 435: else;fat16.c: 436: {;fat16.c: 438: return 0;
 15172                           
 15173                           ; BSR set to: 0
 15174  012E18  0E00               	movlw	0
 15175                           
 15176                           ; BSR set to: 0
 15177  012E1A  0012               	return	
 15178  012E1C                     __end_of__root_is_available:
 15179                           	opt stack 0
 15180                           tblptru	equ	0xFF8
 15181                           tblptrh	equ	0xFF7
 15182                           tblptrl	equ	0xFF6
 15183                           tablat	equ	0xFF5
 15184                           prodh	equ	0xFF4
 15185                           prodl	equ	0xFF3
 15186                           postinc0	equ	0xFEE
 15187                           wreg	equ	0xFE8
 15188                           postinc1	equ	0xFE6
 15189                           postdec1	equ	0xFE5
 15190                           plusw1	equ	0xFE3
 15191                           fsr1h	equ	0xFE2
 15192                           fsr1l	equ	0xFE1
 15193                           indf2	equ	0xFDF
 15194                           postinc2	equ	0xFDE
 15195                           plusw2	equ	0xFDB
 15196                           fsr2h	equ	0xFDA
 15197                           fsr2l	equ	0xFD9
 15198                           status	equ	0xFD8
 15199                           
 15200 ;; *************** function _flash_partial_read *****************
 15201 ;; Defined at:
 15202 ;;		line 452 in file "flash.c"
 15203 ;; Parameters:    Size  Location     Type
 15204 ;;  page            2   39[BANK0 ] unsigned int 
 15205 ;;  start           2   41[BANK0 ] unsigned int 
 15206 ;;  length          2   43[BANK0 ] unsigned int 
 15207 ;;  data            2   45[BANK0 ] PTR unsigned char 
 15208 ;;		 -> fat_modify_file@root(32), fat_resize_file@root(32), fat_read_from_file@root(32), fat_rename_file@root(32), 
 15209 ;;		 -> fat_get_file_size@file_size(4), _get_first_cluster@first_cluster(2), _read_fat@value(2), _root_is_available@firs
      +t_byte(1), 
 15210 ;; Auto vars:     Size  Location     Type
 15211 ;;		None
 15212 ;; Return value:  Size  Location     Type
 15213 ;;                  1    wreg      void 
 15214 ;; Registers used:
 15215 ;;		wreg, status,2, status,0, cstack
 15216 ;; Tracked objects:
 15217 ;;		On entry : 0/0
 15218 ;;		On exit  : 0/0
 15219 ;;		Unchanged: 0/0
 15220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15221 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15224 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15225 ;;Total ram usage:        8 bytes
 15226 ;; Hardware stack levels used:    1
 15227 ;; Hardware stack levels required when called:   14
 15228 ;; This function calls:
 15229 ;;		__flash_partial_read
 15230 ;; This function is called by:
 15231 ;;		__root_is_available
 15232 ;;		__read_fat
 15233 ;;		_fat_get_file_information
 15234 ;;		__get_first_cluster
 15235 ;;		_fat_get_file_size
 15236 ;;		_fat_read_from_file_fast
 15237 ;; This function uses a non-reentrant model
 15238 ;;
 15239                           
 15240                           	psect	text55
 15241  0140F8                     __ptext55:
 15242                           	opt stack 0
 15243  0140F8                     _flash_partial_read:
 15244                           	opt stack 12
 15245                           
 15246                           ;flash.c: 455: _flash_partial_read(page, start, length, data);
 15247                           
 15248                           ; BSR set to: 0
 15249                           ;incstack = 0
 15250  0140F8  C087  F073         	movff	flash_partial_read@page,__flash_partial_read@page
 15251  0140FC  C088  F074         	movff	flash_partial_read@page+1,__flash_partial_read@page+1
 15252  014100  C089  F075         	movff	flash_partial_read@start,__flash_partial_read@start
 15253  014104  C08A  F076         	movff	flash_partial_read@start+1,__flash_partial_read@start+1
 15254  014108  C08B  F077         	movff	flash_partial_read@length,__flash_partial_read@length
 15255  01410C  C08C  F078         	movff	flash_partial_read@length+1,__flash_partial_read@length+1
 15256  014110  C08D  F079         	movff	flash_partial_read@data,__flash_partial_read@data
 15257  014114  C08E  F07A         	movff	flash_partial_read@data+1,__flash_partial_read@data+1
 15258  014118  EC4B  F095         	call	__flash_partial_read	;wreg free
 15259  01411C  0012               	return		;funcret
 15260  01411E                     __end_of_flash_partial_read:
 15261                           	opt stack 0
 15262                           tblptru	equ	0xFF8
 15263                           tblptrh	equ	0xFF7
 15264                           tblptrl	equ	0xFF6
 15265                           tablat	equ	0xFF5
 15266                           prodh	equ	0xFF4
 15267                           prodl	equ	0xFF3
 15268                           postinc0	equ	0xFEE
 15269                           wreg	equ	0xFE8
 15270                           postinc1	equ	0xFE6
 15271                           postdec1	equ	0xFE5
 15272                           plusw1	equ	0xFE3
 15273                           fsr1h	equ	0xFE2
 15274                           fsr1l	equ	0xFE1
 15275                           indf2	equ	0xFDF
 15276                           postinc2	equ	0xFDE
 15277                           plusw2	equ	0xFDB
 15278                           fsr2h	equ	0xFDA
 15279                           fsr2l	equ	0xFD9
 15280                           status	equ	0xFD8
 15281                           
 15282 ;; *************** function __sector_from_file_number *****************
 15283 ;; Defined at:
 15284 ;;		line 52 in file "fat16.c"
 15285 ;; Parameters:    Size  Location     Type
 15286 ;;  file_number     1    wreg     unsigned char 
 15287 ;; Auto vars:     Size  Location     Type
 15288 ;;  file_number     1    2[BANK0 ] unsigned char 
 15289 ;;  sector          2    3[BANK0 ] unsigned int 
 15290 ;; Return value:  Size  Location     Type
 15291 ;;                  2    0[BANK0 ] unsigned int 
 15292 ;; Registers used:
 15293 ;;		wreg, status,2, status,0
 15294 ;; Tracked objects:
 15295 ;;		On entry : 0/0
 15296 ;;		On exit  : 0/0
 15297 ;;		Unchanged: 0/0
 15298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15299 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15300 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15302 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15303 ;;Total ram usage:        5 bytes
 15304 ;; Hardware stack levels used:    1
 15305 ;; Hardware stack levels required when called:   10
 15306 ;; This function calls:
 15307 ;;		Nothing
 15308 ;; This function is called by:
 15309 ;;		__root_is_available
 15310 ;;		__write_root
 15311 ;;		_fat_get_file_information
 15312 ;;		__delete_root
 15313 ;;		__get_first_cluster
 15314 ;;		_fat_get_file_size
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           	psect	text56
 15319  013E8C                     __ptext56:
 15320                           	opt stack 0
 15321  013E8C                     __sector_from_file_number:
 15322                           	opt stack 16
 15323                           
 15324                           ;incstack = 0
 15325                           ;__sector_from_file_number@file_number stored from wreg
 15326  013E8C  0100               	movlb	0	; () banked
 15327  013E8E  6F62               	movwf	__sector_from_file_number@file_number& (0+255),b
 15328                           
 15329                           ;fat16.c: 54: uint16_t sector;;fat16.c: 55: sector = (uint16_t) file_number;
 15330  013E90  C062  F063         	movff	__sector_from_file_number@file_number,__sector_from_file_number@sector
 15331  013E94  0100               	movlb	0	; () banked
 15332  013E96  6B64               	clrf	(__sector_from_file_number@sector+1)& (0+255),b
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;fat16.c: 56: sector >>= 4;
 15336  013E98  3B63               	swapf	__sector_from_file_number@sector& (0+255),f,b
 15337  013E9A  3B64               	swapf	(__sector_from_file_number@sector+1)& (0+255),f,b
 15338  013E9C  0E0F               	movlw	15
 15339  013E9E  1763               	andwf	__sector_from_file_number@sector& (0+255),f,b
 15340  013EA0  5164               	movf	(__sector_from_file_number@sector+1)& (0+255),w,b
 15341  013EA2  0BF0               	andlw	240
 15342  013EA4  1363               	iorwf	__sector_from_file_number@sector& (0+255),f,b
 15343  013EA6  0E0F               	movlw	15
 15344  013EA8  1764               	andwf	(__sector_from_file_number@sector+1)& (0+255),f,b
 15345                           
 15346                           ; BSR set to: 0
 15347                           ;fat16.c: 57: sector += 34;
 15348  013EAA  0E22               	movlw	34
 15349  013EAC  2763               	addwf	__sector_from_file_number@sector& (0+255),f,b
 15350  013EAE  0E00               	movlw	0
 15351  013EB0  2364               	addwfc	(__sector_from_file_number@sector+1)& (0+255),f,b
 15352                           
 15353                           ; BSR set to: 0
 15354                           ;fat16.c: 58: return sector;
 15355  013EB2  C063  F060         	movff	__sector_from_file_number@sector,?__sector_from_file_number
 15356  013EB6  C064  F061         	movff	__sector_from_file_number@sector+1,?__sector_from_file_number+1
 15357  013EBA  0012               	return	
 15358  013EBC                     __end_of__sector_from_file_number:
 15359                           	opt stack 0
 15360                           tblptru	equ	0xFF8
 15361                           tblptrh	equ	0xFF7
 15362                           tblptrl	equ	0xFF6
 15363                           tablat	equ	0xFF5
 15364                           prodh	equ	0xFF4
 15365                           prodl	equ	0xFF3
 15366                           postinc0	equ	0xFEE
 15367                           wreg	equ	0xFE8
 15368                           postinc1	equ	0xFE6
 15369                           postdec1	equ	0xFE5
 15370                           plusw1	equ	0xFE3
 15371                           fsr1h	equ	0xFE2
 15372                           fsr1l	equ	0xFE1
 15373                           indf2	equ	0xFDF
 15374                           postinc2	equ	0xFDE
 15375                           plusw2	equ	0xFDB
 15376                           fsr2h	equ	0xFDA
 15377                           fsr2l	equ	0xFD9
 15378                           status	equ	0xFD8
 15379                           
 15380 ;; *************** function __offset_from_file_number *****************
 15381 ;; Defined at:
 15382 ;;		line 61 in file "fat16.c"
 15383 ;; Parameters:    Size  Location     Type
 15384 ;;  file_number     1    wreg     unsigned char 
 15385 ;; Auto vars:     Size  Location     Type
 15386 ;;  file_number     1    2[BANK0 ] unsigned char 
 15387 ;;  offset          2    3[BANK0 ] unsigned int 
 15388 ;; Return value:  Size  Location     Type
 15389 ;;                  2    0[BANK0 ] unsigned int 
 15390 ;; Registers used:
 15391 ;;		wreg, status,2, status,0
 15392 ;; Tracked objects:
 15393 ;;		On entry : 0/0
 15394 ;;		On exit  : 0/0
 15395 ;;		Unchanged: 0/0
 15396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15397 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15398 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15400 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15401 ;;Total ram usage:        5 bytes
 15402 ;; Hardware stack levels used:    1
 15403 ;; Hardware stack levels required when called:   10
 15404 ;; This function calls:
 15405 ;;		Nothing
 15406 ;; This function is called by:
 15407 ;;		__root_is_available
 15408 ;;		__write_root
 15409 ;;		_fat_get_file_information
 15410 ;;		__delete_root
 15411 ;;		__get_first_cluster
 15412 ;;		_fat_get_file_size
 15413 ;; This function uses a non-reentrant model
 15414 ;;
 15415                           
 15416                           	psect	text57
 15417  01407E                     __ptext57:
 15418                           	opt stack 0
 15419  01407E                     __offset_from_file_number:
 15420                           	opt stack 16
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;incstack = 0
 15424                           ;__offset_from_file_number@file_number stored from wreg
 15425  01407E  0100               	movlb	0	; () banked
 15426  014080  6F62               	movwf	__offset_from_file_number@file_number& (0+255),b
 15427                           
 15428                           ;fat16.c: 63: uint16_t offset;;fat16.c: 64: offset = file_number;
 15429  014082  C062  F063         	movff	__offset_from_file_number@file_number,__offset_from_file_number@offset
 15430  014086  0100               	movlb	0	; () banked
 15431  014088  6B64               	clrf	(__offset_from_file_number@offset+1)& (0+255),b
 15432                           
 15433                           ; BSR set to: 0
 15434                           ;fat16.c: 65: offset &= 0b1111;
 15435  01408A  0E0F               	movlw	15
 15436  01408C  1763               	andwf	__offset_from_file_number@offset& (0+255),f,b
 15437  01408E  0E00               	movlw	0
 15438  014090  1764               	andwf	(__offset_from_file_number@offset+1)& (0+255),f,b
 15439                           
 15440                           ; BSR set to: 0
 15441                           ;fat16.c: 66: offset <<= 5;
 15442  014092  0E05               	movlw	5
 15443  014094                     u18445:
 15444  014094  90D8               	bcf	status,0,c
 15445  014096  3763               	rlcf	__offset_from_file_number@offset& (0+255),f,b
 15446  014098  3764               	rlcf	(__offset_from_file_number@offset+1)& (0+255),f,b
 15447  01409A  2EE8               	decfsz	wreg,f,c
 15448  01409C  D7FB               	goto	u18445
 15449                           
 15450                           ; BSR set to: 0
 15451                           ;fat16.c: 67: return offset;
 15452  01409E  C063  F060         	movff	__offset_from_file_number@offset,?__offset_from_file_number
 15453  0140A2  C064  F061         	movff	__offset_from_file_number@offset+1,?__offset_from_file_number+1
 15454  0140A6  0012               	return	
 15455  0140A8                     __end_of__offset_from_file_number:
 15456                           	opt stack 0
 15457                           tblptru	equ	0xFF8
 15458                           tblptrh	equ	0xFF7
 15459                           tblptrl	equ	0xFF6
 15460                           tablat	equ	0xFF5
 15461                           prodh	equ	0xFF4
 15462                           prodl	equ	0xFF3
 15463                           postinc0	equ	0xFEE
 15464                           wreg	equ	0xFE8
 15465                           postinc1	equ	0xFE6
 15466                           postdec1	equ	0xFE5
 15467                           plusw1	equ	0xFE3
 15468                           fsr1h	equ	0xFE2
 15469                           fsr1l	equ	0xFE1
 15470                           indf2	equ	0xFDF
 15471                           postinc2	equ	0xFDE
 15472                           plusw2	equ	0xFDB
 15473                           fsr2h	equ	0xFDA
 15474                           fsr2l	equ	0xFD9
 15475                           status	equ	0xFD8
 15476                           
 15477 ;; *************** function __add_item *****************
 15478 ;; Defined at:
 15479 ;;		line 14 in file "config_file.c"
 15480 ;; Parameters:    Size  Location     Type
 15481 ;;  item_string     2   36[BANK0 ] PTR unsigned char 
 15482 ;;		 -> beep_duration_string(14), maximum_speed_manual_string(21), initial_speed_manual_string(21), maximum_speed_arc_st
      +ring(18), 
 15483 ;;		 -> initial_speed_arc_string(18), maximum_speed_string(14), minimum_speed_string(14), overshoot_cost_in_steps_string
      +(24), 
 15484 ;;		 -> overshoot_in_steps_string(19), inverse_direction_string(18), full_circle_in_steps_string(21), 
 15485 ;;  value           4   38[BANK0 ] long 
 15486 ;;  buffer          2   42[BANK0 ] PTR unsigned char 
 15487 ;;		 -> ConfigFile_buffer(512), 
 15488 ;; Auto vars:     Size  Location     Type
 15489 ;;  length          1   46[BANK0 ] unsigned char 
 15490 ;; Return value:  Size  Location     Type
 15491 ;;                  1    wreg      unsigned char 
 15492 ;; Registers used:
 15493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15494 ;; Tracked objects:
 15495 ;;		On entry : 0/0
 15496 ;;		On exit  : 0/0
 15497 ;;		Unchanged: 0/0
 15498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15499 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15501 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15502 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15503 ;;Total ram usage:       11 bytes
 15504 ;; Hardware stack levels used:    1
 15505 ;; Hardware stack levels required when called:   13
 15506 ;; This function calls:
 15507 ;;		_ltoa
 15508 ;; This function is called by:
 15509 ;;		_configFile_write
 15510 ;; This function uses a non-reentrant model
 15511 ;;
 15512                           
 15513                           	psect	text58
 15514  010FAA                     __ptext58:
 15515                           	opt stack 0
 15516  010FAA                     __add_item:
 15517                           	opt stack 15
 15518                           
 15519                           ;config_file.c: 16: uint8_t length = 0;
 15520                           
 15521                           ; BSR set to: 0
 15522                           ;incstack = 0
 15523  010FAA  0E00               	movlw	0
 15524  010FAC  0100               	movlb	0	; () banked
 15525  010FAE  6F8E               	movwf	__add_item@length& (0+255),b
 15526                           
 15527                           ;config_file.c: 19: while(item_string[length])
 15528  010FB0  D01C               	goto	l2749
 15529  010FB2                     
 15530                           ; BSR set to: 0
 15531                           ;config_file.c: 20: {;config_file.c: 21: buffer[length] = item_string[length];
 15532                           
 15533                           ; BSR set to: 0
 15534  010FB2  518E               	movf	__add_item@length& (0+255),w,b
 15535  010FB4  0D01               	mullw	1
 15536  010FB6  C084  F08C         	movff	__add_item@item_string,??__add_item
 15537  010FBA  C085  F08D         	movff	__add_item@item_string+1,??__add_item+1
 15538  010FBE  50F3               	movf	prodl,w,c
 15539  010FC0  278C               	addwf	??__add_item& (0+255),f,b
 15540  010FC2  50F4               	movf	prodh,w,c
 15541  010FC4  238D               	addwfc	(??__add_item+1)& (0+255),f,b
 15542  010FC6  C08C  FFF6         	movff	??__add_item,tblptrl
 15543  010FCA  C08D  FFF7         	movff	??__add_item+1,tblptrh
 15544  010FCE                     	if	0	;tblptru may be non-zero
 15545  010FCE                     	endif
 15546  010FCE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 15547  010FCE  0E00               	movlw	low (__mediumconst shr (0+16))
 15548  010FD0  6EF8               	movwf	tblptru,c
 15549  010FD2                     	endif
 15550  010FD2  518E               	movf	__add_item@length& (0+255),w,b
 15551  010FD4  0D01               	mullw	1
 15552  010FD6  50F3               	movf	prodl,w,c
 15553  010FD8  258A               	addwf	__add_item@buffer& (0+255),w,b
 15554  010FDA  6ED9               	movwf	fsr2l,c
 15555  010FDC  50F4               	movf	prodh,w,c
 15556  010FDE  218B               	addwfc	(__add_item@buffer+1)& (0+255),w,b
 15557  010FE0  6EDA               	movwf	fsr2h,c
 15558  010FE2  0008               	tblrd		*
 15559  010FE4  CFF5 FFDF          	movff	tablat,indf2
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;config_file.c: 22: ++length;
 15563  010FE8  2B8E               	incf	__add_item@length& (0+255),f,b
 15564  010FEA                     l2749:
 15565                           
 15566                           ; BSR set to: 0
 15567                           
 15568                           ; BSR set to: 0
 15569  010FEA  518E               	movf	__add_item@length& (0+255),w,b
 15570  010FEC  0D01               	mullw	1
 15571  010FEE  C084  F08C         	movff	__add_item@item_string,??__add_item
 15572  010FF2  C085  F08D         	movff	__add_item@item_string+1,??__add_item+1
 15573  010FF6  50F3               	movf	prodl,w,c
 15574  010FF8  278C               	addwf	??__add_item& (0+255),f,b
 15575  010FFA  50F4               	movf	prodh,w,c
 15576  010FFC  238D               	addwfc	(??__add_item+1)& (0+255),f,b
 15577  010FFE  C08C  FFF6         	movff	??__add_item,tblptrl
 15578  011002  C08D  FFF7         	movff	??__add_item+1,tblptrh
 15579  011006                     	if	0	;tblptru may be non-zero
 15580  011006                     	endif
 15581  011006                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 15582  011006  0E00               	movlw	low (__mediumconst shr (0+16))
 15583  011008  6EF8               	movwf	tblptru,c
 15584  01100A                     	endif
 15585  01100A  0008               	tblrd		*
 15586  01100C  50F5               	movf	tablat,w,c
 15587  01100E  0900               	iorlw	0
 15588  011010  A4D8               	btfss	status,2,c
 15589  011012  D7CF               	goto	l2750
 15590                           
 15591                           ; BSR set to: 0
 15592                           ;config_file.c: 23: };config_file.c: 26: buffer[length++] = '=';
 15593                           
 15594                           ; BSR set to: 0
 15595  011014  518E               	movf	__add_item@length& (0+255),w,b
 15596  011016  0D01               	mullw	1
 15597  011018  50F3               	movf	prodl,w,c
 15598  01101A  258A               	addwf	__add_item@buffer& (0+255),w,b
 15599  01101C  6ED9               	movwf	fsr2l,c
 15600  01101E  50F4               	movf	prodh,w,c
 15601  011020  218B               	addwfc	(__add_item@buffer+1)& (0+255),w,b
 15602  011022  6EDA               	movwf	fsr2h,c
 15603  011024  0E3D               	movlw	61
 15604  011026  6EDF               	movwf	indf2,c
 15605                           
 15606                           ; BSR set to: 0
 15607  011028  2B8E               	incf	__add_item@length& (0+255),f,b
 15608                           
 15609                           ; BSR set to: 0
 15610                           ;config_file.c: 29: ltoa(&buffer[length], value, 10);
 15611  01102A  518E               	movf	__add_item@length& (0+255),w,b
 15612  01102C  0D01               	mullw	1
 15613  01102E  50F3               	movf	prodl,w,c
 15614  011030  258A               	addwf	__add_item@buffer& (0+255),w,b
 15615  011032  6F7A               	movwf	ltoa@buf& (0+255),b
 15616  011034  50F4               	movf	prodh,w,c
 15617  011036  218B               	addwfc	(__add_item@buffer+1)& (0+255),w,b
 15618  011038  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 15619  01103A  C086  F07C         	movff	__add_item@value,ltoa@val
 15620  01103E  C087  F07D         	movff	__add_item@value+1,ltoa@val+1
 15621  011042  C088  F07E         	movff	__add_item@value+2,ltoa@val+2
 15622  011046  C089  F07F         	movff	__add_item@value+3,ltoa@val+3
 15623  01104A  0E00               	movlw	0
 15624  01104C  6F81               	movwf	(ltoa@base+1)& (0+255),b
 15625  01104E  0E0A               	movlw	10
 15626  011050  6F80               	movwf	ltoa@base& (0+255),b
 15627  011052  EC07  F09B         	call	_ltoa	;wreg free
 15628                           
 15629                           ;config_file.c: 30: while(buffer[length])
 15630  011056  D002               	goto	l2752
 15631  011058                     
 15632                           ;config_file.c: 31: {;config_file.c: 32: ++length;
 15633  011058  0100               	movlb	0	; () banked
 15634  01105A  2B8E               	incf	__add_item@length& (0+255),f,b
 15635  01105C                     l2752:
 15636                           
 15637                           ; BSR set to: 0
 15638  01105C  0100               	movlb	0	; () banked
 15639  01105E  518E               	movf	__add_item@length& (0+255),w,b
 15640  011060  0D01               	mullw	1
 15641  011062  50F3               	movf	prodl,w,c
 15642  011064  258A               	addwf	__add_item@buffer& (0+255),w,b
 15643  011066  6ED9               	movwf	fsr2l,c
 15644  011068  50F4               	movf	prodh,w,c
 15645  01106A  218B               	addwfc	(__add_item@buffer+1)& (0+255),w,b
 15646  01106C  6EDA               	movwf	fsr2h,c
 15647  01106E  50DF               	movf	indf2,w,c
 15648  011070  A4D8               	btfss	status,2,c
 15649  011072  D7F2               	goto	l2753
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;config_file.c: 33: };config_file.c: 36: buffer[length++] = '\n';
 15653                           
 15654                           ; BSR set to: 0
 15655  011074  518E               	movf	__add_item@length& (0+255),w,b
 15656  011076  0D01               	mullw	1
 15657  011078  50F3               	movf	prodl,w,c
 15658  01107A  258A               	addwf	__add_item@buffer& (0+255),w,b
 15659  01107C  6ED9               	movwf	fsr2l,c
 15660  01107E  50F4               	movf	prodh,w,c
 15661  011080  218B               	addwfc	(__add_item@buffer+1)& (0+255),w,b
 15662  011082  6EDA               	movwf	fsr2h,c
 15663  011084  0E0A               	movlw	10
 15664  011086  6EDF               	movwf	indf2,c
 15665                           
 15666                           ; BSR set to: 0
 15667  011088  2B8E               	incf	__add_item@length& (0+255),f,b
 15668                           
 15669                           ; BSR set to: 0
 15670                           ;config_file.c: 39: return length;
 15671  01108A  518E               	movf	__add_item@length& (0+255),w,b
 15672  01108C  0012               	return	
 15673  01108E                     __end_of__add_item:
 15674                           	opt stack 0
 15675                           tblptru	equ	0xFF8
 15676                           tblptrh	equ	0xFF7
 15677                           tblptrl	equ	0xFF6
 15678                           tablat	equ	0xFF5
 15679                           prodh	equ	0xFF4
 15680                           prodl	equ	0xFF3
 15681                           postinc0	equ	0xFEE
 15682                           wreg	equ	0xFE8
 15683                           postinc1	equ	0xFE6
 15684                           postdec1	equ	0xFE5
 15685                           plusw1	equ	0xFE3
 15686                           fsr1h	equ	0xFE2
 15687                           fsr1l	equ	0xFE1
 15688                           indf2	equ	0xFDF
 15689                           postinc2	equ	0xFDE
 15690                           plusw2	equ	0xFDB
 15691                           fsr2h	equ	0xFDA
 15692                           fsr2l	equ	0xFD9
 15693                           status	equ	0xFD8
 15694                           
 15695 ;; *************** function _ltoa *****************
 15696 ;; Defined at:
 15697 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 15700 ;;		 -> ConfigFile_buffer(512), 
 15701 ;;  val             4   28[BANK0 ] long 
 15702 ;;  base            2   32[BANK0 ] int 
 15703 ;; Auto vars:     Size  Location     Type
 15704 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 15705 ;;		 -> ConfigFile_buffer(512), 
 15706 ;; Return value:  Size  Location     Type
 15707 ;;                  2   26[BANK0 ] PTR unsigned char 
 15708 ;; Registers used:
 15709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15710 ;; Tracked objects:
 15711 ;;		On entry : 0/0
 15712 ;;		On exit  : 0/0
 15713 ;;		Unchanged: 0/0
 15714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15715 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15716 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15718 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15719 ;;Total ram usage:       10 bytes
 15720 ;; Hardware stack levels used:    1
 15721 ;; Hardware stack levels required when called:   12
 15722 ;; This function calls:
 15723 ;;		_ultoa
 15724 ;; This function is called by:
 15725 ;;		__add_item
 15726 ;; This function uses a non-reentrant model
 15727 ;;
 15728                           
 15729                           	psect	text59
 15730  01360E                     __ptext59:
 15731                           	opt stack 0
 15732  01360E                     _ltoa:
 15733                           	opt stack 15
 15734                           
 15735                           ; BSR set to: 0
 15736                           ;incstack = 0
 15737  01360E  C07A  F082         	movff	ltoa@buf,ltoa@cp
 15738  013612  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 15739  013616  0100               	movlb	0	; () banked
 15740  013618  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 15741  01361A  D010               	goto	l3466
 15742                           
 15743                           ; BSR set to: 0
 15744  01361C  C07A  FFD9         	movff	ltoa@buf,fsr2l
 15745  013620  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 15746  013624  0E2D               	movlw	45
 15747  013626  6EDF               	movwf	indf2,c
 15748                           
 15749                           ; BSR set to: 0
 15750  013628  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 15751  01362A  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 15752                           
 15753                           ; BSR set to: 0
 15754  01362C  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 15755  01362E  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 15756  013630  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 15757  013632  6D7C               	negf	ltoa@val& (0+255),b
 15758  013634  0E00               	movlw	0
 15759  013636  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 15760  013638  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 15761  01363A  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 15762  01363C                     l3466:
 15763                           
 15764                           ; BSR set to: 0
 15765                           
 15766                           ; BSR set to: 0
 15767  01363C  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 15768  013640  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 15769  013644  C07C  F06F         	movff	ltoa@val,ultoa@val
 15770  013648  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 15771  01364C  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 15772  013650  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 15773  013654  C080  F073         	movff	ltoa@base,ultoa@base
 15774  013658  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 15775  01365C  ECF7  F084         	call	_ultoa	;wreg free
 15776  013660  0012               	return	
 15777  013662                     __end_of_ltoa:
 15778                           	opt stack 0
 15779                           tblptru	equ	0xFF8
 15780                           tblptrh	equ	0xFF7
 15781                           tblptrl	equ	0xFF6
 15782                           tablat	equ	0xFF5
 15783                           prodh	equ	0xFF4
 15784                           prodl	equ	0xFF3
 15785                           postinc0	equ	0xFEE
 15786                           wreg	equ	0xFE8
 15787                           postinc1	equ	0xFE6
 15788                           postdec1	equ	0xFE5
 15789                           plusw1	equ	0xFE3
 15790                           fsr1h	equ	0xFE2
 15791                           fsr1l	equ	0xFE1
 15792                           indf2	equ	0xFDF
 15793                           postinc2	equ	0xFDE
 15794                           plusw2	equ	0xFDB
 15795                           fsr2h	equ	0xFDA
 15796                           fsr2l	equ	0xFD9
 15797                           status	equ	0xFD8
 15798                           
 15799 ;; *************** function _ultoa *****************
 15800 ;; Defined at:
 15801 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\ltoa.c"
 15802 ;; Parameters:    Size  Location     Type
 15803 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 15804 ;;		 -> ConfigFile_buffer(512), 
 15805 ;;  val             4   15[BANK0 ] unsigned long 
 15806 ;;  base            2   19[BANK0 ] int 
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;  v               4   21[BANK0 ] unsigned long 
 15809 ;;  c               1   25[BANK0 ] unsigned char 
 15810 ;; Return value:  Size  Location     Type
 15811 ;;                  2   13[BANK0 ] PTR unsigned char 
 15812 ;; Registers used:
 15813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15814 ;; Tracked objects:
 15815 ;;		On entry : 0/0
 15816 ;;		On exit  : 0/0
 15817 ;;		Unchanged: 0/0
 15818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15819 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15820 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15822 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15823 ;;Total ram usage:       13 bytes
 15824 ;; Hardware stack levels used:    1
 15825 ;; Hardware stack levels required when called:   11
 15826 ;; This function calls:
 15827 ;;		___lldiv
 15828 ;;		___llmod
 15829 ;; This function is called by:
 15830 ;;		_ltoa
 15831 ;; This function uses a non-reentrant model
 15832 ;;
 15833                           
 15834                           	psect	text60
 15835  0109EE                     __ptext60:
 15836                           	opt stack 0
 15837  0109EE                     _ultoa:
 15838                           	opt stack 15
 15839                           
 15840                           ;incstack = 0
 15841  0109EE  C06F  F075         	movff	ultoa@val,ultoa@v
 15842  0109F2  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 15843  0109F6  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 15844  0109FA  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 15845  0109FE  C075  F060         	movff	ultoa@v,___lldiv@dividend
 15846  010A02  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 15847  010A06  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 15848  010A0A  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 15849  010A0E  C073  F064         	movff	ultoa@base,___lldiv@divisor
 15850  010A12  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 15851  010A16  0100               	movlb	0	; () banked
 15852  010A18  0E00               	movlw	0
 15853  010A1A  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 15854  010A1C  0EFF               	movlw	-1
 15855  010A1E  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 15856  010A20  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 15857  010A22  EC10  F094         	call	___lldiv	;wreg free
 15858  010A26  C060  F075         	movff	?___lldiv,ultoa@v
 15859  010A2A  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 15860  010A2E  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 15861  010A32  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 15862  010A36  0100               	movlb	0	; () banked
 15863  010A38  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 15864  010A3A  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 15865                           
 15866                           ; BSR set to: 0
 15867  010A3C  5175               	movf	ultoa@v& (0+255),w,b
 15868  010A3E  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 15869  010A40  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 15870  010A42  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 15871  010A44  A4D8               	btfss	status,2,c
 15872  010A46  D7DB               	goto	l3470
 15873                           
 15874                           ; BSR set to: 0
 15875                           
 15876                           ; BSR set to: 0
 15877  010A48  C06D  FFD9         	movff	ultoa@buf,fsr2l
 15878  010A4C  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 15879  010A50  0E00               	movlw	0
 15880  010A52  6EDF               	movwf	indf2,c
 15881                           
 15882                           ; BSR set to: 0
 15883  010A54  076D               	decf	ultoa@buf& (0+255),f,b
 15884  010A56  A0D8               	btfss	status,0,c
 15885  010A58  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 15886  010A5A                     
 15887                           ; BSR set to: 0
 15888                           
 15889                           ; BSR set to: 0
 15890  010A5A  C06F  F060         	movff	ultoa@val,___llmod@dividend
 15891  010A5E  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 15892  010A62  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 15893  010A66  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 15894  010A6A  C073  F064         	movff	ultoa@base,___llmod@divisor
 15895  010A6E  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 15896  010A72  0E00               	movlw	0
 15897  010A74  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 15898  010A76  0EFF               	movlw	-1
 15899  010A78  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 15900  010A7A  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 15901  010A7C  EC43  F097         	call	___llmod	;wreg free
 15902  010A80  0100               	movlb	0	; () banked
 15903  010A82  5160               	movf	?___llmod& (0+255),w,b
 15904  010A84  6F79               	movwf	ultoa@c& (0+255),b
 15905                           
 15906                           ; BSR set to: 0
 15907  010A86  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 15908  010A8A  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 15909  010A8E  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 15910  010A92  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 15911  010A96  C073  F064         	movff	ultoa@base,___lldiv@divisor
 15912  010A9A  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 15913  010A9E  0E00               	movlw	0
 15914  010AA0  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 15915  010AA2  0EFF               	movlw	-1
 15916  010AA4  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 15917  010AA6  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 15918  010AA8  EC10  F094         	call	___lldiv	;wreg free
 15919  010AAC  C060  F06F         	movff	?___lldiv,ultoa@val
 15920  010AB0  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 15921  010AB4  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 15922  010AB8  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 15923  010ABC  0E09               	movlw	9
 15924  010ABE  0100               	movlb	0	; () banked
 15925  010AC0  6579               	cpfsgt	ultoa@c& (0+255),b
 15926  010AC2  D002               	goto	l3473
 15927                           
 15928                           ; BSR set to: 0
 15929  010AC4  0E07               	movlw	7
 15930  010AC6  2779               	addwf	ultoa@c& (0+255),f,b
 15931  010AC8                     l3473:
 15932                           
 15933                           ; BSR set to: 0
 15934  010AC8  0E30               	movlw	48
 15935  010ACA  2779               	addwf	ultoa@c& (0+255),f,b
 15936                           
 15937                           ; BSR set to: 0
 15938  010ACC  C06D  FFD9         	movff	ultoa@buf,fsr2l
 15939  010AD0  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 15940  010AD4  C079  FFDF         	movff	ultoa@c,indf2
 15941                           
 15942                           ; BSR set to: 0
 15943  010AD8  076D               	decf	ultoa@buf& (0+255),f,b
 15944  010ADA  A0D8               	btfss	status,0,c
 15945  010ADC  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 15946                           
 15947                           ; BSR set to: 0
 15948  010ADE  516F               	movf	ultoa@val& (0+255),w,b
 15949  010AE0  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 15950  010AE2  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 15951  010AE4  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 15952  010AE6  B4D8               	btfsc	status,2,c
 15953  010AE8  0012               	return	
 15954  010AEA  D7B7               	goto	l3472
 15955  010AEC                     __end_of_ultoa:
 15956                           	opt stack 0
 15957                           tblptru	equ	0xFF8
 15958                           tblptrh	equ	0xFF7
 15959                           tblptrl	equ	0xFF6
 15960                           tablat	equ	0xFF5
 15961                           prodh	equ	0xFF4
 15962                           prodl	equ	0xFF3
 15963                           postinc0	equ	0xFEE
 15964                           wreg	equ	0xFE8
 15965                           postinc1	equ	0xFE6
 15966                           postdec1	equ	0xFE5
 15967                           plusw1	equ	0xFE3
 15968                           fsr1h	equ	0xFE2
 15969                           fsr1l	equ	0xFE1
 15970                           indf2	equ	0xFDF
 15971                           postinc2	equ	0xFDE
 15972                           plusw2	equ	0xFDB
 15973                           fsr2h	equ	0xFDA
 15974                           fsr2l	equ	0xFD9
 15975                           status	equ	0xFD8
 15976                           
 15977 ;; *************** function ___llmod *****************
 15978 ;; Defined at:
 15979 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\llmod.c"
 15980 ;; Parameters:    Size  Location     Type
 15981 ;;  dividend        4    0[BANK0 ] unsigned long 
 15982 ;;  divisor         4    4[BANK0 ] unsigned long 
 15983 ;; Auto vars:     Size  Location     Type
 15984 ;;  counter         1    8[BANK0 ] unsigned char 
 15985 ;; Return value:  Size  Location     Type
 15986 ;;                  4    0[BANK0 ] unsigned long 
 15987 ;; Registers used:
 15988 ;;		wreg, status,2, status,0
 15989 ;; Tracked objects:
 15990 ;;		On entry : 0/0
 15991 ;;		On exit  : 0/0
 15992 ;;		Unchanged: 0/0
 15993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 15994 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15997 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 15998 ;;Total ram usage:        9 bytes
 15999 ;; Hardware stack levels used:    1
 16000 ;; Hardware stack levels required when called:   10
 16001 ;; This function calls:
 16002 ;;		Nothing
 16003 ;; This function is called by:
 16004 ;;		_ultoa
 16005 ;; This function uses a non-reentrant model
 16006 ;;
 16007                           
 16008                           	psect	text61
 16009  012E86                     __ptext61:
 16010                           	opt stack 0
 16011  012E86                     ___llmod:
 16012                           	opt stack 15
 16013                           
 16014                           ; BSR set to: 0
 16015                           ;incstack = 0
 16016  012E86  0100               	movlb	0	; () banked
 16017  012E88  5164               	movf	___llmod@divisor& (0+255),w,b
 16018  012E8A  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 16019  012E8C  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 16020  012E8E  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 16021  012E90  B4D8               	btfsc	status,2,c
 16022  012E92  D024               	goto	l3202
 16023                           
 16024                           ; BSR set to: 0
 16025  012E94  0E01               	movlw	1
 16026  012E96  6F68               	movwf	___llmod@counter& (0+255),b
 16027  012E98  D006               	goto	l3197
 16028  012E9A                     
 16029                           ; BSR set to: 0
 16030                           
 16031                           ; BSR set to: 0
 16032  012E9A  90D8               	bcf	status,0,c
 16033  012E9C  3764               	rlcf	___llmod@divisor& (0+255),f,b
 16034  012E9E  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 16035  012EA0  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 16036  012EA2  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 16037  012EA4  2B68               	incf	___llmod@counter& (0+255),f,b
 16038  012EA6                     l3197:
 16039                           
 16040                           ; BSR set to: 0
 16041                           
 16042                           ; BSR set to: 0
 16043  012EA6  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 16044  012EA8  D7F8               	goto	l3198
 16045  012EAA                     u18600:
 16046                           
 16047                           ; BSR set to: 0
 16048                           
 16049                           ; BSR set to: 0
 16050                           
 16051                           ; BSR set to: 0
 16052  012EAA  5164               	movf	___llmod@divisor& (0+255),w,b
 16053  012EAC  5D60               	subwf	___llmod@dividend& (0+255),w,b
 16054  012EAE  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 16055  012EB0  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 16056  012EB2  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 16057  012EB4  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 16058  012EB6  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 16059  012EB8  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 16060  012EBA  A0D8               	btfss	status,0,c
 16061  012EBC  D008               	goto	l3201
 16062                           
 16063                           ; BSR set to: 0
 16064  012EBE  5164               	movf	___llmod@divisor& (0+255),w,b
 16065  012EC0  5F60               	subwf	___llmod@dividend& (0+255),f,b
 16066  012EC2  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 16067  012EC4  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 16068  012EC6  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 16069  012EC8  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 16070  012ECA  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 16071  012ECC  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 16072  012ECE                     l3201:
 16073                           
 16074                           ; BSR set to: 0
 16075                           
 16076                           ; BSR set to: 0
 16077  012ECE  90D8               	bcf	status,0,c
 16078  012ED0  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 16079  012ED2  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 16080  012ED4  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 16081  012ED6  3364               	rrcf	___llmod@divisor& (0+255),f,b
 16082                           
 16083                           ; BSR set to: 0
 16084  012ED8  2F68               	decfsz	___llmod@counter& (0+255),f,b
 16085  012EDA  D7E7               	goto	u18600
 16086  012EDC                     l3202:
 16087                           
 16088                           ; BSR set to: 0
 16089                           
 16090                           ; BSR set to: 0
 16091  012EDC  C060  F060         	movff	___llmod@dividend,?___llmod
 16092  012EE0  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 16093  012EE4  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 16094  012EE8  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 16095                           
 16096                           ; BSR set to: 0
 16097  012EEC  0012               	return		;funcret
 16098  012EEE                     __end_of___llmod:
 16099                           	opt stack 0
 16100                           tblptru	equ	0xFF8
 16101                           tblptrh	equ	0xFF7
 16102                           tblptrl	equ	0xFF6
 16103                           tablat	equ	0xFF5
 16104                           prodh	equ	0xFF4
 16105                           prodl	equ	0xFF3
 16106                           postinc0	equ	0xFEE
 16107                           wreg	equ	0xFE8
 16108                           postinc1	equ	0xFE6
 16109                           postdec1	equ	0xFE5
 16110                           plusw1	equ	0xFE3
 16111                           fsr1h	equ	0xFE2
 16112                           fsr1l	equ	0xFE1
 16113                           indf2	equ	0xFDF
 16114                           postinc2	equ	0xFDE
 16115                           plusw2	equ	0xFDB
 16116                           fsr2h	equ	0xFDA
 16117                           fsr2l	equ	0xFD9
 16118                           status	equ	0xFD8
 16119                           
 16120 ;; *************** function ___lldiv *****************
 16121 ;; Defined at:
 16122 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\__lldiv.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;  dividend        4    0[BANK0 ] unsigned long 
 16125 ;;  divisor         4    4[BANK0 ] unsigned long 
 16126 ;; Auto vars:     Size  Location     Type
 16127 ;;  quotient        4    8[BANK0 ] unsigned long 
 16128 ;;  counter         1   12[BANK0 ] unsigned char 
 16129 ;; Return value:  Size  Location     Type
 16130 ;;                  4    0[BANK0 ] unsigned long 
 16131 ;; Registers used:
 16132 ;;		wreg, status,2, status,0
 16133 ;; Tracked objects:
 16134 ;;		On entry : 0/0
 16135 ;;		On exit  : 0/0
 16136 ;;		Unchanged: 0/0
 16137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 16138 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16139 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16141 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16142 ;;Total ram usage:       13 bytes
 16143 ;; Hardware stack levels used:    1
 16144 ;; Hardware stack levels required when called:   10
 16145 ;; This function calls:
 16146 ;;		Nothing
 16147 ;; This function is called by:
 16148 ;;		_ultoa
 16149 ;; This function uses a non-reentrant model
 16150 ;;
 16151                           
 16152                           	psect	text62
 16153  012820                     __ptext62:
 16154                           	opt stack 0
 16155  012820                     ___lldiv:
 16156                           	opt stack 15
 16157                           
 16158                           ; BSR set to: 0
 16159                           ;incstack = 0
 16160  012820  0E00               	movlw	0
 16161  012822  0100               	movlb	0	; () banked
 16162  012824  6F68               	movwf	___lldiv@quotient& (0+255),b
 16163  012826  0E00               	movlw	0
 16164  012828  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 16165  01282A  0E00               	movlw	0
 16166  01282C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 16167  01282E  0E00               	movlw	0
 16168  012830  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 16169                           
 16170                           ; BSR set to: 0
 16171  012832  5164               	movf	___lldiv@divisor& (0+255),w,b
 16172  012834  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 16173  012836  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 16174  012838  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 16175  01283A  B4D8               	btfsc	status,2,c
 16176  01283C  D02A               	goto	l2821
 16177                           
 16178                           ; BSR set to: 0
 16179  01283E  0E01               	movlw	1
 16180  012840  6F6C               	movwf	___lldiv@counter& (0+255),b
 16181  012842  D006               	goto	l2816
 16182  012844                     
 16183                           ; BSR set to: 0
 16184                           
 16185                           ; BSR set to: 0
 16186  012844  90D8               	bcf	status,0,c
 16187  012846  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 16188  012848  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 16189  01284A  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 16190  01284C  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 16191  01284E  2B6C               	incf	___lldiv@counter& (0+255),f,b
 16192  012850                     l2816:
 16193                           
 16194                           ; BSR set to: 0
 16195                           
 16196                           ; BSR set to: 0
 16197  012850  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 16198  012852  D7F8               	goto	l2817
 16199  012854                     u18570:
 16200                           
 16201                           ; BSR set to: 0
 16202                           
 16203                           ; BSR set to: 0
 16204                           
 16205                           ; BSR set to: 0
 16206  012854  90D8               	bcf	status,0,c
 16207  012856  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 16208  012858  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 16209  01285A  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 16210  01285C  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 16211                           
 16212                           ; BSR set to: 0
 16213  01285E  5164               	movf	___lldiv@divisor& (0+255),w,b
 16214  012860  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 16215  012862  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16216  012864  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 16217  012866  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16218  012868  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 16219  01286A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16220  01286C  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 16221  01286E  A0D8               	btfss	status,0,c
 16222  012870  D009               	goto	l2820
 16223                           
 16224                           ; BSR set to: 0
 16225  012872  5164               	movf	___lldiv@divisor& (0+255),w,b
 16226  012874  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 16227  012876  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 16228  012878  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 16229  01287A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 16230  01287C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 16231  01287E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 16232  012880  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 16233                           
 16234                           ; BSR set to: 0
 16235  012882  8168               	bsf	___lldiv@quotient& (0+255),0,b
 16236  012884                     l2820:
 16237                           
 16238                           ; BSR set to: 0
 16239                           
 16240                           ; BSR set to: 0
 16241  012884  90D8               	bcf	status,0,c
 16242  012886  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 16243  012888  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 16244  01288A  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 16245  01288C  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 16246                           
 16247                           ; BSR set to: 0
 16248  01288E  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 16249  012890  D7E1               	goto	u18570
 16250  012892                     l2821:
 16251                           
 16252                           ; BSR set to: 0
 16253                           
 16254                           ; BSR set to: 0
 16255  012892  C068  F060         	movff	___lldiv@quotient,?___lldiv
 16256  012896  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 16257  01289A  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 16258  01289E  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 16259                           
 16260                           ; BSR set to: 0
 16261  0128A2  0012               	return		;funcret
 16262  0128A4                     __end_of___lldiv:
 16263                           	opt stack 0
 16264                           tblptru	equ	0xFF8
 16265                           tblptrh	equ	0xFF7
 16266                           tblptrl	equ	0xFF6
 16267                           tablat	equ	0xFF5
 16268                           prodh	equ	0xFF4
 16269                           prodl	equ	0xFF3
 16270                           postinc0	equ	0xFEE
 16271                           wreg	equ	0xFE8
 16272                           postinc1	equ	0xFE6
 16273                           postdec1	equ	0xFE5
 16274                           plusw1	equ	0xFE3
 16275                           fsr1h	equ	0xFE2
 16276                           fsr1l	equ	0xFE1
 16277                           indf2	equ	0xFDF
 16278                           postinc2	equ	0xFDE
 16279                           plusw2	equ	0xFDB
 16280                           fsr2h	equ	0xFDA
 16281                           fsr2l	equ	0xFD9
 16282                           status	equ	0xFD8
 16283                           
 16284 ;; *************** function _adc_init *****************
 16285 ;; Defined at:
 16286 ;;		line 19 in file "adc.c"
 16287 ;; Parameters:    Size  Location     Type
 16288 ;;		None
 16289 ;; Auto vars:     Size  Location     Type
 16290 ;;		None
 16291 ;; Return value:  Size  Location     Type
 16292 ;;                  1    wreg      void 
 16293 ;; Registers used:
 16294 ;;		wreg, status,2
 16295 ;; Tracked objects:
 16296 ;;		On entry : 0/0
 16297 ;;		On exit  : 0/0
 16298 ;;		Unchanged: 0/0
 16299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 16300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16304 ;;Total ram usage:        0 bytes
 16305 ;; Hardware stack levels used:    1
 16306 ;; Hardware stack levels required when called:   10
 16307 ;; This function calls:
 16308 ;;		Nothing
 16309 ;; This function is called by:
 16310 ;;		_system_init
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           	psect	text63
 16315  01350E                     __ptext63:
 16316                           	opt stack 0
 16317  01350E                     _adc_init:
 16318                           	opt stack 19
 16319                           
 16320                           ;adc.c: 22: os.temperature[TEMPERATURE_SOURCE_INTERNAL] = 0;
 16321                           
 16322                           ; BSR set to: 0
 16323                           ;incstack = 0
 16324  01350E  0E00               	movlw	0
 16325  013510  0101               	movlb	1	; () banked
 16326  013512  6F9B               	movwf	(_os+40)& (0+255),b	;volatile
 16327  013514  0E00               	movlw	0
 16328  013516  6F9A               	movwf	(_os+39)& (0+255),b	;volatile
 16329                           
 16330                           ;adc.c: 23: os.temperature[TEMPERATURE_SOURCE_EXTERNAL] = 0;
 16331  013518  0E00               	movlw	0
 16332  01351A  6F9D               	movwf	(_os+42)& (0+255),b	;volatile
 16333  01351C  0E00               	movlw	0
 16334  01351E  6F9C               	movwf	(_os+41)& (0+255),b	;volatile
 16335                           
 16336                           ;adc.c: 24: os.fan_on = 0;
 16337  013520  0E00               	movlw	0
 16338  013522  6FA1               	movwf	(_os+46)& (0+255),b	;volatile
 16339                           
 16340                           ;adc.c: 25: params.temperature_source = TEMPERATURE_SOURCE_INTERNAL;
 16341  013524  0E00               	movlw	0
 16342  013526  6F31               	movwf	_params& (0+255),b
 16343                           
 16344                           ;adc.c: 26: params.temperature_adc_sum[TEMPERATURE_SOURCE_INTERNAL] = 0;
 16345  013528  0E00               	movlw	0
 16346  01352A  6F33               	movwf	(_params+2)& (0+255),b
 16347  01352C  0E00               	movlw	0
 16348  01352E  6F32               	movwf	(_params+1)& (0+255),b
 16349                           
 16350                           ;adc.c: 27: params.temperature_count[TEMPERATURE_SOURCE_INTERNAL] = 0;
 16351  013530  0E00               	movlw	0
 16352  013532  6F36               	movwf	(_params+5)& (0+255),b
 16353                           
 16354                           ;adc.c: 28: params.temperature_adc_sum[TEMPERATURE_SOURCE_EXTERNAL] = 0;
 16355  013534  0E00               	movlw	0
 16356  013536  6F35               	movwf	(_params+4)& (0+255),b
 16357  013538  0E00               	movlw	0
 16358  01353A  6F34               	movwf	(_params+3)& (0+255),b
 16359                           
 16360                           ;adc.c: 29: params.temperature_count[TEMPERATURE_SOURCE_EXTERNAL] = 0;
 16361  01353C  0E00               	movlw	0
 16362  01353E  6F37               	movwf	(_params+6)& (0+255),b
 16363                           
 16364                           ; BSR set to: 1
 16365                           ;adc.c: 31: ADCON0bits.VCFG1 = 0;
 16366  013540  9EC2               	bcf	4034,7,c	;volatile
 16367                           
 16368                           ; BSR set to: 1
 16369                           ;adc.c: 32: ADCON0bits.VCFG0 = 0;
 16370  013542  9CC2               	bcf	4034,6,c	;volatile
 16371                           
 16372                           ;adc.c: 33: ADCON0bits.CHS = 0b1001;
 16373  013544  50C2               	movf	4034,w,c	;volatile
 16374  013546  0BC3               	andlw	-61
 16375  013548  0924               	iorlw	36
 16376  01354A  6EC2               	movwf	4034,c	;volatile
 16377                           
 16378                           ; BSR set to: 1
 16379                           ;adc.c: 35: ADCON1bits.ADFM = 1;
 16380  01354C  8EC1               	bsf	4033,7,c	;volatile
 16381                           
 16382                           ; BSR set to: 1
 16383                           ;adc.c: 36: ADCON1bits.ADCAL = 0;
 16384  01354E  9CC1               	bcf	4033,6,c	;volatile
 16385                           
 16386                           ; BSR set to: 1
 16387                           ;adc.c: 37: ADCON1bits.ACQT = 0b111;
 16388  013550  86C1               	bsf	4033,3,c	;volatile
 16389  013552  88C1               	bsf	4033,4,c	;volatile
 16390  013554  8AC1               	bsf	4033,5,c	;volatile
 16391                           
 16392                           ;adc.c: 38: ADCON1bits.ADCS = 0b110;
 16393  013556  50C1               	movf	4033,w,c	;volatile
 16394  013558  0BF8               	andlw	-8
 16395  01355A  0906               	iorlw	6
 16396  01355C  6EC1               	movwf	4033,c	;volatile
 16397                           
 16398                           ; BSR set to: 1
 16399                           ;adc.c: 40: ADCON0bits.ADON = 1;
 16400  01355E  80C2               	bsf	4034,0,c	;volatile
 16401                           
 16402                           ; BSR set to: 1
 16403                           ;adc.c: 41: ADCON0bits.GO = 1;
 16404  013560  82C2               	bsf	4034,1,c	;volatile
 16405                           
 16406                           ; BSR set to: 1
 16407  013562  0012               	return		;funcret
 16408  013564                     __end_of_adc_init:
 16409                           	opt stack 0
 16410                           tblptru	equ	0xFF8
 16411                           tblptrh	equ	0xFF7
 16412                           tblptrl	equ	0xFF6
 16413                           tablat	equ	0xFF5
 16414                           prodh	equ	0xFF4
 16415                           prodl	equ	0xFF3
 16416                           postinc0	equ	0xFEE
 16417                           wreg	equ	0xFE8
 16418                           postinc1	equ	0xFE6
 16419                           postdec1	equ	0xFE5
 16420                           plusw1	equ	0xFE3
 16421                           fsr1h	equ	0xFE2
 16422                           fsr1l	equ	0xFE1
 16423                           indf2	equ	0xFDF
 16424                           postinc2	equ	0xFDE
 16425                           plusw2	equ	0xFDB
 16426                           fsr2h	equ	0xFDA
 16427                           fsr2l	equ	0xFD9
 16428                           status	equ	0xFD8
 16429                           
 16430 ;; *************** function __system_timer0_init *****************
 16431 ;; Defined at:
 16432 ;;		line 123 in file "os.c"
 16433 ;; Parameters:    Size  Location     Type
 16434 ;;		None
 16435 ;; Auto vars:     Size  Location     Type
 16436 ;;		None
 16437 ;; Return value:  Size  Location     Type
 16438 ;;                  1    wreg      void 
 16439 ;; Registers used:
 16440 ;;		wreg, status,2
 16441 ;; Tracked objects:
 16442 ;;		On entry : 0/0
 16443 ;;		On exit  : 0/0
 16444 ;;		Unchanged: 0/0
 16445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 16446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16450 ;;Total ram usage:        0 bytes
 16451 ;; Hardware stack levels used:    1
 16452 ;; Hardware stack levels required when called:   10
 16453 ;; This function calls:
 16454 ;;		Nothing
 16455 ;; This function is called by:
 16456 ;;		_system_init
 16457 ;; This function uses a non-reentrant model
 16458 ;;
 16459                           
 16460                           	psect	text64
 16461  013FA8                     __ptext64:
 16462                           	opt stack 0
 16463  013FA8                     __system_timer0_init:
 16464                           	opt stack 19
 16465                           
 16466                           ;os.c: 128: T0CONbits.T0CS = 0;
 16467                           
 16468                           ; BSR set to: 1
 16469                           ;incstack = 0
 16470  013FA8  9AD5               	bcf	4053,5,c	;volatile
 16471                           
 16472                           ;os.c: 130: T0CONbits.T08BIT = 0;
 16473  013FAA  9CD5               	bcf	4053,6,c	;volatile
 16474                           
 16475                           ;os.c: 132: T0CONbits.T0PS2 = 0;
 16476  013FAC  94D5               	bcf	4053,2,c	;volatile
 16477                           
 16478                           ;os.c: 133: T0CONbits.T0PS1 = 1;
 16479  013FAE  82D5               	bsf	4053,1,c	;volatile
 16480                           
 16481                           ;os.c: 134: T0CONbits.T0PS0 = 0;
 16482  013FB0  90D5               	bcf	4053,0,c	;volatile
 16483                           
 16484                           ;os.c: 136: T0CONbits.PSA = 0;
 16485  013FB2  96D5               	bcf	4053,3,c	;volatile
 16486                           
 16487                           ;os.c: 138: TMR0H = 0xFA;
 16488  013FB4  0EFA               	movlw	250
 16489  013FB6  6ED7               	movwf	4055,c	;volatile
 16490                           
 16491                           ;os.c: 139: TMR0L = 0x24;
 16492  013FB8  0E24               	movlw	36
 16493  013FBA  6ED6               	movwf	4054,c	;volatile
 16494                           
 16495                           ;os.c: 141: T0CONbits.TMR0ON = 1;
 16496  013FBC  8ED5               	bsf	4053,7,c	;volatile
 16497                           
 16498                           ;os.c: 144: INTCONbits.TMR0IF = 0;
 16499  013FBE  94F2               	bcf	intcon,2,c	;volatile
 16500                           
 16501                           ;os.c: 145: INTCONbits.TMR0IE = 1;
 16502  013FC0  8AF2               	bsf	intcon,5,c	;volatile
 16503                           
 16504                           ;os.c: 146: INTCONbits.GIE = 1;
 16505  013FC2  8EF2               	bsf	intcon,7,c	;volatile
 16506                           
 16507                           ;os.c: 149: os.subTimeSlot = 0;
 16508  013FC4  0E00               	movlw	0
 16509  013FC6  0101               	movlb	1	; () banked
 16510  013FC8  6F73               	movwf	_os& (0+255),b	;volatile
 16511                           
 16512                           ;os.c: 150: os.timeSlot = 0;
 16513  013FCA  0E00               	movlw	0
 16514  013FCC  6F74               	movwf	(_os+1)& (0+255),b	;volatile
 16515                           
 16516                           ;os.c: 151: os.done = 0;
 16517  013FCE  0E00               	movlw	0
 16518  013FD0  6F75               	movwf	(_os+2)& (0+255),b	;volatile
 16519                           
 16520                           ; BSR set to: 1
 16521  013FD2  0012               	return		;funcret
 16522  013FD4                     __end_of__system_timer0_init:
 16523                           	opt stack 0
 16524                           tblptru	equ	0xFF8
 16525                           tblptrh	equ	0xFF7
 16526                           tblptrl	equ	0xFF6
 16527                           tablat	equ	0xFF5
 16528                           prodh	equ	0xFF4
 16529                           prodl	equ	0xFF3
 16530                           intcon	equ	0xFF2
 16531                           postinc0	equ	0xFEE
 16532                           wreg	equ	0xFE8
 16533                           postinc1	equ	0xFE6
 16534                           postdec1	equ	0xFE5
 16535                           plusw1	equ	0xFE3
 16536                           fsr1h	equ	0xFE2
 16537                           fsr1l	equ	0xFE1
 16538                           indf2	equ	0xFDF
 16539                           postinc2	equ	0xFDE
 16540                           plusw2	equ	0xFDB
 16541                           fsr2h	equ	0xFDA
 16542                           fsr2l	equ	0xFD9
 16543                           status	equ	0xFD8
 16544                           
 16545 ;; *************** function __system_pin_setup *****************
 16546 ;; Defined at:
 16547 ;;		line 57 in file "os.c"
 16548 ;; Parameters:    Size  Location     Type
 16549 ;;		None
 16550 ;; Auto vars:     Size  Location     Type
 16551 ;;		None
 16552 ;; Return value:  Size  Location     Type
 16553 ;;                  1    wreg      void 
 16554 ;; Registers used:
 16555 ;;		wreg, status,2
 16556 ;; Tracked objects:
 16557 ;;		On entry : 0/0
 16558 ;;		On exit  : 0/0
 16559 ;;		Unchanged: 0/0
 16560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 16561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16565 ;;Total ram usage:        0 bytes
 16566 ;; Hardware stack levels used:    1
 16567 ;; Hardware stack levels required when called:   10
 16568 ;; This function calls:
 16569 ;;		Nothing
 16570 ;; This function is called by:
 16571 ;;		_system_init
 16572 ;; This function uses a non-reentrant model
 16573 ;;
 16574                           
 16575                           	psect	text65
 16576  012E1C                     __ptext65:
 16577                           	opt stack 0
 16578  012E1C                     __system_pin_setup:
 16579                           	opt stack 19
 16580                           
 16581                           ;os.c: 60: TRISDbits.TRISD5 = 1;
 16582                           
 16583                           ; BSR set to: 1
 16584                           ;incstack = 0
 16585  012E1C  8A95               	bsf	3989,5,c	;volatile
 16586                           
 16587                           ;os.c: 61: TRISDbits.TRISD4 = 0;
 16588  012E1E  9895               	bcf	3989,4,c	;volatile
 16589                           
 16590                           ;os.c: 62: TRISDbits.TRISD6 = 0;
 16591  012E20  9C95               	bcf	3989,6,c	;volatile
 16592                           
 16593                           ;os.c: 63: TRISDbits.TRISD7 = 0;
 16594  012E22  9E95               	bcf	3989,7,c	;volatile
 16595                           
 16596                           ;os.c: 64: LATDbits.LD7 = 1;
 16597  012E24  8E8C               	bsf	3980,7,c	;volatile
 16598                           
 16599                           ;os.c: 66: TRISBbits.TRISB3 = 1;
 16600  012E26  8693               	bsf	3987,3,c	;volatile
 16601                           
 16602                           ;os.c: 67: ANCON1bits.PCFG9 = 0;
 16603  012E28  010F               	movlb	15	; () banked
 16604  012E2A  9349               	bcf	73,1,b	;volatile
 16605                           
 16606                           ;os.c: 69: TRISCbits.TRISC7 = 0;
 16607  012E2C  9E94               	bcf	3988,7,c	;volatile
 16608                           
 16609                           ;os.c: 70: LATCbits.LC7 = 0;
 16610  012E2E  9E8B               	bcf	3979,7,c	;volatile
 16611                           
 16612                           ;os.c: 72: TRISCbits.TRISC6 = 0;
 16613  012E30  9C94               	bcf	3988,6,c	;volatile
 16614                           
 16615                           ;os.c: 73: LATCbits.LC6 = 0;
 16616  012E32  9C8B               	bcf	3979,6,c	;volatile
 16617                           
 16618                           ;os.c: 75: TRISAbits.TRISA3 = 0;
 16619  012E34  9692               	bcf	3986,3,c	;volatile
 16620                           
 16621                           ;os.c: 76: LATAbits.LA3 = 0;
 16622  012E36  9689               	bcf	3977,3,c	;volatile
 16623                           
 16624                           ;os.c: 78: TRISCbits.TRISC1 = 0;
 16625  012E38  9294               	bcf	3988,1,c	;volatile
 16626                           
 16627                           ;os.c: 79: LATCbits.LC1 = 0;
 16628  012E3A  928B               	bcf	3979,1,c	;volatile
 16629                           
 16630                           ;os.c: 84: TRISBbits.TRISB5 = 1;
 16631  012E3C  8A93               	bsf	3987,5,c	;volatile
 16632                           
 16633                           ;os.c: 85: TRISBbits.TRISB4 = 1;
 16634  012E3E  8893               	bsf	3987,4,c	;volatile
 16635                           
 16636                           ;os.c: 87: TRISBbits.TRISB0 = 0;
 16637  012E40  9093               	bcf	3987,0,c	;volatile
 16638                           
 16639                           ;os.c: 88: LATBbits.LB0 = 1;
 16640  012E42  808A               	bsf	3978,0,c	;volatile
 16641                           
 16642                           ;os.c: 90: TRISBbits.TRISB2 = 0;
 16643  012E44  9493               	bcf	3987,2,c	;volatile
 16644                           
 16645                           ;os.c: 91: LATBbits.LB2 = 0;
 16646  012E46  948A               	bcf	3978,2,c	;volatile
 16647                           
 16648                           ;os.c: 93: TRISBbits.TRISB1 = 0;
 16649  012E48  9293               	bcf	3987,1,c	;volatile
 16650                           
 16651                           ;os.c: 94: ANCON1bits.PCFG10 = 1;
 16652  012E4A  8549               	bsf	73,2,b	;volatile
 16653                           
 16654                           ;os.c: 95: LATBbits.LB1 = 0;
 16655  012E4C  928A               	bcf	3978,1,c	;volatile
 16656                           
 16657                           ; BSR set to: 15
 16658                           ;os.c: 96: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 0;};
 16659  012E4E  0E55               	movlw	85
 16660  012E50  6EA7               	movwf	4007,c	;volsfr
 16661  012E52  0EAA               	movlw	170
 16662  012E54  6EA7               	movwf	4007,c	;volsfr
 16663                           
 16664                           ; BSR set to: 15
 16665  012E56  010E               	movlb	14	; () banked
 16666  012E58  91BF               	bcf	191,0,b	;volatile
 16667                           
 16668                           ;os.c: 97: RPOR4 = 14;
 16669  012E5A  0E0E               	movlw	14
 16670  012E5C  6FC4               	movwf	196,b	;volatile
 16671                           
 16672                           ;os.c: 98: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 1;};
 16673  012E5E  0E55               	movlw	85
 16674  012E60  6EA7               	movwf	4007,c	;volsfr
 16675  012E62  0EAA               	movlw	170
 16676  012E64  6EA7               	movwf	4007,c	;volsfr
 16677                           
 16678                           ; BSR set to: 14
 16679  012E66  81BF               	bsf	191,0,b	;volatile
 16680                           
 16681                           ; BSR set to: 14
 16682                           ;os.c: 100: TRISDbits.TRISD2 = 1;
 16683  012E68  8495               	bsf	3989,2,c	;volatile
 16684                           
 16685                           ; BSR set to: 14
 16686                           ;os.c: 102: TRISEbits.TRISE2 = 1;
 16687  012E6A  8496               	bsf	3990,2,c	;volatile
 16688                           
 16689                           ; BSR set to: 14
 16690                           ;os.c: 103: ANCON0bits.PCFG7 = 1;
 16691  012E6C  010F               	movlb	15	; () banked
 16692  012E6E  8F48               	bsf	72,7,b	;volatile
 16693                           
 16694                           ; BSR set to: 15
 16695                           ;os.c: 105: TRISEbits.TRISE0 = 1;
 16696  012E70  8096               	bsf	3990,0,c	;volatile
 16697                           
 16698                           ; BSR set to: 15
 16699                           ;os.c: 106: ANCON0bits.PCFG5 = 1;
 16700  012E72  8B48               	bsf	72,5,b	;volatile
 16701                           
 16702                           ; BSR set to: 15
 16703                           ;os.c: 108: TRISEbits.TRISE1 = 1;
 16704  012E74  8296               	bsf	3990,1,c	;volatile
 16705                           
 16706                           ; BSR set to: 15
 16707                           ;os.c: 109: ANCON0bits.PCFG6 = 1;
 16708  012E76  8D48               	bsf	72,6,b	;volatile
 16709                           
 16710                           ; BSR set to: 15
 16711                           ;os.c: 111: TRISAbits.TRISA0 = 1;
 16712  012E78  8092               	bsf	3986,0,c	;volatile
 16713                           
 16714                           ; BSR set to: 15
 16715                           ;os.c: 112: ANCON0bits.PCFG0 = 1;
 16716  012E7A  8148               	bsf	72,0,b	;volatile
 16717                           
 16718                           ; BSR set to: 15
 16719                           ;os.c: 114: TRISAbits.TRISA2 = 1;
 16720  012E7C  8492               	bsf	3986,2,c	;volatile
 16721                           
 16722                           ; BSR set to: 15
 16723                           ;os.c: 115: ANCON0bits.PCFG2 = 1;
 16724  012E7E  8548               	bsf	72,2,b	;volatile
 16725                           
 16726                           ; BSR set to: 15
 16727                           ;os.c: 117: TRISAbits.TRISA1 = 1;
 16728  012E80  8292               	bsf	3986,1,c	;volatile
 16729                           
 16730                           ; BSR set to: 15
 16731                           ;os.c: 118: ANCON0bits.PCFG1 = 1;
 16732  012E82  8348               	bsf	72,1,b	;volatile
 16733                           
 16734                           ; BSR set to: 15
 16735  012E84  0012               	return		;funcret
 16736  012E86                     __end_of__system_pin_setup:
 16737                           	opt stack 0
 16738                           tblptru	equ	0xFF8
 16739                           tblptrh	equ	0xFF7
 16740                           tblptrl	equ	0xFF6
 16741                           tablat	equ	0xFF5
 16742                           prodh	equ	0xFF4
 16743                           prodl	equ	0xFF3
 16744                           intcon	equ	0xFF2
 16745                           postinc0	equ	0xFEE
 16746                           wreg	equ	0xFE8
 16747                           postinc1	equ	0xFE6
 16748                           postdec1	equ	0xFE5
 16749                           plusw1	equ	0xFE3
 16750                           fsr1h	equ	0xFE2
 16751                           fsr1l	equ	0xFE1
 16752                           indf2	equ	0xFDF
 16753                           postinc2	equ	0xFDE
 16754                           plusw2	equ	0xFDB
 16755                           fsr2h	equ	0xFDA
 16756                           fsr2l	equ	0xFD9
 16757                           status	equ	0xFD8
 16758                           
 16759 ;; *************** function __backlight_init *****************
 16760 ;; Defined at:
 16761 ;;		line 156 in file "os.c"
 16762 ;; Parameters:    Size  Location     Type
 16763 ;;		None
 16764 ;; Auto vars:     Size  Location     Type
 16765 ;;		None
 16766 ;; Return value:  Size  Location     Type
 16767 ;;                  1    wreg      void 
 16768 ;; Registers used:
 16769 ;;		None
 16770 ;; Tracked objects:
 16771 ;;		On entry : 0/0
 16772 ;;		On exit  : 0/0
 16773 ;;		Unchanged: 0/0
 16774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 16775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16779 ;;Total ram usage:        0 bytes
 16780 ;; Hardware stack levels used:    1
 16781 ;; Hardware stack levels required when called:   10
 16782 ;; This function calls:
 16783 ;;		Nothing
 16784 ;; This function is called by:
 16785 ;;		_system_init
 16786 ;; This function uses a non-reentrant model
 16787 ;;
 16788                           
 16789                           	psect	text66
 16790  014350                     __ptext66:
 16791                           	opt stack 0
 16792  014350                     __backlight_init:
 16793                           	opt stack 19
 16794                           
 16795                           ;os.c: 158: LATCbits.LC1 = 1;
 16796                           
 16797                           ; BSR set to: 15
 16798                           ;incstack = 0
 16799  014350  828B               	bsf	3979,1,c	;volatile
 16800  014352  0012               	return		;funcret
 16801  014354                     __end_of__backlight_init:
 16802                           	opt stack 0
 16803                           tblptru	equ	0xFF8
 16804                           tblptrh	equ	0xFF7
 16805                           tblptrl	equ	0xFF6
 16806                           tablat	equ	0xFF5
 16807                           prodh	equ	0xFF4
 16808                           prodl	equ	0xFF3
 16809                           intcon	equ	0xFF2
 16810                           postinc0	equ	0xFEE
 16811                           wreg	equ	0xFE8
 16812                           postinc1	equ	0xFE6
 16813                           postdec1	equ	0xFE5
 16814                           plusw1	equ	0xFE3
 16815                           fsr1h	equ	0xFE2
 16816                           fsr1l	equ	0xFE1
 16817                           indf2	equ	0xFDF
 16818                           postinc2	equ	0xFDE
 16819                           plusw2	equ	0xFDB
 16820                           fsr2h	equ	0xFDA
 16821                           fsr2l	equ	0xFD9
 16822                           status	equ	0xFD8
 16823                           
 16824 ;; *************** function _motor_process_cue *****************
 16825 ;; Defined at:
 16826 ;;		line 128 in file "motor.c"
 16827 ;; Parameters:    Size  Location     Type
 16828 ;;		None
 16829 ;; Auto vars:     Size  Location     Type
 16830 ;;		None
 16831 ;; Return value:  Size  Location     Type
 16832 ;;                  1    wreg      void 
 16833 ;; Registers used:
 16834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16835 ;; Tracked objects:
 16836 ;;		On entry : 0/0
 16837 ;;		On exit  : 0/0
 16838 ;;		Unchanged: 0/0
 16839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 16840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16844 ;;Total ram usage:        0 bytes
 16845 ;; Hardware stack levels used:    1
 16846 ;; Hardware stack levels required when called:   11
 16847 ;; This function calls:
 16848 ;;		__motor_run
 16849 ;;		_motor_items_in_cue
 16850 ;; This function is called by:
 16851 ;;		_main
 16852 ;; This function uses a non-reentrant model
 16853 ;;
 16854                           
 16855                           	psect	text67
 16856  012B10                     __ptext67:
 16857                           	opt stack 0
 16858  012B10                     _motor_process_cue:
 16859                           	opt stack 19
 16860                           
 16861                           ;motor.c: 130: if(motor_items_in_cue()==0)
 16862                           
 16863                           ;incstack = 0
 16864  012B10  EC8B  F0A1         	call	_motor_items_in_cue	;wreg free
 16865  012B14  0900               	iorlw	0
 16866  012B16  B4D8               	btfsc	status,2,c
 16867  012B18  0012               	return	
 16868                           
 16869                           ;motor.c: 135: else if(os.busy)
 16870                           
 16871                           ;motor.c: 134: }
 16872                           
 16873                           ;motor.c: 131: {;motor.c: 133: return;
 16874  012B1A  0101               	movlb	1	; () banked
 16875  012B1C  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 16876  012B1E  A4D8               	btfss	status,2,c
 16877  012B20  0012               	return	
 16878                           
 16879                           ; BSR set to: 1
 16880                           ;motor.c: 140: else;motor.c: 141: {;motor.c: 143: _motor_run(;motor.c: 144: motor_comman
      +                          d_cue[motor_cue_read_index].direction,;motor.c: 145: motor_command_cue[motor_cue_read_in
      +                          dex].distance,;motor.c: 146: motor_command_cue[motor_cue_read_index].speed;motor.c: 147:
      +                           );
 16881                           
 16882                           ; BSR set to: 1
 16883                           
 16884                           ; BSR set to: 1
 16885                           ;motor.c: 139: }
 16886                           
 16887                           ; BSR set to: 1
 16888                           ;motor.c: 136: {;motor.c: 138: return;
 16889  012B22  0100               	movlb	0	; () banked
 16890  012B24  51F3               	movf	_motor_cue_read_index& (0+255),w,b
 16891  012B26  0D07               	mullw	7
 16892  012B28  0E01               	movlw	1
 16893  012B2A  26F3               	addwf	prodl,f,c
 16894  012B2C  0E00               	movlw	0
 16895  012B2E  22F4               	addwfc	prodh,f,c
 16896  012B30  0E00               	movlw	low _motor_command_cue
 16897  012B32  24F3               	addwf	prodl,w,c
 16898  012B34  6ED9               	movwf	fsr2l,c
 16899  012B36  0E02               	movlw	high _motor_command_cue
 16900  012B38  20F4               	addwfc	prodh,w,c
 16901  012B3A  6EDA               	movwf	fsr2h,c
 16902  012B3C  CFDE F060          	movff	postinc2,__motor_run@distance_in_steps
 16903  012B40  CFDE F061          	movff	postinc2,__motor_run@distance_in_steps+1
 16904  012B44  CFDE F062          	movff	postinc2,__motor_run@distance_in_steps+2
 16905  012B48  CFDE F063          	movff	postinc2,__motor_run@distance_in_steps+3
 16906  012B4C  51F3               	movf	_motor_cue_read_index& (0+255),w,b
 16907  012B4E  0D07               	mullw	7
 16908  012B50  0E05               	movlw	5
 16909  012B52  26F3               	addwf	prodl,f,c
 16910  012B54  0E00               	movlw	0
 16911  012B56  22F4               	addwfc	prodh,f,c
 16912  012B58  0E00               	movlw	low _motor_command_cue
 16913  012B5A  24F3               	addwf	prodl,w,c
 16914  012B5C  6ED9               	movwf	fsr2l,c
 16915  012B5E  0E02               	movlw	high _motor_command_cue
 16916  012B60  20F4               	addwfc	prodh,w,c
 16917  012B62  6EDA               	movwf	fsr2h,c
 16918  012B64  CFDE F064          	movff	postinc2,__motor_run@speed
 16919  012B68  CFDD F065          	movff	postdec2,__motor_run@speed+1
 16920  012B6C  51F3               	movf	_motor_cue_read_index& (0+255),w,b
 16921  012B6E  0D07               	mullw	7
 16922  012B70  0E00               	movlw	low _motor_command_cue
 16923  012B72  24F3               	addwf	prodl,w,c
 16924  012B74  6ED9               	movwf	fsr2l,c
 16925  012B76  0E02               	movlw	high _motor_command_cue
 16926  012B78  20F4               	addwfc	prodh,w,c
 16927  012B7A  6EDA               	movwf	fsr2h,c
 16928  012B7C  50DF               	movf	indf2,w,c
 16929  012B7E  EC34  F072         	call	__motor_run
 16930                           
 16931                           ;motor.c: 149: ++motor_cue_read_index;
 16932  012B82  0100               	movlb	0	; () banked
 16933  012B84  2BF3               	incf	_motor_cue_read_index& (0+255),f,b
 16934                           
 16935                           ; BSR set to: 0
 16936  012B86  0012               	return	
 16937  012B88                     __end_of_motor_process_cue:
 16938                           	opt stack 0
 16939                           tblptru	equ	0xFF8
 16940                           tblptrh	equ	0xFF7
 16941                           tblptrl	equ	0xFF6
 16942                           tablat	equ	0xFF5
 16943                           prodh	equ	0xFF4
 16944                           prodl	equ	0xFF3
 16945                           intcon	equ	0xFF2
 16946                           postinc0	equ	0xFEE
 16947                           wreg	equ	0xFE8
 16948                           postinc1	equ	0xFE6
 16949                           postdec1	equ	0xFE5
 16950                           plusw1	equ	0xFE3
 16951                           fsr1h	equ	0xFE2
 16952                           fsr1l	equ	0xFE1
 16953                           indf2	equ	0xFDF
 16954                           postinc2	equ	0xFDE
 16955                           postdec2	equ	0xFDD
 16956                           plusw2	equ	0xFDB
 16957                           fsr2h	equ	0xFDA
 16958                           fsr2l	equ	0xFD9
 16959                           status	equ	0xFD8
 16960                           
 16961 ;; *************** function _encoder_statemachine *****************
 16962 ;; Defined at:
 16963 ;;		line 210 in file "encoder.c"
 16964 ;; Parameters:    Size  Location     Type
 16965 ;;		None
 16966 ;; Auto vars:     Size  Location     Type
 16967 ;;		None
 16968 ;; Return value:  Size  Location     Type
 16969 ;;                  1    wreg      void 
 16970 ;; Registers used:
 16971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16972 ;; Tracked objects:
 16973 ;;		On entry : 0/0
 16974 ;;		On exit  : 0/0
 16975 ;;		Unchanged: 0/0
 16976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 16977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16979 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16980 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 16981 ;;Total ram usage:        4 bytes
 16982 ;; Hardware stack levels used:    1
 16983 ;; Hardware stack levels required when called:   14
 16984 ;; This function calls:
 16985 ;;		__divide_jump_size_decrement
 16986 ;;		__divide_jump_size_increment
 16987 ;;		__encoder_next_arc_step_size
 16988 ;;		__encoder_next_divide_step_size
 16989 ;;		__encoder_next_setup_stepsize
 16990 ;;		_motor_arc_move
 16991 ;;		_motor_change_speed
 16992 ;;		_motor_divide_jump
 16993 ;;		_motor_divide_jump_to_nearest
 16994 ;;		_motor_go_to_steps_position
 16995 ;;		_motor_nonzero_steps_from_degrees
 16996 ;;		_motor_schedule_command
 16997 ;;		_motor_stop
 16998 ;; This function is called by:
 16999 ;;		_main
 17000 ;; This function uses a non-reentrant model
 17001 ;;
 17002                           
 17003                           	psect	text68
 17004  00AF66                     __ptext68:
 17005                           	opt stack 0
 17006  00AF66                     _encoder_statemachine:
 17007                           	opt stack 16
 17008                           
 17009                           ;encoder.c: 213: if(os.encoder1Count==0 && os.encoder2Count==0 && os.button1==0 && os.bu
      +                          tton2==0)
 17010                           
 17011                           ;incstack = 0
 17012  00AF66  0101               	movlb	1	; () banked
 17013  00AF68  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 17014  00AF6A  A4D8               	btfss	status,2,c
 17015  00AF6C  EF13  F05C         	goto	l2550
 17016                           
 17017                           ; BSR set to: 1
 17018  00AF70  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 17019  00AF72  A4D8               	btfss	status,2,c
 17020  00AF74  EF13  F05C         	goto	l2550
 17021                           
 17022                           ; BSR set to: 1
 17023  00AF78  5177               	movf	(_os+4)& (0+255),w,b	;volatile
 17024  00AF7A  A4D8               	btfss	status,2,c
 17025  00AF7C  EF13  F05C         	goto	l2550
 17026                           
 17027                           ; BSR set to: 1
 17028  00AF80  5179               	movf	(_os+6)& (0+255),w,b	;volatile
 17029  00AF82  B4D8               	btfsc	status,2,c
 17030  00AF84  0012               	return	
 17031  00AF86  EF13  F05C         	goto	l2550
 17032  00AF8A                     
 17033                           ; BSR set to: 1
 17034                           ;encoder.c: 225: if(os.button1==1 || os.button2==1)
 17035                           
 17036                           ; BSR set to: 1
 17037  00AF8A  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17038  00AF8C  B4D8               	btfsc	status,2,c
 17039  00AF8E  D003               	goto	u22840
 17040                           
 17041                           ; BSR set to: 1
 17042  00AF90  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17043  00AF92  A4D8               	btfss	status,2,c
 17044  00AF94  D002               	goto	l2554
 17045  00AF96                     u22840:
 17046                           
 17047                           ; BSR set to: 1
 17048                           ;encoder.c: 226: os.displayState = DISPLAY_STATE_SETUP1_CONFIRM;
 17049                           
 17050                           ; BSR set to: 1
 17051  00AF96  0E11               	movlw	17
 17052  00AF98  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17053  00AF9A                     l2554:
 17054                           
 17055                           ; BSR set to: 1
 17056                           ;encoder.c: 227: if(os.encoder1Count+os.encoder2Count>0)
 17057                           
 17058                           ; BSR set to: 1
 17059  00AF9A  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17060  00AF9E  0100               	movlb	0	; () banked
 17061  00AFA0  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17062  00AFA2  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17063  00AFA4  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17064  00AFA6  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17065  00AFAA  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17066  00AFAC  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17067  00AFAE  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17068  00AFB0  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17069  00AFB2  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17070  00AFB4  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17071  00AFB6  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17072  00AFB8  BFC7               	btfsc	(??_encoder_statemachine+3)& (0+255),7,b
 17073  00AFBA  D008               	goto	l2557
 17074  00AFBC  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 17075  00AFBE  E103               	bnz	u22850
 17076  00AFC0  05C6               	decf	(??_encoder_statemachine+2)& (0+255),w,b
 17077  00AFC2  A0D8               	btfss	status,0,c
 17078  00AFC4  D003               	goto	l2557
 17079  00AFC6                     u22850:
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;encoder.c: 228: os.displayState = DISPLAY_STATE_MAIN_DIVIDE;
 17083  00AFC6  0E02               	movlw	2
 17084  00AFC8  0101               	movlb	1	; () banked
 17085  00AFCA  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17086  00AFCC                     l2557:
 17087                           
 17088                           ;encoder.c: 229: if(os.encoder1Count+os.encoder2Count<0)
 17089                           
 17090                           ; BSR set to: 1
 17091  00AFCC  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17092  00AFD0  0100               	movlb	0	; () banked
 17093  00AFD2  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17094  00AFD4  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17095  00AFD6  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17096  00AFD8  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17097  00AFDC  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17098  00AFDE  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17099  00AFE0  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17100  00AFE2  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17101  00AFE4  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17102  00AFE6  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17103  00AFE8  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17104  00AFEA  AFC7               	btfss	(??_encoder_statemachine+3)& (0+255),7,b
 17105  00AFEC  EF38  F05C         	goto	l2585
 17106                           
 17107                           ; BSR set to: 0
 17108                           ;encoder.c: 230: os.displayState = DISPLAY_STATE_MAIN_ZERO;
 17109  00AFF0  0E05               	movlw	5
 17110  00AFF2  EF01  F05C         	goto	L22
 17111  00AFF6                     
 17112                           ; BSR set to: 1
 17113                           ;encoder.c: 233: if(os.button1==1 || os.button2==1)
 17114                           
 17115                           ; BSR set to: 1
 17116  00AFF6  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17117  00AFF8  B4D8               	btfsc	status,2,c
 17118  00AFFA  D003               	goto	u22880
 17119                           
 17120                           ; BSR set to: 1
 17121  00AFFC  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17122  00AFFE  A4D8               	btfss	status,2,c
 17123  00B000  D002               	goto	l2561
 17124  00B002                     u22880:
 17125                           
 17126                           ; BSR set to: 1
 17127                           ;encoder.c: 234: os.displayState = DISPLAY_STATE_DIVIDE1_CONFIRM;
 17128                           
 17129                           ; BSR set to: 1
 17130  00B002  0E31               	movlw	49
 17131  00B004  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17132  00B006                     l2561:
 17133                           
 17134                           ; BSR set to: 1
 17135                           ;encoder.c: 235: if(os.encoder1Count+os.encoder2Count>0)
 17136                           
 17137                           ; BSR set to: 1
 17138  00B006  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17139  00B00A  0100               	movlb	0	; () banked
 17140  00B00C  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17141  00B00E  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17142  00B010  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17143  00B012  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17144  00B016  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17145  00B018  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17146  00B01A  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17147  00B01C  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17148  00B01E  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17149  00B020  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17150  00B022  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17151  00B024  BFC7               	btfsc	(??_encoder_statemachine+3)& (0+255),7,b
 17152  00B026  D008               	goto	l2564
 17153  00B028  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 17154  00B02A  E103               	bnz	u22890
 17155  00B02C  05C6               	decf	(??_encoder_statemachine+2)& (0+255),w,b
 17156  00B02E  A0D8               	btfss	status,0,c
 17157  00B030  D003               	goto	l2564
 17158  00B032                     u22890:
 17159                           
 17160                           ; BSR set to: 0
 17161                           ;encoder.c: 236: os.displayState = DISPLAY_STATE_MAIN_ARC;
 17162  00B032  0E03               	movlw	3
 17163  00B034  0101               	movlb	1	; () banked
 17164  00B036  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17165  00B038                     l2564:
 17166                           
 17167                           ;encoder.c: 237: if(os.encoder1Count+os.encoder2Count<0)
 17168                           
 17169                           ; BSR set to: 1
 17170  00B038  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17171  00B03C  0100               	movlb	0	; () banked
 17172  00B03E  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17173  00B040  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17174  00B042  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17175  00B044  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17176  00B048  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17177  00B04A  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17178  00B04C  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17179  00B04E  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17180  00B050  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17181  00B052  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17182  00B054  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17183  00B056  AFC7               	btfss	(??_encoder_statemachine+3)& (0+255),7,b
 17184  00B058  EF38  F05C         	goto	l2585
 17185                           
 17186                           ; BSR set to: 0
 17187                           ;encoder.c: 238: os.displayState = DISPLAY_STATE_MAIN_SETUP;
 17188  00B05C  0E01               	movlw	1
 17189  00B05E  D3D1               	goto	L22
 17190  00B060                     
 17191                           ; BSR set to: 1
 17192                           ;encoder.c: 241: if(os.button1==1 || os.button2==1)
 17193                           
 17194                           ; BSR set to: 1
 17195  00B060  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17196  00B062  B4D8               	btfsc	status,2,c
 17197  00B064  D003               	goto	u22920
 17198                           
 17199                           ; BSR set to: 1
 17200  00B066  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17201  00B068  A4D8               	btfss	status,2,c
 17202  00B06A  D002               	goto	l2567
 17203  00B06C                     u22920:
 17204                           
 17205                           ; BSR set to: 1
 17206                           ;encoder.c: 242: os.displayState = DISPLAY_STATE_ARC1_CONFIRM;
 17207                           
 17208                           ; BSR set to: 1
 17209  00B06C  0E51               	movlw	81
 17210  00B06E  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17211  00B070                     l2567:
 17212                           
 17213                           ; BSR set to: 1
 17214                           ;encoder.c: 243: if(os.encoder1Count+os.encoder2Count>0)
 17215                           
 17216                           ; BSR set to: 1
 17217  00B070  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17218  00B074  0100               	movlb	0	; () banked
 17219  00B076  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17220  00B078  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17221  00B07A  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17222  00B07C  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17223  00B080  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17224  00B082  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17225  00B084  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17226  00B086  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17227  00B088  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17228  00B08A  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17229  00B08C  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17230  00B08E  BFC7               	btfsc	(??_encoder_statemachine+3)& (0+255),7,b
 17231  00B090  D008               	goto	l2570
 17232  00B092  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 17233  00B094  E103               	bnz	u22930
 17234  00B096  05C6               	decf	(??_encoder_statemachine+2)& (0+255),w,b
 17235  00B098  A0D8               	btfss	status,0,c
 17236  00B09A  D003               	goto	l2570
 17237  00B09C                     u22930:
 17238                           
 17239                           ; BSR set to: 0
 17240                           ;encoder.c: 244: os.displayState = DISPLAY_STATE_MAIN_MANUAL;
 17241  00B09C  0E04               	movlw	4
 17242  00B09E  0101               	movlb	1	; () banked
 17243  00B0A0  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17244  00B0A2                     l2570:
 17245                           
 17246                           ;encoder.c: 245: if(os.encoder1Count+os.encoder2Count<0)
 17247                           
 17248                           ; BSR set to: 1
 17249  00B0A2  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17250  00B0A6  0100               	movlb	0	; () banked
 17251  00B0A8  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17252  00B0AA  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17253  00B0AC  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17254  00B0AE  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17255  00B0B2  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17256  00B0B4  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17257  00B0B6  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17258  00B0B8  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17259  00B0BA  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17260  00B0BC  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17261  00B0BE  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17262  00B0C0  AFC7               	btfss	(??_encoder_statemachine+3)& (0+255),7,b
 17263  00B0C2  D3D6               	goto	l2585
 17264                           
 17265                           ; BSR set to: 0
 17266                           ;encoder.c: 246: os.displayState = DISPLAY_STATE_MAIN_DIVIDE;
 17267  00B0C4  0E02               	movlw	2
 17268  00B0C6  D39D               	goto	L22
 17269  00B0C8                     
 17270                           ; BSR set to: 1
 17271                           ;encoder.c: 249: if(os.button1==1 || os.button2==1)
 17272                           
 17273                           ; BSR set to: 1
 17274  00B0C8  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17275  00B0CA  B4D8               	btfsc	status,2,c
 17276  00B0CC  D003               	goto	u22960
 17277                           
 17278                           ; BSR set to: 1
 17279  00B0CE  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17280  00B0D0  A4D8               	btfss	status,2,c
 17281  00B0D2  D002               	goto	l2573
 17282  00B0D4                     u22960:
 17283                           
 17284                           ; BSR set to: 1
 17285                           ;encoder.c: 250: os.displayState = DISPLAY_STATE_MANUAL_CANCEL;
 17286                           
 17287                           ; BSR set to: 1
 17288  00B0D4  0E82               	movlw	130
 17289  00B0D6  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17290  00B0D8                     l2573:
 17291                           
 17292                           ; BSR set to: 1
 17293                           ;encoder.c: 251: if(os.encoder1Count+os.encoder2Count>0)
 17294                           
 17295                           ; BSR set to: 1
 17296  00B0D8  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17297  00B0DC  0100               	movlb	0	; () banked
 17298  00B0DE  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17299  00B0E0  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17300  00B0E2  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17301  00B0E4  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17302  00B0E8  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17303  00B0EA  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17304  00B0EC  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17305  00B0EE  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17306  00B0F0  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17307  00B0F2  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17308  00B0F4  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17309  00B0F6  BFC7               	btfsc	(??_encoder_statemachine+3)& (0+255),7,b
 17310  00B0F8  D008               	goto	l2576
 17311  00B0FA  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 17312  00B0FC  E103               	bnz	u22970
 17313  00B0FE  05C6               	decf	(??_encoder_statemachine+2)& (0+255),w,b
 17314  00B100  A0D8               	btfss	status,0,c
 17315  00B102  D003               	goto	l2576
 17316  00B104                     u22970:
 17317                           
 17318                           ; BSR set to: 0
 17319                           ;encoder.c: 252: os.displayState = DISPLAY_STATE_MAIN_ZERO;
 17320  00B104  0E05               	movlw	5
 17321  00B106  0101               	movlb	1	; () banked
 17322  00B108  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17323  00B10A                     l2576:
 17324                           
 17325                           ;encoder.c: 253: if(os.encoder1Count+os.encoder2Count<0)
 17326                           
 17327                           ; BSR set to: 1
 17328  00B10A  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17329  00B10E  0100               	movlb	0	; () banked
 17330  00B110  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17331  00B112  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17332  00B114  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17333  00B116  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17334  00B11A  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17335  00B11C  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17336  00B11E  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17337  00B120  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17338  00B122  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17339  00B124  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17340  00B126  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17341  00B128  AFC7               	btfss	(??_encoder_statemachine+3)& (0+255),7,b
 17342  00B12A  D3A2               	goto	l2585
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;encoder.c: 254: os.displayState = DISPLAY_STATE_MAIN_ARC;
 17346  00B12C  0E03               	movlw	3
 17347  00B12E  D369               	goto	L22
 17348  00B130                     
 17349                           ; BSR set to: 1
 17350                           ;encoder.c: 257: if(os.button1==1 || os.button2==1)
 17351                           
 17352                           ; BSR set to: 1
 17353  00B130  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17354  00B132  B4D8               	btfsc	status,2,c
 17355  00B134  D003               	goto	u23000
 17356                           
 17357                           ; BSR set to: 1
 17358  00B136  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17359  00B138  A4D8               	btfss	status,2,c
 17360  00B13A  D002               	goto	l2579
 17361  00B13C                     u23000:
 17362                           
 17363                           ; BSR set to: 1
 17364                           ;encoder.c: 258: os.displayState = DISPLAY_STATE_ZERO_NORMAL;
 17365                           
 17366                           ; BSR set to: 1
 17367  00B13C  0E71               	movlw	113
 17368  00B13E  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17369  00B140                     l2579:
 17370                           
 17371                           ; BSR set to: 1
 17372                           ;encoder.c: 259: if(os.encoder1Count+os.encoder2Count>0)
 17373                           
 17374                           ; BSR set to: 1
 17375  00B140  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17376  00B144  0100               	movlb	0	; () banked
 17377  00B146  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17378  00B148  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17379  00B14A  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17380  00B14C  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17381  00B150  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17382  00B152  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17383  00B154  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17384  00B156  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17385  00B158  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17386  00B15A  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17387  00B15C  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17388  00B15E  BFC7               	btfsc	(??_encoder_statemachine+3)& (0+255),7,b
 17389  00B160  D008               	goto	l2582
 17390  00B162  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 17391  00B164  E103               	bnz	u23010
 17392  00B166  05C6               	decf	(??_encoder_statemachine+2)& (0+255),w,b
 17393  00B168  A0D8               	btfss	status,0,c
 17394  00B16A  D003               	goto	l2582
 17395  00B16C                     u23010:
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;encoder.c: 260: os.displayState = DISPLAY_STATE_MAIN_SETUP;
 17399  00B16C  0E01               	movlw	1
 17400  00B16E  0101               	movlb	1	; () banked
 17401  00B170  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17402  00B172                     l2582:
 17403                           
 17404                           ;encoder.c: 261: if(os.encoder1Count+os.encoder2Count<0)
 17405                           
 17406                           ; BSR set to: 1
 17407  00B172  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17408  00B176  0100               	movlb	0	; () banked
 17409  00B178  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17410  00B17A  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17411  00B17C  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17412  00B17E  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17413  00B182  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17414  00B184  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17415  00B186  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17416  00B188  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17417  00B18A  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17418  00B18C  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17419  00B18E  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17420  00B190  AFC7               	btfss	(??_encoder_statemachine+3)& (0+255),7,b
 17421  00B192  D36E               	goto	l2585
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;encoder.c: 262: os.displayState = DISPLAY_STATE_MAIN_MANUAL;
 17425  00B194  0E04               	movlw	4
 17426  00B196  D335               	goto	L22
 17427  00B198                     
 17428                           ; BSR set to: 1
 17429  00B198  0101               	movlb	1	; () banked
 17430  00B19A  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 17431                           
 17432                           ; Switch size 1, requested type "space"
 17433                           ; Number of cases is 6, Range of values is 1 to 240
 17434                           ; switch strategies available:
 17435                           ; Name         Instructions Cycles
 17436                           ; simple_byte           19    10 (average)
 17437                           ;	Chosen strategy is simple_byte
 17438  00B19C  0A01               	xorlw	1	; case 1
 17439  00B19E  B4D8               	btfsc	status,2,c
 17440  00B1A0  D6F4               	goto	l2553
 17441  00B1A2  0A03               	xorlw	3	; case 2
 17442  00B1A4  B4D8               	btfsc	status,2,c
 17443  00B1A6  D727               	goto	l2560
 17444  00B1A8  0A01               	xorlw	1	; case 3
 17445  00B1AA  B4D8               	btfsc	status,2,c
 17446  00B1AC  D759               	goto	l2566
 17447  00B1AE  0A07               	xorlw	7	; case 4
 17448  00B1B0  B4D8               	btfsc	status,2,c
 17449  00B1B2  D78A               	goto	l2572
 17450  00B1B4  0A01               	xorlw	1	; case 5
 17451  00B1B6  B4D8               	btfsc	status,2,c
 17452  00B1B8  D7BB               	goto	l2578
 17453  00B1BA  0AF5               	xorlw	245	; case 240
 17454                           
 17455                           ; BSR set to: 1
 17456                           ;encoder.c: 268: break;
 17457  00B1BC  D359               	goto	l2585
 17458  00B1BE                     
 17459                           ; BSR set to: 1
 17460                           ;encoder.c: 274: if(os.button1==1)
 17461                           
 17462                           ; BSR set to: 1
 17463  00B1BE  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17464  00B1C0  A4D8               	btfss	status,2,c
 17465  00B1C2  D00E               	goto	l2589
 17466                           
 17467                           ; BSR set to: 1
 17468                           ;encoder.c: 275: {;encoder.c: 276: os.current_position_in_steps = 0;
 17469  00B1C4  0E00               	movlw	0
 17470  00B1C6  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 17471  00B1C8  0E00               	movlw	0
 17472  00B1CA  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 17473  00B1CC  0E00               	movlw	0
 17474  00B1CE  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 17475  00B1D0  0E00               	movlw	0
 17476  00B1D2  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 17477                           
 17478                           ;encoder.c: 277: os.divide_position = 0;
 17479  00B1D4  0E00               	movlw	0
 17480  00B1D6  6F8A               	movwf	(_os+23)& (0+255),b	;volatile
 17481  00B1D8  0E00               	movlw	0
 17482  00B1DA  6F89               	movwf	(_os+22)& (0+255),b	;volatile
 17483                           
 17484                           ;encoder.c: 278: os.displayState = DISPLAY_STATE_SETUP2_CCW;
 17485  00B1DC  0E21               	movlw	33
 17486  00B1DE  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17487  00B1E0                     l2589:
 17488                           
 17489                           ; BSR set to: 1
 17490                           ;encoder.c: 279: };encoder.c: 280: if(os.encoder1Count>0)
 17491                           
 17492                           ; BSR set to: 1
 17493  00B1E0  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 17494  00B1E2  0A80               	xorlw	128
 17495  00B1E4  0F7F               	addlw	-129
 17496  00B1E6  A0D8               	btfss	status,0,c
 17497  00B1E8  D002               	goto	l2590
 17498                           
 17499                           ; BSR set to: 1
 17500                           ;encoder.c: 281: os.displayState = DISPLAY_STATE_SETUP1_CANCEL;
 17501  00B1EA  0E12               	movlw	18
 17502  00B1EC  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17503  00B1EE                     l2590:
 17504                           
 17505                           ; BSR set to: 1
 17506                           ;encoder.c: 282: if(os.encoder1Count<0)
 17507                           
 17508                           ; BSR set to: 1
 17509  00B1EE  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 17510  00B1F0  D01B               	goto	l2592
 17511                           
 17512                           ; BSR set to: 1
 17513                           ;encoder.c: 283: os.displayState = DISPLAY_STATE_SETUP1_CANCEL;
 17514  00B1F2  0E12               	movlw	18
 17515  00B1F4  D00F               	goto	L10
 17516  00B1F6                     
 17517                           ; BSR set to: 1
 17518                           ;encoder.c: 286: if(os.button1==1)
 17519                           
 17520                           ; BSR set to: 1
 17521  00B1F6  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17522  00B1F8  A4D8               	btfss	status,2,c
 17523  00B1FA  D002               	goto	l2594
 17524                           
 17525                           ; BSR set to: 1
 17526                           ;encoder.c: 287: os.displayState = DISPLAY_STATE_MAIN_SETUP;
 17527  00B1FC  0E01               	movlw	1
 17528  00B1FE  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17529  00B200                     l2594:
 17530                           
 17531                           ; BSR set to: 1
 17532                           ;encoder.c: 288: if(os.encoder1Count>0)
 17533                           
 17534                           ; BSR set to: 1
 17535  00B200  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 17536  00B202  0A80               	xorlw	128
 17537  00B204  0F7F               	addlw	-129
 17538  00B206  A0D8               	btfss	status,0,c
 17539  00B208  D002               	goto	l2595
 17540                           
 17541                           ; BSR set to: 1
 17542                           ;encoder.c: 289: os.displayState = DISPLAY_STATE_SETUP1_CONFIRM;
 17543  00B20A  0E11               	movlw	17
 17544  00B20C  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17545  00B20E                     l2595:
 17546                           
 17547                           ; BSR set to: 1
 17548                           ;encoder.c: 290: if(os.encoder1Count<0)
 17549                           
 17550                           ; BSR set to: 1
 17551  00B20E  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 17552  00B210  D00B               	goto	l2592
 17553                           
 17554                           ; BSR set to: 1
 17555                           ;encoder.c: 291: os.displayState = DISPLAY_STATE_SETUP1_CONFIRM;
 17556  00B212  0E11               	movlw	17
 17557  00B214                     L10:
 17558  00B214  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17559                           
 17560                           ; BSR set to: 1
 17561                           ;encoder.c: 293: }
 17562                           
 17563                           ; BSR set to: 1
 17564                           ;encoder.c: 292: break;
 17565  00B216  D008               	goto	l2592
 17566  00B218                     
 17567                           ; BSR set to: 1
 17568  00B218  0101               	movlb	1	; () banked
 17569  00B21A  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 17570                           
 17571                           ; Switch size 1, requested type "space"
 17572                           ; Number of cases is 2, Range of values is 17 to 18
 17573                           ; switch strategies available:
 17574                           ; Name         Instructions Cycles
 17575                           ; simple_byte            7     4 (average)
 17576                           ;	Chosen strategy is simple_byte
 17577  00B21C  0A11               	xorlw	17	; case 17
 17578  00B21E  B4D8               	btfsc	status,2,c
 17579  00B220  D7CE               	goto	l2588
 17580  00B222  0A03               	xorlw	3	; case 18
 17581  00B224  B4D8               	btfsc	status,2,c
 17582  00B226  D7E7               	goto	l2593
 17583  00B228                     l2592:
 17584                           
 17585                           ; BSR set to: 1
 17586                           ;encoder.c: 294: if(os.button2==1)
 17587                           
 17588                           ; BSR set to: 1
 17589  00B228  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17590  00B22A  A4D8               	btfss	status,2,c
 17591  00B22C  D00A               	goto	l2597
 17592                           
 17593                           ; BSR set to: 1
 17594                           ;encoder.c: 295: {;encoder.c: 296: os.setup_step_size = _encoder_next_setup_stepsize(os.
      +                          setup_step_size);
 17595  00B22E  C183  F060         	movff	_os+16,__encoder_next_setup_stepsize@old_stepsize	;volatile
 17596  00B232  C184  F061         	movff	_os+17,__encoder_next_setup_stepsize@old_stepsize+1	;volatile
 17597  00B236  ECC4  F095         	call	__encoder_next_setup_stepsize	;wreg free
 17598  00B23A  C060  F183         	movff	?__encoder_next_setup_stepsize,_os+16	;volatile
 17599  00B23E  C061  F184         	movff	?__encoder_next_setup_stepsize+1,_os+17	;volatile
 17600  00B242                     l2597:
 17601                           
 17602                           ;encoder.c: 297: };encoder.c: 298: if(os.encoder2Count>0)
 17603  00B242  0101               	movlb	1	; () banked
 17604  00B244  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 17605  00B246  0A80               	xorlw	128
 17606  00B248  0F7F               	addlw	-129
 17607  00B24A  A0D8               	btfss	status,0,c
 17608  00B24C  D019               	goto	l2599
 17609                           
 17610                           ; BSR set to: 1
 17611                           ;encoder.c: 299: {;encoder.c: 301: if(!os.busy)
 17612  00B24E  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 17613  00B250  A4D8               	btfss	status,2,c
 17614  00B252  D016               	goto	l2599
 17615                           
 17616                           ; BSR set to: 1
 17617                           ;encoder.c: 302: motor_schedule_command(MOTOR_DIRECTION_CW, motor_nonzero_steps_from_deg
      +                          rees(os.setup_step_size), 0);
 17618  00B254  C183  F08F         	movff	_os+16,motor_nonzero_steps_from_degrees@degrees	;volatile
 17619  00B258  C184  F090         	movff	_os+17,motor_nonzero_steps_from_degrees@degrees+1	;volatile
 17620  00B25C  EC4C  F09C         	call	_motor_nonzero_steps_from_degrees	;wreg free
 17621  00B260  C08F  F097         	movff	?_motor_nonzero_steps_from_degrees,motor_schedule_command@distance_in_steps
 17622  00B264  C090  F098         	movff	?_motor_nonzero_steps_from_degrees+1,motor_schedule_command@distance_in_steps+1
 17623  00B268  C091  F099         	movff	?_motor_nonzero_steps_from_degrees+2,motor_schedule_command@distance_in_steps+2
 17624  00B26C  C092  F09A         	movff	?_motor_nonzero_steps_from_degrees+3,motor_schedule_command@distance_in_steps+3
 17625  00B270  0E00               	movlw	0
 17626  00B272  0100               	movlb	0	; () banked
 17627  00B274  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 17628  00B276  0E00               	movlw	0
 17629  00B278  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 17630  00B27A  0E01               	movlw	1
 17631  00B27C  ECCE  F08F         	call	_motor_schedule_command
 17632  00B280                     l2599:
 17633                           
 17634                           ;encoder.c: 303: };encoder.c: 304: if(os.encoder2Count<0)
 17635  00B280  0101               	movlb	1	; () banked
 17636  00B282  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 17637  00B284  D2F5               	goto	l2585
 17638                           
 17639                           ; BSR set to: 1
 17640                           ;encoder.c: 305: {;encoder.c: 307: if(!os.busy)
 17641  00B286  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 17642  00B288  A4D8               	btfss	status,2,c
 17643  00B28A  D2F2               	goto	l2585
 17644                           
 17645                           ; BSR set to: 1
 17646                           ;encoder.c: 308: motor_schedule_command(MOTOR_DIRECTION_CCW, motor_nonzero_steps_from_de
      +                          grees(os.setup_step_size), 0);
 17647  00B28C  C183  F08F         	movff	_os+16,motor_nonzero_steps_from_degrees@degrees	;volatile
 17648  00B290  C184  F090         	movff	_os+17,motor_nonzero_steps_from_degrees@degrees+1	;volatile
 17649  00B294  EC4C  F09C         	call	_motor_nonzero_steps_from_degrees	;wreg free
 17650  00B298  C08F  F097         	movff	?_motor_nonzero_steps_from_degrees,motor_schedule_command@distance_in_steps
 17651  00B29C  C090  F098         	movff	?_motor_nonzero_steps_from_degrees+1,motor_schedule_command@distance_in_steps+1
 17652  00B2A0  C091  F099         	movff	?_motor_nonzero_steps_from_degrees+2,motor_schedule_command@distance_in_steps+2
 17653  00B2A4  C092  F09A         	movff	?_motor_nonzero_steps_from_degrees+3,motor_schedule_command@distance_in_steps+3
 17654  00B2A8  0E00               	movlw	0
 17655  00B2AA  0100               	movlb	0	; () banked
 17656  00B2AC  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 17657  00B2AE  0E00               	movlw	0
 17658  00B2B0  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 17659  00B2B2  0EFF               	movlw	255
 17660  00B2B4  ECCE  F08F         	call	_motor_schedule_command
 17661                           
 17662                           ;encoder.c: 309: };encoder.c: 310: break;
 17663  00B2B8  D2DB               	goto	l2585
 17664  00B2BA                     
 17665                           ;encoder.c: 316: if(os.button1==1 || os.button2==1)
 17666  00B2BA  0101               	movlb	1	; () banked
 17667  00B2BC  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17668  00B2BE  B4D8               	btfsc	status,2,c
 17669  00B2C0  D003               	goto	u23150
 17670                           
 17671                           ; BSR set to: 1
 17672  00B2C2  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17673  00B2C4  A4D8               	btfss	status,2,c
 17674  00B2C6  D020               	goto	l2605
 17675  00B2C8                     u23150:
 17676                           
 17677                           ; BSR set to: 1
 17678                           ;encoder.c: 317: {;encoder.c: 318: motor_schedule_command(MOTOR_DIRECTION_CW, config.ove
      +                          rshoot_in_steps, 0);
 17679                           
 17680                           ; BSR set to: 1
 17681  00B2C8  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 17682  00B2CC  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 17683  00B2D0  0100               	movlb	0	; () banked
 17684  00B2D2  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 17685  00B2D4  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 17686  00B2D6  0E00               	movlw	0
 17687  00B2D8  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 17688  00B2DA  0E00               	movlw	0
 17689  00B2DC  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 17690  00B2DE  0E01               	movlw	1
 17691  00B2E0  ECCE  F08F         	call	_motor_schedule_command
 17692                           
 17693                           ;encoder.c: 319: motor_schedule_command(MOTOR_DIRECTION_CCW, config.overshoot_in_steps, 
      +                          0);
 17694  00B2E4  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 17695  00B2E8  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 17696  00B2EC  0100               	movlb	0	; () banked
 17697  00B2EE  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 17698  00B2F0  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 17699  00B2F2  0E00               	movlw	0
 17700  00B2F4  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 17701  00B2F6  0E00               	movlw	0
 17702  00B2F8  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 17703  00B2FA  0EFF               	movlw	255
 17704  00B2FC  ECCE  F08F         	call	_motor_schedule_command
 17705                           
 17706                           ;encoder.c: 320: os.approach_direction = MOTOR_DIRECTION_CCW;
 17707  00B300  0101               	movlb	1	; () banked
 17708  00B302  6985               	setf	(_os+18)& (0+255),b	;volatile
 17709                           
 17710                           ; BSR set to: 1
 17711                           ;encoder.c: 321: os.displayState = DISPLAY_STATE_MAIN_SETUP;
 17712  00B304  0E01               	movlw	1
 17713  00B306  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17714  00B308                     l2605:
 17715                           
 17716                           ; BSR set to: 1
 17717                           ;encoder.c: 322: };encoder.c: 323: if(os.encoder1Count+os.encoder2Count>0)
 17718                           
 17719                           ; BSR set to: 1
 17720  00B308  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17721  00B30C  0100               	movlb	0	; () banked
 17722  00B30E  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17723  00B310  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17724  00B312  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17725  00B314  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17726  00B318  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17727  00B31A  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17728  00B31C  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17729  00B31E  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17730  00B320  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17731  00B322  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17732  00B324  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17733  00B326  BFC7               	btfsc	(??_encoder_statemachine+3)& (0+255),7,b
 17734  00B328  D008               	goto	l2608
 17735  00B32A  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 17736  00B32C  E103               	bnz	u23160
 17737  00B32E  05C6               	decf	(??_encoder_statemachine+2)& (0+255),w,b
 17738  00B330  A0D8               	btfss	status,0,c
 17739  00B332  D003               	goto	l2608
 17740  00B334                     u23160:
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;encoder.c: 324: os.displayState = DISPLAY_STATE_SETUP2_CW;
 17744  00B334  0E22               	movlw	34
 17745  00B336  0101               	movlb	1	; () banked
 17746  00B338  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17747  00B33A                     l2608:
 17748                           
 17749                           ;encoder.c: 325: if(os.encoder1Count+os.encoder2Count<0)
 17750                           
 17751                           ; BSR set to: 1
 17752  00B33A  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17753  00B33E  0100               	movlb	0	; () banked
 17754  00B340  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17755  00B342  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17756  00B344  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17757  00B346  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17758  00B34A  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17759  00B34C  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17760  00B34E  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17761  00B350  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17762  00B352  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17763  00B354  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17764  00B356  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17765  00B358  AFC7               	btfss	(??_encoder_statemachine+3)& (0+255),7,b
 17766  00B35A  D28A               	goto	l2585
 17767                           
 17768                           ; BSR set to: 0
 17769                           ;encoder.c: 326: os.displayState = DISPLAY_STATE_SETUP2_CW;
 17770  00B35C  0E22               	movlw	34
 17771  00B35E  D251               	goto	L22
 17772  00B360                     
 17773                           ; BSR set to: 1
 17774                           ;encoder.c: 329: if(os.button1==1 || os.button2==1)
 17775                           
 17776                           ; BSR set to: 1
 17777  00B360  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17778  00B362  B4D8               	btfsc	status,2,c
 17779  00B364  D003               	goto	u23190
 17780                           
 17781                           ; BSR set to: 1
 17782  00B366  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 17783  00B368  A4D8               	btfss	status,2,c
 17784  00B36A  D021               	goto	l2612
 17785  00B36C                     u23190:
 17786                           
 17787                           ; BSR set to: 1
 17788                           ;encoder.c: 330: {;encoder.c: 331: motor_schedule_command(MOTOR_DIRECTION_CCW, config.ov
      +                          ershoot_in_steps, 0);
 17789                           
 17790                           ; BSR set to: 1
 17791  00B36C  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 17792  00B370  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 17793  00B374  0100               	movlb	0	; () banked
 17794  00B376  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 17795  00B378  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 17796  00B37A  0E00               	movlw	0
 17797  00B37C  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 17798  00B37E  0E00               	movlw	0
 17799  00B380  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 17800  00B382  0EFF               	movlw	255
 17801  00B384  ECCE  F08F         	call	_motor_schedule_command
 17802                           
 17803                           ;encoder.c: 332: motor_schedule_command(MOTOR_DIRECTION_CW, config.overshoot_in_steps, 0
      +                          );
 17804  00B388  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 17805  00B38C  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 17806  00B390  0100               	movlb	0	; () banked
 17807  00B392  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 17808  00B394  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 17809  00B396  0E00               	movlw	0
 17810  00B398  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 17811  00B39A  0E00               	movlw	0
 17812  00B39C  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 17813  00B39E  0E01               	movlw	1
 17814  00B3A0  ECCE  F08F         	call	_motor_schedule_command
 17815                           
 17816                           ;encoder.c: 333: os.approach_direction = MOTOR_DIRECTION_CW;
 17817  00B3A4  0E01               	movlw	1
 17818  00B3A6  0101               	movlb	1	; () banked
 17819  00B3A8  6F85               	movwf	(_os+18)& (0+255),b	;volatile
 17820                           
 17821                           ; BSR set to: 1
 17822                           ;encoder.c: 334: os.displayState = DISPLAY_STATE_MAIN_SETUP;
 17823  00B3AA  0E01               	movlw	1
 17824  00B3AC  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17825  00B3AE                     l2612:
 17826                           
 17827                           ; BSR set to: 1
 17828                           ;encoder.c: 335: };encoder.c: 336: if(os.encoder1Count+os.encoder2Count>0)
 17829                           
 17830                           ; BSR set to: 1
 17831  00B3AE  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17832  00B3B2  0100               	movlb	0	; () banked
 17833  00B3B4  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17834  00B3B6  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17835  00B3B8  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17836  00B3BA  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17837  00B3BE  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17838  00B3C0  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17839  00B3C2  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17840  00B3C4  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17841  00B3C6  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17842  00B3C8  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17843  00B3CA  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17844  00B3CC  BFC7               	btfsc	(??_encoder_statemachine+3)& (0+255),7,b
 17845  00B3CE  D008               	goto	l2615
 17846  00B3D0  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 17847  00B3D2  E103               	bnz	u23200
 17848  00B3D4  05C6               	decf	(??_encoder_statemachine+2)& (0+255),w,b
 17849  00B3D6  A0D8               	btfss	status,0,c
 17850  00B3D8  D003               	goto	l2615
 17851  00B3DA                     u23200:
 17852                           
 17853                           ; BSR set to: 0
 17854                           ;encoder.c: 337: os.displayState = DISPLAY_STATE_SETUP2_CCW;
 17855  00B3DA  0E21               	movlw	33
 17856  00B3DC  0101               	movlb	1	; () banked
 17857  00B3DE  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17858  00B3E0                     l2615:
 17859                           
 17860                           ;encoder.c: 338: if(os.encoder1Count+os.encoder2Count<0)
 17861                           
 17862                           ; BSR set to: 1
 17863  00B3E0  C178  F0C4         	movff	_os+5,??_encoder_statemachine	;volatile
 17864  00B3E4  0100               	movlb	0	; () banked
 17865  00B3E6  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 17866  00B3E8  BFC4               	btfsc	??_encoder_statemachine& (0+255),7,b
 17867  00B3EA  07C5               	decf	(??_encoder_statemachine+1)& (0+255),f,b
 17868  00B3EC  C176  F0C6         	movff	_os+3,??_encoder_statemachine+2	;volatile
 17869  00B3F0  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 17870  00B3F2  BFC6               	btfsc	(??_encoder_statemachine+2)& (0+255),7,b
 17871  00B3F4  07C7               	decf	(??_encoder_statemachine+3)& (0+255),f,b
 17872  00B3F6  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 17873  00B3F8  27C6               	addwf	(??_encoder_statemachine+2)& (0+255),f,b
 17874  00B3FA  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 17875  00B3FC  23C7               	addwfc	(??_encoder_statemachine+3)& (0+255),f,b
 17876  00B3FE  AFC7               	btfss	(??_encoder_statemachine+3)& (0+255),7,b
 17877  00B400  D237               	goto	l2585
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;encoder.c: 339: os.displayState = DISPLAY_STATE_SETUP2_CCW;
 17881  00B402  0E21               	movlw	33
 17882  00B404  D1FE               	goto	L22
 17883  00B406                     
 17884                           ; BSR set to: 1
 17885  00B406  0101               	movlb	1	; () banked
 17886  00B408  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 17887                           
 17888                           ; Switch size 1, requested type "space"
 17889                           ; Number of cases is 2, Range of values is 33 to 34
 17890                           ; switch strategies available:
 17891                           ; Name         Instructions Cycles
 17892                           ; simple_byte            7     4 (average)
 17893                           ;	Chosen strategy is simple_byte
 17894  00B40A  0A21               	xorlw	33	; case 33
 17895  00B40C  B4D8               	btfsc	status,2,c
 17896  00B40E  D755               	goto	l2604
 17897  00B410  0A03               	xorlw	3	; case 34
 17898  00B412  B4D8               	btfsc	status,2,c
 17899  00B414  D7A5               	goto	l2611
 17900                           
 17901                           ; BSR set to: 1
 17902                           ;encoder.c: 342: break;
 17903  00B416  D22C               	goto	l2585
 17904  00B418                     
 17905                           ; BSR set to: 1
 17906                           ;encoder.c: 348: if(os.button1==1)
 17907                           
 17908                           ; BSR set to: 1
 17909  00B418  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17910  00B41A  A4D8               	btfss	status,2,c
 17911  00B41C  D005               	goto	l2620
 17912                           
 17913                           ; BSR set to: 1
 17914                           ;encoder.c: 349: {;encoder.c: 351: motor_divide_jump_to_nearest();
 17915  00B41E  EC51  F078         	call	_motor_divide_jump_to_nearest	;wreg free
 17916                           
 17917                           ;encoder.c: 352: os.displayState = DISPLAY_STATE_DIVIDE2_NORMAL;
 17918  00B422  0E41               	movlw	65
 17919  00B424  0101               	movlb	1	; () banked
 17920  00B426  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17921  00B428                     l2620:
 17922                           
 17923                           ; BSR set to: 1
 17924                           ;encoder.c: 353: };encoder.c: 354: if(os.encoder1Count>0)
 17925                           
 17926                           ; BSR set to: 1
 17927  00B428  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 17928  00B42A  0A80               	xorlw	128
 17929  00B42C  0F7F               	addlw	-129
 17930  00B42E  A0D8               	btfss	status,0,c
 17931  00B430  D002               	goto	l2621
 17932                           
 17933                           ; BSR set to: 1
 17934                           ;encoder.c: 355: os.displayState = DISPLAY_STATE_DIVIDE1_CANCEL;
 17935  00B432  0E32               	movlw	50
 17936  00B434  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17937  00B436                     l2621:
 17938                           
 17939                           ; BSR set to: 1
 17940                           ;encoder.c: 356: if(os.encoder1Count<0)
 17941                           
 17942                           ; BSR set to: 1
 17943  00B436  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 17944  00B438  D01B               	goto	l2623
 17945                           
 17946                           ; BSR set to: 1
 17947                           ;encoder.c: 357: os.displayState = DISPLAY_STATE_DIVIDE1_CANCEL;
 17948  00B43A  0E32               	movlw	50
 17949  00B43C  D00F               	goto	L13
 17950  00B43E                     
 17951                           ; BSR set to: 1
 17952                           ;encoder.c: 360: if(os.button1==1)
 17953                           
 17954                           ; BSR set to: 1
 17955  00B43E  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 17956  00B440  A4D8               	btfss	status,2,c
 17957  00B442  D002               	goto	l2625
 17958                           
 17959                           ; BSR set to: 1
 17960                           ;encoder.c: 361: os.displayState = DISPLAY_STATE_MAIN_DIVIDE;
 17961  00B444  0E02               	movlw	2
 17962  00B446  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17963  00B448                     l2625:
 17964                           
 17965                           ; BSR set to: 1
 17966                           ;encoder.c: 362: if(os.encoder1Count>0)
 17967                           
 17968                           ; BSR set to: 1
 17969  00B448  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 17970  00B44A  0A80               	xorlw	128
 17971  00B44C  0F7F               	addlw	-129
 17972  00B44E  A0D8               	btfss	status,0,c
 17973  00B450  D002               	goto	l2626
 17974                           
 17975                           ; BSR set to: 1
 17976                           ;encoder.c: 363: os.displayState = DISPLAY_STATE_DIVIDE1_CONFIRM;
 17977  00B452  0E31               	movlw	49
 17978  00B454  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17979  00B456                     l2626:
 17980                           
 17981                           ; BSR set to: 1
 17982                           ;encoder.c: 364: if(os.encoder1Count<0)
 17983                           
 17984                           ; BSR set to: 1
 17985  00B456  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 17986  00B458  D00B               	goto	l2623
 17987                           
 17988                           ; BSR set to: 1
 17989                           ;encoder.c: 365: os.displayState = DISPLAY_STATE_DIVIDE1_CONFIRM;
 17990  00B45A  0E31               	movlw	49
 17991  00B45C                     L13:
 17992  00B45C  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 17993                           
 17994                           ; BSR set to: 1
 17995                           ;encoder.c: 367: }
 17996                           
 17997                           ; BSR set to: 1
 17998                           ;encoder.c: 366: break;
 17999  00B45E  D008               	goto	l2623
 18000  00B460                     
 18001                           ; BSR set to: 1
 18002  00B460  0101               	movlb	1	; () banked
 18003  00B462  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 18004                           
 18005                           ; Switch size 1, requested type "space"
 18006                           ; Number of cases is 2, Range of values is 49 to 50
 18007                           ; switch strategies available:
 18008                           ; Name         Instructions Cycles
 18009                           ; simple_byte            7     4 (average)
 18010                           ;	Chosen strategy is simple_byte
 18011  00B464  0A31               	xorlw	49	; case 49
 18012  00B466  B4D8               	btfsc	status,2,c
 18013  00B468  D7D7               	goto	l2619
 18014  00B46A  0A03               	xorlw	3	; case 50
 18015  00B46C  B4D8               	btfsc	status,2,c
 18016  00B46E  D7E7               	goto	l2624
 18017  00B470                     l2623:
 18018                           
 18019                           ; BSR set to: 1
 18020                           ;encoder.c: 368: if(os.button2==1)
 18021                           
 18022                           ; BSR set to: 1
 18023  00B470  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18024  00B472  A4D8               	btfss	status,2,c
 18025  00B474  D005               	goto	l2628
 18026                           
 18027                           ; BSR set to: 1
 18028                           ;encoder.c: 369: {;encoder.c: 370: os.divide_step_size = _encoder_next_divide_step_size(
      +                          os.divide_step_size);
 18029  00B476  5188               	movf	(_os+21)& (0+255),w,b	;volatile
 18030  00B478  ECA6  F09F         	call	__encoder_next_divide_step_size
 18031  00B47C  0101               	movlb	1	; () banked
 18032  00B47E  6F88               	movwf	(_os+21)& (0+255),b	;volatile
 18033  00B480                     l2628:
 18034                           
 18035                           ; BSR set to: 1
 18036                           ;encoder.c: 371: };encoder.c: 372: if(os.encoder2Count>0)
 18037                           
 18038                           ; BSR set to: 1
 18039  00B480  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 18040  00B482  0A80               	xorlw	128
 18041  00B484  0F7F               	addlw	-129
 18042  00B486  A0D8               	btfss	status,0,c
 18043  00B488  D004               	goto	l2629
 18044                           
 18045                           ; BSR set to: 1
 18046                           ;encoder.c: 373: {;encoder.c: 374: os.division += os.divide_step_size;
 18047  00B48A  5188               	movf	(_os+21)& (0+255),w,b	;volatile
 18048  00B48C  2786               	addwf	(_os+19)& (0+255),f,b	;volatile
 18049  00B48E  0E00               	movlw	0
 18050  00B490  2387               	addwfc	(_os+20)& (0+255),f,b	;volatile
 18051  00B492                     l2629:
 18052                           
 18053                           ; BSR set to: 1
 18054                           ;encoder.c: 375: };encoder.c: 376: if(os.encoder2Count<0)
 18055  00B492  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 18056  00B494  D1ED               	goto	l2585
 18057                           
 18058                           ; BSR set to: 1
 18059                           ;encoder.c: 377: {;encoder.c: 378: if(os.division>os.divide_step_size)
 18060  00B496  5188               	movf	(_os+21)& (0+255),w,b	;volatile
 18061  00B498  0100               	movlb	0	; () banked
 18062  00B49A  6FC4               	movwf	??_encoder_statemachine& (0+255),b
 18063  00B49C  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 18064  00B49E  0101               	movlb	1	; () banked
 18065  00B4A0  5186               	movf	(_os+19)& (0+255),w,b	;volatile
 18066  00B4A2  0100               	movlb	0	; () banked
 18067  00B4A4  5DC4               	subwf	??_encoder_statemachine& (0+255),w,b
 18068  00B4A6  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 18069  00B4A8  0A80               	xorlw	128
 18070  00B4AA  6FC6               	movwf	(??_encoder_statemachine+2)& (0+255),b
 18071  00B4AC  0101               	movlb	1	; () banked
 18072  00B4AE  5187               	movf	(_os+20)& (0+255),w,b	;volatile
 18073  00B4B0  0A80               	xorlw	128
 18074  00B4B2  0100               	movlb	0	; () banked
 18075  00B4B4  59C6               	subwfb	(??_encoder_statemachine+2)& (0+255),w,b
 18076  00B4B6  B0D8               	btfsc	status,0,c
 18077  00B4B8  D006               	goto	l2631
 18078                           
 18079                           ; BSR set to: 0
 18080                           ;encoder.c: 379: {;encoder.c: 380: os.division -= os.divide_step_size;
 18081  00B4BA  0101               	movlb	1	; () banked
 18082  00B4BC  5188               	movf	(_os+21)& (0+255),w,b	;volatile
 18083  00B4BE  5F86               	subwf	(_os+19)& (0+255),f,b	;volatile
 18084  00B4C0  0E00               	movlw	0
 18085  00B4C2  5B87               	subwfb	(_os+20)& (0+255),f,b	;volatile
 18086                           
 18087                           ;encoder.c: 381: }
 18088  00B4C4  D1D5               	goto	l2585
 18089  00B4C6                     l2631:
 18090                           
 18091                           ;encoder.c: 382: else;encoder.c: 383: {;encoder.c: 384: os.division = 1;
 18092                           
 18093                           ; BSR set to: 1
 18094  00B4C6  0E00               	movlw	0
 18095  00B4C8  0101               	movlb	1	; () banked
 18096  00B4CA  6F87               	movwf	(_os+20)& (0+255),b	;volatile
 18097  00B4CC  0E01               	movlw	1
 18098  00B4CE  6F86               	movwf	(_os+19)& (0+255),b	;volatile
 18099                           
 18100                           ; BSR set to: 1
 18101                           ;encoder.c: 385: };encoder.c: 386: };encoder.c: 387: break;
 18102                           
 18103                           ; BSR set to: 1
 18104  00B4D0  D1CF               	goto	l2585
 18105  00B4D2                     
 18106                           ;encoder.c: 390: if(os.button1==1)
 18107                           
 18108                           ; BSR set to: 1
 18109  00B4D2  0101               	movlb	1	; () banked
 18110  00B4D4  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 18111  00B4D6  A4D8               	btfss	status,2,c
 18112  00B4D8  D002               	goto	l2634
 18113                           
 18114                           ; BSR set to: 1
 18115                           ;encoder.c: 391: {;encoder.c: 392: os.displayState = DISPLAY_STATE_MAIN_DIVIDE;
 18116  00B4DA  0E02               	movlw	2
 18117  00B4DC  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18118  00B4DE                     l2634:
 18119                           
 18120                           ; BSR set to: 1
 18121                           ;encoder.c: 393: };encoder.c: 394: if(os.button2==1)
 18122                           
 18123                           ; BSR set to: 1
 18124  00B4DE  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18125  00B4E0  B4D8               	btfsc	status,2,c
 18126                           
 18127                           ; BSR set to: 1
 18128                           ;encoder.c: 395: {;encoder.c: 396: motor_divide_jump();
 18129  00B4E2  EC24  F090         	call	_motor_divide_jump	;wreg free
 18130                           
 18131                           ;encoder.c: 397: };encoder.c: 398: if(os.encoder2Count>0)
 18132  00B4E6  0101               	movlb	1	; () banked
 18133  00B4E8  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 18134  00B4EA  0A80               	xorlw	128
 18135  00B4EC  0F7F               	addlw	-129
 18136  00B4EE  B0D8               	btfsc	status,0,c
 18137                           
 18138                           ; BSR set to: 1
 18139                           ;encoder.c: 399: {;encoder.c: 400: _divide_jump_size_increment();
 18140  00B4F0  EC86  F09D         	call	__divide_jump_size_increment	;wreg free
 18141                           
 18142                           ;encoder.c: 401: };encoder.c: 402: if(os.encoder2Count<0)
 18143  00B4F4  0101               	movlb	1	; () banked
 18144  00B4F6  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 18145  00B4F8  D1BB               	goto	l2585
 18146                           
 18147                           ; BSR set to: 1
 18148                           ;encoder.c: 403: {;encoder.c: 404: _divide_jump_size_decrement();
 18149  00B4FA  EC6B  F096         	call	__divide_jump_size_decrement	;wreg free
 18150                           
 18151                           ;encoder.c: 405: };encoder.c: 406: break;
 18152  00B4FE  D1B8               	goto	l2585
 18153  00B500                     
 18154                           ;encoder.c: 412: if(os.button1==1)
 18155  00B500  0101               	movlb	1	; () banked
 18156  00B502  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 18157  00B504  A4D8               	btfss	status,2,c
 18158  00B506  D002               	goto	l2641
 18159                           
 18160                           ; BSR set to: 1
 18161                           ;encoder.c: 413: {;encoder.c: 414: os.displayState = DISPLAY_STATE_ARC2_CANCEL;
 18162  00B508  0E62               	movlw	98
 18163  00B50A  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18164  00B50C                     l2641:
 18165                           
 18166                           ; BSR set to: 1
 18167                           ;encoder.c: 415: };encoder.c: 416: if(os.encoder1Count>0)
 18168                           
 18169                           ; BSR set to: 1
 18170  00B50C  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 18171  00B50E  0A80               	xorlw	128
 18172  00B510  0F7F               	addlw	-129
 18173  00B512  A0D8               	btfss	status,0,c
 18174  00B514  D002               	goto	l2642
 18175                           
 18176                           ; BSR set to: 1
 18177                           ;encoder.c: 417: os.displayState = DISPLAY_STATE_ARC1_CANCEL;
 18178  00B516  0E52               	movlw	82
 18179  00B518  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18180  00B51A                     l2642:
 18181                           
 18182                           ; BSR set to: 1
 18183                           ;encoder.c: 418: if(os.encoder1Count<0)
 18184                           
 18185                           ; BSR set to: 1
 18186  00B51A  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 18187  00B51C  D01B               	goto	l2644
 18188                           
 18189                           ; BSR set to: 1
 18190                           ;encoder.c: 419: os.displayState = DISPLAY_STATE_ARC1_CANCEL;
 18191  00B51E  0E52               	movlw	82
 18192  00B520  D00F               	goto	L14
 18193  00B522                     
 18194                           ; BSR set to: 1
 18195                           ;encoder.c: 422: if(os.button1==1)
 18196                           
 18197                           ; BSR set to: 1
 18198  00B522  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 18199  00B524  A4D8               	btfss	status,2,c
 18200  00B526  D002               	goto	l2646
 18201                           
 18202                           ; BSR set to: 1
 18203                           ;encoder.c: 423: os.displayState = DISPLAY_STATE_MAIN_ARC;
 18204  00B528  0E03               	movlw	3
 18205  00B52A  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18206  00B52C                     l2646:
 18207                           
 18208                           ; BSR set to: 1
 18209                           ;encoder.c: 424: if(os.encoder1Count>0)
 18210                           
 18211                           ; BSR set to: 1
 18212  00B52C  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 18213  00B52E  0A80               	xorlw	128
 18214  00B530  0F7F               	addlw	-129
 18215  00B532  A0D8               	btfss	status,0,c
 18216  00B534  D002               	goto	l2647
 18217                           
 18218                           ; BSR set to: 1
 18219                           ;encoder.c: 425: os.displayState = DISPLAY_STATE_ARC1_CONFIRM;
 18220  00B536  0E51               	movlw	81
 18221  00B538  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18222  00B53A                     l2647:
 18223                           
 18224                           ; BSR set to: 1
 18225                           ;encoder.c: 426: if(os.encoder1Count<0)
 18226                           
 18227                           ; BSR set to: 1
 18228  00B53A  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 18229  00B53C  D00B               	goto	l2644
 18230                           
 18231                           ; BSR set to: 1
 18232                           ;encoder.c: 427: os.displayState = DISPLAY_STATE_ARC1_CONFIRM;
 18233  00B53E  0E51               	movlw	81
 18234  00B540                     L14:
 18235  00B540  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18236                           
 18237                           ; BSR set to: 1
 18238                           ;encoder.c: 429: }
 18239                           
 18240                           ; BSR set to: 1
 18241                           ;encoder.c: 428: break;
 18242  00B542  D008               	goto	l2644
 18243  00B544                     
 18244                           ; BSR set to: 1
 18245  00B544  0101               	movlb	1	; () banked
 18246  00B546  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 18247                           
 18248                           ; Switch size 1, requested type "space"
 18249                           ; Number of cases is 2, Range of values is 81 to 82
 18250                           ; switch strategies available:
 18251                           ; Name         Instructions Cycles
 18252                           ; simple_byte            7     4 (average)
 18253                           ;	Chosen strategy is simple_byte
 18254  00B548  0A51               	xorlw	81	; case 81
 18255  00B54A  B4D8               	btfsc	status,2,c
 18256  00B54C  D7D9               	goto	l2640
 18257  00B54E  0A03               	xorlw	3	; case 82
 18258  00B550  B4D8               	btfsc	status,2,c
 18259  00B552  D7E7               	goto	l2645
 18260  00B554                     l2644:
 18261                           
 18262                           ; BSR set to: 1
 18263                           ;encoder.c: 430: if(os.button2==1)
 18264                           
 18265                           ; BSR set to: 1
 18266  00B554  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18267  00B556  A4D8               	btfss	status,2,c
 18268  00B558  D00A               	goto	l2649
 18269                           
 18270                           ; BSR set to: 1
 18271                           ;encoder.c: 431: {;encoder.c: 432: os.arc_step_size = _encoder_next_arc_step_size(os.arc
      +                          _step_size);
 18272  00B55A  C18D  F060         	movff	_os+26,__encoder_next_arc_step_size@old_stepsize	;volatile
 18273  00B55E  C18E  F061         	movff	_os+27,__encoder_next_arc_step_size@old_stepsize+1	;volatile
 18274  00B562  ECFC  F095         	call	__encoder_next_arc_step_size	;wreg free
 18275  00B566  C060  F18D         	movff	?__encoder_next_arc_step_size,_os+26	;volatile
 18276  00B56A  C061  F18E         	movff	?__encoder_next_arc_step_size+1,_os+27	;volatile
 18277  00B56E                     l2649:
 18278                           
 18279                           ;encoder.c: 433: };encoder.c: 434: if(os.encoder2Count>0)
 18280  00B56E  0101               	movlb	1	; () banked
 18281  00B570  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 18282  00B572  0A80               	xorlw	128
 18283  00B574  0F7F               	addlw	-129
 18284  00B576  A0D8               	btfss	status,0,c
 18285  00B578  D01C               	goto	l2651
 18286                           
 18287                           ; BSR set to: 1
 18288                           ;encoder.c: 435: {;encoder.c: 436: os.arc_size += os.arc_step_size;
 18289  00B57A  518D               	movf	(_os+26)& (0+255),w,b	;volatile
 18290  00B57C  278F               	addwf	(_os+28)& (0+255),f,b	;volatile
 18291  00B57E  518E               	movf	(_os+27)& (0+255),w,b	;volatile
 18292  00B580  2390               	addwfc	(_os+29)& (0+255),f,b	;volatile
 18293  00B582  0E00               	movlw	0
 18294  00B584  2391               	addwfc	(_os+30)& (0+255),f,b	;volatile
 18295  00B586  0E00               	movlw	0
 18296  00B588  2392               	addwfc	(_os+31)& (0+255),f,b	;volatile
 18297                           
 18298                           ; BSR set to: 1
 18299                           ;encoder.c: 437: if(os.arc_size>100000)
 18300  00B58A  BF92               	btfsc	(_os+31)& (0+255),7,b	;volatile
 18301  00B58C  D012               	goto	l2651
 18302  00B58E  5192               	movf	(_os+31)& (0+255),w,b	;volatile
 18303  00B590  E108               	bnz	u23440
 18304  00B592  0EA1               	movlw	161
 18305  00B594  5D8F               	subwf	(_os+28)& (0+255),w,b	;volatile
 18306  00B596  0E86               	movlw	134
 18307  00B598  5990               	subwfb	(_os+29)& (0+255),w,b	;volatile
 18308  00B59A  0E01               	movlw	1
 18309  00B59C  5991               	subwfb	(_os+30)& (0+255),w,b	;volatile
 18310  00B59E  A0D8               	btfss	status,0,c
 18311  00B5A0  D008               	goto	l2651
 18312  00B5A2                     u23440:
 18313                           
 18314                           ; BSR set to: 1
 18315                           ;encoder.c: 438: os.arc_size = 100000;
 18316  00B5A2  0EA0               	movlw	160
 18317  00B5A4  6F8F               	movwf	(_os+28)& (0+255),b	;volatile
 18318  00B5A6  0E86               	movlw	134
 18319  00B5A8  6F90               	movwf	(_os+29)& (0+255),b	;volatile
 18320  00B5AA  0E01               	movlw	1
 18321  00B5AC  6F91               	movwf	(_os+30)& (0+255),b	;volatile
 18322  00B5AE  0E00               	movlw	0
 18323  00B5B0  6F92               	movwf	(_os+31)& (0+255),b	;volatile
 18324  00B5B2                     l2651:
 18325                           
 18326                           ; BSR set to: 1
 18327                           ;encoder.c: 439: };encoder.c: 440: if(os.encoder2Count<0)
 18328                           
 18329                           ; BSR set to: 1
 18330                           
 18331                           ; BSR set to: 1
 18332  00B5B2  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 18333  00B5B4  D15D               	goto	l2585
 18334                           
 18335                           ; BSR set to: 1
 18336                           ;encoder.c: 441: {;encoder.c: 442: os.arc_size -= os.arc_step_size;
 18337  00B5B6  518D               	movf	(_os+26)& (0+255),w,b	;volatile
 18338  00B5B8  0100               	movlb	0	; () banked
 18339  00B5BA  6FC4               	movwf	??_encoder_statemachine& (0+255),b
 18340  00B5BC  0101               	movlb	1	; () banked
 18341  00B5BE  518E               	movf	(_os+27)& (0+255),w,b	;volatile
 18342  00B5C0  0100               	movlb	0	; () banked
 18343  00B5C2  6FC5               	movwf	(??_encoder_statemachine+1)& (0+255),b
 18344  00B5C4  6BC6               	clrf	(??_encoder_statemachine+2)& (0+255),b
 18345  00B5C6  6BC7               	clrf	(??_encoder_statemachine+3)& (0+255),b
 18346  00B5C8  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 18347  00B5CA  0101               	movlb	1	; () banked
 18348  00B5CC  5F8F               	subwf	(_os+28)& (0+255),f,b	;volatile
 18349  00B5CE  0100               	movlb	0	; () banked
 18350  00B5D0  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 18351  00B5D2  0101               	movlb	1	; () banked
 18352  00B5D4  5B90               	subwfb	(_os+29)& (0+255),f,b	;volatile
 18353  00B5D6  0100               	movlb	0	; () banked
 18354  00B5D8  51C6               	movf	(??_encoder_statemachine+2)& (0+255),w,b
 18355  00B5DA  0101               	movlb	1	; () banked
 18356  00B5DC  5B91               	subwfb	(_os+30)& (0+255),f,b	;volatile
 18357  00B5DE  0100               	movlb	0	; () banked
 18358  00B5E0  51C7               	movf	(??_encoder_statemachine+3)& (0+255),w,b
 18359  00B5E2  0101               	movlb	1	; () banked
 18360  00B5E4  5B92               	subwfb	(_os+31)& (0+255),f,b	;volatile
 18361                           
 18362                           ;encoder.c: 443: if(os.arc_size<1)
 18363  00B5E6  BF92               	btfsc	(_os+31)& (0+255),7,b	;volatile
 18364  00B5E8  D007               	goto	u23460
 18365  00B5EA  5192               	movf	(_os+31)& (0+255),w,b	;volatile
 18366  00B5EC  1191               	iorwf	(_os+30)& (0+255),w,b	;volatile
 18367  00B5EE  1190               	iorwf	(_os+29)& (0+255),w,b	;volatile
 18368  00B5F0  E102               	bnz	u23461
 18369  00B5F2  058F               	decf	(_os+28)& (0+255),w,b	;volatile
 18370  00B5F4  B0D8               	btfsc	status,0,c
 18371  00B5F6                     u23461:
 18372  00B5F6  D13C               	goto	l2585
 18373  00B5F8                     u23460:
 18374                           
 18375                           ; BSR set to: 1
 18376                           ;encoder.c: 444: os.arc_size = 1;
 18377  00B5F8  0E01               	movlw	1
 18378  00B5FA  6F8F               	movwf	(_os+28)& (0+255),b	;volatile
 18379  00B5FC  0E00               	movlw	0
 18380  00B5FE  6F90               	movwf	(_os+29)& (0+255),b	;volatile
 18381  00B600  0E00               	movlw	0
 18382  00B602  6F91               	movwf	(_os+30)& (0+255),b	;volatile
 18383  00B604  0E00               	movlw	0
 18384  00B606  6F92               	movwf	(_os+31)& (0+255),b	;volatile
 18385                           
 18386                           ; BSR set to: 1
 18387                           ;encoder.c: 445: };encoder.c: 446: break;
 18388                           
 18389                           ; BSR set to: 1
 18390  00B608  D133               	goto	l2585
 18391  00B60A                     
 18392                           ;encoder.c: 449: if(os.encoder1Count>0)
 18393                           
 18394                           ; BSR set to: 1
 18395  00B60A  0101               	movlb	1	; () banked
 18396  00B60C  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 18397  00B60E  0A80               	xorlw	128
 18398  00B610  0F7F               	addlw	-129
 18399  00B612  A0D8               	btfss	status,0,c
 18400  00B614  D011               	goto	l2657
 18401                           
 18402                           ; BSR set to: 1
 18403                           ;encoder.c: 450: {;encoder.c: 451: if(os.arc_speed<config.maximum_speed_arc)
 18404  00B616  51B2               	movf	(_config+15)& (0+255),w,b
 18405  00B618  5D93               	subwf	(_os+32)& (0+255),w,b	;volatile
 18406  00B61A  51B3               	movf	(_config+16)& (0+255),w,b
 18407  00B61C  5994               	subwfb	(_os+33)& (0+255),w,b	;volatile
 18408  00B61E  B0D8               	btfsc	status,0,c
 18409  00B620  D002               	goto	l2656
 18410                           
 18411                           ; BSR set to: 1
 18412                           ;encoder.c: 452: ++os.arc_speed;
 18413  00B622  4B93               	infsnz	(_os+32)& (0+255),f,b	;volatile
 18414  00B624  2B94               	incf	(_os+33)& (0+255),f,b	;volatile
 18415  00B626                     l2656:
 18416                           
 18417                           ; BSR set to: 1
 18418                           ;encoder.c: 453: if(os.busy)
 18419                           
 18420                           ; BSR set to: 1
 18421  00B626  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 18422  00B628  B4D8               	btfsc	status,2,c
 18423  00B62A  D006               	goto	l2657
 18424                           
 18425                           ; BSR set to: 1
 18426                           ;encoder.c: 454: motor_change_speed(os.arc_speed);
 18427  00B62C  C193  F060         	movff	_os+32,motor_change_speed@new_speed	;volatile
 18428  00B630  C194  F061         	movff	_os+33,motor_change_speed@new_speed+1	;volatile
 18429  00B634  EC96  F0A1         	call	_motor_change_speed	;wreg free
 18430  00B638                     l2657:
 18431                           
 18432                           ;encoder.c: 455: };encoder.c: 456: if(os.encoder1Count<0)
 18433  00B638  0101               	movlb	1	; () banked
 18434  00B63A  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 18435  00B63C  D046               	goto	l2661
 18436                           
 18437                           ; BSR set to: 1
 18438                           ;encoder.c: 457: {;encoder.c: 458: if(os.arc_speed>config.minimum_speed)
 18439  00B63E  5193               	movf	(_os+32)& (0+255),w,b	;volatile
 18440  00B640  5DAC               	subwf	(_config+9)& (0+255),w,b
 18441  00B642  5194               	movf	(_os+33)& (0+255),w,b	;volatile
 18442  00B644  59AD               	subwfb	(_config+10)& (0+255),w,b
 18443  00B646  B0D8               	btfsc	status,0,c
 18444  00B648  D003               	goto	l2659
 18445                           
 18446                           ; BSR set to: 1
 18447                           ;encoder.c: 459: --os.arc_speed;
 18448  00B64A  0793               	decf	(_os+32)& (0+255),f,b	;volatile
 18449  00B64C  A0D8               	btfss	status,0,c
 18450  00B64E  0794               	decf	(_os+33)& (0+255),f,b	;volatile
 18451  00B650                     l2659:
 18452                           
 18453                           ; BSR set to: 1
 18454                           ;encoder.c: 460: if(os.busy)
 18455                           
 18456                           ; BSR set to: 1
 18457  00B650  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 18458  00B652  B4D8               	btfsc	status,2,c
 18459  00B654  D03A               	goto	l2661
 18460                           
 18461                           ; BSR set to: 1
 18462                           ;encoder.c: 461: motor_change_speed(os.arc_speed);
 18463  00B656  C193  F060         	movff	_os+32,motor_change_speed@new_speed	;volatile
 18464  00B65A  C194  F061         	movff	_os+33,motor_change_speed@new_speed+1	;volatile
 18465  00B65E  EC96  F0A1         	call	_motor_change_speed	;wreg free
 18466                           
 18467                           ;encoder.c: 462: };encoder.c: 463: switch(os.displayState)
 18468  00B662  D033               	goto	l2661
 18469  00B664                     
 18470                           ;encoder.c: 466: if(os.button2==1)
 18471  00B664  0101               	movlb	1	; () banked
 18472  00B666  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18473  00B668  A4D8               	btfss	status,2,c
 18474  00B66A  D006               	goto	l2663
 18475                           
 18476                           ; BSR set to: 1
 18477                           ;encoder.c: 467: {;encoder.c: 468: motor_arc_move(MOTOR_DIRECTION_CCW);
 18478  00B66C  0EFF               	movlw	255
 18479  00B66E  ECB8  F088         	call	_motor_arc_move
 18480                           
 18481                           ;encoder.c: 469: os.displayState = DISPLAY_STATE_ARC2_CANCEL;
 18482  00B672  0E62               	movlw	98
 18483  00B674  0101               	movlb	1	; () banked
 18484  00B676  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18485  00B678                     l2663:
 18486                           
 18487                           ; BSR set to: 1
 18488                           ;encoder.c: 470: };encoder.c: 471: if(os.encoder2Count>0)
 18489                           
 18490                           ; BSR set to: 1
 18491  00B678  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 18492  00B67A  0A80               	xorlw	128
 18493  00B67C  0F7F               	addlw	-129
 18494  00B67E  A0D8               	btfss	status,0,c
 18495  00B680  D0F7               	goto	l2585
 18496                           
 18497                           ; BSR set to: 1
 18498                           ;encoder.c: 472: os.displayState = DISPLAY_STATE_ARC2_CANCEL;
 18499  00B682  0E62               	movlw	98
 18500  00B684  D0BF               	goto	L21
 18501  00B686                     
 18502                           ; BSR set to: 1
 18503                           ;encoder.c: 475: if(os.button2==1)
 18504                           
 18505                           ; BSR set to: 1
 18506  00B686  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18507  00B688  A4D8               	btfss	status,2,c
 18508  00B68A  D007               	goto	l2667
 18509                           
 18510                           ; BSR set to: 1
 18511                           ;encoder.c: 476: {;encoder.c: 477: if(os.busy)
 18512  00B68C  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 18513  00B68E  A4D8               	btfss	status,2,c
 18514                           
 18515                           ; BSR set to: 1
 18516                           ;encoder.c: 478: motor_stop();
 18517  00B690  ECBB  F09C         	call	_motor_stop	;wreg free
 18518                           
 18519                           ;encoder.c: 479: os.displayState = DISPLAY_STATE_MAIN_ARC;
 18520  00B694  0E03               	movlw	3
 18521  00B696  0101               	movlb	1	; () banked
 18522  00B698  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18523  00B69A                     l2667:
 18524                           
 18525                           ; BSR set to: 1
 18526                           ;encoder.c: 480: };encoder.c: 481: if(os.encoder2Count>0)
 18527                           
 18528                           ; BSR set to: 1
 18529  00B69A  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 18530  00B69C  0A80               	xorlw	128
 18531  00B69E  0F7F               	addlw	-129
 18532  00B6A0  A0D8               	btfss	status,0,c
 18533  00B6A2  D002               	goto	l2669
 18534                           
 18535                           ; BSR set to: 1
 18536                           ;encoder.c: 482: os.displayState = DISPLAY_STATE_ARC2_CW;
 18537  00B6A4  0E63               	movlw	99
 18538  00B6A6  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18539  00B6A8                     l2669:
 18540                           
 18541                           ; BSR set to: 1
 18542                           ;encoder.c: 483: if(os.encoder2Count<0)
 18543                           
 18544                           ; BSR set to: 1
 18545  00B6A8  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 18546  00B6AA  D0E2               	goto	l2585
 18547                           
 18548                           ; BSR set to: 1
 18549                           ;encoder.c: 484: os.displayState = DISPLAY_STATE_ARC2_CCW;
 18550  00B6AC  0E61               	movlw	97
 18551  00B6AE  D0AA               	goto	L21
 18552  00B6B0                     
 18553                           ; BSR set to: 1
 18554                           ;encoder.c: 487: if(os.button2==1)
 18555                           
 18556                           ; BSR set to: 1
 18557  00B6B0  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18558  00B6B2  A4D8               	btfss	status,2,c
 18559  00B6B4  D006               	goto	l2672
 18560                           
 18561                           ; BSR set to: 1
 18562                           ;encoder.c: 488: {;encoder.c: 489: motor_arc_move(MOTOR_DIRECTION_CW);
 18563  00B6B6  0E01               	movlw	1
 18564  00B6B8  ECB8  F088         	call	_motor_arc_move
 18565                           
 18566                           ;encoder.c: 490: os.displayState = DISPLAY_STATE_ARC2_CANCEL;
 18567  00B6BC  0E62               	movlw	98
 18568  00B6BE  0101               	movlb	1	; () banked
 18569  00B6C0  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18570  00B6C2                     l2672:
 18571                           
 18572                           ; BSR set to: 1
 18573                           ;encoder.c: 491: };encoder.c: 492: if(os.encoder2Count<0)
 18574                           
 18575                           ; BSR set to: 1
 18576  00B6C2  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 18577  00B6C4  D0D5               	goto	l2585
 18578                           
 18579                           ; BSR set to: 1
 18580                           ;encoder.c: 493: os.displayState = DISPLAY_STATE_ARC2_CANCEL;
 18581  00B6C6  0E62               	movlw	98
 18582  00B6C8  D09D               	goto	L21
 18583  00B6CA                     l2661:
 18584                           
 18585                           ; BSR set to: 1
 18586  00B6CA  0101               	movlb	1	; () banked
 18587  00B6CC  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 18588                           
 18589                           ; Switch size 1, requested type "space"
 18590                           ; Number of cases is 3, Range of values is 97 to 99
 18591                           ; switch strategies available:
 18592                           ; Name         Instructions Cycles
 18593                           ; simple_byte           10     6 (average)
 18594                           ;	Chosen strategy is simple_byte
 18595  00B6CE  0A61               	xorlw	97	; case 97
 18596  00B6D0  B4D8               	btfsc	status,2,c
 18597  00B6D2  D7C8               	goto	l2662
 18598  00B6D4  0A03               	xorlw	3	; case 98
 18599  00B6D6  B4D8               	btfsc	status,2,c
 18600  00B6D8  D7D6               	goto	l2666
 18601  00B6DA  0A01               	xorlw	1	; case 99
 18602  00B6DC  B4D8               	btfsc	status,2,c
 18603  00B6DE  D7E8               	goto	l2671
 18604                           
 18605                           ; BSR set to: 1
 18606                           ;encoder.c: 496: break;
 18607  00B6E0  D0C7               	goto	l2585
 18608  00B6E2                     
 18609                           ;encoder.c: 499: if(os.button2==1)
 18610                           
 18611                           ; BSR set to: 1
 18612  00B6E2  0101               	movlb	1	; () banked
 18613  00B6E4  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18614  00B6E6  A4D8               	btfss	status,2,c
 18615  00B6E8  D012               	goto	l2675
 18616                           
 18617                           ; BSR set to: 1
 18618                           ;encoder.c: 500: {;encoder.c: 502: motor_go_to_steps_position(0);
 18619  00B6EA  0E00               	movlw	0
 18620  00B6EC  0100               	movlb	0	; () banked
 18621  00B6EE  6F9E               	movwf	motor_go_to_steps_position@target_position& (0+255),b
 18622  00B6F0  0E00               	movlw	0
 18623  00B6F2  6F9F               	movwf	(motor_go_to_steps_position@target_position+1)& (0+255),b
 18624  00B6F4  0E00               	movlw	0
 18625  00B6F6  6FA0               	movwf	(motor_go_to_steps_position@target_position+2)& (0+255),b
 18626  00B6F8  0E00               	movlw	0
 18627  00B6FA  6FA1               	movwf	(motor_go_to_steps_position@target_position+3)& (0+255),b
 18628  00B6FC  EC2F  F064         	call	_motor_go_to_steps_position	;wreg free
 18629                           
 18630                           ;encoder.c: 504: os.displayState = DISPLAY_STATE_MAIN_ZERO;
 18631  00B700  0E05               	movlw	5
 18632  00B702  0101               	movlb	1	; () banked
 18633  00B704  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18634                           
 18635                           ; BSR set to: 1
 18636                           ;encoder.c: 505: os.divide_position = 0;
 18637  00B706  0E00               	movlw	0
 18638  00B708  6F8A               	movwf	(_os+23)& (0+255),b	;volatile
 18639  00B70A  0E00               	movlw	0
 18640  00B70C  6F89               	movwf	(_os+22)& (0+255),b	;volatile
 18641  00B70E                     l2675:
 18642                           
 18643                           ; BSR set to: 1
 18644                           ;encoder.c: 506: };encoder.c: 507: if(os.button1==1)
 18645                           
 18646                           ; BSR set to: 1
 18647  00B70E  0577               	decf	(_os+4)& (0+255),w,b	;volatile
 18648  00B710  A4D8               	btfss	status,2,c
 18649  00B712  D0AE               	goto	l2585
 18650                           
 18651                           ; BSR set to: 1
 18652                           ;encoder.c: 508: {;encoder.c: 509: os.displayState = DISPLAY_STATE_MAIN_ZERO;
 18653  00B714  0E05               	movlw	5
 18654  00B716  D076               	goto	L21
 18655  00B718                     
 18656                           ;encoder.c: 514: if(os.encoder1Count>0)
 18657                           
 18658                           ; BSR set to: 1
 18659  00B718  0101               	movlb	1	; () banked
 18660  00B71A  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 18661  00B71C  0A80               	xorlw	128
 18662  00B71E  0F7F               	addlw	-129
 18663  00B720  A0D8               	btfss	status,0,c
 18664  00B722  D00E               	goto	l2679
 18665                           
 18666                           ; BSR set to: 1
 18667                           ;encoder.c: 515: {;encoder.c: 516: if(os.manual_speed<config.maximum_speed_manual)
 18668  00B724  51B6               	movf	(_config+19)& (0+255),w,b
 18669  00B726  5D96               	subwf	(_os+35)& (0+255),w,b	;volatile
 18670  00B728  51B7               	movf	(_config+20)& (0+255),w,b
 18671  00B72A  5997               	subwfb	(_os+36)& (0+255),w,b	;volatile
 18672  00B72C  B0D8               	btfsc	status,0,c
 18673  00B72E  D008               	goto	l2679
 18674                           
 18675                           ; BSR set to: 1
 18676                           ;encoder.c: 517: {;encoder.c: 518: ++os.manual_speed;
 18677  00B730  4B96               	infsnz	(_os+35)& (0+255),f,b	;volatile
 18678  00B732  2B97               	incf	(_os+36)& (0+255),f,b	;volatile
 18679                           
 18680                           ; BSR set to: 1
 18681                           ;encoder.c: 519: motor_change_speed(os.manual_speed);
 18682  00B734  C196  F060         	movff	_os+35,motor_change_speed@new_speed	;volatile
 18683  00B738  C197  F061         	movff	_os+36,motor_change_speed@new_speed+1	;volatile
 18684  00B73C  EC96  F0A1         	call	_motor_change_speed	;wreg free
 18685  00B740                     l2679:
 18686                           
 18687                           ;encoder.c: 520: };encoder.c: 522: };encoder.c: 523: if(os.encoder1Count<0)
 18688  00B740  0101               	movlb	1	; () banked
 18689  00B742  AF76               	btfss	(_os+3)& (0+255),7,b	;volatile
 18690  00B744  D061               	goto	l2682
 18691                           
 18692                           ; BSR set to: 1
 18693                           ;encoder.c: 524: {;encoder.c: 525: if(os.manual_speed>config.minimum_speed)
 18694  00B746  5196               	movf	(_os+35)& (0+255),w,b	;volatile
 18695  00B748  5DAC               	subwf	(_config+9)& (0+255),w,b
 18696  00B74A  5197               	movf	(_os+36)& (0+255),w,b	;volatile
 18697  00B74C  59AD               	subwfb	(_config+10)& (0+255),w,b
 18698  00B74E  B0D8               	btfsc	status,0,c
 18699  00B750  D05B               	goto	l2682
 18700                           
 18701                           ; BSR set to: 1
 18702                           ;encoder.c: 526: {;encoder.c: 527: --os.manual_speed;
 18703  00B752  0796               	decf	(_os+35)& (0+255),f,b	;volatile
 18704  00B754  A0D8               	btfss	status,0,c
 18705  00B756  0797               	decf	(_os+36)& (0+255),f,b	;volatile
 18706                           
 18707                           ; BSR set to: 1
 18708                           ;encoder.c: 528: motor_change_speed(os.manual_speed);
 18709  00B758  C196  F060         	movff	_os+35,motor_change_speed@new_speed	;volatile
 18710  00B75C  C197  F061         	movff	_os+36,motor_change_speed@new_speed+1	;volatile
 18711  00B760  EC96  F0A1         	call	_motor_change_speed	;wreg free
 18712                           
 18713                           ;encoder.c: 529: };encoder.c: 530: };encoder.c: 531: switch(os.displayState)
 18714  00B764  D051               	goto	l2682
 18715  00B766                     
 18716                           ;encoder.c: 534: if(os.button2==1)
 18717  00B766  0101               	movlb	1	; () banked
 18718  00B768  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18719  00B76A  A4D8               	btfss	status,2,c
 18720  00B76C  D013               	goto	l2684
 18721                           
 18722                           ; BSR set to: 1
 18723                           ;encoder.c: 535: {;encoder.c: 536: motor_schedule_command(MOTOR_DIRECTION_CCW, 0, os.man
      +                          ual_speed);
 18724  00B76E  0E00               	movlw	0
 18725  00B770  0100               	movlb	0	; () banked
 18726  00B772  6F97               	movwf	motor_schedule_command@distance_in_steps& (0+255),b
 18727  00B774  0E00               	movlw	0
 18728  00B776  6F98               	movwf	(motor_schedule_command@distance_in_steps+1)& (0+255),b
 18729  00B778  0E00               	movlw	0
 18730  00B77A  6F99               	movwf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 18731  00B77C  0E00               	movlw	0
 18732  00B77E  6F9A               	movwf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 18733  00B780  C196  F09B         	movff	_os+35,motor_schedule_command@speed	;volatile
 18734  00B784  C197  F09C         	movff	_os+36,motor_schedule_command@speed+1	;volatile
 18735  00B788  0EFF               	movlw	255
 18736  00B78A  ECCE  F08F         	call	_motor_schedule_command
 18737                           
 18738                           ;encoder.c: 537: os.displayState = DISPLAY_STATE_MANUAL_BUSY;
 18739  00B78E  0E84               	movlw	132
 18740  00B790  0101               	movlb	1	; () banked
 18741  00B792  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18742  00B794                     l2684:
 18743                           
 18744                           ; BSR set to: 1
 18745                           ;encoder.c: 538: };encoder.c: 539: if(os.encoder2Count>0)
 18746                           
 18747                           ; BSR set to: 1
 18748  00B794  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 18749  00B796  0A80               	xorlw	128
 18750  00B798  0F7F               	addlw	-129
 18751  00B79A  A0D8               	btfss	status,0,c
 18752  00B79C  D069               	goto	l2585
 18753                           
 18754                           ; BSR set to: 1
 18755                           ;encoder.c: 540: os.displayState = DISPLAY_STATE_MANUAL_CANCEL;
 18756  00B79E  0E82               	movlw	130
 18757  00B7A0  D031               	goto	L21
 18758  00B7A2                     
 18759                           ; BSR set to: 1
 18760                           ;encoder.c: 543: if(os.button2==1)
 18761                           
 18762                           ; BSR set to: 1
 18763  00B7A2  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18764  00B7A4  A4D8               	btfss	status,2,c
 18765  00B7A6  D002               	goto	l2688
 18766                           
 18767                           ; BSR set to: 1
 18768                           ;encoder.c: 544: os.displayState = DISPLAY_STATE_MAIN_MANUAL;
 18769  00B7A8  0E04               	movlw	4
 18770  00B7AA  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18771  00B7AC                     l2688:
 18772                           
 18773                           ; BSR set to: 1
 18774                           ;encoder.c: 545: if(os.encoder2Count>0)
 18775                           
 18776                           ; BSR set to: 1
 18777  00B7AC  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 18778  00B7AE  0A80               	xorlw	128
 18779  00B7B0  0F7F               	addlw	-129
 18780  00B7B2  A0D8               	btfss	status,0,c
 18781  00B7B4  D002               	goto	l2689
 18782                           
 18783                           ; BSR set to: 1
 18784                           ;encoder.c: 546: os.displayState = DISPLAY_STATE_MANUAL_CW;
 18785  00B7B6  0E83               	movlw	131
 18786  00B7B8  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18787  00B7BA                     l2689:
 18788                           
 18789                           ; BSR set to: 1
 18790                           ;encoder.c: 547: if(os.encoder2Count<0)
 18791                           
 18792                           ; BSR set to: 1
 18793  00B7BA  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 18794  00B7BC  D059               	goto	l2585
 18795                           
 18796                           ; BSR set to: 1
 18797                           ;encoder.c: 548: os.displayState = DISPLAY_STATE_MANUAL_CCW;
 18798  00B7BE  0E81               	movlw	129
 18799  00B7C0  D021               	goto	L21
 18800  00B7C2                     
 18801                           ; BSR set to: 1
 18802                           ;encoder.c: 551: if(os.button2==1)
 18803                           
 18804                           ; BSR set to: 1
 18805  00B7C2  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18806  00B7C4  A4D8               	btfss	status,2,c
 18807  00B7C6  D012               	goto	l2692
 18808                           
 18809                           ; BSR set to: 1
 18810                           ;encoder.c: 552: {;encoder.c: 553: os.displayState = DISPLAY_STATE_MANUAL_BUSY;
 18811  00B7C8  0E84               	movlw	132
 18812  00B7CA  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18813                           
 18814                           ; BSR set to: 1
 18815                           ;encoder.c: 554: motor_schedule_command(MOTOR_DIRECTION_CW, 0, os.manual_speed);
 18816  00B7CC  0E00               	movlw	0
 18817  00B7CE  0100               	movlb	0	; () banked
 18818  00B7D0  6F97               	movwf	motor_schedule_command@distance_in_steps& (0+255),b
 18819  00B7D2  0E00               	movlw	0
 18820  00B7D4  6F98               	movwf	(motor_schedule_command@distance_in_steps+1)& (0+255),b
 18821  00B7D6  0E00               	movlw	0
 18822  00B7D8  6F99               	movwf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 18823  00B7DA  0E00               	movlw	0
 18824  00B7DC  6F9A               	movwf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 18825  00B7DE  C196  F09B         	movff	_os+35,motor_schedule_command@speed	;volatile
 18826  00B7E2  C197  F09C         	movff	_os+36,motor_schedule_command@speed+1	;volatile
 18827  00B7E6  0E01               	movlw	1
 18828  00B7E8  ECCE  F08F         	call	_motor_schedule_command
 18829  00B7EC                     l2692:
 18830                           
 18831                           ;encoder.c: 556: };encoder.c: 557: if(os.encoder2Count<0)
 18832  00B7EC  0101               	movlb	1	; () banked
 18833  00B7EE  AF78               	btfss	(_os+5)& (0+255),7,b	;volatile
 18834  00B7F0  D03F               	goto	l2585
 18835                           
 18836                           ; BSR set to: 1
 18837                           ;encoder.c: 558: os.displayState = DISPLAY_STATE_MANUAL_CANCEL;
 18838  00B7F2  0E82               	movlw	130
 18839  00B7F4  D007               	goto	L21
 18840  00B7F6                     
 18841                           ; BSR set to: 1
 18842                           ;encoder.c: 561: if(os.button2==1)
 18843                           
 18844                           ; BSR set to: 1
 18845  00B7F6  0579               	decf	(_os+6)& (0+255),w,b	;volatile
 18846  00B7F8  A4D8               	btfss	status,2,c
 18847  00B7FA  D03A               	goto	l2585
 18848                           
 18849                           ; BSR set to: 1
 18850                           ;encoder.c: 562: {;encoder.c: 563: motor_stop();
 18851  00B7FC  ECBB  F09C         	call	_motor_stop	;wreg free
 18852                           
 18853                           ;encoder.c: 564: os.displayState = DISPLAY_STATE_MANUAL_CANCEL;
 18854  00B800  0E82               	movlw	130
 18855  00B802                     L22:
 18856  00B802  0101               	movlb	1	; () banked
 18857  00B804                     L21:
 18858  00B804  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 18859                           
 18860                           ; BSR set to: 1
 18861                           ;encoder.c: 567: }
 18862                           
 18863                           ; BSR set to: 1
 18864                           ;encoder.c: 565: };encoder.c: 566: break;
 18865  00B806  D034               	goto	l2585
 18866  00B808                     l2682:
 18867                           
 18868                           ; BSR set to: 1
 18869  00B808  0101               	movlb	1	; () banked
 18870  00B80A  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 18871                           
 18872                           ; Switch size 1, requested type "space"
 18873                           ; Number of cases is 4, Range of values is 129 to 132
 18874                           ; switch strategies available:
 18875                           ; Name         Instructions Cycles
 18876                           ; simple_byte           13     7 (average)
 18877                           ;	Chosen strategy is simple_byte
 18878  00B80C  0A81               	xorlw	129	; case 129
 18879  00B80E  B4D8               	btfsc	status,2,c
 18880  00B810  D7AA               	goto	l2683
 18881  00B812  0A03               	xorlw	3	; case 130
 18882  00B814  B4D8               	btfsc	status,2,c
 18883  00B816  D7C5               	goto	l2687
 18884  00B818  0A01               	xorlw	1	; case 131
 18885  00B81A  B4D8               	btfsc	status,2,c
 18886  00B81C  D7D2               	goto	l2691
 18887  00B81E  0A07               	xorlw	7	; case 132
 18888  00B820  B4D8               	btfsc	status,2,c
 18889  00B822  D7E9               	goto	l2694
 18890                           
 18891                           ; BSR set to: 1
 18892                           ;encoder.c: 569: }
 18893                           
 18894                           ; BSR set to: 1
 18895                           ;encoder.c: 568: break;
 18896  00B824  D025               	goto	l2585
 18897  00B826                     l2550:
 18898                           
 18899                           ; BSR set to: 1
 18900                           
 18901                           ; BSR set to: 1
 18902  00B826  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 18903  00B828  0BF0               	andlw	240
 18904  00B82A  0100               	movlb	0	; () banked
 18905  00B82C  6FC4               	movwf	??_encoder_statemachine& (0+255),b
 18906  00B82E  6BC5               	clrf	(??_encoder_statemachine+1)& (0+255),b
 18907                           
 18908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18909                           ; Switch size 1, requested type "space"
 18910                           ; Number of cases is 1, Range of values is 0 to 0
 18911                           ; switch strategies available:
 18912                           ; Name         Instructions Cycles
 18913                           ; simple_byte            4     3 (average)
 18914                           ;	Chosen strategy is simple_byte
 18915  00B830  51C5               	movf	(??_encoder_statemachine+1)& (0+255),w,b
 18916  00B832  0A00               	xorlw	0	; case 0
 18917  00B834  A4D8               	btfss	status,2,c
 18918  00B836  D01C               	goto	l2585
 18919                           
 18920                           ; BSR set to: 0
 18921                           ; Switch size 1, requested type "space"
 18922                           ; Number of cases is 9, Range of values is 0 to 128
 18923                           ; switch strategies available:
 18924                           ; Name         Instructions Cycles
 18925                           ; simple_byte           28    15 (average)
 18926                           ;	Chosen strategy is simple_byte
 18927  00B838  51C4               	movf	??_encoder_statemachine& (0+255),w,b
 18928  00B83A  0A00               	xorlw	0	; case 0
 18929  00B83C  B4D8               	btfsc	status,2,c
 18930  00B83E  D4AC               	goto	l2552
 18931  00B840  0A10               	xorlw	16	; case 16
 18932  00B842  B4D8               	btfsc	status,2,c
 18933  00B844  D4E9               	goto	l2587
 18934  00B846  0A30               	xorlw	48	; case 32
 18935  00B848  B4D8               	btfsc	status,2,c
 18936  00B84A  D5DD               	goto	l2603
 18937  00B84C  0A10               	xorlw	16	; case 48
 18938  00B84E  B4D8               	btfsc	status,2,c
 18939  00B850  D607               	goto	l2618
 18940  00B852  0A70               	xorlw	112	; case 64
 18941  00B854  B4D8               	btfsc	status,2,c
 18942  00B856  D63D               	goto	l2633
 18943  00B858  0A10               	xorlw	16	; case 80
 18944  00B85A  B4D8               	btfsc	status,2,c
 18945  00B85C  D673               	goto	l2639
 18946  00B85E  0A30               	xorlw	48	; case 96
 18947  00B860  B4D8               	btfsc	status,2,c
 18948  00B862  D6D3               	goto	l2654
 18949  00B864  0A10               	xorlw	16	; case 112
 18950  00B866  B4D8               	btfsc	status,2,c
 18951  00B868  D73C               	goto	l2674
 18952  00B86A  0AF0               	xorlw	240	; case 128
 18953  00B86C  B4D8               	btfsc	status,2,c
 18954  00B86E  D754               	goto	l2677
 18955  00B870                     l2585:
 18956                           
 18957                           ;encoder.c: 572: os.encoder1Count = 0;
 18958                           
 18959                           ; BSR set to: 0
 18960  00B870  0E00               	movlw	0
 18961  00B872  0101               	movlb	1	; () banked
 18962  00B874  6F76               	movwf	(_os+3)& (0+255),b	;volatile
 18963                           
 18964                           ;encoder.c: 573: os.encoder2Count = 0;
 18965  00B876  0E00               	movlw	0
 18966  00B878  6F78               	movwf	(_os+5)& (0+255),b	;volatile
 18967                           
 18968                           ;encoder.c: 574: os.button1 = 0;
 18969  00B87A  0E00               	movlw	0
 18970  00B87C  6F77               	movwf	(_os+4)& (0+255),b	;volatile
 18971                           
 18972                           ;encoder.c: 575: os.button2 = 0;
 18973  00B87E  0E00               	movlw	0
 18974  00B880  6F79               	movwf	(_os+6)& (0+255),b	;volatile
 18975                           
 18976                           ; BSR set to: 1
 18977  00B882  0012               	return		;funcret
 18978  00B884                     __end_of_encoder_statemachine:
 18979                           	opt stack 0
 18980                           tblptru	equ	0xFF8
 18981                           tblptrh	equ	0xFF7
 18982                           tblptrl	equ	0xFF6
 18983                           tablat	equ	0xFF5
 18984                           prodh	equ	0xFF4
 18985                           prodl	equ	0xFF3
 18986                           intcon	equ	0xFF2
 18987                           postinc0	equ	0xFEE
 18988                           wreg	equ	0xFE8
 18989                           postinc1	equ	0xFE6
 18990                           postdec1	equ	0xFE5
 18991                           plusw1	equ	0xFE3
 18992                           fsr1h	equ	0xFE2
 18993                           fsr1l	equ	0xFE1
 18994                           indf2	equ	0xFDF
 18995                           postinc2	equ	0xFDE
 18996                           postdec2	equ	0xFDD
 18997                           plusw2	equ	0xFDB
 18998                           fsr2h	equ	0xFDA
 18999                           fsr2l	equ	0xFD9
 19000                           status	equ	0xFD8
 19001                           
 19002 ;; *************** function _motor_stop *****************
 19003 ;; Defined at:
 19004 ;;		line 433 in file "motor.c"
 19005 ;; Parameters:    Size  Location     Type
 19006 ;;		None
 19007 ;; Auto vars:     Size  Location     Type
 19008 ;;		None
 19009 ;; Return value:  Size  Location     Type
 19010 ;;                  1    wreg      void 
 19011 ;; Registers used:
 19012 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 19013 ;; Tracked objects:
 19014 ;;		On entry : 0/0
 19015 ;;		On exit  : 0/0
 19016 ;;		Unchanged: 0/0
 19017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19020 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19022 ;;Total ram usage:        2 bytes
 19023 ;; Hardware stack levels used:    1
 19024 ;; Hardware stack levels required when called:   10
 19025 ;; This function calls:
 19026 ;;		Nothing
 19027 ;; This function is called by:
 19028 ;;		_encoder_statemachine
 19029 ;; This function uses a non-reentrant model
 19030 ;;
 19031                           
 19032                           	psect	text69
 19033  013976                     __ptext69:
 19034                           	opt stack 0
 19035  013976                     _motor_stop:
 19036                           	opt stack 19
 19037                           
 19038                           ;motor.c: 435: motor_final_stepcount = motor_current_stepcount + motor_steps_lookup[moto
      +                          r_current_speed];
 19039                           
 19040                           ; BSR set to: 1
 19041                           ;incstack = 0
 19042  013976  90D8               	bcf	status,0,c
 19043  013978  0100               	movlb	0	; () banked
 19044  01397A  35E9               	rlcf	_motor_current_speed& (0+255),w,b	;volatile
 19045  01397C  6EF6               	movwf	tblptrl,c
 19046  01397E  35EA               	rlcf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 19047  013980  6EF7               	movwf	tblptrh,c
 19048  013982  0E61               	movlw	low _motor_steps_lookup
 19049  013984  26F6               	addwf	tblptrl,f,c
 19050  013986  0E94               	movlw	high _motor_steps_lookup
 19051  013988  22F7               	addwfc	tblptrh,f,c
 19052  01398A                     	if	1	;There are 3 active tblptr bytes
 19053  01398A  6AF8               	clrf	tblptru,c
 19054  01398C  0E00               	movlw	low (__mediumconst shr (0+16))
 19055  01398E  22F8               	addwfc	tblptru,f,c
 19056  013990                     	endif
 19057  013990  0009               	tblrd		*+
 19058  013992  CFF5 F060          	movff	tablat,??_motor_stop
 19059  013996  0009               	tblrd		*+
 19060  013998  CFF5 F061          	movff	tablat,??_motor_stop+1
 19061  01399C  5160               	movf	??_motor_stop& (0+255),w,b
 19062  01399E  2416               	addwf	_motor_current_stepcount,w,c	;volatile
 19063  0139A0  0101               	movlb	1	; () banked
 19064  0139A2  6F42               	movwf	_motor_final_stepcount& (0+255),b	;volatile
 19065  0139A4  0100               	movlb	0	; () banked
 19066  0139A6  5161               	movf	(??_motor_stop+1)& (0+255),w,b
 19067  0139A8  2017               	addwfc	_motor_current_stepcount+1,w,c	;volatile
 19068  0139AA  0101               	movlb	1	; () banked
 19069  0139AC  6F43               	movwf	(_motor_final_stepcount+1)& (0+255),b	;volatile
 19070  0139AE  0E00               	movlw	0
 19071  0139B0  2018               	addwfc	_motor_current_stepcount+2,w,c	;volatile
 19072  0139B2  6F44               	movwf	(_motor_final_stepcount+2)& (0+255),b	;volatile
 19073  0139B4  0E00               	movlw	0
 19074  0139B6  2019               	addwfc	_motor_current_stepcount+3,w,c	;volatile
 19075  0139B8  6F45               	movwf	(_motor_final_stepcount+3)& (0+255),b	;volatile
 19076                           
 19077                           ; BSR set to: 1
 19078  0139BA  0012               	return		;funcret
 19079  0139BC                     __end_of_motor_stop:
 19080                           	opt stack 0
 19081                           tblptru	equ	0xFF8
 19082                           tblptrh	equ	0xFF7
 19083                           tblptrl	equ	0xFF6
 19084                           tablat	equ	0xFF5
 19085                           prodh	equ	0xFF4
 19086                           prodl	equ	0xFF3
 19087                           intcon	equ	0xFF2
 19088                           postinc0	equ	0xFEE
 19089                           wreg	equ	0xFE8
 19090                           postinc1	equ	0xFE6
 19091                           postdec1	equ	0xFE5
 19092                           plusw1	equ	0xFE3
 19093                           fsr1h	equ	0xFE2
 19094                           fsr1l	equ	0xFE1
 19095                           indf2	equ	0xFDF
 19096                           postinc2	equ	0xFDE
 19097                           postdec2	equ	0xFDD
 19098                           plusw2	equ	0xFDB
 19099                           fsr2h	equ	0xFDA
 19100                           fsr2l	equ	0xFD9
 19101                           status	equ	0xFD8
 19102                           
 19103 ;; *************** function _motor_nonzero_steps_from_degrees *****************
 19104 ;; Defined at:
 19105 ;;		line 41 in file "motor.c"
 19106 ;; Parameters:    Size  Location     Type
 19107 ;;  degrees         2   47[BANK0 ] unsigned int 
 19108 ;; Auto vars:     Size  Location     Type
 19109 ;;  steps           4   51[BANK0 ] unsigned long 
 19110 ;; Return value:  Size  Location     Type
 19111 ;;                  4   47[BANK0 ] unsigned long 
 19112 ;; Registers used:
 19113 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19114 ;; Tracked objects:
 19115 ;;		On entry : 0/0
 19116 ;;		On exit  : 0/0
 19117 ;;		Unchanged: 0/0
 19118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19119 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19120 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19122 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19123 ;;Total ram usage:        8 bytes
 19124 ;; Hardware stack levels used:    1
 19125 ;; Hardware stack levels required when called:   12
 19126 ;; This function calls:
 19127 ;;		_motor_steps_from_degrees
 19128 ;; This function is called by:
 19129 ;;		_encoder_statemachine
 19130 ;; This function uses a non-reentrant model
 19131 ;;
 19132                           
 19133                           	psect	text70
 19134  013898                     __ptext70:
 19135                           	opt stack 0
 19136  013898                     _motor_nonzero_steps_from_degrees:
 19137                           	opt stack 17
 19138                           
 19139                           ;motor.c: 43: uint32_t steps;;motor.c: 44: steps = motor_steps_from_degrees(degrees);
 19140                           
 19141                           ; BSR set to: 1
 19142                           ;incstack = 0
 19143  013898  C08F  F087         	movff	motor_nonzero_steps_from_degrees@degrees,motor_steps_from_degrees@degrees
 19144  01389C  C090  F088         	movff	motor_nonzero_steps_from_degrees@degrees+1,motor_steps_from_degrees@degrees+1
 19145  0138A0  ECE6  F08C         	call	_motor_steps_from_degrees	;wreg free
 19146  0138A4  C087  F093         	movff	?_motor_steps_from_degrees,motor_nonzero_steps_from_degrees@steps
 19147  0138A8  C088  F094         	movff	?_motor_steps_from_degrees+1,motor_nonzero_steps_from_degrees@steps+1
 19148  0138AC  C089  F095         	movff	?_motor_steps_from_degrees+2,motor_nonzero_steps_from_degrees@steps+2
 19149  0138B0  C08A  F096         	movff	?_motor_steps_from_degrees+3,motor_nonzero_steps_from_degrees@steps+3
 19150                           
 19151                           ;motor.c: 45: if(steps==0)
 19152  0138B4  0100               	movlb	0	; () banked
 19153  0138B6  5193               	movf	motor_nonzero_steps_from_degrees@steps& (0+255),w,b
 19154  0138B8  1194               	iorwf	(motor_nonzero_steps_from_degrees@steps+1)& (0+255),w,b
 19155  0138BA  1195               	iorwf	(motor_nonzero_steps_from_degrees@steps+2)& (0+255),w,b
 19156  0138BC  1196               	iorwf	(motor_nonzero_steps_from_degrees@steps+3)& (0+255),w,b
 19157  0138BE  A4D8               	btfss	status,2,c
 19158  0138C0  D008               	goto	l2331
 19159                           
 19160                           ; BSR set to: 0
 19161                           ;motor.c: 46: steps = 1;
 19162  0138C2  0E01               	movlw	1
 19163  0138C4  6F93               	movwf	motor_nonzero_steps_from_degrees@steps& (0+255),b
 19164  0138C6  0E00               	movlw	0
 19165  0138C8  6F94               	movwf	(motor_nonzero_steps_from_degrees@steps+1)& (0+255),b
 19166  0138CA  0E00               	movlw	0
 19167  0138CC  6F95               	movwf	(motor_nonzero_steps_from_degrees@steps+2)& (0+255),b
 19168  0138CE  0E00               	movlw	0
 19169  0138D0  6F96               	movwf	(motor_nonzero_steps_from_degrees@steps+3)& (0+255),b
 19170  0138D2                     l2331:
 19171                           
 19172                           ; BSR set to: 0
 19173                           ;motor.c: 47: return steps;
 19174                           
 19175                           ; BSR set to: 0
 19176  0138D2  C093  F08F         	movff	motor_nonzero_steps_from_degrees@steps,?_motor_nonzero_steps_from_degrees
 19177  0138D6  C094  F090         	movff	motor_nonzero_steps_from_degrees@steps+1,?_motor_nonzero_steps_from_degrees+1
 19178  0138DA  C095  F091         	movff	motor_nonzero_steps_from_degrees@steps+2,?_motor_nonzero_steps_from_degrees+2
 19179  0138DE  C096  F092         	movff	motor_nonzero_steps_from_degrees@steps+3,?_motor_nonzero_steps_from_degrees+3
 19180  0138E2  0012               	return	
 19181  0138E4                     __end_of_motor_nonzero_steps_from_degrees:
 19182                           	opt stack 0
 19183                           tblptru	equ	0xFF8
 19184                           tblptrh	equ	0xFF7
 19185                           tblptrl	equ	0xFF6
 19186                           tablat	equ	0xFF5
 19187                           prodh	equ	0xFF4
 19188                           prodl	equ	0xFF3
 19189                           intcon	equ	0xFF2
 19190                           postinc0	equ	0xFEE
 19191                           wreg	equ	0xFE8
 19192                           postinc1	equ	0xFE6
 19193                           postdec1	equ	0xFE5
 19194                           plusw1	equ	0xFE3
 19195                           fsr1h	equ	0xFE2
 19196                           fsr1l	equ	0xFE1
 19197                           indf2	equ	0xFDF
 19198                           postinc2	equ	0xFDE
 19199                           postdec2	equ	0xFDD
 19200                           plusw2	equ	0xFDB
 19201                           fsr2h	equ	0xFDA
 19202                           fsr2l	equ	0xFD9
 19203                           status	equ	0xFD8
 19204                           
 19205 ;; *************** function _motor_steps_from_degrees *****************
 19206 ;; Defined at:
 19207 ;;		line 30 in file "motor.c"
 19208 ;; Parameters:    Size  Location     Type
 19209 ;;  degrees         2   39[BANK0 ] unsigned int 
 19210 ;; Auto vars:     Size  Location     Type
 19211 ;;  steps           4   43[BANK0 ] float 
 19212 ;; Return value:  Size  Location     Type
 19213 ;;                  4   39[BANK0 ] unsigned long 
 19214 ;; Registers used:
 19215 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19216 ;; Tracked objects:
 19217 ;;		On entry : 0/0
 19218 ;;		On exit  : 0/0
 19219 ;;		Unchanged: 0/0
 19220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19221 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19222 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19224 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19225 ;;Total ram usage:        8 bytes
 19226 ;; Hardware stack levels used:    1
 19227 ;; Hardware stack levels required when called:   11
 19228 ;; This function calls:
 19229 ;;		___fldiv
 19230 ;;		___flmul
 19231 ;;		___fltol
 19232 ;;		___xxtofl
 19233 ;; This function is called by:
 19234 ;;		_motor_nonzero_steps_from_degrees
 19235 ;; This function uses a non-reentrant model
 19236 ;;
 19237                           
 19238                           	psect	text71
 19239  0119CC                     __ptext71:
 19240                           	opt stack 0
 19241  0119CC                     _motor_steps_from_degrees:
 19242                           	opt stack 17
 19243                           
 19244                           ;motor.c: 32: float steps;;motor.c: 33: steps = (float) degrees;
 19245                           
 19246                           ; BSR set to: 0
 19247                           ;incstack = 0
 19248  0119CC  C087  F060         	movff	motor_steps_from_degrees@degrees,___xxtofl@val
 19249  0119D0  C088  F061         	movff	motor_steps_from_degrees@degrees+1,___xxtofl@val+1
 19250  0119D4  0100               	movlb	0	; () banked
 19251  0119D6  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 19252  0119D8  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 19253  0119DA  0E00               	movlw	0
 19254  0119DC  ECE7  F07A         	call	___xxtofl
 19255  0119E0  C060  F08B         	movff	?___xxtofl,motor_steps_from_degrees@steps
 19256  0119E4  C061  F08C         	movff	?___xxtofl+1,motor_steps_from_degrees@steps+1
 19257  0119E8  C062  F08D         	movff	?___xxtofl+2,motor_steps_from_degrees@steps+2
 19258  0119EC  C063  F08E         	movff	?___xxtofl+3,motor_steps_from_degrees@steps+3
 19259                           
 19260                           ;motor.c: 34: steps *= config.full_circle_in_steps;
 19261  0119F0  C08B  F06E         	movff	motor_steps_from_degrees@steps,___flmul@b
 19262  0119F4  C08C  F06F         	movff	motor_steps_from_degrees@steps+1,___flmul@b+1
 19263  0119F8  C08D  F070         	movff	motor_steps_from_degrees@steps+2,___flmul@b+2
 19264  0119FC  C08E  F071         	movff	motor_steps_from_degrees@steps+3,___flmul@b+3
 19265  011A00  C1A3  F060         	movff	_config,___xxtofl@val
 19266  011A04  C1A4  F061         	movff	_config+1,___xxtofl@val+1
 19267  011A08  C1A5  F062         	movff	_config+2,___xxtofl@val+2
 19268  011A0C  C1A6  F063         	movff	_config+3,___xxtofl@val+3
 19269  011A10  0E00               	movlw	0
 19270  011A12  ECE7  F07A         	call	___xxtofl
 19271  011A16  C060  F072         	movff	?___xxtofl,___flmul@a
 19272  011A1A  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 19273  011A1E  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 19274  011A22  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 19275  011A26  ECE8  F060         	call	___flmul	;wreg free
 19276  011A2A  C06E  F08B         	movff	?___flmul,motor_steps_from_degrees@steps
 19277  011A2E  C06F  F08C         	movff	?___flmul+1,motor_steps_from_degrees@steps+1
 19278  011A32  C070  F08D         	movff	?___flmul+2,motor_steps_from_degrees@steps+2
 19279  011A36  C071  F08E         	movff	?___flmul+3,motor_steps_from_degrees@steps+3
 19280                           
 19281                           ;motor.c: 35: steps /= 36000;
 19282  011A3A  C08B  F06E         	movff	motor_steps_from_degrees@steps,___fldiv@b
 19283  011A3E  C08C  F06F         	movff	motor_steps_from_degrees@steps+1,___fldiv@b+1
 19284  011A42  C08D  F070         	movff	motor_steps_from_degrees@steps+2,___fldiv@b+2
 19285  011A46  C08E  F071         	movff	motor_steps_from_degrees@steps+3,___fldiv@b+3
 19286  011A4A  0E00               	movlw	0
 19287  011A4C  0100               	movlb	0	; () banked
 19288  011A4E  6F72               	movwf	___fldiv@a& (0+255),b
 19289  011A50  0EA0               	movlw	160
 19290  011A52  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 19291  011A54  0E0C               	movlw	12
 19292  011A56  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 19293  011A58  0E47               	movlw	71
 19294  011A5A  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 19295  011A5C  ECFD  F069         	call	___fldiv	;wreg free
 19296  011A60  C06E  F08B         	movff	?___fldiv,motor_steps_from_degrees@steps
 19297  011A64  C06F  F08C         	movff	?___fldiv+1,motor_steps_from_degrees@steps+1
 19298  011A68  C070  F08D         	movff	?___fldiv+2,motor_steps_from_degrees@steps+2
 19299  011A6C  C071  F08E         	movff	?___fldiv+3,motor_steps_from_degrees@steps+3
 19300                           
 19301                           ;motor.c: 37: return (uint32_t) steps;
 19302  011A70  C08B  F060         	movff	motor_steps_from_degrees@steps,___fltol@f1
 19303  011A74  C08C  F061         	movff	motor_steps_from_degrees@steps+1,___fltol@f1+1
 19304  011A78  C08D  F062         	movff	motor_steps_from_degrees@steps+2,___fltol@f1+2
 19305  011A7C  C08E  F063         	movff	motor_steps_from_degrees@steps+3,___fltol@f1+3
 19306  011A80  EC28  F089         	call	___fltol	;wreg free
 19307  011A84  C060  F087         	movff	?___fltol,?_motor_steps_from_degrees
 19308  011A88  C061  F088         	movff	?___fltol+1,?_motor_steps_from_degrees+1
 19309  011A8C  C062  F089         	movff	?___fltol+2,?_motor_steps_from_degrees+2
 19310  011A90  C063  F08A         	movff	?___fltol+3,?_motor_steps_from_degrees+3
 19311  011A94  0012               	return	
 19312  011A96                     __end_of_motor_steps_from_degrees:
 19313                           	opt stack 0
 19314                           tblptru	equ	0xFF8
 19315                           tblptrh	equ	0xFF7
 19316                           tblptrl	equ	0xFF6
 19317                           tablat	equ	0xFF5
 19318                           prodh	equ	0xFF4
 19319                           prodl	equ	0xFF3
 19320                           intcon	equ	0xFF2
 19321                           postinc0	equ	0xFEE
 19322                           wreg	equ	0xFE8
 19323                           postinc1	equ	0xFE6
 19324                           postdec1	equ	0xFE5
 19325                           plusw1	equ	0xFE3
 19326                           fsr1h	equ	0xFE2
 19327                           fsr1l	equ	0xFE1
 19328                           indf2	equ	0xFDF
 19329                           postinc2	equ	0xFDE
 19330                           postdec2	equ	0xFDD
 19331                           plusw2	equ	0xFDB
 19332                           fsr2h	equ	0xFDA
 19333                           fsr2l	equ	0xFD9
 19334                           status	equ	0xFD8
 19335                           
 19336 ;; *************** function _motor_divide_jump_to_nearest *****************
 19337 ;; Defined at:
 19338 ;;		line 559 in file "motor.c"
 19339 ;; Parameters:    Size  Location     Type
 19340 ;;		None
 19341 ;; Auto vars:     Size  Location     Type
 19342 ;;  divide_posit    4   96[BANK0 ] float 
 19343 ;;  nearest_posi    4   90[BANK0 ] unsigned long 
 19344 ;;  nearest_divi    2   94[BANK0 ] int 
 19345 ;; Return value:  Size  Location     Type
 19346 ;;                  1    wreg      void 
 19347 ;; Registers used:
 19348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19349 ;; Tracked objects:
 19350 ;;		On entry : 0/0
 19351 ;;		On exit  : 0/0
 19352 ;;		Unchanged: 0/0
 19353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19355 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19357 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19358 ;;Total ram usage:       10 bytes
 19359 ;; Hardware stack levels used:    1
 19360 ;; Hardware stack levels required when called:   13
 19361 ;; This function calls:
 19362 ;;		___fladd
 19363 ;;		___fldiv
 19364 ;;		___flmul
 19365 ;;		___fltol
 19366 ;;		___xxtofl
 19367 ;;		__step_position_from_divide_position
 19368 ;;		_motor_go_to_steps_position
 19369 ;; This function is called by:
 19370 ;;		_encoder_statemachine
 19371 ;; This function uses a non-reentrant model
 19372 ;;
 19373                           
 19374                           	psect	text72
 19375  00F0A2                     __ptext72:
 19376                           	opt stack 0
 19377  00F0A2                     _motor_divide_jump_to_nearest:
 19378                           	opt stack 16
 19379                           
 19380                           ;motor.c: 561: float divide_position_float;;motor.c: 562: int16_t nearest_divide_positio
      +                          n;;motor.c: 563: uint32_t nearest_position_in_steps;;motor.c: 565: divide_position_float
      +                           = (float) os.current_position_in_steps;
 19381                           
 19382                           ;incstack = 0
 19383  00F0A2  C17A  F060         	movff	_os+7,___xxtofl@val	;volatile
 19384  00F0A6  C17B  F061         	movff	_os+8,___xxtofl@val+1	;volatile
 19385  00F0AA  C17C  F062         	movff	_os+9,___xxtofl@val+2	;volatile
 19386  00F0AE  C17D  F063         	movff	_os+10,___xxtofl@val+3	;volatile
 19387  00F0B2  0E00               	movlw	0
 19388  00F0B4  ECE7  F07A         	call	___xxtofl
 19389  00F0B8  C060  F0C0         	movff	?___xxtofl,motor_divide_jump_to_nearest@divide_position_float
 19390  00F0BC  C061  F0C1         	movff	?___xxtofl+1,motor_divide_jump_to_nearest@divide_position_float+1
 19391  00F0C0  C062  F0C2         	movff	?___xxtofl+2,motor_divide_jump_to_nearest@divide_position_float+2
 19392  00F0C4  C063  F0C3         	movff	?___xxtofl+3,motor_divide_jump_to_nearest@divide_position_float+3
 19393                           
 19394                           ;motor.c: 566: divide_position_float *= (float) os.division;
 19395  00F0C8  C0C0  F06E         	movff	motor_divide_jump_to_nearest@divide_position_float,___flmul@b
 19396  00F0CC  C0C1  F06F         	movff	motor_divide_jump_to_nearest@divide_position_float+1,___flmul@b+1
 19397  00F0D0  C0C2  F070         	movff	motor_divide_jump_to_nearest@divide_position_float+2,___flmul@b+2
 19398  00F0D4  C0C3  F071         	movff	motor_divide_jump_to_nearest@divide_position_float+3,___flmul@b+3
 19399  00F0D8  EE21  F086         	lfsr	2,_os+19	;volatile
 19400  00F0DC  CFDE F060          	movff	postinc2,___xxtofl@val
 19401  00F0E0  CFDD F061          	movff	postdec2,___xxtofl@val+1
 19402  00F0E4  0100               	movlb	0	; () banked
 19403  00F0E6  0E00               	movlw	0
 19404  00F0E8  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 19405  00F0EA  0EFF               	movlw	-1
 19406  00F0EC  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 19407  00F0EE  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 19408  00F0F0  0E01               	movlw	1
 19409  00F0F2  ECE7  F07A         	call	___xxtofl
 19410  00F0F6  C060  F072         	movff	?___xxtofl,___flmul@a
 19411  00F0FA  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 19412  00F0FE  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 19413  00F102  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 19414  00F106  ECE8  F060         	call	___flmul	;wreg free
 19415  00F10A  C06E  F0C0         	movff	?___flmul,motor_divide_jump_to_nearest@divide_position_float
 19416  00F10E  C06F  F0C1         	movff	?___flmul+1,motor_divide_jump_to_nearest@divide_position_float+1
 19417  00F112  C070  F0C2         	movff	?___flmul+2,motor_divide_jump_to_nearest@divide_position_float+2
 19418  00F116  C071  F0C3         	movff	?___flmul+3,motor_divide_jump_to_nearest@divide_position_float+3
 19419                           
 19420                           ;motor.c: 567: divide_position_float /= (float) config.full_circle_in_steps;
 19421  00F11A  C0C0  F06E         	movff	motor_divide_jump_to_nearest@divide_position_float,___fldiv@b
 19422  00F11E  C0C1  F06F         	movff	motor_divide_jump_to_nearest@divide_position_float+1,___fldiv@b+1
 19423  00F122  C0C2  F070         	movff	motor_divide_jump_to_nearest@divide_position_float+2,___fldiv@b+2
 19424  00F126  C0C3  F071         	movff	motor_divide_jump_to_nearest@divide_position_float+3,___fldiv@b+3
 19425  00F12A  C1A3  F060         	movff	_config,___xxtofl@val
 19426  00F12E  C1A4  F061         	movff	_config+1,___xxtofl@val+1
 19427  00F132  C1A5  F062         	movff	_config+2,___xxtofl@val+2
 19428  00F136  C1A6  F063         	movff	_config+3,___xxtofl@val+3
 19429  00F13A  0E00               	movlw	0
 19430  00F13C  ECE7  F07A         	call	___xxtofl
 19431  00F140  C060  F072         	movff	?___xxtofl,___fldiv@a
 19432  00F144  C061  F073         	movff	?___xxtofl+1,___fldiv@a+1
 19433  00F148  C062  F074         	movff	?___xxtofl+2,___fldiv@a+2
 19434  00F14C  C063  F075         	movff	?___xxtofl+3,___fldiv@a+3
 19435  00F150  ECFD  F069         	call	___fldiv	;wreg free
 19436  00F154  C06E  F0C0         	movff	?___fldiv,motor_divide_jump_to_nearest@divide_position_float
 19437  00F158  C06F  F0C1         	movff	?___fldiv+1,motor_divide_jump_to_nearest@divide_position_float+1
 19438  00F15C  C070  F0C2         	movff	?___fldiv+2,motor_divide_jump_to_nearest@divide_position_float+2
 19439  00F160  C071  F0C3         	movff	?___fldiv+3,motor_divide_jump_to_nearest@divide_position_float+3
 19440                           
 19441                           ;motor.c: 568: divide_position_float += 0.5;
 19442  00F164  C0C0  F072         	movff	motor_divide_jump_to_nearest@divide_position_float,___fladd@b
 19443  00F168  C0C1  F073         	movff	motor_divide_jump_to_nearest@divide_position_float+1,___fladd@b+1
 19444  00F16C  C0C2  F074         	movff	motor_divide_jump_to_nearest@divide_position_float+2,___fladd@b+2
 19445  00F170  C0C3  F075         	movff	motor_divide_jump_to_nearest@divide_position_float+3,___fladd@b+3
 19446  00F174  0E00               	movlw	0
 19447  00F176  0100               	movlb	0	; () banked
 19448  00F178  6F76               	movwf	___fladd@a& (0+255),b
 19449  00F17A  0E00               	movlw	0
 19450  00F17C  6F77               	movwf	(___fladd@a+1)& (0+255),b
 19451  00F17E  0E00               	movlw	0
 19452  00F180  6F78               	movwf	(___fladd@a+2)& (0+255),b
 19453  00F182  0E3F               	movlw	63
 19454  00F184  6F79               	movwf	(___fladd@a+3)& (0+255),b
 19455  00F186  EC91  F062         	call	___fladd	;wreg free
 19456  00F18A  C072  F0C0         	movff	?___fladd,motor_divide_jump_to_nearest@divide_position_float
 19457  00F18E  C073  F0C1         	movff	?___fladd+1,motor_divide_jump_to_nearest@divide_position_float+1
 19458  00F192  C074  F0C2         	movff	?___fladd+2,motor_divide_jump_to_nearest@divide_position_float+2
 19459  00F196  C075  F0C3         	movff	?___fladd+3,motor_divide_jump_to_nearest@divide_position_float+3
 19460                           
 19461                           ;motor.c: 569: nearest_divide_position = (int16_t) divide_position_float;
 19462  00F19A  C0C0  F060         	movff	motor_divide_jump_to_nearest@divide_position_float,___fltol@f1
 19463  00F19E  C0C1  F061         	movff	motor_divide_jump_to_nearest@divide_position_float+1,___fltol@f1+1
 19464  00F1A2  C0C2  F062         	movff	motor_divide_jump_to_nearest@divide_position_float+2,___fltol@f1+2
 19465  00F1A6  C0C3  F063         	movff	motor_divide_jump_to_nearest@divide_position_float+3,___fltol@f1+3
 19466  00F1AA  EC28  F089         	call	___fltol	;wreg free
 19467  00F1AE  C060  F0BE         	movff	?___fltol,motor_divide_jump_to_nearest@nearest_divide_position
 19468  00F1B2  C061  F0BF         	movff	?___fltol+1,motor_divide_jump_to_nearest@nearest_divide_position+1
 19469                           
 19470                           ;motor.c: 572: nearest_position_in_steps = _step_position_from_divide_position(nearest_d
      +                          ivide_position);
 19471  00F1B6  C0BE  F087         	movff	motor_divide_jump_to_nearest@nearest_divide_position,__step_position_from_divide_
      +                          position@divide_position
 19472  00F1BA  C0BF  F088         	movff	motor_divide_jump_to_nearest@nearest_divide_position+1,__step_position_from_divid
      +                          e_position@divide_position+1
 19473  00F1BE  ECEB  F086         	call	__step_position_from_divide_position	;wreg free
 19474  00F1C2  C087  F0BA         	movff	?__step_position_from_divide_position,motor_divide_jump_to_nearest@nearest_positi
      +                          on_in_steps
 19475  00F1C6  C088  F0BB         	movff	?__step_position_from_divide_position+1,motor_divide_jump_to_nearest@nearest_posi
      +                          tion_in_steps+1
 19476  00F1CA  C089  F0BC         	movff	?__step_position_from_divide_position+2,motor_divide_jump_to_nearest@nearest_posi
      +                          tion_in_steps+2
 19477  00F1CE  C08A  F0BD         	movff	?__step_position_from_divide_position+3,motor_divide_jump_to_nearest@nearest_posi
      +                          tion_in_steps+3
 19478                           
 19479                           ;motor.c: 575: os.divide_position = nearest_divide_position;
 19480  00F1D2  C0BE  F189         	movff	motor_divide_jump_to_nearest@nearest_divide_position,_os+22	;volatile
 19481  00F1D6  C0BF  F18A         	movff	motor_divide_jump_to_nearest@nearest_divide_position+1,_os+23	;volatile
 19482                           
 19483                           ;motor.c: 576: motor_go_to_steps_position(nearest_position_in_steps);
 19484  00F1DA  C0BA  F09E         	movff	motor_divide_jump_to_nearest@nearest_position_in_steps,motor_go_to_steps_position
      +                          @target_position
 19485  00F1DE  C0BB  F09F         	movff	motor_divide_jump_to_nearest@nearest_position_in_steps+1,motor_go_to_steps_positi
      +                          on@target_position+1
 19486  00F1E2  C0BC  F0A0         	movff	motor_divide_jump_to_nearest@nearest_position_in_steps+2,motor_go_to_steps_positi
      +                          on@target_position+2
 19487  00F1E6  C0BD  F0A1         	movff	motor_divide_jump_to_nearest@nearest_position_in_steps+3,motor_go_to_steps_positi
      +                          on@target_position+3
 19488  00F1EA  EC2F  F064         	call	_motor_go_to_steps_position	;wreg free
 19489  00F1EE  0012               	return		;funcret
 19490  00F1F0                     __end_of_motor_divide_jump_to_nearest:
 19491                           	opt stack 0
 19492                           tblptru	equ	0xFF8
 19493                           tblptrh	equ	0xFF7
 19494                           tblptrl	equ	0xFF6
 19495                           tablat	equ	0xFF5
 19496                           prodh	equ	0xFF4
 19497                           prodl	equ	0xFF3
 19498                           intcon	equ	0xFF2
 19499                           postinc0	equ	0xFEE
 19500                           wreg	equ	0xFE8
 19501                           postinc1	equ	0xFE6
 19502                           postdec1	equ	0xFE5
 19503                           plusw1	equ	0xFE3
 19504                           fsr1h	equ	0xFE2
 19505                           fsr1l	equ	0xFE1
 19506                           indf2	equ	0xFDF
 19507                           postinc2	equ	0xFDE
 19508                           postdec2	equ	0xFDD
 19509                           plusw2	equ	0xFDB
 19510                           fsr2h	equ	0xFDA
 19511                           fsr2l	equ	0xFD9
 19512                           status	equ	0xFD8
 19513                           
 19514 ;; *************** function _motor_divide_jump *****************
 19515 ;; Defined at:
 19516 ;;		line 528 in file "motor.c"
 19517 ;; Parameters:    Size  Location     Type
 19518 ;;		None
 19519 ;; Auto vars:     Size  Location     Type
 19520 ;;  target_posit    4   91[BANK0 ] unsigned long 
 19521 ;;  target_divid    2   95[BANK0 ] int 
 19522 ;; Return value:  Size  Location     Type
 19523 ;;                  1    wreg      void 
 19524 ;; Registers used:
 19525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19526 ;; Tracked objects:
 19527 ;;		On entry : 0/0
 19528 ;;		On exit  : 0/0
 19529 ;;		Unchanged: 0/0
 19530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19532 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19533 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19534 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19535 ;;Total ram usage:        7 bytes
 19536 ;; Hardware stack levels used:    1
 19537 ;; Hardware stack levels required when called:   13
 19538 ;; This function calls:
 19539 ;;		__step_position_from_divide_position
 19540 ;;		_motor_go_to_steps_position
 19541 ;; This function is called by:
 19542 ;;		_encoder_statemachine
 19543 ;; This function uses a non-reentrant model
 19544 ;;
 19545                           
 19546                           	psect	text73
 19547  012048                     __ptext73:
 19548                           	opt stack 0
 19549  012048                     _motor_divide_jump:
 19550                           	opt stack 16
 19551                           
 19552                           ;motor.c: 530: int16_t target_divide_position;;motor.c: 531: uint32_t target_position_in
      +                          _steps;;motor.c: 534: if(os.divide_jump_size>0)
 19553                           
 19554                           ;incstack = 0
 19555  012048  0101               	movlb	1	; () banked
 19556  01204A  BF8C               	btfsc	(_os+25)& (0+255),7,b	;volatile
 19557  01204C  D023               	goto	l2434
 19558  01204E  518C               	movf	(_os+25)& (0+255),w,b	;volatile
 19559  012050  E103               	bnz	u22300
 19560  012052  058B               	decf	(_os+24)& (0+255),w,b	;volatile
 19561  012054  A0D8               	btfss	status,0,c
 19562  012056  D01E               	goto	l2434
 19563  012058                     u22300:
 19564                           
 19565                           ; BSR set to: 1
 19566                           ;motor.c: 535: {;motor.c: 536: target_divide_position = os.divide_position + os.divide_j
      +                          ump_size;
 19567  012058  518B               	movf	(_os+24)& (0+255),w,b	;volatile
 19568  01205A  2589               	addwf	(_os+22)& (0+255),w,b	;volatile
 19569  01205C  0100               	movlb	0	; () banked
 19570  01205E  6FBF               	movwf	motor_divide_jump@target_divide_position& (0+255),b
 19571  012060  0101               	movlb	1	; () banked
 19572  012062  518C               	movf	(_os+25)& (0+255),w,b	;volatile
 19573  012064  218A               	addwfc	(_os+23)& (0+255),w,b	;volatile
 19574  012066  0100               	movlb	0	; () banked
 19575  012068  6FC0               	movwf	(motor_divide_jump@target_divide_position+1)& (0+255),b
 19576                           
 19577                           ;motor.c: 537: if(target_divide_position>=os.division)
 19578  01206A  0101               	movlb	1	; () banked
 19579  01206C  5186               	movf	(_os+19)& (0+255),w,b	;volatile
 19580  01206E  0100               	movlb	0	; () banked
 19581  012070  5DBF               	subwf	motor_divide_jump@target_divide_position& (0+255),w,b
 19582  012072  51C0               	movf	(motor_divide_jump@target_divide_position+1)& (0+255),w,b
 19583  012074  0A80               	xorlw	128
 19584  012076  6FBA               	movwf	??_motor_divide_jump& (0+255),b
 19585  012078  0101               	movlb	1	; () banked
 19586  01207A  5187               	movf	(_os+20)& (0+255),w,b	;volatile
 19587  01207C  0A80               	xorlw	128
 19588  01207E  0100               	movlb	0	; () banked
 19589  012080  59BA               	subwfb	??_motor_divide_jump& (0+255),w,b
 19590  012082  A0D8               	btfss	status,0,c
 19591  012084  D019               	goto	l2437
 19592                           
 19593                           ; BSR set to: 0
 19594                           ;motor.c: 538: {;motor.c: 539: target_divide_position -= os.division;
 19595  012086  EE21  F086         	lfsr	2,_os+19	;volatile
 19596  01208A  50DE               	movf	postinc2,w,c
 19597  01208C  5FBF               	subwf	motor_divide_jump@target_divide_position& (0+255),f,b
 19598  01208E  50DD               	movf	postdec2,w,c
 19599  012090  5BC0               	subwfb	(motor_divide_jump@target_divide_position+1)& (0+255),f,b
 19600                           
 19601                           ; BSR set to: 0
 19602                           ;motor.c: 540: };motor.c: 541: }
 19603  012092  D012               	goto	l2437
 19604  012094                     l2434:
 19605                           
 19606                           ;motor.c: 542: else;motor.c: 543: {;motor.c: 544: target_divide_position = os.divide_pos
      +                          ition + os.divide_jump_size;
 19607                           
 19608                           ; BSR set to: 0
 19609  012094  0101               	movlb	1	; () banked
 19610  012096  518B               	movf	(_os+24)& (0+255),w,b	;volatile
 19611  012098  2589               	addwf	(_os+22)& (0+255),w,b	;volatile
 19612  01209A  0100               	movlb	0	; () banked
 19613  01209C  6FBF               	movwf	motor_divide_jump@target_divide_position& (0+255),b
 19614  01209E  0101               	movlb	1	; () banked
 19615  0120A0  518C               	movf	(_os+25)& (0+255),w,b	;volatile
 19616  0120A2  218A               	addwfc	(_os+23)& (0+255),w,b	;volatile
 19617  0120A4  0100               	movlb	0	; () banked
 19618  0120A6  6FC0               	movwf	(motor_divide_jump@target_divide_position+1)& (0+255),b
 19619                           
 19620                           ;motor.c: 545: if(target_divide_position<0)
 19621  0120A8  AFC0               	btfss	(motor_divide_jump@target_divide_position+1)& (0+255),7,b
 19622  0120AA  D006               	goto	l2437
 19623                           
 19624                           ; BSR set to: 0
 19625                           ;motor.c: 546: {;motor.c: 547: target_divide_position += os.division;
 19626  0120AC  EE21  F086         	lfsr	2,_os+19	;volatile
 19627  0120B0  50DE               	movf	postinc2,w,c
 19628  0120B2  27BF               	addwf	motor_divide_jump@target_divide_position& (0+255),f,b
 19629  0120B4  50DD               	movf	postdec2,w,c
 19630  0120B6  23C0               	addwfc	(motor_divide_jump@target_divide_position+1)& (0+255),f,b
 19631  0120B8                     l2437:
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;motor.c: 548: };motor.c: 549: };motor.c: 552: target_position_in_steps = _step_position
      +                          _from_divide_position(target_divide_position);
 19635                           
 19636                           ; BSR set to: 0
 19637                           
 19638                           ; BSR set to: 0
 19639  0120B8  C0BF  F087         	movff	motor_divide_jump@target_divide_position,__step_position_from_divide_position@div
      +                          ide_position
 19640  0120BC  C0C0  F088         	movff	motor_divide_jump@target_divide_position+1,__step_position_from_divide_position@d
      +                          ivide_position+1
 19641  0120C0  ECEB  F086         	call	__step_position_from_divide_position	;wreg free
 19642  0120C4  C087  F0BB         	movff	?__step_position_from_divide_position,motor_divide_jump@target_position_in_steps
 19643  0120C8  C088  F0BC         	movff	?__step_position_from_divide_position+1,motor_divide_jump@target_position_in_step
      +                          s+1
 19644  0120CC  C089  F0BD         	movff	?__step_position_from_divide_position+2,motor_divide_jump@target_position_in_step
      +                          s+2
 19645  0120D0  C08A  F0BE         	movff	?__step_position_from_divide_position+3,motor_divide_jump@target_position_in_step
      +                          s+3
 19646                           
 19647                           ;motor.c: 555: os.divide_position = target_divide_position;
 19648  0120D4  C0BF  F189         	movff	motor_divide_jump@target_divide_position,_os+22	;volatile
 19649  0120D8  C0C0  F18A         	movff	motor_divide_jump@target_divide_position+1,_os+23	;volatile
 19650                           
 19651                           ;motor.c: 556: motor_go_to_steps_position(target_position_in_steps);
 19652  0120DC  C0BB  F09E         	movff	motor_divide_jump@target_position_in_steps,motor_go_to_steps_position@target_posi
      +                          tion
 19653  0120E0  C0BC  F09F         	movff	motor_divide_jump@target_position_in_steps+1,motor_go_to_steps_position@target_po
      +                          sition+1
 19654  0120E4  C0BD  F0A0         	movff	motor_divide_jump@target_position_in_steps+2,motor_go_to_steps_position@target_po
      +                          sition+2
 19655  0120E8  C0BE  F0A1         	movff	motor_divide_jump@target_position_in_steps+3,motor_go_to_steps_position@target_po
      +                          sition+3
 19656  0120EC  EC2F  F064         	call	_motor_go_to_steps_position	;wreg free
 19657  0120F0  0012               	return		;funcret
 19658  0120F2                     __end_of_motor_divide_jump:
 19659                           	opt stack 0
 19660                           tblptru	equ	0xFF8
 19661                           tblptrh	equ	0xFF7
 19662                           tblptrl	equ	0xFF6
 19663                           tablat	equ	0xFF5
 19664                           prodh	equ	0xFF4
 19665                           prodl	equ	0xFF3
 19666                           intcon	equ	0xFF2
 19667                           postinc0	equ	0xFEE
 19668                           wreg	equ	0xFE8
 19669                           postinc1	equ	0xFE6
 19670                           postdec1	equ	0xFE5
 19671                           plusw1	equ	0xFE3
 19672                           fsr1h	equ	0xFE2
 19673                           fsr1l	equ	0xFE1
 19674                           indf2	equ	0xFDF
 19675                           postinc2	equ	0xFDE
 19676                           postdec2	equ	0xFDD
 19677                           plusw2	equ	0xFDB
 19678                           fsr2h	equ	0xFDA
 19679                           fsr2l	equ	0xFD9
 19680                           status	equ	0xFD8
 19681                           
 19682 ;; *************** function __step_position_from_divide_position *****************
 19683 ;; Defined at:
 19684 ;;		line 67 in file "motor.c"
 19685 ;; Parameters:    Size  Location     Type
 19686 ;;  divide_posit    2   39[BANK0 ] int 
 19687 ;; Auto vars:     Size  Location     Type
 19688 ;;  target_posit    4   43[BANK0 ] float 
 19689 ;; Return value:  Size  Location     Type
 19690 ;;                  4   39[BANK0 ] unsigned long 
 19691 ;; Registers used:
 19692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19693 ;; Tracked objects:
 19694 ;;		On entry : 0/0
 19695 ;;		On exit  : 0/0
 19696 ;;		Unchanged: 0/0
 19697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19698 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19699 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19701 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19702 ;;Total ram usage:        8 bytes
 19703 ;; Hardware stack levels used:    1
 19704 ;; Hardware stack levels required when called:   11
 19705 ;; This function calls:
 19706 ;;		___fldiv
 19707 ;;		___flmul
 19708 ;;		___fltol
 19709 ;;		___xxtofl
 19710 ;; This function is called by:
 19711 ;;		_motor_divide_jump
 19712 ;;		_motor_divide_jump_to_nearest
 19713 ;; This function uses a non-reentrant model
 19714 ;;
 19715                           
 19716                           	psect	text74
 19717  010DD6                     __ptext74:
 19718                           	opt stack 0
 19719  010DD6                     __step_position_from_divide_position:
 19720                           	opt stack 17
 19721                           
 19722                           ;motor.c: 69: float target_position;;motor.c: 72: target_position = (float) config.full_
      +                          circle_in_steps;
 19723                           
 19724                           ;incstack = 0
 19725  010DD6  C1A3  F060         	movff	_config,___xxtofl@val
 19726  010DDA  C1A4  F061         	movff	_config+1,___xxtofl@val+1
 19727  010DDE  C1A5  F062         	movff	_config+2,___xxtofl@val+2
 19728  010DE2  C1A6  F063         	movff	_config+3,___xxtofl@val+3
 19729  010DE6  0E00               	movlw	0
 19730  010DE8  ECE7  F07A         	call	___xxtofl
 19731  010DEC  C060  F08B         	movff	?___xxtofl,__step_position_from_divide_position@target_position
 19732  010DF0  C061  F08C         	movff	?___xxtofl+1,__step_position_from_divide_position@target_position+1
 19733  010DF4  C062  F08D         	movff	?___xxtofl+2,__step_position_from_divide_position@target_position+2
 19734  010DF8  C063  F08E         	movff	?___xxtofl+3,__step_position_from_divide_position@target_position+3
 19735                           
 19736                           ;motor.c: 73: target_position *= (float) divide_position;
 19737  010DFC  C08B  F06E         	movff	__step_position_from_divide_position@target_position,___flmul@b
 19738  010E00  C08C  F06F         	movff	__step_position_from_divide_position@target_position+1,___flmul@b+1
 19739  010E04  C08D  F070         	movff	__step_position_from_divide_position@target_position+2,___flmul@b+2
 19740  010E08  C08E  F071         	movff	__step_position_from_divide_position@target_position+3,___flmul@b+3
 19741  010E0C  C087  F060         	movff	__step_position_from_divide_position@divide_position,___xxtofl@val
 19742  010E10  C088  F061         	movff	__step_position_from_divide_position@divide_position+1,___xxtofl@val+1
 19743  010E14  0100               	movlb	0	; () banked
 19744  010E16  0E00               	movlw	0
 19745  010E18  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 19746  010E1A  0EFF               	movlw	-1
 19747  010E1C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 19748  010E1E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 19749  010E20  0E01               	movlw	1
 19750  010E22  ECE7  F07A         	call	___xxtofl
 19751  010E26  C060  F072         	movff	?___xxtofl,___flmul@a
 19752  010E2A  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 19753  010E2E  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 19754  010E32  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 19755  010E36  ECE8  F060         	call	___flmul	;wreg free
 19756  010E3A  C06E  F08B         	movff	?___flmul,__step_position_from_divide_position@target_position
 19757  010E3E  C06F  F08C         	movff	?___flmul+1,__step_position_from_divide_position@target_position+1
 19758  010E42  C070  F08D         	movff	?___flmul+2,__step_position_from_divide_position@target_position+2
 19759  010E46  C071  F08E         	movff	?___flmul+3,__step_position_from_divide_position@target_position+3
 19760                           
 19761                           ;motor.c: 74: target_position /= (float) os.division;
 19762  010E4A  C08B  F06E         	movff	__step_position_from_divide_position@target_position,___fldiv@b
 19763  010E4E  C08C  F06F         	movff	__step_position_from_divide_position@target_position+1,___fldiv@b+1
 19764  010E52  C08D  F070         	movff	__step_position_from_divide_position@target_position+2,___fldiv@b+2
 19765  010E56  C08E  F071         	movff	__step_position_from_divide_position@target_position+3,___fldiv@b+3
 19766  010E5A  EE21  F086         	lfsr	2,_os+19	;volatile
 19767  010E5E  CFDE F060          	movff	postinc2,___xxtofl@val
 19768  010E62  CFDD F061          	movff	postdec2,___xxtofl@val+1
 19769  010E66  0100               	movlb	0	; () banked
 19770  010E68  0E00               	movlw	0
 19771  010E6A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 19772  010E6C  0EFF               	movlw	-1
 19773  010E6E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 19774  010E70  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 19775  010E72  0E01               	movlw	1
 19776  010E74  ECE7  F07A         	call	___xxtofl
 19777  010E78  C060  F072         	movff	?___xxtofl,___fldiv@a
 19778  010E7C  C061  F073         	movff	?___xxtofl+1,___fldiv@a+1
 19779  010E80  C062  F074         	movff	?___xxtofl+2,___fldiv@a+2
 19780  010E84  C063  F075         	movff	?___xxtofl+3,___fldiv@a+3
 19781  010E88  ECFD  F069         	call	___fldiv	;wreg free
 19782  010E8C  C06E  F08B         	movff	?___fldiv,__step_position_from_divide_position@target_position
 19783  010E90  C06F  F08C         	movff	?___fldiv+1,__step_position_from_divide_position@target_position+1
 19784  010E94  C070  F08D         	movff	?___fldiv+2,__step_position_from_divide_position@target_position+2
 19785  010E98  C071  F08E         	movff	?___fldiv+3,__step_position_from_divide_position@target_position+3
 19786                           
 19787                           ;motor.c: 76: return (uint32_t) target_position;
 19788  010E9C  C08B  F060         	movff	__step_position_from_divide_position@target_position,___fltol@f1
 19789  010EA0  C08C  F061         	movff	__step_position_from_divide_position@target_position+1,___fltol@f1+1
 19790  010EA4  C08D  F062         	movff	__step_position_from_divide_position@target_position+2,___fltol@f1+2
 19791  010EA8  C08E  F063         	movff	__step_position_from_divide_position@target_position+3,___fltol@f1+3
 19792  010EAC  EC28  F089         	call	___fltol	;wreg free
 19793  010EB0  C060  F087         	movff	?___fltol,?__step_position_from_divide_position
 19794  010EB4  C061  F088         	movff	?___fltol+1,?__step_position_from_divide_position+1
 19795  010EB8  C062  F089         	movff	?___fltol+2,?__step_position_from_divide_position+2
 19796  010EBC  C063  F08A         	movff	?___fltol+3,?__step_position_from_divide_position+3
 19797  010EC0  0012               	return	
 19798  010EC2                     __end_of__step_position_from_divide_position:
 19799                           	opt stack 0
 19800                           tblptru	equ	0xFF8
 19801                           tblptrh	equ	0xFF7
 19802                           tblptrl	equ	0xFF6
 19803                           tablat	equ	0xFF5
 19804                           prodh	equ	0xFF4
 19805                           prodl	equ	0xFF3
 19806                           intcon	equ	0xFF2
 19807                           postinc0	equ	0xFEE
 19808                           wreg	equ	0xFE8
 19809                           postinc1	equ	0xFE6
 19810                           postdec1	equ	0xFE5
 19811                           plusw1	equ	0xFE3
 19812                           fsr1h	equ	0xFE2
 19813                           fsr1l	equ	0xFE1
 19814                           indf2	equ	0xFDF
 19815                           postinc2	equ	0xFDE
 19816                           postdec2	equ	0xFDD
 19817                           plusw2	equ	0xFDB
 19818                           fsr2h	equ	0xFDA
 19819                           fsr2l	equ	0xFD9
 19820                           status	equ	0xFD8
 19821                           
 19822 ;; *************** function _motor_change_speed *****************
 19823 ;; Defined at:
 19824 ;;		line 438 in file "motor.c"
 19825 ;; Parameters:    Size  Location     Type
 19826 ;;  new_speed       2    0[BANK0 ] unsigned int 
 19827 ;; Auto vars:     Size  Location     Type
 19828 ;;		None
 19829 ;; Return value:  Size  Location     Type
 19830 ;;                  1    wreg      void 
 19831 ;; Registers used:
 19832 ;;		None
 19833 ;; Tracked objects:
 19834 ;;		On entry : 0/0
 19835 ;;		On exit  : 0/0
 19836 ;;		Unchanged: 0/0
 19837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19838 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19842 ;;Total ram usage:        2 bytes
 19843 ;; Hardware stack levels used:    1
 19844 ;; Hardware stack levels required when called:   10
 19845 ;; This function calls:
 19846 ;;		Nothing
 19847 ;; This function is called by:
 19848 ;;		_encoder_statemachine
 19849 ;; This function uses a non-reentrant model
 19850 ;;
 19851                           
 19852                           	psect	text75
 19853  01432C                     __ptext75:
 19854                           	opt stack 0
 19855  01432C                     _motor_change_speed:
 19856                           	opt stack 19
 19857                           
 19858                           ;motor.c: 440: motor_maximum_speed = new_speed;
 19859                           
 19860                           ;incstack = 0
 19861  01432C  C060  F162         	movff	motor_change_speed@new_speed,_motor_maximum_speed
 19862  014330  C061  F163         	movff	motor_change_speed@new_speed+1,_motor_maximum_speed+1
 19863  014334  0012               	return		;funcret
 19864  014336                     __end_of_motor_change_speed:
 19865                           	opt stack 0
 19866                           tblptru	equ	0xFF8
 19867                           tblptrh	equ	0xFF7
 19868                           tblptrl	equ	0xFF6
 19869                           tablat	equ	0xFF5
 19870                           prodh	equ	0xFF4
 19871                           prodl	equ	0xFF3
 19872                           intcon	equ	0xFF2
 19873                           postinc0	equ	0xFEE
 19874                           wreg	equ	0xFE8
 19875                           postinc1	equ	0xFE6
 19876                           postdec1	equ	0xFE5
 19877                           plusw1	equ	0xFE3
 19878                           fsr1h	equ	0xFE2
 19879                           fsr1l	equ	0xFE1
 19880                           indf2	equ	0xFDF
 19881                           postinc2	equ	0xFDE
 19882                           postdec2	equ	0xFDD
 19883                           plusw2	equ	0xFDB
 19884                           fsr2h	equ	0xFDA
 19885                           fsr2l	equ	0xFD9
 19886                           status	equ	0xFD8
 19887                           
 19888 ;; *************** function _motor_arc_move *****************
 19889 ;; Defined at:
 19890 ;;		line 579 in file "motor.c"
 19891 ;; Parameters:    Size  Location     Type
 19892 ;;  direction       1    wreg     enum E6622
 19893 ;; Auto vars:     Size  Location     Type
 19894 ;;  direction       1   62[BANK0 ] enum E6622
 19895 ;;  arc_in_steps    4   63[BANK0 ] float 
 19896 ;; Return value:  Size  Location     Type
 19897 ;;                  1    wreg      void 
 19898 ;; Registers used:
 19899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19900 ;; Tracked objects:
 19901 ;;		On entry : 0/0
 19902 ;;		On exit  : 0/0
 19903 ;;		Unchanged: 0/0
 19904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 19905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19906 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19908 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 19909 ;;Total ram usage:        5 bytes
 19910 ;; Hardware stack levels used:    1
 19911 ;; Hardware stack levels required when called:   12
 19912 ;; This function calls:
 19913 ;;		___fldiv
 19914 ;;		___flmul
 19915 ;;		___fltol
 19916 ;;		___xxtofl
 19917 ;;		_motor_schedule_command
 19918 ;; This function is called by:
 19919 ;;		_encoder_statemachine
 19920 ;; This function uses a non-reentrant model
 19921 ;;
 19922                           
 19923                           	psect	text76
 19924  011170                     __ptext76:
 19925                           	opt stack 0
 19926  011170                     _motor_arc_move:
 19927                           	opt stack 17
 19928                           
 19929                           ;incstack = 0
 19930                           ;motor_arc_move@direction stored from wreg
 19931  011170  0100               	movlb	0	; () banked
 19932  011172  6F9E               	movwf	motor_arc_move@direction& (0+255),b
 19933                           
 19934                           ;motor.c: 581: float arc_in_steps;;motor.c: 583: arc_in_steps = (float) os.arc_size;
 19935  011174  C18F  F060         	movff	_os+28,___xxtofl@val	;volatile
 19936  011178  C190  F061         	movff	_os+29,___xxtofl@val+1	;volatile
 19937  01117C  C191  F062         	movff	_os+30,___xxtofl@val+2	;volatile
 19938  011180  C192  F063         	movff	_os+31,___xxtofl@val+3	;volatile
 19939  011184  0E01               	movlw	1
 19940  011186  ECE7  F07A         	call	___xxtofl
 19941  01118A  C060  F09F         	movff	?___xxtofl,motor_arc_move@arc_in_steps
 19942  01118E  C061  F0A0         	movff	?___xxtofl+1,motor_arc_move@arc_in_steps+1
 19943  011192  C062  F0A1         	movff	?___xxtofl+2,motor_arc_move@arc_in_steps+2
 19944  011196  C063  F0A2         	movff	?___xxtofl+3,motor_arc_move@arc_in_steps+3
 19945                           
 19946                           ;motor.c: 584: arc_in_steps *= (float) config.full_circle_in_steps;
 19947  01119A  C09F  F06E         	movff	motor_arc_move@arc_in_steps,___flmul@b
 19948  01119E  C0A0  F06F         	movff	motor_arc_move@arc_in_steps+1,___flmul@b+1
 19949  0111A2  C0A1  F070         	movff	motor_arc_move@arc_in_steps+2,___flmul@b+2
 19950  0111A6  C0A2  F071         	movff	motor_arc_move@arc_in_steps+3,___flmul@b+3
 19951  0111AA  C1A3  F060         	movff	_config,___xxtofl@val
 19952  0111AE  C1A4  F061         	movff	_config+1,___xxtofl@val+1
 19953  0111B2  C1A5  F062         	movff	_config+2,___xxtofl@val+2
 19954  0111B6  C1A6  F063         	movff	_config+3,___xxtofl@val+3
 19955  0111BA  0E00               	movlw	0
 19956  0111BC  ECE7  F07A         	call	___xxtofl
 19957  0111C0  C060  F072         	movff	?___xxtofl,___flmul@a
 19958  0111C4  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 19959  0111C8  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 19960  0111CC  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 19961  0111D0  ECE8  F060         	call	___flmul	;wreg free
 19962  0111D4  C06E  F09F         	movff	?___flmul,motor_arc_move@arc_in_steps
 19963  0111D8  C06F  F0A0         	movff	?___flmul+1,motor_arc_move@arc_in_steps+1
 19964  0111DC  C070  F0A1         	movff	?___flmul+2,motor_arc_move@arc_in_steps+2
 19965  0111E0  C071  F0A2         	movff	?___flmul+3,motor_arc_move@arc_in_steps+3
 19966                           
 19967                           ;motor.c: 585: arc_in_steps /= (float) 36000;
 19968  0111E4  C09F  F06E         	movff	motor_arc_move@arc_in_steps,___fldiv@b
 19969  0111E8  C0A0  F06F         	movff	motor_arc_move@arc_in_steps+1,___fldiv@b+1
 19970  0111EC  C0A1  F070         	movff	motor_arc_move@arc_in_steps+2,___fldiv@b+2
 19971  0111F0  C0A2  F071         	movff	motor_arc_move@arc_in_steps+3,___fldiv@b+3
 19972  0111F4  0E00               	movlw	0
 19973  0111F6  0100               	movlb	0	; () banked
 19974  0111F8  6F72               	movwf	___fldiv@a& (0+255),b
 19975  0111FA  0EA0               	movlw	160
 19976  0111FC  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 19977  0111FE  0E0C               	movlw	12
 19978  011200  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 19979  011202  0E47               	movlw	71
 19980  011204  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 19981  011206  ECFD  F069         	call	___fldiv	;wreg free
 19982  01120A  C06E  F09F         	movff	?___fldiv,motor_arc_move@arc_in_steps
 19983  01120E  C06F  F0A0         	movff	?___fldiv+1,motor_arc_move@arc_in_steps+1
 19984  011212  C070  F0A1         	movff	?___fldiv+2,motor_arc_move@arc_in_steps+2
 19985  011216  C071  F0A2         	movff	?___fldiv+3,motor_arc_move@arc_in_steps+3
 19986                           
 19987                           ;motor.c: 586: motor_schedule_command(direction, (uint32_t ) arc_in_steps, os.arc_speed)
      +                          ;
 19988  01121A  C09F  F060         	movff	motor_arc_move@arc_in_steps,___fltol@f1
 19989  01121E  C0A0  F061         	movff	motor_arc_move@arc_in_steps+1,___fltol@f1+1
 19990  011222  C0A1  F062         	movff	motor_arc_move@arc_in_steps+2,___fltol@f1+2
 19991  011226  C0A2  F063         	movff	motor_arc_move@arc_in_steps+3,___fltol@f1+3
 19992  01122A  EC28  F089         	call	___fltol	;wreg free
 19993  01122E  C060  F097         	movff	?___fltol,motor_schedule_command@distance_in_steps
 19994  011232  C061  F098         	movff	?___fltol+1,motor_schedule_command@distance_in_steps+1
 19995  011236  C062  F099         	movff	?___fltol+2,motor_schedule_command@distance_in_steps+2
 19996  01123A  C063  F09A         	movff	?___fltol+3,motor_schedule_command@distance_in_steps+3
 19997  01123E  C193  F09B         	movff	_os+32,motor_schedule_command@speed	;volatile
 19998  011242  C194  F09C         	movff	_os+33,motor_schedule_command@speed+1	;volatile
 19999  011246  0100               	movlb	0	; () banked
 20000  011248  519E               	movf	motor_arc_move@direction& (0+255),w,b
 20001  01124A  ECCE  F08F         	call	_motor_schedule_command
 20002  01124E  0012               	return		;funcret
 20003  011250                     __end_of_motor_arc_move:
 20004                           	opt stack 0
 20005                           tblptru	equ	0xFF8
 20006                           tblptrh	equ	0xFF7
 20007                           tblptrl	equ	0xFF6
 20008                           tablat	equ	0xFF5
 20009                           prodh	equ	0xFF4
 20010                           prodl	equ	0xFF3
 20011                           intcon	equ	0xFF2
 20012                           postinc0	equ	0xFEE
 20013                           wreg	equ	0xFE8
 20014                           postinc1	equ	0xFE6
 20015                           postdec1	equ	0xFE5
 20016                           plusw1	equ	0xFE3
 20017                           fsr1h	equ	0xFE2
 20018                           fsr1l	equ	0xFE1
 20019                           indf2	equ	0xFDF
 20020                           postinc2	equ	0xFDE
 20021                           postdec2	equ	0xFDD
 20022                           plusw2	equ	0xFDB
 20023                           fsr2h	equ	0xFDA
 20024                           fsr2l	equ	0xFD9
 20025                           status	equ	0xFD8
 20026                           
 20027 ;; *************** function __encoder_next_setup_stepsize *****************
 20028 ;; Defined at:
 20029 ;;		line 24 in file "encoder.c"
 20030 ;; Parameters:    Size  Location     Type
 20031 ;;  old_stepsize    2    0[BANK0 ] unsigned int 
 20032 ;; Auto vars:     Size  Location     Type
 20033 ;;		None
 20034 ;; Return value:  Size  Location     Type
 20035 ;;                  2    0[BANK0 ] unsigned int 
 20036 ;; Registers used:
 20037 ;;		wreg, status,2, status,0
 20038 ;; Tracked objects:
 20039 ;;		On entry : 0/0
 20040 ;;		On exit  : 0/0
 20041 ;;		Unchanged: 0/0
 20042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 20043 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20047 ;;Total ram usage:        4 bytes
 20048 ;; Hardware stack levels used:    1
 20049 ;; Hardware stack levels required when called:   10
 20050 ;; This function calls:
 20051 ;;		Nothing
 20052 ;; This function is called by:
 20053 ;;		_encoder_statemachine
 20054 ;; This function uses a non-reentrant model
 20055 ;;
 20056                           
 20057                           	psect	text77
 20058  012B88                     __ptext77:
 20059                           	opt stack 0
 20060  012B88                     __encoder_next_setup_stepsize:
 20061                           	opt stack 19
 20062                           
 20063                           ;encoder.c: 26: switch(old_stepsize)
 20064                           
 20065                           ;incstack = 0
 20066  012B88  D01A               	goto	l2481
 20067  012B8A                     
 20068                           ;encoder.c: 29: return 100;
 20069  012B8A  0E00               	movlw	0
 20070  012B8C  0100               	movlb	0	; () banked
 20071  012B8E  6F61               	movwf	(?__encoder_next_setup_stepsize+1)& (0+255),b
 20072  012B90  0E64               	movlw	100
 20073  012B92  6F60               	movwf	?__encoder_next_setup_stepsize& (0+255),b
 20074                           
 20075                           ; BSR set to: 0
 20076  012B94  0012               	return	
 20077  012B96                     
 20078                           ; BSR set to: 0
 20079                           ;encoder.c: 31: return 10;
 20080                           
 20081                           ; BSR set to: 0
 20082  012B96  0E00               	movlw	0
 20083  012B98  6F61               	movwf	(?__encoder_next_setup_stepsize+1)& (0+255),b
 20084  012B9A  0E0A               	movlw	10
 20085  012B9C  6F60               	movwf	?__encoder_next_setup_stepsize& (0+255),b
 20086                           
 20087                           ; BSR set to: 0
 20088  012B9E  0012               	return	
 20089  012BA0                     
 20090                           ; BSR set to: 0
 20091                           ;encoder.c: 33: return 1;
 20092                           
 20093                           ; BSR set to: 0
 20094  012BA0  0E00               	movlw	0
 20095  012BA2  6F61               	movwf	(?__encoder_next_setup_stepsize+1)& (0+255),b
 20096  012BA4  0E01               	movlw	1
 20097  012BA6  6F60               	movwf	?__encoder_next_setup_stepsize& (0+255),b
 20098                           
 20099                           ; BSR set to: 0
 20100  012BA8  0012               	return	
 20101  012BAA                     
 20102                           ; BSR set to: 0
 20103                           ;encoder.c: 35: return 1000;
 20104                           
 20105                           ; BSR set to: 0
 20106  012BAA  0E03               	movlw	3
 20107  012BAC  6F61               	movwf	(?__encoder_next_setup_stepsize+1)& (0+255),b
 20108  012BAE  0EE8               	movlw	232
 20109  012BB0  6F60               	movwf	?__encoder_next_setup_stepsize& (0+255),b
 20110                           
 20111                           ; BSR set to: 0
 20112  012BB2  0012               	return	
 20113  012BB4                     
 20114                           ; BSR set to: 0
 20115                           ;encoder.c: 37: return 100;
 20116                           
 20117                           ; BSR set to: 0
 20118  012BB4  0E00               	movlw	0
 20119  012BB6  6F61               	movwf	(?__encoder_next_setup_stepsize+1)& (0+255),b
 20120  012BB8  0E64               	movlw	100
 20121  012BBA  6F60               	movwf	?__encoder_next_setup_stepsize& (0+255),b
 20122                           
 20123                           ; BSR set to: 0
 20124                           ;encoder.c: 38: }
 20125                           
 20126                           ; BSR set to: 0
 20127  012BBC  0012               	return	
 20128  012BBE                     l2481:
 20129                           
 20130                           ; BSR set to: 0
 20131  012BBE  C060  F062         	movff	__encoder_next_setup_stepsize@old_stepsize,??__encoder_next_setup_stepsize
 20132  012BC2  C061  F063         	movff	__encoder_next_setup_stepsize@old_stepsize+1,??__encoder_next_setup_stepsize+1
 20133                           
 20134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20135                           ; Switch size 1, requested type "space"
 20136                           ; Number of cases is 2, Range of values is 0 to 3
 20137                           ; switch strategies available:
 20138                           ; Name         Instructions Cycles
 20139                           ; simple_byte            7     4 (average)
 20140                           ;	Chosen strategy is simple_byte
 20141  012BC6  0100               	movlb	0	; () banked
 20142  012BC8  5163               	movf	(??__encoder_next_setup_stepsize+1)& (0+255),w,b
 20143  012BCA  0A00               	xorlw	0	; case 0
 20144  012BCC  B4D8               	btfsc	status,2,c
 20145  012BCE  D004               	goto	l24332
 20146  012BD0  0A03               	xorlw	3	; case 3
 20147  012BD2  B4D8               	btfsc	status,2,c
 20148  012BD4  D00C               	goto	l24334
 20149  012BD6  D7EE               	goto	l2487
 20150  012BD8                     l24332:
 20151                           
 20152                           ; BSR set to: 0
 20153                           ; Switch size 1, requested type "space"
 20154                           ; Number of cases is 3, Range of values is 1 to 100
 20155                           ; switch strategies available:
 20156                           ; Name         Instructions Cycles
 20157                           ; simple_byte           10     6 (average)
 20158                           ;	Chosen strategy is simple_byte
 20159  012BD8  5162               	movf	??__encoder_next_setup_stepsize& (0+255),w,b
 20160  012BDA  0A01               	xorlw	1	; case 1
 20161  012BDC  B4D8               	btfsc	status,2,c
 20162  012BDE  D7E5               	goto	l2486
 20163  012BE0  0A0B               	xorlw	11	; case 10
 20164  012BE2  B4D8               	btfsc	status,2,c
 20165  012BE4  D7DD               	goto	l2485
 20166  012BE6  0A6E               	xorlw	110	; case 100
 20167  012BE8  B4D8               	btfsc	status,2,c
 20168  012BEA  D7D5               	goto	l2484
 20169  012BEC  D7E3               	goto	l2487
 20170  012BEE                     l24334:
 20171                           
 20172                           ; BSR set to: 0
 20173                           ; Switch size 1, requested type "space"
 20174                           ; Number of cases is 1, Range of values is 232 to 232
 20175                           ; switch strategies available:
 20176                           ; Name         Instructions Cycles
 20177                           ; simple_byte            4     3 (average)
 20178                           ;	Chosen strategy is simple_byte
 20179  012BEE  5162               	movf	??__encoder_next_setup_stepsize& (0+255),w,b
 20180  012BF0  0AE8               	xorlw	232	; case 232
 20181  012BF2  B4D8               	btfsc	status,2,c
 20182  012BF4  D7CA               	goto	l2482
 20183  012BF6  D7DE               	goto	l2487
 20184  012BF8                     __end_of__encoder_next_setup_stepsize:
 20185                           	opt stack 0
 20186                           tblptru	equ	0xFF8
 20187                           tblptrh	equ	0xFF7
 20188                           tblptrl	equ	0xFF6
 20189                           tablat	equ	0xFF5
 20190                           prodh	equ	0xFF4
 20191                           prodl	equ	0xFF3
 20192                           intcon	equ	0xFF2
 20193                           postinc0	equ	0xFEE
 20194                           wreg	equ	0xFE8
 20195                           postinc1	equ	0xFE6
 20196                           postdec1	equ	0xFE5
 20197                           plusw1	equ	0xFE3
 20198                           fsr1h	equ	0xFE2
 20199                           fsr1l	equ	0xFE1
 20200                           indf2	equ	0xFDF
 20201                           postinc2	equ	0xFDE
 20202                           postdec2	equ	0xFDD
 20203                           plusw2	equ	0xFDB
 20204                           fsr2h	equ	0xFDA
 20205                           fsr2l	equ	0xFD9
 20206                           status	equ	0xFD8
 20207                           
 20208 ;; *************** function __encoder_next_divide_step_size *****************
 20209 ;; Defined at:
 20210 ;;		line 41 in file "encoder.c"
 20211 ;; Parameters:    Size  Location     Type
 20212 ;;  old_stepsize    1    wreg     unsigned char 
 20213 ;; Auto vars:     Size  Location     Type
 20214 ;;  old_stepsize    1    0[BANK0 ] unsigned char 
 20215 ;; Return value:  Size  Location     Type
 20216 ;;                  1    wreg      unsigned char 
 20217 ;; Registers used:
 20218 ;;		wreg, status,2, status,0
 20219 ;; Tracked objects:
 20220 ;;		On entry : 0/0
 20221 ;;		On exit  : 0/0
 20222 ;;		Unchanged: 0/0
 20223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 20224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20228 ;;Total ram usage:        1 bytes
 20229 ;; Hardware stack levels used:    1
 20230 ;; Hardware stack levels required when called:   10
 20231 ;; This function calls:
 20232 ;;		Nothing
 20233 ;; This function is called by:
 20234 ;;		_encoder_statemachine
 20235 ;; This function uses a non-reentrant model
 20236 ;;
 20237                           
 20238                           	psect	text78
 20239  013F4C                     __ptext78:
 20240                           	opt stack 0
 20241  013F4C                     __encoder_next_divide_step_size:
 20242                           	opt stack 19
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;incstack = 0
 20246                           ;__encoder_next_divide_step_size@old_stepsize stored from wreg
 20247  013F4C  0100               	movlb	0	; () banked
 20248  013F4E  6F60               	movwf	__encoder_next_divide_step_size@old_stepsize& (0+255),b
 20249                           
 20250                           ;encoder.c: 43: switch(old_stepsize)
 20251  013F50  D008               	goto	l2491
 20252  013F52                     
 20253                           ;encoder.c: 46: return 10;
 20254  013F52  0E0A               	movlw	10
 20255  013F54  0012               	return	
 20256  013F56                     
 20257                           ;encoder.c: 48: return 1;
 20258  013F56  0E01               	movlw	1
 20259  013F58  0012               	return	
 20260  013F5A                     
 20261                           ;encoder.c: 50: return 100;
 20262  013F5A  0E64               	movlw	100
 20263  013F5C  0012               	return	
 20264  013F5E                     
 20265                           ;encoder.c: 52: return 1;
 20266  013F5E  0E01               	movlw	1
 20267                           
 20268                           ;encoder.c: 53: }
 20269  013F60  0012               	return	
 20270  013F62                     l2491:
 20271  013F62  0100               	movlb	0	; () banked
 20272  013F64  5160               	movf	__encoder_next_divide_step_size@old_stepsize& (0+255),w,b
 20273                           
 20274                           ; Switch size 1, requested type "space"
 20275                           ; Number of cases is 3, Range of values is 1 to 100
 20276                           ; switch strategies available:
 20277                           ; Name         Instructions Cycles
 20278                           ; simple_byte           10     6 (average)
 20279                           ;	Chosen strategy is simple_byte
 20280  013F66  0A01               	xorlw	1	; case 1
 20281  013F68  B4D8               	btfsc	status,2,c
 20282  013F6A  D7F7               	goto	l2495
 20283  013F6C  0A0B               	xorlw	11	; case 10
 20284  013F6E  B4D8               	btfsc	status,2,c
 20285  013F70  D7F2               	goto	l2494
 20286  013F72  0A6E               	xorlw	110	; case 100
 20287  013F74  B4D8               	btfsc	status,2,c
 20288  013F76  D7ED               	goto	l2492
 20289  013F78  D7F2               	goto	l2496
 20290  013F7A                     __end_of__encoder_next_divide_step_size:
 20291                           	opt stack 0
 20292                           tblptru	equ	0xFF8
 20293                           tblptrh	equ	0xFF7
 20294                           tblptrl	equ	0xFF6
 20295                           tablat	equ	0xFF5
 20296                           prodh	equ	0xFF4
 20297                           prodl	equ	0xFF3
 20298                           intcon	equ	0xFF2
 20299                           postinc0	equ	0xFEE
 20300                           wreg	equ	0xFE8
 20301                           postinc1	equ	0xFE6
 20302                           postdec1	equ	0xFE5
 20303                           plusw1	equ	0xFE3
 20304                           fsr1h	equ	0xFE2
 20305                           fsr1l	equ	0xFE1
 20306                           indf2	equ	0xFDF
 20307                           postinc2	equ	0xFDE
 20308                           postdec2	equ	0xFDD
 20309                           plusw2	equ	0xFDB
 20310                           fsr2h	equ	0xFDA
 20311                           fsr2l	equ	0xFD9
 20312                           status	equ	0xFD8
 20313                           
 20314 ;; *************** function __encoder_next_arc_step_size *****************
 20315 ;; Defined at:
 20316 ;;		line 56 in file "encoder.c"
 20317 ;; Parameters:    Size  Location     Type
 20318 ;;  old_stepsize    2    0[BANK0 ] unsigned int 
 20319 ;; Auto vars:     Size  Location     Type
 20320 ;;		None
 20321 ;; Return value:  Size  Location     Type
 20322 ;;                  2    0[BANK0 ] unsigned int 
 20323 ;; Registers used:
 20324 ;;		wreg, status,2, status,0
 20325 ;; Tracked objects:
 20326 ;;		On entry : 0/0
 20327 ;;		On exit  : 0/0
 20328 ;;		Unchanged: 0/0
 20329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 20330 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20333 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20334 ;;Total ram usage:        4 bytes
 20335 ;; Hardware stack levels used:    1
 20336 ;; Hardware stack levels required when called:   10
 20337 ;; This function calls:
 20338 ;;		Nothing
 20339 ;; This function is called by:
 20340 ;;		_encoder_statemachine
 20341 ;; This function uses a non-reentrant model
 20342 ;;
 20343                           
 20344                           	psect	text79
 20345  012BF8                     __ptext79:
 20346                           	opt stack 0
 20347  012BF8                     __encoder_next_arc_step_size:
 20348                           	opt stack 19
 20349                           
 20350                           ;encoder.c: 58: switch(old_stepsize)
 20351                           
 20352                           ;incstack = 0
 20353  012BF8  D01A               	goto	l2500
 20354  012BFA                     
 20355                           ;encoder.c: 61: return 100;
 20356  012BFA  0E00               	movlw	0
 20357  012BFC  0100               	movlb	0	; () banked
 20358  012BFE  6F61               	movwf	(?__encoder_next_arc_step_size+1)& (0+255),b
 20359  012C00  0E64               	movlw	100
 20360  012C02  6F60               	movwf	?__encoder_next_arc_step_size& (0+255),b
 20361                           
 20362                           ; BSR set to: 0
 20363  012C04  0012               	return	
 20364  012C06                     
 20365                           ; BSR set to: 0
 20366                           ;encoder.c: 63: return 10;
 20367                           
 20368                           ; BSR set to: 0
 20369  012C06  0E00               	movlw	0
 20370  012C08  6F61               	movwf	(?__encoder_next_arc_step_size+1)& (0+255),b
 20371  012C0A  0E0A               	movlw	10
 20372  012C0C  6F60               	movwf	?__encoder_next_arc_step_size& (0+255),b
 20373                           
 20374                           ; BSR set to: 0
 20375  012C0E  0012               	return	
 20376  012C10                     
 20377                           ; BSR set to: 0
 20378                           ;encoder.c: 65: return 1;
 20379                           
 20380                           ; BSR set to: 0
 20381  012C10  0E00               	movlw	0
 20382  012C12  6F61               	movwf	(?__encoder_next_arc_step_size+1)& (0+255),b
 20383  012C14  0E01               	movlw	1
 20384  012C16  6F60               	movwf	?__encoder_next_arc_step_size& (0+255),b
 20385                           
 20386                           ; BSR set to: 0
 20387  012C18  0012               	return	
 20388  012C1A                     
 20389                           ; BSR set to: 0
 20390                           ;encoder.c: 67: return 1000;
 20391                           
 20392                           ; BSR set to: 0
 20393  012C1A  0E03               	movlw	3
 20394  012C1C  6F61               	movwf	(?__encoder_next_arc_step_size+1)& (0+255),b
 20395  012C1E  0EE8               	movlw	232
 20396  012C20  6F60               	movwf	?__encoder_next_arc_step_size& (0+255),b
 20397                           
 20398                           ; BSR set to: 0
 20399  012C22  0012               	return	
 20400  012C24                     
 20401                           ; BSR set to: 0
 20402                           ;encoder.c: 69: return 100;
 20403                           
 20404                           ; BSR set to: 0
 20405  012C24  0E00               	movlw	0
 20406  012C26  6F61               	movwf	(?__encoder_next_arc_step_size+1)& (0+255),b
 20407  012C28  0E64               	movlw	100
 20408  012C2A  6F60               	movwf	?__encoder_next_arc_step_size& (0+255),b
 20409                           
 20410                           ; BSR set to: 0
 20411                           ;encoder.c: 70: }
 20412                           
 20413                           ; BSR set to: 0
 20414  012C2C  0012               	return	
 20415  012C2E                     l2500:
 20416                           
 20417                           ; BSR set to: 0
 20418  012C2E  C060  F062         	movff	__encoder_next_arc_step_size@old_stepsize,??__encoder_next_arc_step_size
 20419  012C32  C061  F063         	movff	__encoder_next_arc_step_size@old_stepsize+1,??__encoder_next_arc_step_size+1
 20420                           
 20421                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 20422                           ; Switch size 1, requested type "space"
 20423                           ; Number of cases is 2, Range of values is 0 to 3
 20424                           ; switch strategies available:
 20425                           ; Name         Instructions Cycles
 20426                           ; simple_byte            7     4 (average)
 20427                           ;	Chosen strategy is simple_byte
 20428  012C36  0100               	movlb	0	; () banked
 20429  012C38  5163               	movf	(??__encoder_next_arc_step_size+1)& (0+255),w,b
 20430  012C3A  0A00               	xorlw	0	; case 0
 20431  012C3C  B4D8               	btfsc	status,2,c
 20432  012C3E  D004               	goto	l24336
 20433  012C40  0A03               	xorlw	3	; case 3
 20434  012C42  B4D8               	btfsc	status,2,c
 20435  012C44  D00C               	goto	l24338
 20436  012C46  D7EE               	goto	l2506
 20437  012C48                     l24336:
 20438                           
 20439                           ; BSR set to: 0
 20440                           ; Switch size 1, requested type "space"
 20441                           ; Number of cases is 3, Range of values is 1 to 100
 20442                           ; switch strategies available:
 20443                           ; Name         Instructions Cycles
 20444                           ; simple_byte           10     6 (average)
 20445                           ;	Chosen strategy is simple_byte
 20446  012C48  5162               	movf	??__encoder_next_arc_step_size& (0+255),w,b
 20447  012C4A  0A01               	xorlw	1	; case 1
 20448  012C4C  B4D8               	btfsc	status,2,c
 20449  012C4E  D7E5               	goto	l2505
 20450  012C50  0A0B               	xorlw	11	; case 10
 20451  012C52  B4D8               	btfsc	status,2,c
 20452  012C54  D7DD               	goto	l2504
 20453  012C56  0A6E               	xorlw	110	; case 100
 20454  012C58  B4D8               	btfsc	status,2,c
 20455  012C5A  D7D5               	goto	l2503
 20456  012C5C  D7E3               	goto	l2506
 20457  012C5E                     l24338:
 20458                           
 20459                           ; BSR set to: 0
 20460                           ; Switch size 1, requested type "space"
 20461                           ; Number of cases is 1, Range of values is 232 to 232
 20462                           ; switch strategies available:
 20463                           ; Name         Instructions Cycles
 20464                           ; simple_byte            4     3 (average)
 20465                           ;	Chosen strategy is simple_byte
 20466  012C5E  5162               	movf	??__encoder_next_arc_step_size& (0+255),w,b
 20467  012C60  0AE8               	xorlw	232	; case 232
 20468  012C62  B4D8               	btfsc	status,2,c
 20469  012C64  D7CA               	goto	l2501
 20470  012C66  D7DE               	goto	l2506
 20471  012C68                     __end_of__encoder_next_arc_step_size:
 20472                           	opt stack 0
 20473                           tblptru	equ	0xFF8
 20474                           tblptrh	equ	0xFF7
 20475                           tblptrl	equ	0xFF6
 20476                           tablat	equ	0xFF5
 20477                           prodh	equ	0xFF4
 20478                           prodl	equ	0xFF3
 20479                           intcon	equ	0xFF2
 20480                           postinc0	equ	0xFEE
 20481                           wreg	equ	0xFE8
 20482                           postinc1	equ	0xFE6
 20483                           postdec1	equ	0xFE5
 20484                           plusw1	equ	0xFE3
 20485                           fsr1h	equ	0xFE2
 20486                           fsr1l	equ	0xFE1
 20487                           indf2	equ	0xFDF
 20488                           postinc2	equ	0xFDE
 20489                           postdec2	equ	0xFDD
 20490                           plusw2	equ	0xFDB
 20491                           fsr2h	equ	0xFDA
 20492                           fsr2l	equ	0xFD9
 20493                           status	equ	0xFD8
 20494                           
 20495 ;; *************** function __divide_jump_size_increment *****************
 20496 ;; Defined at:
 20497 ;;		line 73 in file "encoder.c"
 20498 ;; Parameters:    Size  Location     Type
 20499 ;;		None
 20500 ;; Auto vars:     Size  Location     Type
 20501 ;;		None
 20502 ;; Return value:  Size  Location     Type
 20503 ;;                  1    wreg      void 
 20504 ;; Registers used:
 20505 ;;		wreg, status,2, status,0
 20506 ;; Tracked objects:
 20507 ;;		On entry : 0/0
 20508 ;;		On exit  : 0/0
 20509 ;;		Unchanged: 0/0
 20510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 20511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20514 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20515 ;;Total ram usage:        1 bytes
 20516 ;; Hardware stack levels used:    1
 20517 ;; Hardware stack levels required when called:   10
 20518 ;; This function calls:
 20519 ;;		Nothing
 20520 ;; This function is called by:
 20521 ;;		_encoder_statemachine
 20522 ;; This function uses a non-reentrant model
 20523 ;;
 20524                           
 20525                           	psect	text80
 20526  013B0C                     __ptext80:
 20527                           	opt stack 0
 20528  013B0C                     __divide_jump_size_increment:
 20529                           	opt stack 19
 20530                           
 20531                           ;encoder.c: 75: ++os.divide_jump_size;
 20532                           
 20533                           ; BSR set to: 0
 20534                           ;incstack = 0
 20535  013B0C  0101               	movlb	1	; () banked
 20536  013B0E  4B8B               	infsnz	(_os+24)& (0+255),f,b	;volatile
 20537  013B10  2B8C               	incf	(_os+25)& (0+255),f,b	;volatile
 20538                           
 20539                           ; BSR set to: 1
 20540                           ;encoder.c: 76: if(os.divide_jump_size==0)
 20541  013B12  518B               	movf	(_os+24)& (0+255),w,b	;volatile
 20542  013B14  118C               	iorwf	(_os+25)& (0+255),w,b	;volatile
 20543  013B16  A4D8               	btfss	status,2,c
 20544  013B18  D004               	goto	l2510
 20545                           
 20546                           ; BSR set to: 1
 20547                           ;encoder.c: 77: os.divide_jump_size = 1;
 20548  013B1A  0E00               	movlw	0
 20549  013B1C  6F8C               	movwf	(_os+25)& (0+255),b	;volatile
 20550  013B1E  0E01               	movlw	1
 20551  013B20  6F8B               	movwf	(_os+24)& (0+255),b	;volatile
 20552  013B22                     l2510:
 20553                           
 20554                           ; BSR set to: 1
 20555                           ;encoder.c: 78: if(os.divide_jump_size>=os.division)
 20556                           
 20557                           ; BSR set to: 1
 20558  013B22  5186               	movf	(_os+19)& (0+255),w,b	;volatile
 20559  013B24  5D8B               	subwf	(_os+24)& (0+255),w,b	;volatile
 20560  013B26  518C               	movf	(_os+25)& (0+255),w,b	;volatile
 20561  013B28  0A80               	xorlw	128
 20562  013B2A  0100               	movlb	0	; () banked
 20563  013B2C  6F60               	movwf	??__divide_jump_size_increment& (0+255),b
 20564  013B2E  0101               	movlb	1	; () banked
 20565  013B30  5187               	movf	(_os+20)& (0+255),w,b	;volatile
 20566  013B32  0A80               	xorlw	128
 20567  013B34  0100               	movlb	0	; () banked
 20568  013B36  5960               	subwfb	??__divide_jump_size_increment& (0+255),w,b
 20569  013B38  A0D8               	btfss	status,0,c
 20570  013B3A  0012               	return	
 20571                           
 20572                           ; BSR set to: 0
 20573                           ;encoder.c: 79: os.divide_jump_size = os.division - 1;
 20574  013B3C  0EFF               	movlw	255
 20575  013B3E  0101               	movlb	1	; () banked
 20576  013B40  2586               	addwf	(_os+19)& (0+255),w,b	;volatile
 20577  013B42  6F8B               	movwf	(_os+24)& (0+255),b	;volatile
 20578  013B44  0EFF               	movlw	255
 20579  013B46  2187               	addwfc	(_os+20)& (0+255),w,b	;volatile
 20580  013B48  6F8C               	movwf	(_os+25)& (0+255),b	;volatile
 20581  013B4A  0012               	return	
 20582  013B4C                     __end_of__divide_jump_size_increment:
 20583                           	opt stack 0
 20584                           tblptru	equ	0xFF8
 20585                           tblptrh	equ	0xFF7
 20586                           tblptrl	equ	0xFF6
 20587                           tablat	equ	0xFF5
 20588                           prodh	equ	0xFF4
 20589                           prodl	equ	0xFF3
 20590                           intcon	equ	0xFF2
 20591                           postinc0	equ	0xFEE
 20592                           wreg	equ	0xFE8
 20593                           postinc1	equ	0xFE6
 20594                           postdec1	equ	0xFE5
 20595                           plusw1	equ	0xFE3
 20596                           fsr1h	equ	0xFE2
 20597                           fsr1l	equ	0xFE1
 20598                           indf2	equ	0xFDF
 20599                           postinc2	equ	0xFDE
 20600                           postdec2	equ	0xFDD
 20601                           plusw2	equ	0xFDB
 20602                           fsr2h	equ	0xFDA
 20603                           fsr2l	equ	0xFD9
 20604                           status	equ	0xFD8
 20605                           
 20606 ;; *************** function __divide_jump_size_decrement *****************
 20607 ;; Defined at:
 20608 ;;		line 82 in file "encoder.c"
 20609 ;; Parameters:    Size  Location     Type
 20610 ;;		None
 20611 ;; Auto vars:     Size  Location     Type
 20612 ;;		None
 20613 ;; Return value:  Size  Location     Type
 20614 ;;                  1    wreg      void 
 20615 ;; Registers used:
 20616 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20617 ;; Tracked objects:
 20618 ;;		On entry : 0/0
 20619 ;;		On exit  : 0/0
 20620 ;;		Unchanged: 0/0
 20621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 20622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20624 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20625 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20626 ;;Total ram usage:        3 bytes
 20627 ;; Hardware stack levels used:    1
 20628 ;; Hardware stack levels required when called:   10
 20629 ;; This function calls:
 20630 ;;		Nothing
 20631 ;; This function is called by:
 20632 ;;		_encoder_statemachine
 20633 ;; This function uses a non-reentrant model
 20634 ;;
 20635                           
 20636                           	psect	text81
 20637  012CD6                     __ptext81:
 20638                           	opt stack 0
 20639  012CD6                     __divide_jump_size_decrement:
 20640                           	opt stack 19
 20641                           
 20642                           ;encoder.c: 84: --os.divide_jump_size;
 20643                           
 20644                           ;incstack = 0
 20645  012CD6  0101               	movlb	1	; () banked
 20646  012CD8  078B               	decf	(_os+24)& (0+255),f,b	;volatile
 20647  012CDA  A0D8               	btfss	status,0,c
 20648  012CDC  078C               	decf	(_os+25)& (0+255),f,b	;volatile
 20649                           
 20650                           ; BSR set to: 1
 20651                           ;encoder.c: 85: if(os.divide_jump_size==0)
 20652  012CDE  518B               	movf	(_os+24)& (0+255),w,b	;volatile
 20653  012CE0  118C               	iorwf	(_os+25)& (0+255),w,b	;volatile
 20654  012CE2  A4D8               	btfss	status,2,c
 20655  012CE4  D002               	goto	l2515
 20656                           
 20657                           ; BSR set to: 1
 20658                           ;encoder.c: 86: os.divide_jump_size = -1;
 20659  012CE6  698B               	setf	(_os+24)& (0+255),b	;volatile
 20660  012CE8  698C               	setf	(_os+25)& (0+255),b	;volatile
 20661  012CEA                     l2515:
 20662                           
 20663                           ; BSR set to: 1
 20664                           ;encoder.c: 87: if(os.divide_jump_size<=(-os.division))
 20665                           
 20666                           ; BSR set to: 1
 20667  012CEA  EE21  F086         	lfsr	2,_os+19	;volatile
 20668  012CEE  CFDE F060          	movff	postinc2,??__divide_jump_size_decrement
 20669  012CF2  CFDD F061          	movff	postdec2,??__divide_jump_size_decrement+1
 20670  012CF6  0100               	movlb	0	; () banked
 20671  012CF8  1F60               	comf	??__divide_jump_size_decrement& (0+255),f,b
 20672  012CFA  1F61               	comf	(??__divide_jump_size_decrement+1)& (0+255),f,b
 20673  012CFC  4B60               	infsnz	??__divide_jump_size_decrement& (0+255),f,b
 20674  012CFE  2B61               	incf	(??__divide_jump_size_decrement+1)& (0+255),f,b
 20675  012D00  0101               	movlb	1	; () banked
 20676  012D02  518B               	movf	(_os+24)& (0+255),w,b	;volatile
 20677  012D04  0100               	movlb	0	; () banked
 20678  012D06  5D60               	subwf	??__divide_jump_size_decrement& (0+255),w,b
 20679  012D08  5161               	movf	(??__divide_jump_size_decrement+1)& (0+255),w,b
 20680  012D0A  0A80               	xorlw	128
 20681  012D0C  6F62               	movwf	(??__divide_jump_size_decrement+2)& (0+255),b
 20682  012D0E  0101               	movlb	1	; () banked
 20683  012D10  518C               	movf	(_os+25)& (0+255),w,b	;volatile
 20684  012D12  0A80               	xorlw	128
 20685  012D14  0100               	movlb	0	; () banked
 20686  012D16  5962               	subwfb	(??__divide_jump_size_decrement+2)& (0+255),w,b
 20687  012D18  A0D8               	btfss	status,0,c
 20688  012D1A  0012               	return	
 20689                           
 20690                           ; BSR set to: 0
 20691                           ;encoder.c: 88: os.divide_jump_size = 1 - os.division;
 20692  012D1C  EE21  F086         	lfsr	2,_os+19	;volatile
 20693  012D20  CFDE F060          	movff	postinc2,??__divide_jump_size_decrement
 20694  012D24  CFDD F061          	movff	postdec2,??__divide_jump_size_decrement+1
 20695  012D28  1F60               	comf	??__divide_jump_size_decrement& (0+255),f,b
 20696  012D2A  1F61               	comf	(??__divide_jump_size_decrement+1)& (0+255),f,b
 20697  012D2C  4B60               	infsnz	??__divide_jump_size_decrement& (0+255),f,b
 20698  012D2E  2B61               	incf	(??__divide_jump_size_decrement+1)& (0+255),f,b
 20699  012D30  0E01               	movlw	1
 20700  012D32  2560               	addwf	??__divide_jump_size_decrement& (0+255),w,b
 20701  012D34  0101               	movlb	1	; () banked
 20702  012D36  6F8B               	movwf	(_os+24)& (0+255),b	;volatile
 20703  012D38  0E00               	movlw	0
 20704  012D3A  0100               	movlb	0	; () banked
 20705  012D3C  2161               	addwfc	(??__divide_jump_size_decrement+1)& (0+255),w,b
 20706  012D3E  0101               	movlb	1	; () banked
 20707  012D40  6F8C               	movwf	(_os+25)& (0+255),b	;volatile
 20708  012D42  0012               	return	
 20709  012D44                     __end_of__divide_jump_size_decrement:
 20710                           	opt stack 0
 20711                           tblptru	equ	0xFF8
 20712                           tblptrh	equ	0xFF7
 20713                           tblptrl	equ	0xFF6
 20714                           tablat	equ	0xFF5
 20715                           prodh	equ	0xFF4
 20716                           prodl	equ	0xFF3
 20717                           intcon	equ	0xFF2
 20718                           postinc0	equ	0xFEE
 20719                           wreg	equ	0xFE8
 20720                           postinc1	equ	0xFE6
 20721                           postdec1	equ	0xFE5
 20722                           plusw1	equ	0xFE3
 20723                           fsr1h	equ	0xFE2
 20724                           fsr1l	equ	0xFE1
 20725                           indf2	equ	0xFDF
 20726                           postinc2	equ	0xFDE
 20727                           postdec2	equ	0xFDD
 20728                           plusw2	equ	0xFDB
 20729                           fsr2h	equ	0xFDA
 20730                           fsr2l	equ	0xFD9
 20731                           status	equ	0xFD8
 20732                           
 20733 ;; *************** function _display_prepare *****************
 20734 ;; Defined at:
 20735 ;;		line 230 in file "display.c"
 20736 ;; Parameters:    Size  Location     Type
 20737 ;;		None
 20738 ;; Auto vars:     Size  Location     Type
 20739 ;;  temp           10   94[BANK0 ] unsigned char [10]
 20740 ;;  cntr            1  105[BANK0 ] unsigned char 
 20741 ;;  space           1  104[BANK0 ] unsigned char 
 20742 ;; Return value:  Size  Location     Type
 20743 ;;                  1    wreg      void 
 20744 ;; Registers used:
 20745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20746 ;; Tracked objects:
 20747 ;;		On entry : 0/0
 20748 ;;		On exit  : 0/0
 20749 ;;		Unchanged: 0/0
 20750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 20751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20752 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20753 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20754 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 20755 ;;Total ram usage:       14 bytes
 20756 ;; Hardware stack levels used:    1
 20757 ;; Hardware stack levels required when called:   15
 20758 ;; This function calls:
 20759 ;;		__display_clear
 20760 ;;		__display_itoa
 20761 ;;		__display_itoa_long
 20762 ;;		__display_padded_itoa
 20763 ;;		__display_signed_itoa
 20764 ;;		_memcpy
 20765 ;;		_motor_speed_from_index
 20766 ;;		_strlen
 20767 ;; This function is called by:
 20768 ;;		_main
 20769 ;; This function uses a non-reentrant model
 20770 ;;
 20771                           
 20772                           	psect	text82
 20773  00A302                     __ptext82:
 20774                           	opt stack 0
 20775  00A302                     _display_prepare:
 20776                           	opt stack 15
 20777                           
 20778                           ;display.c: 232: uint8_t cntr;;display.c: 233: uint8_t space;;display.c: 234: char temp[
      +                          10];;display.c: 236: switch(os.displayState & 0xF0)
 20779                           
 20780                           ;incstack = 0
 20781  00A302  EF77  F057         	goto	l1328
 20782  00A306                     
 20783                           ;display.c: 240: memcpy(display_content, dc_main, sizeof display_content);
 20784  00A306  0E80               	movlw	low _display_content
 20785  00A308  0100               	movlb	0	; () banked
 20786  00A30A  6F60               	movwf	memcpy@d1& (0+255),b
 20787  00A30C  0E02               	movlw	high _display_content
 20788  00A30E  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 20789  00A310  0E6E               	movlw	low _dc_main
 20790  00A312  6F62               	movwf	memcpy@s1& (0+255),b
 20791  00A314  0EA0               	movlw	high _dc_main
 20792  00A316  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 20793  00A318  0E00               	movlw	0
 20794  00A31A  6F65               	movwf	(memcpy@n+1)& (0+255),b
 20795  00A31C  0E50               	movlw	80
 20796  00A31E  6F64               	movwf	memcpy@n& (0+255),b
 20797  00A320  EC3C  F098         	call	_memcpy	;wreg free
 20798                           
 20799                           ;display.c: 241: switch(os.displayState)
 20800  00A324  D00F               	goto	l1330
 20801  00A326                     
 20802                           ;display.c: 244: display_content[1][0] = '>';
 20803  00A326  0E3E               	movlw	62
 20804  00A328  0102               	movlb	2	; () banked
 20805  00A32A  6F94               	movwf	(_display_content+20)& (0+255),b
 20806                           
 20807                           ;display.c: 245: break;
 20808  00A32C  EFA5  F057         	goto	l1337
 20809  00A330                     
 20810                           ;display.c: 247: display_content[1][9] = '>';
 20811                           
 20812                           ; BSR set to: 2
 20813  00A330  0E3E               	movlw	62
 20814  00A332  0102               	movlb	2	; () banked
 20815  00A334  6F9D               	movwf	(_display_content+29)& (0+255),b
 20816                           
 20817                           ;display.c: 248: break;
 20818  00A336  EFA5  F057         	goto	l1337
 20819  00A33A                     
 20820                           ;display.c: 253: display_content[2][9] = '>';
 20821                           
 20822                           ; BSR set to: 2
 20823  00A33A  0E3E               	movlw	62
 20824  00A33C  0102               	movlb	2	; () banked
 20825  00A33E  6FB1               	movwf	(_display_content+49)& (0+255),b
 20826                           
 20827                           ;display.c: 254: break;
 20828  00A340  EFA5  F057         	goto	l1337
 20829  00A344                     l1330:
 20830                           
 20831                           ; BSR set to: 2
 20832  00A344  0101               	movlb	1	; () banked
 20833  00A346  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 20834                           
 20835                           ; Switch size 1, requested type "space"
 20836                           ; Number of cases is 5, Range of values is 1 to 5
 20837                           ; switch strategies available:
 20838                           ; Name         Instructions Cycles
 20839                           ; simple_byte           16     9 (average)
 20840                           ;	Chosen strategy is simple_byte
 20841  00A348  0A01               	xorlw	1	; case 1
 20842  00A34A  B4D8               	btfsc	status,2,c
 20843  00A34C  D7EC               	goto	l1331
 20844  00A34E  0A03               	xorlw	3	; case 2
 20845  00A350  B4D8               	btfsc	status,2,c
 20846  00A352  D7EE               	goto	l1333
 20847  00A354  0A01               	xorlw	1	; case 3
 20848  00A356  B4D8               	btfsc	status,2,c
 20849  00A358  D067               	goto	l1350
 20850  00A35A  0A07               	xorlw	7	; case 4
 20851  00A35C  B4D8               	btfsc	status,2,c
 20852  00A35E  D7ED               	goto	l1335
 20853  00A360  0A01               	xorlw	1	; case 5
 20854  00A362  D072               	goto	L86
 20855  00A364                     
 20856                           ;display.c: 262: memcpy(display_content, dc_setup1, sizeof display_content);
 20857                           
 20858                           ; BSR set to: 1
 20859  00A364  0E80               	movlw	low _display_content
 20860  00A366  0100               	movlb	0	; () banked
 20861  00A368  6F60               	movwf	memcpy@d1& (0+255),b
 20862  00A36A  0E02               	movlw	high _display_content
 20863  00A36C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 20864  00A36E  0E1E               	movlw	low _dc_setup1
 20865  00A370  6F62               	movwf	memcpy@s1& (0+255),b
 20866  00A372  0EA0               	movlw	high _dc_setup1
 20867  00A374  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 20868  00A376  0E00               	movlw	0
 20869  00A378  6F65               	movwf	(memcpy@n+1)& (0+255),b
 20870  00A37A  0E50               	movlw	80
 20871  00A37C  6F64               	movwf	memcpy@n& (0+255),b
 20872  00A37E  EC3C  F098         	call	_memcpy	;wreg free
 20873                           
 20874                           ;display.c: 263: _display_itoa(os.setup_step_size, 2, temp);
 20875  00A382  C183  F095         	movff	_os+16,__display_itoa@value	;volatile
 20876  00A386  C184  F096         	movff	_os+17,__display_itoa@value+1	;volatile
 20877  00A38A  0E02               	movlw	2
 20878  00A38C  0100               	movlb	0	; () banked
 20879  00A38E  6F97               	movwf	__display_itoa@decimals& (0+255),b
 20880  00A390  0EBE               	movlw	low display_prepare@temp
 20881  00A392  6F98               	movwf	__display_itoa@text& (0+255),b
 20882  00A394  0E00               	movlw	high display_prepare@temp
 20883  00A396  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 20884  00A398  EC17  F070         	call	__display_itoa	;wreg free
 20885                           
 20886                           ;display.c: 264: if(os.setup_step_size>999)
 20887  00A39C  0EE8               	movlw	232
 20888  00A39E  0101               	movlb	1	; () banked
 20889  00A3A0  5D83               	subwf	(_os+16)& (0+255),w,b	;volatile
 20890  00A3A2  0E03               	movlw	3
 20891  00A3A4  5984               	subwfb	(_os+17)& (0+255),w,b	;volatile
 20892  00A3A6  A0D8               	btfss	status,0,c
 20893  00A3A8  D002               	goto	l1339
 20894                           
 20895                           ; BSR set to: 1
 20896                           ;display.c: 265: space = 0;
 20897  00A3AA  0E00               	movlw	0
 20898  00A3AC  D001               	goto	L23
 20899  00A3AE                     l1339:
 20900                           
 20901                           ;display.c: 266: else;display.c: 267: space = 1;
 20902                           
 20903                           ; BSR set to: 0
 20904  00A3AE  0E01               	movlw	1
 20905  00A3B0                     L23:
 20906  00A3B0  0100               	movlb	0	; () banked
 20907  00A3B2  6FC8               	movwf	display_prepare@space& (0+255),b
 20908                           
 20909                           ; BSR set to: 0
 20910                           ;display.c: 268: for(cntr=0; temp[cntr]; ++cntr)
 20911  00A3B4  0E00               	movlw	0
 20912  00A3B6  6FC9               	movwf	display_prepare@cntr& (0+255),b
 20913  00A3B8  D018               	goto	l1341
 20914  00A3BA                     
 20915                           ; BSR set to: 0
 20916                           ;display.c: 269: {;display.c: 270: display_content[3][space+cntr] = temp[cntr];
 20917                           
 20918                           ; BSR set to: 0
 20919  00A3BA  51C9               	movf	display_prepare@cntr& (0+255),w,b
 20920  00A3BC  0D01               	mullw	1
 20921  00A3BE  0EBE               	movlw	low display_prepare@temp
 20922  00A3C0  24F3               	addwf	prodl,w,c
 20923  00A3C2  6ED9               	movwf	fsr2l,c
 20924  00A3C4  0E00               	movlw	high display_prepare@temp
 20925  00A3C6  20F4               	addwfc	prodh,w,c
 20926  00A3C8  6EDA               	movwf	fsr2h,c
 20927  00A3CA  51C9               	movf	display_prepare@cntr& (0+255),w,b
 20928  00A3CC  C0C8  F0BC         	movff	display_prepare@space,??_display_prepare
 20929  00A3D0  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 20930  00A3D2  27BC               	addwf	??_display_prepare& (0+255),f,b
 20931  00A3D4  0E00               	movlw	0
 20932  00A3D6  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 20933  00A3D8  0EBC               	movlw	low (_display_content+60)
 20934  00A3DA  25BC               	addwf	??_display_prepare& (0+255),w,b
 20935  00A3DC  6EE1               	movwf	fsr1l,c
 20936  00A3DE  0E02               	movlw	high (_display_content+60)
 20937  00A3E0  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 20938  00A3E2  6EE2               	movwf	fsr1h,c
 20939  00A3E4  CFDF FFE7          	movff	indf2,indf1
 20940                           
 20941                           ; BSR set to: 0
 20942  00A3E8  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 20943  00A3EA                     l1341:
 20944                           
 20945                           ; BSR set to: 0
 20946                           
 20947                           ; BSR set to: 0
 20948  00A3EA  51C9               	movf	display_prepare@cntr& (0+255),w,b
 20949  00A3EC  0D01               	mullw	1
 20950  00A3EE  0EBE               	movlw	low display_prepare@temp
 20951  00A3F0  24F3               	addwf	prodl,w,c
 20952  00A3F2  6ED9               	movwf	fsr2l,c
 20953  00A3F4  0E00               	movlw	high display_prepare@temp
 20954  00A3F6  20F4               	addwfc	prodh,w,c
 20955  00A3F8  6EDA               	movwf	fsr2h,c
 20956  00A3FA  50DF               	movf	indf2,w,c
 20957  00A3FC  A4D8               	btfss	status,2,c
 20958  00A3FE  D7DD               	goto	l1342
 20959                           
 20960                           ; BSR set to: 2
 20961                           
 20962                           ; BSR set to: 2
 20963                           ;display.c: 280: }
 20964                           
 20965                           ;display.c: 279: break;
 20966                           
 20967                           ;display.c: 278: display_content[3][12] = '>';
 20968                           
 20969                           ; BSR set to: 2
 20970                           
 20971                           ;display.c: 277: case DISPLAY_STATE_SETUP1_CANCEL:
 20972                           
 20973                           ;display.c: 276: break;
 20974                           
 20975                           ;display.c: 275: display_content[2][12] = '>';
 20976                           
 20977                           ; BSR set to: 0
 20978                           
 20979                           ;display.c: 273: {;display.c: 274: case DISPLAY_STATE_SETUP1_CONFIRM:
 20980                           
 20981                           ; BSR set to: 0
 20982                           ;display.c: 271: };display.c: 272: switch(os.displayState)
 20983  00A400  0101               	movlb	1	; () banked
 20984  00A402  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 20985                           
 20986                           ; Switch size 1, requested type "space"
 20987                           ; Number of cases is 2, Range of values is 17 to 18
 20988                           ; switch strategies available:
 20989                           ; Name         Instructions Cycles
 20990                           ; simple_byte            7     4 (average)
 20991                           ;	Chosen strategy is simple_byte
 20992  00A404  0A11               	xorlw	17	; case 17
 20993  00A406  D08E               	goto	L29
 20994  00A408                     
 20995                           ;display.c: 284: memcpy(display_content, dc_setup2, sizeof display_content);
 20996                           
 20997                           ; BSR set to: 1
 20998  00A408  0E80               	movlw	low _display_content
 20999  00A40A  0100               	movlb	0	; () banked
 21000  00A40C  6F60               	movwf	memcpy@d1& (0+255),b
 21001  00A40E  0E02               	movlw	high _display_content
 21002  00A410  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21003  00A412  0ECE               	movlw	low _dc_setup2
 21004  00A414  6F62               	movwf	memcpy@s1& (0+255),b
 21005  00A416  0E9F               	movlw	high _dc_setup2
 21006  00A418  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21007  00A41A  0E00               	movlw	0
 21008  00A41C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21009  00A41E  0E50               	movlw	80
 21010  00A420  6F64               	movwf	memcpy@n& (0+255),b
 21011  00A422  EC3C  F098         	call	_memcpy	;wreg free
 21012                           
 21013                           ;display.c: 285: switch(os.displayState)
 21014  00A426  D00A               	goto	l1349
 21015  00A428                     l1350:
 21016                           
 21017                           ;display.c: 288: display_content[2][0] = '>';
 21018  00A428  0E3E               	movlw	62
 21019  00A42A  0102               	movlb	2	; () banked
 21020  00A42C  6FA8               	movwf	(_display_content+40)& (0+255),b
 21021                           
 21022                           ;display.c: 289: break;
 21023  00A42E  EFA5  F057         	goto	l1337
 21024  00A432                     l1352:
 21025                           
 21026                           ;display.c: 291: display_content[3][0] = '>';
 21027                           
 21028                           ; BSR set to: 2
 21029  00A432  0E3E               	movlw	62
 21030  00A434  0102               	movlb	2	; () banked
 21031  00A436  6FBC               	movwf	(_display_content+60)& (0+255),b
 21032                           
 21033                           ; BSR set to: 2
 21034                           ;display.c: 293: }
 21035                           
 21036                           ;display.c: 292: break;
 21037  00A438  EFA5  F057         	goto	l1337
 21038  00A43C                     l1349:
 21039                           
 21040                           ; BSR set to: 2
 21041  00A43C  0101               	movlb	1	; () banked
 21042  00A43E  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 21043                           
 21044                           ; Switch size 1, requested type "space"
 21045                           ; Number of cases is 2, Range of values is 33 to 34
 21046                           ; switch strategies available:
 21047                           ; Name         Instructions Cycles
 21048                           ; simple_byte            7     4 (average)
 21049                           ;	Chosen strategy is simple_byte
 21050  00A440  0A21               	xorlw	33	; case 33
 21051  00A442  B4D8               	btfsc	status,2,c
 21052  00A444  D7F1               	goto	l1350
 21053  00A446  0A03               	xorlw	3	; case 34
 21054  00A448                     L86:
 21055  00A448  B4D8               	btfsc	status,2,c
 21056  00A44A  D7F3               	goto	l1352
 21057                           
 21058                           ; BSR set to: 1
 21059                           ;display.c: 294: break;
 21060  00A44C  EFA5  F057         	goto	l1337
 21061  00A450                     
 21062                           ;display.c: 297: memcpy(display_content, dc_divide1, sizeof display_content);
 21063                           
 21064                           ; BSR set to: 1
 21065  00A450  0E80               	movlw	low _display_content
 21066  00A452  0100               	movlb	0	; () banked
 21067  00A454  6F60               	movwf	memcpy@d1& (0+255),b
 21068  00A456  0E02               	movlw	high _display_content
 21069  00A458  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21070  00A45A  0E7E               	movlw	low _dc_divide1
 21071  00A45C  6F62               	movwf	memcpy@s1& (0+255),b
 21072  00A45E  0E9F               	movlw	high _dc_divide1
 21073  00A460  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21074  00A462  0E00               	movlw	0
 21075  00A464  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21076  00A466  0E50               	movlw	80
 21077  00A468  6F64               	movwf	memcpy@n& (0+255),b
 21078  00A46A  EC3C  F098         	call	_memcpy	;wreg free
 21079                           
 21080                           ;display.c: 299: _display_padded_itoa(os.divide_step_size, 3, temp);
 21081  00A46E  C188  F078         	movff	_os+21,__display_padded_itoa@value	;volatile
 21082  00A472  0100               	movlb	0	; () banked
 21083  00A474  6B79               	clrf	(__display_padded_itoa@value+1)& (0+255),b
 21084  00A476  0E03               	movlw	3
 21085  00A478  6F7A               	movwf	__display_padded_itoa@length& (0+255),b
 21086  00A47A  0EBE               	movlw	low display_prepare@temp
 21087  00A47C  6F7B               	movwf	__display_padded_itoa@text& (0+255),b
 21088  00A47E  0E00               	movlw	high display_prepare@temp
 21089  00A480  6F7C               	movwf	(__display_padded_itoa@text+1)& (0+255),b
 21090  00A482  EC47  F088         	call	__display_padded_itoa	;wreg free
 21091                           
 21092                           ;display.c: 300: for(cntr=0; cntr<3; ++cntr)
 21093  00A486  0E00               	movlw	0
 21094  00A488  0100               	movlb	0	; () banked
 21095  00A48A  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21096  00A48C                     l23210:
 21097                           
 21098                           ; BSR set to: 0
 21099  00A48C  0E02               	movlw	2
 21100  00A48E  65C9               	cpfsgt	display_prepare@cntr& (0+255),b
 21101  00A490  D001               	goto	l1354
 21102  00A492  D014               	goto	u23870
 21103  00A494                     l1354:
 21104                           
 21105                           ; BSR set to: 0
 21106                           ;display.c: 301: {;display.c: 302: display_content[2][cntr] = temp[cntr];
 21107                           
 21108                           ; BSR set to: 0
 21109  00A494  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21110  00A496  0D01               	mullw	1
 21111  00A498  0EBE               	movlw	low display_prepare@temp
 21112  00A49A  24F3               	addwf	prodl,w,c
 21113  00A49C  6ED9               	movwf	fsr2l,c
 21114  00A49E  0E00               	movlw	high display_prepare@temp
 21115  00A4A0  20F4               	addwfc	prodh,w,c
 21116  00A4A2  6EDA               	movwf	fsr2h,c
 21117  00A4A4  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21118  00A4A6  0D01               	mullw	1
 21119  00A4A8  0EA8               	movlw	low (_display_content+40)
 21120  00A4AA  24F3               	addwf	prodl,w,c
 21121  00A4AC  6EE1               	movwf	fsr1l,c
 21122  00A4AE  0E02               	movlw	high (_display_content+40)
 21123  00A4B0  20F4               	addwfc	prodh,w,c
 21124  00A4B2  6EE2               	movwf	fsr1h,c
 21125  00A4B4  CFDF FFE7          	movff	indf2,indf1
 21126                           
 21127                           ; BSR set to: 0
 21128  00A4B8  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21129  00A4BA  D7E8               	goto	l23210
 21130  00A4BC                     u23870:
 21131                           
 21132                           ; BSR set to: 0
 21133                           ;display.c: 303: };display.c: 305: _display_padded_itoa(os.division, 4, temp);
 21134                           
 21135                           ; BSR set to: 0
 21136  00A4BC  C186  F078         	movff	_os+19,__display_padded_itoa@value	;volatile
 21137  00A4C0  C187  F079         	movff	_os+20,__display_padded_itoa@value+1	;volatile
 21138  00A4C4  0E04               	movlw	4
 21139  00A4C6  6F7A               	movwf	__display_padded_itoa@length& (0+255),b
 21140  00A4C8  0EBE               	movlw	low display_prepare@temp
 21141  00A4CA  6F7B               	movwf	__display_padded_itoa@text& (0+255),b
 21142  00A4CC  0E00               	movlw	high display_prepare@temp
 21143  00A4CE  6F7C               	movwf	(__display_padded_itoa@text+1)& (0+255),b
 21144  00A4D0  EC47  F088         	call	__display_padded_itoa	;wreg free
 21145                           
 21146                           ;display.c: 306: for(cntr=0; cntr<4; ++cntr)
 21147  00A4D4  0E00               	movlw	0
 21148  00A4D6  0100               	movlb	0	; () banked
 21149  00A4D8  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21150  00A4DA                     l23224:
 21151                           
 21152                           ; BSR set to: 0
 21153  00A4DA  0E03               	movlw	3
 21154  00A4DC  65C9               	cpfsgt	display_prepare@cntr& (0+255),b
 21155  00A4DE  D001               	goto	l1356
 21156  00A4E0  D01E               	goto	l1358
 21157  00A4E2                     l1356:
 21158                           
 21159                           ; BSR set to: 0
 21160                           ;display.c: 307: {;display.c: 308: display_content[3][cntr] = temp[cntr];
 21161                           
 21162                           ; BSR set to: 0
 21163  00A4E2  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21164  00A4E4  0D01               	mullw	1
 21165  00A4E6  0EBE               	movlw	low display_prepare@temp
 21166  00A4E8  24F3               	addwf	prodl,w,c
 21167  00A4EA  6ED9               	movwf	fsr2l,c
 21168  00A4EC  0E00               	movlw	high display_prepare@temp
 21169  00A4EE  20F4               	addwfc	prodh,w,c
 21170  00A4F0  6EDA               	movwf	fsr2h,c
 21171  00A4F2  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21172  00A4F4  0D01               	mullw	1
 21173  00A4F6  0EBC               	movlw	low (_display_content+60)
 21174  00A4F8  24F3               	addwf	prodl,w,c
 21175  00A4FA  6EE1               	movwf	fsr1l,c
 21176  00A4FC  0E02               	movlw	high (_display_content+60)
 21177  00A4FE  20F4               	addwfc	prodh,w,c
 21178  00A500  6EE2               	movwf	fsr1h,c
 21179  00A502  CFDF FFE7          	movff	indf2,indf1
 21180                           
 21181                           ; BSR set to: 0
 21182  00A506  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21183  00A508  D7E8               	goto	l23224
 21184  00A50A                     
 21185                           ;display.c: 313: display_content[2][12] = '>';
 21186                           
 21187                           ; BSR set to: 0
 21188  00A50A  0E3E               	movlw	62
 21189  00A50C  0102               	movlb	2	; () banked
 21190  00A50E  6FB4               	movwf	(_display_content+52)& (0+255),b
 21191                           
 21192                           ;display.c: 314: break;
 21193  00A510  EFA5  F057         	goto	l1337
 21194  00A514                     
 21195                           ;display.c: 316: display_content[3][12] = '>';
 21196                           
 21197                           ; BSR set to: 2
 21198  00A514  0E3E               	movlw	62
 21199  00A516  0102               	movlb	2	; () banked
 21200  00A518  6FC8               	movwf	(_display_content+72)& (0+255),b
 21201                           
 21202                           ; BSR set to: 2
 21203                           ;display.c: 318: }
 21204                           
 21205                           ;display.c: 317: break;
 21206  00A51A  EFA5  F057         	goto	l1337
 21207  00A51E                     l1358:
 21208                           
 21209                           ; BSR set to: 2
 21210  00A51E  0101               	movlb	1	; () banked
 21211  00A520  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 21212                           
 21213                           ; Switch size 1, requested type "space"
 21214                           ; Number of cases is 2, Range of values is 49 to 50
 21215                           ; switch strategies available:
 21216                           ; Name         Instructions Cycles
 21217                           ; simple_byte            7     4 (average)
 21218                           ;	Chosen strategy is simple_byte
 21219  00A522  0A31               	xorlw	49	; case 49
 21220  00A524                     L29:
 21221  00A524  B4D8               	btfsc	status,2,c
 21222  00A526  D7F1               	goto	l1359
 21223  00A528  0A03               	xorlw	3	; case 50
 21224  00A52A  B4D8               	btfsc	status,2,c
 21225  00A52C  D7F3               	goto	l1361
 21226                           
 21227                           ; BSR set to: 1
 21228                           ;display.c: 319: break;
 21229  00A52E  EFA5  F057         	goto	l1337
 21230  00A532                     
 21231                           ;display.c: 322: memcpy(display_content, dc_divide2, sizeof display_content);
 21232                           
 21233                           ; BSR set to: 1
 21234  00A532  0E80               	movlw	low _display_content
 21235  00A534  0100               	movlb	0	; () banked
 21236  00A536  6F60               	movwf	memcpy@d1& (0+255),b
 21237  00A538  0E02               	movlw	high _display_content
 21238  00A53A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21239  00A53C  0E2E               	movlw	low _dc_divide2
 21240  00A53E  6F62               	movwf	memcpy@s1& (0+255),b
 21241  00A540  0E9F               	movlw	high _dc_divide2
 21242  00A542  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21243  00A544  0E00               	movlw	0
 21244  00A546  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21245  00A548  0E50               	movlw	80
 21246  00A54A  6F64               	movwf	memcpy@n& (0+255),b
 21247  00A54C  EC3C  F098         	call	_memcpy	;wreg free
 21248                           
 21249                           ;display.c: 324: _display_padded_itoa(os.division, 0, temp);
 21250  00A550  C186  F078         	movff	_os+19,__display_padded_itoa@value	;volatile
 21251  00A554  C187  F079         	movff	_os+20,__display_padded_itoa@value+1	;volatile
 21252  00A558  0E00               	movlw	0
 21253  00A55A  0100               	movlb	0	; () banked
 21254  00A55C  6F7A               	movwf	__display_padded_itoa@length& (0+255),b
 21255  00A55E  0EBE               	movlw	low display_prepare@temp
 21256  00A560  6F7B               	movwf	__display_padded_itoa@text& (0+255),b
 21257  00A562  0E00               	movlw	high display_prepare@temp
 21258  00A564  6F7C               	movwf	(__display_padded_itoa@text+1)& (0+255),b
 21259  00A566  EC47  F088         	call	__display_padded_itoa	;wreg free
 21260                           
 21261                           ;display.c: 325: for(cntr=0; temp[cntr]; ++cntr)
 21262  00A56A  0E00               	movlw	0
 21263  00A56C  0100               	movlb	0	; () banked
 21264  00A56E  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21265  00A570  D018               	goto	l1363
 21266  00A572                     
 21267                           ; BSR set to: 0
 21268                           ;display.c: 326: {;display.c: 327: display_content[0][cntr+8] = temp[cntr];
 21269                           
 21270                           ; BSR set to: 0
 21271  00A572  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21272  00A574  0D01               	mullw	1
 21273  00A576  0EBE               	movlw	low display_prepare@temp
 21274  00A578  24F3               	addwf	prodl,w,c
 21275  00A57A  6ED9               	movwf	fsr2l,c
 21276  00A57C  0E00               	movlw	high display_prepare@temp
 21277  00A57E  20F4               	addwfc	prodh,w,c
 21278  00A580  6EDA               	movwf	fsr2h,c
 21279  00A582  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21280  00A584  6FBC               	movwf	??_display_prepare& (0+255),b
 21281  00A586  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21282  00A588  0E08               	movlw	8
 21283  00A58A  27BC               	addwf	??_display_prepare& (0+255),f,b
 21284  00A58C  0E00               	movlw	0
 21285  00A58E  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21286  00A590  0E80               	movlw	low _display_content
 21287  00A592  25BC               	addwf	??_display_prepare& (0+255),w,b
 21288  00A594  6EE1               	movwf	fsr1l,c
 21289  00A596  0E02               	movlw	high _display_content
 21290  00A598  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21291  00A59A  6EE2               	movwf	fsr1h,c
 21292  00A59C  CFDF FFE7          	movff	indf2,indf1
 21293                           
 21294                           ; BSR set to: 0
 21295  00A5A0  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21296  00A5A2                     l1363:
 21297                           
 21298                           ; BSR set to: 0
 21299                           
 21300                           ; BSR set to: 0
 21301  00A5A2  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21302  00A5A4  0D01               	mullw	1
 21303  00A5A6  0EBE               	movlw	low display_prepare@temp
 21304  00A5A8  24F3               	addwf	prodl,w,c
 21305  00A5AA  6ED9               	movwf	fsr2l,c
 21306  00A5AC  0E00               	movlw	high display_prepare@temp
 21307  00A5AE  20F4               	addwfc	prodh,w,c
 21308  00A5B0  6EDA               	movwf	fsr2h,c
 21309  00A5B2  50DF               	movf	indf2,w,c
 21310  00A5B4  A4D8               	btfss	status,2,c
 21311  00A5B6  D7DD               	goto	l1364
 21312                           
 21313                           ; BSR set to: 0
 21314                           ;display.c: 328: };display.c: 330: display_content[0][cntr+8] = ',';
 21315                           
 21316                           ; BSR set to: 0
 21317  00A5B8  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21318  00A5BA  6FBC               	movwf	??_display_prepare& (0+255),b
 21319  00A5BC  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21320  00A5BE  0E08               	movlw	8
 21321  00A5C0  27BC               	addwf	??_display_prepare& (0+255),f,b
 21322  00A5C2  0E00               	movlw	0
 21323  00A5C4  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21324  00A5C6  0E80               	movlw	low _display_content
 21325  00A5C8  25BC               	addwf	??_display_prepare& (0+255),w,b
 21326  00A5CA  6ED9               	movwf	fsr2l,c
 21327  00A5CC  0E02               	movlw	high _display_content
 21328  00A5CE  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21329  00A5D0  6EDA               	movwf	fsr2h,c
 21330  00A5D2  0E2C               	movlw	44
 21331  00A5D4  6EDF               	movwf	indf2,c
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;display.c: 331: if(os.approach_direction==MOTOR_DIRECTION_CCW)
 21335  00A5D6  0101               	movlb	1	; () banked
 21336  00A5D8  2985               	incf	(_os+18)& (0+255),w,b	;volatile
 21337  00A5DA  A4D8               	btfss	status,2,c
 21338  00A5DC  D024               	goto	l1366
 21339                           
 21340                           ; BSR set to: 1
 21341                           ;display.c: 332: {;display.c: 333: display_content[0][cntr+10] = 'C';
 21342  00A5DE  0100               	movlb	0	; () banked
 21343  00A5E0  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21344  00A5E2  6FBC               	movwf	??_display_prepare& (0+255),b
 21345  00A5E4  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21346  00A5E6  0E0A               	movlw	10
 21347  00A5E8  27BC               	addwf	??_display_prepare& (0+255),f,b
 21348  00A5EA  0E00               	movlw	0
 21349  00A5EC  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21350  00A5EE  0E80               	movlw	low _display_content
 21351  00A5F0  25BC               	addwf	??_display_prepare& (0+255),w,b
 21352  00A5F2  6ED9               	movwf	fsr2l,c
 21353  00A5F4  0E02               	movlw	high _display_content
 21354  00A5F6  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21355  00A5F8  6EDA               	movwf	fsr2h,c
 21356  00A5FA  0E43               	movlw	67
 21357  00A5FC  6EDF               	movwf	indf2,c
 21358                           
 21359                           ;display.c: 334: display_content[0][cntr+11] = 'C';
 21360  00A5FE  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21361  00A600  6FBC               	movwf	??_display_prepare& (0+255),b
 21362  00A602  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21363  00A604  0E0B               	movlw	11
 21364  00A606  27BC               	addwf	??_display_prepare& (0+255),f,b
 21365  00A608  0E00               	movlw	0
 21366  00A60A  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21367  00A60C  0E80               	movlw	low _display_content
 21368  00A60E  25BC               	addwf	??_display_prepare& (0+255),w,b
 21369  00A610  6ED9               	movwf	fsr2l,c
 21370  00A612  0E02               	movlw	high _display_content
 21371  00A614  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21372  00A616  6EDA               	movwf	fsr2h,c
 21373  00A618  0E43               	movlw	67
 21374  00A61A  6EDF               	movwf	indf2,c
 21375                           
 21376                           ;display.c: 335: display_content[0][cntr+12] = 'W';
 21377  00A61C  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21378  00A61E  6FBC               	movwf	??_display_prepare& (0+255),b
 21379  00A620  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21380  00A622  0E0C               	movlw	12
 21381  00A624  D014               	goto	L30
 21382  00A626                     l1366:
 21383                           
 21384                           ;display.c: 337: else;display.c: 338: {;display.c: 339: display_content[0][cntr+10] = 'C
      +                          ';
 21385                           
 21386                           ; BSR set to: 0
 21387  00A626  0100               	movlb	0	; () banked
 21388  00A628  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21389  00A62A  6FBC               	movwf	??_display_prepare& (0+255),b
 21390  00A62C  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21391  00A62E  0E0A               	movlw	10
 21392  00A630  27BC               	addwf	??_display_prepare& (0+255),f,b
 21393  00A632  0E00               	movlw	0
 21394  00A634  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21395  00A636  0E80               	movlw	low _display_content
 21396  00A638  25BC               	addwf	??_display_prepare& (0+255),w,b
 21397  00A63A  6ED9               	movwf	fsr2l,c
 21398  00A63C  0E02               	movlw	high _display_content
 21399  00A63E  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21400  00A640  6EDA               	movwf	fsr2h,c
 21401  00A642  0E43               	movlw	67
 21402  00A644  6EDF               	movwf	indf2,c
 21403                           
 21404                           ;display.c: 340: display_content[0][cntr+11] = 'W';
 21405  00A646  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21406  00A648  6FBC               	movwf	??_display_prepare& (0+255),b
 21407  00A64A  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21408  00A64C  0E0B               	movlw	11
 21409  00A64E                     L30:
 21410  00A64E  27BC               	addwf	??_display_prepare& (0+255),f,b
 21411  00A650  0E00               	movlw	0
 21412  00A652  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21413  00A654  0E80               	movlw	low _display_content
 21414  00A656  25BC               	addwf	??_display_prepare& (0+255),w,b
 21415  00A658  6ED9               	movwf	fsr2l,c
 21416  00A65A  0E02               	movlw	high _display_content
 21417  00A65C  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21418  00A65E  6EDA               	movwf	fsr2h,c
 21419  00A660  0E57               	movlw	87
 21420  00A662  6EDF               	movwf	indf2,c
 21421                           
 21422                           ; BSR set to: 0
 21423                           ;display.c: 341: };display.c: 343: _display_padded_itoa(os.divide_position, 0, temp);
 21424                           
 21425                           ; BSR set to: 0
 21426  00A664  C189  F078         	movff	_os+22,__display_padded_itoa@value	;volatile
 21427  00A668  C18A  F079         	movff	_os+23,__display_padded_itoa@value+1	;volatile
 21428  00A66C  0E00               	movlw	0
 21429  00A66E  6F7A               	movwf	__display_padded_itoa@length& (0+255),b
 21430  00A670  0EBE               	movlw	low display_prepare@temp
 21431  00A672  6F7B               	movwf	__display_padded_itoa@text& (0+255),b
 21432  00A674  0E00               	movlw	high display_prepare@temp
 21433  00A676  6F7C               	movwf	(__display_padded_itoa@text+1)& (0+255),b
 21434  00A678  EC47  F088         	call	__display_padded_itoa	;wreg free
 21435                           
 21436                           ;display.c: 344: for(cntr=0; temp[cntr]; ++cntr)
 21437  00A67C  0E00               	movlw	0
 21438  00A67E  0100               	movlb	0	; () banked
 21439  00A680  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21440  00A682  D018               	goto	l1368
 21441  00A684                     
 21442                           ; BSR set to: 0
 21443                           ;display.c: 345: {;display.c: 346: display_content[1][cntr+5] = temp[cntr];
 21444                           
 21445                           ; BSR set to: 0
 21446  00A684  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21447  00A686  0D01               	mullw	1
 21448  00A688  0EBE               	movlw	low display_prepare@temp
 21449  00A68A  24F3               	addwf	prodl,w,c
 21450  00A68C  6ED9               	movwf	fsr2l,c
 21451  00A68E  0E00               	movlw	high display_prepare@temp
 21452  00A690  20F4               	addwfc	prodh,w,c
 21453  00A692  6EDA               	movwf	fsr2h,c
 21454  00A694  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21455  00A696  6FBC               	movwf	??_display_prepare& (0+255),b
 21456  00A698  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21457  00A69A  0E05               	movlw	5
 21458  00A69C  27BC               	addwf	??_display_prepare& (0+255),f,b
 21459  00A69E  0E00               	movlw	0
 21460  00A6A0  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21461  00A6A2  0E94               	movlw	low (_display_content+20)
 21462  00A6A4  25BC               	addwf	??_display_prepare& (0+255),w,b
 21463  00A6A6  6EE1               	movwf	fsr1l,c
 21464  00A6A8  0E02               	movlw	high (_display_content+20)
 21465  00A6AA  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21466  00A6AC  6EE2               	movwf	fsr1h,c
 21467  00A6AE  CFDF FFE7          	movff	indf2,indf1
 21468                           
 21469                           ; BSR set to: 0
 21470  00A6B2  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21471  00A6B4                     l1368:
 21472                           
 21473                           ; BSR set to: 0
 21474                           
 21475                           ; BSR set to: 0
 21476  00A6B4  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21477  00A6B6  0D01               	mullw	1
 21478  00A6B8  0EBE               	movlw	low display_prepare@temp
 21479  00A6BA  24F3               	addwf	prodl,w,c
 21480  00A6BC  6ED9               	movwf	fsr2l,c
 21481  00A6BE  0E00               	movlw	high display_prepare@temp
 21482  00A6C0  20F4               	addwfc	prodh,w,c
 21483  00A6C2  6EDA               	movwf	fsr2h,c
 21484  00A6C4  50DF               	movf	indf2,w,c
 21485  00A6C6  A4D8               	btfss	status,2,c
 21486  00A6C8  D7DD               	goto	l1369
 21487                           
 21488                           ; BSR set to: 0
 21489                           ;display.c: 347: };display.c: 349: display_content[1][cntr+6] = '(';
 21490                           
 21491                           ; BSR set to: 0
 21492  00A6CA  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21493  00A6CC  6FBC               	movwf	??_display_prepare& (0+255),b
 21494  00A6CE  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21495  00A6D0  0E06               	movlw	6
 21496  00A6D2  27BC               	addwf	??_display_prepare& (0+255),f,b
 21497  00A6D4  0E00               	movlw	0
 21498  00A6D6  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21499  00A6D8  0E94               	movlw	low (_display_content+20)
 21500  00A6DA  25BC               	addwf	??_display_prepare& (0+255),w,b
 21501  00A6DC  6ED9               	movwf	fsr2l,c
 21502  00A6DE  0E02               	movlw	high (_display_content+20)
 21503  00A6E0  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21504  00A6E2  6EDA               	movwf	fsr2h,c
 21505  00A6E4  0E28               	movlw	40
 21506  00A6E6  6EDF               	movwf	indf2,c
 21507                           
 21508                           ; BSR set to: 0
 21509                           ;display.c: 350: space = cntr + 7;
 21510  00A6E8  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21511  00A6EA  0F07               	addlw	7
 21512  00A6EC  6FC8               	movwf	display_prepare@space& (0+255),b
 21513                           
 21514                           ; BSR set to: 0
 21515                           ;display.c: 351: _display_itoa_long(os.current_position_in_degrees, 2, temp);
 21516  00A6EE  C17E  F0AD         	movff	_os+11,__display_itoa_long@value	;volatile
 21517  00A6F2  C17F  F0AE         	movff	_os+12,__display_itoa_long@value+1	;volatile
 21518  00A6F6  6BAF               	clrf	(__display_itoa_long@value+2)& (0+255),b
 21519  00A6F8  6BB0               	clrf	(__display_itoa_long@value+3)& (0+255),b
 21520  00A6FA  0E02               	movlw	2
 21521  00A6FC  6FB1               	movwf	__display_itoa_long@decimals& (0+255),b
 21522  00A6FE  0EBE               	movlw	low display_prepare@temp
 21523  00A700  6FB2               	movwf	__display_itoa_long@text& (0+255),b
 21524  00A702  0E00               	movlw	high display_prepare@temp
 21525  00A704  6FB3               	movwf	(__display_itoa_long@text+1)& (0+255),b
 21526  00A706  EC58  F080         	call	__display_itoa_long	;wreg free
 21527                           
 21528                           ;display.c: 352: for(cntr=0; temp[cntr]; ++cntr)
 21529  00A70A  0E00               	movlw	0
 21530  00A70C  0100               	movlb	0	; () banked
 21531  00A70E  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21532  00A710  D018               	goto	l1371
 21533  00A712                     
 21534                           ; BSR set to: 0
 21535                           ;display.c: 353: {;display.c: 354: display_content[1][cntr+space] = temp[cntr];
 21536                           
 21537                           ; BSR set to: 0
 21538  00A712  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21539  00A714  0D01               	mullw	1
 21540  00A716  0EBE               	movlw	low display_prepare@temp
 21541  00A718  24F3               	addwf	prodl,w,c
 21542  00A71A  6ED9               	movwf	fsr2l,c
 21543  00A71C  0E00               	movlw	high display_prepare@temp
 21544  00A71E  20F4               	addwfc	prodh,w,c
 21545  00A720  6EDA               	movwf	fsr2h,c
 21546  00A722  51C8               	movf	display_prepare@space& (0+255),w,b
 21547  00A724  C0C9  F0BC         	movff	display_prepare@cntr,??_display_prepare
 21548  00A728  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21549  00A72A  27BC               	addwf	??_display_prepare& (0+255),f,b
 21550  00A72C  0E00               	movlw	0
 21551  00A72E  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21552  00A730  0E94               	movlw	low (_display_content+20)
 21553  00A732  25BC               	addwf	??_display_prepare& (0+255),w,b
 21554  00A734  6EE1               	movwf	fsr1l,c
 21555  00A736  0E02               	movlw	high (_display_content+20)
 21556  00A738  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21557  00A73A  6EE2               	movwf	fsr1h,c
 21558  00A73C  CFDF FFE7          	movff	indf2,indf1
 21559                           
 21560                           ; BSR set to: 0
 21561  00A740  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21562  00A742                     l1371:
 21563                           
 21564                           ; BSR set to: 0
 21565                           
 21566                           ; BSR set to: 0
 21567  00A742  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21568  00A744  0D01               	mullw	1
 21569  00A746  0EBE               	movlw	low display_prepare@temp
 21570  00A748  24F3               	addwf	prodl,w,c
 21571  00A74A  6ED9               	movwf	fsr2l,c
 21572  00A74C  0E00               	movlw	high display_prepare@temp
 21573  00A74E  20F4               	addwfc	prodh,w,c
 21574  00A750  6EDA               	movwf	fsr2h,c
 21575  00A752  50DF               	movf	indf2,w,c
 21576  00A754  A4D8               	btfss	status,2,c
 21577  00A756  D7DD               	goto	l1372
 21578                           
 21579                           ; BSR set to: 0
 21580                           ;display.c: 355: };display.c: 356: display_content[1][cntr+space] = 0x01;
 21581                           
 21582                           ; BSR set to: 0
 21583  00A758  51C8               	movf	display_prepare@space& (0+255),w,b
 21584  00A75A  C0C9  F0BC         	movff	display_prepare@cntr,??_display_prepare
 21585  00A75E  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21586  00A760  27BC               	addwf	??_display_prepare& (0+255),f,b
 21587  00A762  0E00               	movlw	0
 21588  00A764  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21589  00A766  0E94               	movlw	low (_display_content+20)
 21590  00A768  25BC               	addwf	??_display_prepare& (0+255),w,b
 21591  00A76A  6ED9               	movwf	fsr2l,c
 21592  00A76C  0E02               	movlw	high (_display_content+20)
 21593  00A76E  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21594  00A770  6EDA               	movwf	fsr2h,c
 21595  00A772  0E01               	movlw	1
 21596  00A774  6EDF               	movwf	indf2,c
 21597                           
 21598                           ;display.c: 357: display_content[1][cntr+space+1] = ')';
 21599  00A776  51C8               	movf	display_prepare@space& (0+255),w,b
 21600  00A778  C0C9  F0BC         	movff	display_prepare@cntr,??_display_prepare
 21601  00A77C  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21602  00A77E  27BC               	addwf	??_display_prepare& (0+255),f,b
 21603  00A780  0E00               	movlw	0
 21604  00A782  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21605  00A784  0E01               	movlw	1
 21606  00A786  27BC               	addwf	??_display_prepare& (0+255),f,b
 21607  00A788  0E00               	movlw	0
 21608  00A78A  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21609  00A78C  0E94               	movlw	low (_display_content+20)
 21610  00A78E  25BC               	addwf	??_display_prepare& (0+255),w,b
 21611  00A790  6ED9               	movwf	fsr2l,c
 21612  00A792  0E02               	movlw	high (_display_content+20)
 21613  00A794  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21614  00A796  6EDA               	movwf	fsr2h,c
 21615  00A798  0E29               	movlw	41
 21616  00A79A  6EDF               	movwf	indf2,c
 21617                           
 21618                           ; BSR set to: 0
 21619                           ;display.c: 359: _display_signed_itoa(os.divide_jump_size, temp);
 21620  00A79C  C18B  F08F         	movff	_os+24,__display_signed_itoa@value	;volatile
 21621  00A7A0  C18C  F090         	movff	_os+25,__display_signed_itoa@value+1	;volatile
 21622  00A7A4  0EBE               	movlw	low display_prepare@temp
 21623  00A7A6  6F91               	movwf	__display_signed_itoa@text& (0+255),b
 21624  00A7A8  0E00               	movlw	high display_prepare@temp
 21625  00A7AA  6F92               	movwf	(__display_signed_itoa@text+1)& (0+255),b
 21626  00A7AC  ECDE  F09C         	call	__display_signed_itoa	;wreg free
 21627                           
 21628                           ;display.c: 360: for(cntr=0; temp[cntr]; ++cntr)
 21629  00A7B0  0E00               	movlw	0
 21630  00A7B2  0100               	movlb	0	; () banked
 21631  00A7B4  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21632  00A7B6  D018               	goto	l1374
 21633  00A7B8                     
 21634                           ; BSR set to: 0
 21635                           ;display.c: 361: {;display.c: 362: display_content[2][cntr+11] = temp[cntr];
 21636                           
 21637                           ; BSR set to: 0
 21638  00A7B8  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21639  00A7BA  0D01               	mullw	1
 21640  00A7BC  0EBE               	movlw	low display_prepare@temp
 21641  00A7BE  24F3               	addwf	prodl,w,c
 21642  00A7C0  6ED9               	movwf	fsr2l,c
 21643  00A7C2  0E00               	movlw	high display_prepare@temp
 21644  00A7C4  20F4               	addwfc	prodh,w,c
 21645  00A7C6  6EDA               	movwf	fsr2h,c
 21646  00A7C8  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21647  00A7CA  6FBC               	movwf	??_display_prepare& (0+255),b
 21648  00A7CC  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21649  00A7CE  0E0B               	movlw	11
 21650  00A7D0  27BC               	addwf	??_display_prepare& (0+255),f,b
 21651  00A7D2  0E00               	movlw	0
 21652  00A7D4  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21653  00A7D6  0EA8               	movlw	low (_display_content+40)
 21654  00A7D8  25BC               	addwf	??_display_prepare& (0+255),w,b
 21655  00A7DA  6EE1               	movwf	fsr1l,c
 21656  00A7DC  0E02               	movlw	high (_display_content+40)
 21657  00A7DE  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21658  00A7E0  6EE2               	movwf	fsr1h,c
 21659  00A7E2  CFDF FFE7          	movff	indf2,indf1
 21660                           
 21661                           ; BSR set to: 0
 21662  00A7E6  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21663  00A7E8                     l1374:
 21664                           
 21665                           ; BSR set to: 0
 21666                           
 21667                           ; BSR set to: 0
 21668  00A7E8  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21669  00A7EA  0D01               	mullw	1
 21670  00A7EC  0EBE               	movlw	low display_prepare@temp
 21671  00A7EE  24F3               	addwf	prodl,w,c
 21672  00A7F0  6ED9               	movwf	fsr2l,c
 21673  00A7F2  0E00               	movlw	high display_prepare@temp
 21674  00A7F4  20F4               	addwfc	prodh,w,c
 21675  00A7F6  6EDA               	movwf	fsr2h,c
 21676  00A7F8  50DF               	movf	indf2,w,c
 21677  00A7FA  B4D8               	btfsc	status,2,c
 21678  00A7FC  D3A6               	goto	l1337
 21679  00A7FE  D7DC               	goto	l1375
 21680  00A800                     
 21681                           ; BSR set to: 0
 21682                           ;display.c: 367: memcpy(display_content, dc_arc1, sizeof display_content);
 21683                           
 21684                           ; BSR set to: 0
 21685  00A800  0E80               	movlw	low _display_content
 21686  00A802  6F60               	movwf	memcpy@d1& (0+255),b
 21687  00A804  0E02               	movlw	high _display_content
 21688  00A806  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21689  00A808  0EDE               	movlw	low _dc_arc1
 21690  00A80A  6F62               	movwf	memcpy@s1& (0+255),b
 21691  00A80C  0E9E               	movlw	high _dc_arc1
 21692  00A80E  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21693  00A810  0E00               	movlw	0
 21694  00A812  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21695  00A814  0E50               	movlw	80
 21696  00A816  6F64               	movwf	memcpy@n& (0+255),b
 21697  00A818  EC3C  F098         	call	_memcpy	;wreg free
 21698                           
 21699                           ;display.c: 368: switch(os.displayState)
 21700  00A81C  D008               	goto	l1378
 21701  00A81E                     
 21702                           ;display.c: 371: display_content[2][12] = '>';
 21703  00A81E  0E3E               	movlw	62
 21704  00A820  0102               	movlb	2	; () banked
 21705  00A822  6FB4               	movwf	(_display_content+52)& (0+255),b
 21706                           
 21707                           ;display.c: 372: break;
 21708  00A824  D00C               	goto	l1380
 21709  00A826                     
 21710                           ;display.c: 374: display_content[3][12] = '>';
 21711                           
 21712                           ; BSR set to: 2
 21713  00A826  0E3E               	movlw	62
 21714  00A828  0102               	movlb	2	; () banked
 21715  00A82A  6FC8               	movwf	(_display_content+72)& (0+255),b
 21716                           
 21717                           ; BSR set to: 2
 21718                           ;display.c: 376: }
 21719                           
 21720                           ;display.c: 375: break;
 21721  00A82C  D008               	goto	l1380
 21722  00A82E                     l1378:
 21723                           
 21724                           ; BSR set to: 2
 21725  00A82E  0101               	movlb	1	; () banked
 21726  00A830  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 21727                           
 21728                           ; Switch size 1, requested type "space"
 21729                           ; Number of cases is 2, Range of values is 81 to 82
 21730                           ; switch strategies available:
 21731                           ; Name         Instructions Cycles
 21732                           ; simple_byte            7     4 (average)
 21733                           ;	Chosen strategy is simple_byte
 21734  00A832  0A51               	xorlw	81	; case 81
 21735  00A834  B4D8               	btfsc	status,2,c
 21736  00A836  D7F3               	goto	l1379
 21737  00A838  0A03               	xorlw	3	; case 82
 21738  00A83A  B4D8               	btfsc	status,2,c
 21739  00A83C  D7F4               	goto	l1381
 21740  00A83E                     l1380:
 21741                           
 21742                           ;display.c: 379: _display_itoa_long(os.arc_size, 2, temp);
 21743                           
 21744                           ; BSR set to: 1
 21745  00A83E  C18F  F0AD         	movff	_os+28,__display_itoa_long@value	;volatile
 21746  00A842  C190  F0AE         	movff	_os+29,__display_itoa_long@value+1	;volatile
 21747  00A846  C191  F0AF         	movff	_os+30,__display_itoa_long@value+2	;volatile
 21748  00A84A  C192  F0B0         	movff	_os+31,__display_itoa_long@value+3	;volatile
 21749  00A84E  0E02               	movlw	2
 21750  00A850  0100               	movlb	0	; () banked
 21751  00A852  6FB1               	movwf	__display_itoa_long@decimals& (0+255),b
 21752  00A854  0EBE               	movlw	low display_prepare@temp
 21753  00A856  6FB2               	movwf	__display_itoa_long@text& (0+255),b
 21754  00A858  0E00               	movlw	high display_prepare@temp
 21755  00A85A  6FB3               	movwf	(__display_itoa_long@text+1)& (0+255),b
 21756  00A85C  EC58  F080         	call	__display_itoa_long	;wreg free
 21757                           
 21758                           ;display.c: 380: for(cntr=0; temp[cntr]; ++cntr)
 21759  00A860  0E00               	movlw	0
 21760  00A862  0100               	movlb	0	; () banked
 21761  00A864  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21762  00A866  D018               	goto	l1382
 21763  00A868                     
 21764                           ; BSR set to: 0
 21765                           ;display.c: 381: {;display.c: 382: display_content[1][10+cntr] = temp[cntr];
 21766                           
 21767                           ; BSR set to: 0
 21768  00A868  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21769  00A86A  0D01               	mullw	1
 21770  00A86C  0EBE               	movlw	low display_prepare@temp
 21771  00A86E  24F3               	addwf	prodl,w,c
 21772  00A870  6ED9               	movwf	fsr2l,c
 21773  00A872  0E00               	movlw	high display_prepare@temp
 21774  00A874  20F4               	addwfc	prodh,w,c
 21775  00A876  6EDA               	movwf	fsr2h,c
 21776  00A878  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21777  00A87A  6FBC               	movwf	??_display_prepare& (0+255),b
 21778  00A87C  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21779  00A87E  0E0A               	movlw	10
 21780  00A880  27BC               	addwf	??_display_prepare& (0+255),f,b
 21781  00A882  0E00               	movlw	0
 21782  00A884  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21783  00A886  0E94               	movlw	low (_display_content+20)
 21784  00A888  25BC               	addwf	??_display_prepare& (0+255),w,b
 21785  00A88A  6EE1               	movwf	fsr1l,c
 21786  00A88C  0E02               	movlw	high (_display_content+20)
 21787  00A88E  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21788  00A890  6EE2               	movwf	fsr1h,c
 21789  00A892  CFDF FFE7          	movff	indf2,indf1
 21790                           
 21791                           ; BSR set to: 0
 21792  00A896  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21793  00A898                     l1382:
 21794                           
 21795                           ; BSR set to: 0
 21796                           
 21797                           ; BSR set to: 0
 21798  00A898  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21799  00A89A  0D01               	mullw	1
 21800  00A89C  0EBE               	movlw	low display_prepare@temp
 21801  00A89E  24F3               	addwf	prodl,w,c
 21802  00A8A0  6ED9               	movwf	fsr2l,c
 21803  00A8A2  0E00               	movlw	high display_prepare@temp
 21804  00A8A4  20F4               	addwfc	prodh,w,c
 21805  00A8A6  6EDA               	movwf	fsr2h,c
 21806  00A8A8  50DF               	movf	indf2,w,c
 21807  00A8AA  A4D8               	btfss	status,2,c
 21808  00A8AC  D7DD               	goto	l1383
 21809                           
 21810                           ; BSR set to: 0
 21811                           ;display.c: 383: };display.c: 384: display_content[1][10+cntr] = 0x01;
 21812                           
 21813                           ; BSR set to: 0
 21814  00A8AE  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21815  00A8B0  6FBC               	movwf	??_display_prepare& (0+255),b
 21816  00A8B2  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21817  00A8B4  0E0A               	movlw	10
 21818  00A8B6  27BC               	addwf	??_display_prepare& (0+255),f,b
 21819  00A8B8  0E00               	movlw	0
 21820  00A8BA  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21821  00A8BC  0E94               	movlw	low (_display_content+20)
 21822  00A8BE  25BC               	addwf	??_display_prepare& (0+255),w,b
 21823  00A8C0  6ED9               	movwf	fsr2l,c
 21824  00A8C2  0E02               	movlw	high (_display_content+20)
 21825  00A8C4  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21826  00A8C6  6EDA               	movwf	fsr2h,c
 21827  00A8C8  0E01               	movlw	1
 21828  00A8CA  6EDF               	movwf	indf2,c
 21829                           
 21830                           ; BSR set to: 0
 21831                           ;display.c: 387: _display_itoa(os.arc_step_size, 2, temp);
 21832  00A8CC  C18D  F095         	movff	_os+26,__display_itoa@value	;volatile
 21833  00A8D0  C18E  F096         	movff	_os+27,__display_itoa@value+1	;volatile
 21834  00A8D4  0E02               	movlw	2
 21835  00A8D6  6F97               	movwf	__display_itoa@decimals& (0+255),b
 21836  00A8D8  0EBE               	movlw	low display_prepare@temp
 21837  00A8DA  6F98               	movwf	__display_itoa@text& (0+255),b
 21838  00A8DC  0E00               	movlw	high display_prepare@temp
 21839  00A8DE  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 21840  00A8E0  EC17  F070         	call	__display_itoa	;wreg free
 21841                           
 21842                           ;display.c: 388: if(os.arc_step_size>999)
 21843  00A8E4  0EE8               	movlw	232
 21844  00A8E6  0101               	movlb	1	; () banked
 21845  00A8E8  5D8D               	subwf	(_os+26)& (0+255),w,b	;volatile
 21846  00A8EA  0E03               	movlw	3
 21847  00A8EC  598E               	subwfb	(_os+27)& (0+255),w,b	;volatile
 21848  00A8EE  A0D8               	btfss	status,0,c
 21849  00A8F0  D002               	goto	l1385
 21850                           
 21851                           ; BSR set to: 1
 21852                           ;display.c: 389: space = 0;
 21853  00A8F2  0E00               	movlw	0
 21854  00A8F4  D001               	goto	L24
 21855  00A8F6                     l1385:
 21856                           
 21857                           ;display.c: 390: else;display.c: 391: space = 1;
 21858                           
 21859                           ; BSR set to: 0
 21860  00A8F6  0E01               	movlw	1
 21861  00A8F8                     L24:
 21862  00A8F8  0100               	movlb	0	; () banked
 21863  00A8FA  6FC8               	movwf	display_prepare@space& (0+255),b
 21864                           
 21865                           ; BSR set to: 0
 21866                           ;display.c: 392: for(cntr=0; temp[cntr]; ++cntr)
 21867  00A8FC  0E00               	movlw	0
 21868  00A8FE  6FC9               	movwf	display_prepare@cntr& (0+255),b
 21869  00A900  D018               	goto	l1387
 21870  00A902                     
 21871                           ; BSR set to: 0
 21872                           ;display.c: 393: {;display.c: 394: display_content[3][space+cntr] = temp[cntr];
 21873                           
 21874                           ; BSR set to: 0
 21875  00A902  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21876  00A904  0D01               	mullw	1
 21877  00A906  0EBE               	movlw	low display_prepare@temp
 21878  00A908  24F3               	addwf	prodl,w,c
 21879  00A90A  6ED9               	movwf	fsr2l,c
 21880  00A90C  0E00               	movlw	high display_prepare@temp
 21881  00A90E  20F4               	addwfc	prodh,w,c
 21882  00A910  6EDA               	movwf	fsr2h,c
 21883  00A912  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21884  00A914  C0C8  F0BC         	movff	display_prepare@space,??_display_prepare
 21885  00A918  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21886  00A91A  27BC               	addwf	??_display_prepare& (0+255),f,b
 21887  00A91C  0E00               	movlw	0
 21888  00A91E  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21889  00A920  0EBC               	movlw	low (_display_content+60)
 21890  00A922  25BC               	addwf	??_display_prepare& (0+255),w,b
 21891  00A924  6EE1               	movwf	fsr1l,c
 21892  00A926  0E02               	movlw	high (_display_content+60)
 21893  00A928  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21894  00A92A  6EE2               	movwf	fsr1h,c
 21895  00A92C  CFDF FFE7          	movff	indf2,indf1
 21896                           
 21897                           ; BSR set to: 0
 21898  00A930  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 21899  00A932                     l1387:
 21900                           
 21901                           ; BSR set to: 0
 21902                           
 21903                           ; BSR set to: 0
 21904  00A932  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21905  00A934  0D01               	mullw	1
 21906  00A936  0EBE               	movlw	low display_prepare@temp
 21907  00A938  24F3               	addwf	prodl,w,c
 21908  00A93A  6ED9               	movwf	fsr2l,c
 21909  00A93C  0E00               	movlw	high display_prepare@temp
 21910  00A93E  20F4               	addwfc	prodh,w,c
 21911  00A940  6EDA               	movwf	fsr2h,c
 21912  00A942  50DF               	movf	indf2,w,c
 21913  00A944  A4D8               	btfss	status,2,c
 21914  00A946  D7DD               	goto	l1388
 21915                           
 21916                           ; BSR set to: 0
 21917                           ;display.c: 395: };display.c: 396: display_content[3][space+cntr] = 0x01 ;
 21918                           
 21919                           ; BSR set to: 0
 21920  00A948  51C9               	movf	display_prepare@cntr& (0+255),w,b
 21921  00A94A  C0C8  F0BC         	movff	display_prepare@space,??_display_prepare
 21922  00A94E  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 21923  00A950  27BC               	addwf	??_display_prepare& (0+255),f,b
 21924  00A952  0E00               	movlw	0
 21925  00A954  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 21926  00A956  0EBC               	movlw	low (_display_content+60)
 21927  00A958  25BC               	addwf	??_display_prepare& (0+255),w,b
 21928  00A95A  6ED9               	movwf	fsr2l,c
 21929  00A95C  0E02               	movlw	high (_display_content+60)
 21930  00A95E  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 21931  00A960  6EDA               	movwf	fsr2h,c
 21932  00A962  0E01               	movlw	1
 21933  00A964  D25B               	goto	L27
 21934  00A966                     
 21935                           ; BSR set to: 0
 21936                           ;display.c: 401: memcpy(display_content, dc_arc2, sizeof display_content);
 21937                           
 21938                           ; BSR set to: 0
 21939  00A966  0E80               	movlw	low _display_content
 21940  00A968  6F60               	movwf	memcpy@d1& (0+255),b
 21941  00A96A  0E02               	movlw	high _display_content
 21942  00A96C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21943  00A96E  0E8E               	movlw	low _dc_arc2
 21944  00A970  6F62               	movwf	memcpy@s1& (0+255),b
 21945  00A972  0E9E               	movlw	high _dc_arc2
 21946  00A974  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21947  00A976  0E00               	movlw	0
 21948  00A978  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21949  00A97A  0E50               	movlw	80
 21950  00A97C  6F64               	movwf	memcpy@n& (0+255),b
 21951  00A97E  EC3C  F098         	call	_memcpy	;wreg free
 21952                           
 21953                           ;display.c: 402: switch(os.displayState)
 21954  00A982  D025               	goto	l1391
 21955  00A984                     
 21956                           ;display.c: 405: display_content[2][6] = 'W';
 21957  00A984  0E57               	movlw	87
 21958  00A986  0102               	movlb	2	; () banked
 21959  00A988  6FAE               	movwf	(_display_content+46)& (0+255),b
 21960                           
 21961                           ;display.c: 406: display_content[2][7] = ' ';
 21962  00A98A  0E20               	movlw	32
 21963  00A98C  6FAF               	movwf	(_display_content+47)& (0+255),b
 21964                           
 21965                           ;display.c: 407: break;
 21966  00A98E  D027               	goto	l1393
 21967  00A990                     
 21968                           ;display.c: 409: memcpy(display_content[2], "        ", 8);
 21969                           
 21970                           ; BSR set to: 2
 21971  00A990  0EA8               	movlw	low (_display_content+40)
 21972  00A992  0100               	movlb	0	; () banked
 21973  00A994  6F60               	movwf	memcpy@d1& (0+255),b
 21974  00A996  0E02               	movlw	high (_display_content+40)
 21975  00A998  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21976  00A99A  0EE6               	movlw	low STR_1
 21977  00A99C  6F62               	movwf	memcpy@s1& (0+255),b
 21978  00A99E  0EA2               	movlw	high STR_1
 21979  00A9A0  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21980  00A9A2  0E00               	movlw	0
 21981  00A9A4  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21982  00A9A6  0E08               	movlw	8
 21983  00A9A8  6F64               	movwf	memcpy@n& (0+255),b
 21984  00A9AA  EC3C  F098         	call	_memcpy	;wreg free
 21985                           
 21986                           ;display.c: 410: memcpy(display_content[3], "Cancel", 6);
 21987  00A9AE  0EBC               	movlw	low (_display_content+60)
 21988  00A9B0  0100               	movlb	0	; () banked
 21989  00A9B2  6F60               	movwf	memcpy@d1& (0+255),b
 21990  00A9B4  0E02               	movlw	high (_display_content+60)
 21991  00A9B6  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 21992  00A9B8  0EEF               	movlw	low STR_2
 21993  00A9BA  6F62               	movwf	memcpy@s1& (0+255),b
 21994  00A9BC  0EA2               	movlw	high STR_2
 21995  00A9BE  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 21996  00A9C0  0E00               	movlw	0
 21997  00A9C2  6F65               	movwf	(memcpy@n+1)& (0+255),b
 21998  00A9C4  0E06               	movlw	6
 21999  00A9C6  6F64               	movwf	memcpy@n& (0+255),b
 22000  00A9C8  EC3C  F098         	call	_memcpy	;wreg free
 22001                           
 22002                           ;display.c: 412: }
 22003                           
 22004                           ;display.c: 411: break;
 22005  00A9CC  D008               	goto	l1393
 22006  00A9CE                     l1391:
 22007  00A9CE  0101               	movlb	1	; () banked
 22008  00A9D0  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 22009                           
 22010                           ; Switch size 1, requested type "space"
 22011                           ; Number of cases is 2, Range of values is 98 to 99
 22012                           ; switch strategies available:
 22013                           ; Name         Instructions Cycles
 22014                           ; simple_byte            7     4 (average)
 22015                           ;	Chosen strategy is simple_byte
 22016  00A9D2  0A62               	xorlw	98	; case 98
 22017  00A9D4  B4D8               	btfsc	status,2,c
 22018  00A9D6  D7DC               	goto	l1394
 22019  00A9D8  0A01               	xorlw	1	; case 99
 22020  00A9DA  B4D8               	btfsc	status,2,c
 22021  00A9DC  D7D3               	goto	l1392
 22022  00A9DE                     l1393:
 22023                           
 22024                           ;display.c: 415: _display_itoa_long(os.arc_size, 2, temp);
 22025                           
 22026                           ; BSR set to: 1
 22027  00A9DE  C18F  F0AD         	movff	_os+28,__display_itoa_long@value	;volatile
 22028  00A9E2  C190  F0AE         	movff	_os+29,__display_itoa_long@value+1	;volatile
 22029  00A9E6  C191  F0AF         	movff	_os+30,__display_itoa_long@value+2	;volatile
 22030  00A9EA  C192  F0B0         	movff	_os+31,__display_itoa_long@value+3	;volatile
 22031  00A9EE  0E02               	movlw	2
 22032  00A9F0  0100               	movlb	0	; () banked
 22033  00A9F2  6FB1               	movwf	__display_itoa_long@decimals& (0+255),b
 22034  00A9F4  0EBE               	movlw	low display_prepare@temp
 22035  00A9F6  6FB2               	movwf	__display_itoa_long@text& (0+255),b
 22036  00A9F8  0E00               	movlw	high display_prepare@temp
 22037  00A9FA  6FB3               	movwf	(__display_itoa_long@text+1)& (0+255),b
 22038  00A9FC  EC58  F080         	call	__display_itoa_long	;wreg free
 22039                           
 22040                           ;display.c: 416: for(cntr=0; temp[cntr]; ++cntr)
 22041  00AA00  0E00               	movlw	0
 22042  00AA02  0100               	movlb	0	; () banked
 22043  00AA04  6FC9               	movwf	display_prepare@cntr& (0+255),b
 22044  00AA06  D018               	goto	l1395
 22045  00AA08                     
 22046                           ; BSR set to: 0
 22047                           ;display.c: 417: {;display.c: 418: display_content[0][10+cntr] = temp[cntr];
 22048                           
 22049                           ; BSR set to: 0
 22050  00AA08  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22051  00AA0A  0D01               	mullw	1
 22052  00AA0C  0EBE               	movlw	low display_prepare@temp
 22053  00AA0E  24F3               	addwf	prodl,w,c
 22054  00AA10  6ED9               	movwf	fsr2l,c
 22055  00AA12  0E00               	movlw	high display_prepare@temp
 22056  00AA14  20F4               	addwfc	prodh,w,c
 22057  00AA16  6EDA               	movwf	fsr2h,c
 22058  00AA18  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22059  00AA1A  6FBC               	movwf	??_display_prepare& (0+255),b
 22060  00AA1C  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22061  00AA1E  0E0A               	movlw	10
 22062  00AA20  27BC               	addwf	??_display_prepare& (0+255),f,b
 22063  00AA22  0E00               	movlw	0
 22064  00AA24  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22065  00AA26  0E80               	movlw	low _display_content
 22066  00AA28  25BC               	addwf	??_display_prepare& (0+255),w,b
 22067  00AA2A  6EE1               	movwf	fsr1l,c
 22068  00AA2C  0E02               	movlw	high _display_content
 22069  00AA2E  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22070  00AA30  6EE2               	movwf	fsr1h,c
 22071  00AA32  CFDF FFE7          	movff	indf2,indf1
 22072                           
 22073                           ; BSR set to: 0
 22074  00AA36  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 22075  00AA38                     l1395:
 22076                           
 22077                           ; BSR set to: 0
 22078                           
 22079                           ; BSR set to: 0
 22080  00AA38  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22081  00AA3A  0D01               	mullw	1
 22082  00AA3C  0EBE               	movlw	low display_prepare@temp
 22083  00AA3E  24F3               	addwf	prodl,w,c
 22084  00AA40  6ED9               	movwf	fsr2l,c
 22085  00AA42  0E00               	movlw	high display_prepare@temp
 22086  00AA44  20F4               	addwfc	prodh,w,c
 22087  00AA46  6EDA               	movwf	fsr2h,c
 22088  00AA48  50DF               	movf	indf2,w,c
 22089  00AA4A  A4D8               	btfss	status,2,c
 22090  00AA4C  D7DD               	goto	l1396
 22091                           
 22092                           ; BSR set to: 0
 22093                           ;display.c: 419: };display.c: 420: display_content[0][10+cntr] = 0x01;
 22094                           
 22095                           ; BSR set to: 0
 22096  00AA4E  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22097  00AA50  6FBC               	movwf	??_display_prepare& (0+255),b
 22098  00AA52  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22099  00AA54  0E0A               	movlw	10
 22100  00AA56  27BC               	addwf	??_display_prepare& (0+255),f,b
 22101  00AA58  0E00               	movlw	0
 22102  00AA5A  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22103  00AA5C  0E80               	movlw	low _display_content
 22104  00AA5E  25BC               	addwf	??_display_prepare& (0+255),w,b
 22105  00AA60  6ED9               	movwf	fsr2l,c
 22106  00AA62  0E02               	movlw	high _display_content
 22107  00AA64  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22108  00AA66  6EDA               	movwf	fsr2h,c
 22109  00AA68  0E01               	movlw	1
 22110  00AA6A  6EDF               	movwf	indf2,c
 22111                           
 22112                           ; BSR set to: 0
 22113                           ;display.c: 423: _display_itoa_long(os.current_position_in_degrees, 2, temp);
 22114  00AA6C  C17E  F0AD         	movff	_os+11,__display_itoa_long@value	;volatile
 22115  00AA70  C17F  F0AE         	movff	_os+12,__display_itoa_long@value+1	;volatile
 22116  00AA74  6BAF               	clrf	(__display_itoa_long@value+2)& (0+255),b
 22117  00AA76  6BB0               	clrf	(__display_itoa_long@value+3)& (0+255),b
 22118  00AA78  0E02               	movlw	2
 22119  00AA7A  6FB1               	movwf	__display_itoa_long@decimals& (0+255),b
 22120  00AA7C  0EBE               	movlw	low display_prepare@temp
 22121  00AA7E  6FB2               	movwf	__display_itoa_long@text& (0+255),b
 22122  00AA80  0E00               	movlw	high display_prepare@temp
 22123  00AA82  6FB3               	movwf	(__display_itoa_long@text+1)& (0+255),b
 22124  00AA84  EC58  F080         	call	__display_itoa_long	;wreg free
 22125                           
 22126                           ;display.c: 424: space = 6-strlen(temp);
 22127  00AA88  0EBE               	movlw	low display_prepare@temp
 22128  00AA8A  0100               	movlb	0	; () banked
 22129  00AA8C  6F60               	movwf	strlen@s& (0+255),b
 22130  00AA8E  0E00               	movlw	high display_prepare@temp
 22131  00AA90  6F61               	movwf	(strlen@s+1)& (0+255),b
 22132  00AA92  ECA6  F09D         	call	_strlen	;wreg free
 22133  00AA96  0100               	movlb	0	; () banked
 22134  00AA98  5160               	movf	?_strlen& (0+255),w,b
 22135  00AA9A  0800               	sublw	0
 22136  00AA9C  0F06               	addlw	6
 22137  00AA9E  6FC8               	movwf	display_prepare@space& (0+255),b
 22138                           
 22139                           ; BSR set to: 0
 22140                           ;display.c: 425: for(cntr=0; temp[cntr]; ++cntr)
 22141  00AAA0  0E00               	movlw	0
 22142  00AAA2  6FC9               	movwf	display_prepare@cntr& (0+255),b
 22143  00AAA4  D01C               	goto	l1398
 22144  00AAA6                     
 22145                           ; BSR set to: 0
 22146                           ;display.c: 426: {;display.c: 427: display_content[1][13+space+cntr] = temp[cntr];
 22147                           
 22148                           ; BSR set to: 0
 22149  00AAA6  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22150  00AAA8  0D01               	mullw	1
 22151  00AAAA  0EBE               	movlw	low display_prepare@temp
 22152  00AAAC  24F3               	addwf	prodl,w,c
 22153  00AAAE  6ED9               	movwf	fsr2l,c
 22154  00AAB0  0E00               	movlw	high display_prepare@temp
 22155  00AAB2  20F4               	addwfc	prodh,w,c
 22156  00AAB4  6EDA               	movwf	fsr2h,c
 22157  00AAB6  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22158  00AAB8  C0C8  F0BC         	movff	display_prepare@space,??_display_prepare
 22159  00AABC  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22160  00AABE  27BC               	addwf	??_display_prepare& (0+255),f,b
 22161  00AAC0  0E00               	movlw	0
 22162  00AAC2  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22163  00AAC4  0E0D               	movlw	13
 22164  00AAC6  27BC               	addwf	??_display_prepare& (0+255),f,b
 22165  00AAC8  0E00               	movlw	0
 22166  00AACA  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22167  00AACC  0E94               	movlw	low (_display_content+20)
 22168  00AACE  25BC               	addwf	??_display_prepare& (0+255),w,b
 22169  00AAD0  6EE1               	movwf	fsr1l,c
 22170  00AAD2  0E02               	movlw	high (_display_content+20)
 22171  00AAD4  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22172  00AAD6  6EE2               	movwf	fsr1h,c
 22173  00AAD8  CFDF FFE7          	movff	indf2,indf1
 22174                           
 22175                           ; BSR set to: 0
 22176  00AADC  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 22177  00AADE                     l1398:
 22178                           
 22179                           ; BSR set to: 0
 22180                           
 22181                           ; BSR set to: 0
 22182  00AADE  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22183  00AAE0  0D01               	mullw	1
 22184  00AAE2  0EBE               	movlw	low display_prepare@temp
 22185  00AAE4  24F3               	addwf	prodl,w,c
 22186  00AAE6  6ED9               	movwf	fsr2l,c
 22187  00AAE8  0E00               	movlw	high display_prepare@temp
 22188  00AAEA  20F4               	addwfc	prodh,w,c
 22189  00AAEC  6EDA               	movwf	fsr2h,c
 22190  00AAEE  50DF               	movf	indf2,w,c
 22191  00AAF0  A4D8               	btfss	status,2,c
 22192  00AAF2  D7D9               	goto	l1399
 22193                           
 22194                           ; BSR set to: 0
 22195                           ;display.c: 428: };display.c: 431: _display_itoa(motor_speed_from_index(os.arc_speed), 2
      +                          , temp);
 22196                           
 22197                           ; BSR set to: 0
 22198  00AAF4  C193  F093         	movff	_os+32,motor_speed_from_index@speed_index	;volatile
 22199  00AAF8  C194  F094         	movff	_os+33,motor_speed_from_index@speed_index+1	;volatile
 22200  00AAFC  EC3C  F0A1         	call	_motor_speed_from_index	;wreg free
 22201  00AB00  C093  F095         	movff	?_motor_speed_from_index,__display_itoa@value
 22202  00AB04  C094  F096         	movff	?_motor_speed_from_index+1,__display_itoa@value+1
 22203  00AB08  0E02               	movlw	2
 22204  00AB0A  0100               	movlb	0	; () banked
 22205  00AB0C  6F97               	movwf	__display_itoa@decimals& (0+255),b
 22206  00AB0E  0EBE               	movlw	low display_prepare@temp
 22207  00AB10  6F98               	movwf	__display_itoa@text& (0+255),b
 22208  00AB12  0E00               	movlw	high display_prepare@temp
 22209  00AB14  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 22210  00AB16  EC17  F070         	call	__display_itoa	;wreg free
 22211                           
 22212                           ;display.c: 432: for(cntr=0; temp[cntr]; ++cntr)
 22213  00AB1A  0E00               	movlw	0
 22214  00AB1C  0100               	movlb	0	; () banked
 22215  00AB1E  6FC9               	movwf	display_prepare@cntr& (0+255),b
 22216  00AB20  D018               	goto	l1401
 22217  00AB22                     
 22218                           ; BSR set to: 0
 22219                           ;display.c: 433: {;display.c: 434: display_content[3][11+cntr] = temp[cntr];
 22220                           
 22221                           ; BSR set to: 0
 22222  00AB22  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22223  00AB24  0D01               	mullw	1
 22224  00AB26  0EBE               	movlw	low display_prepare@temp
 22225  00AB28  24F3               	addwf	prodl,w,c
 22226  00AB2A  6ED9               	movwf	fsr2l,c
 22227  00AB2C  0E00               	movlw	high display_prepare@temp
 22228  00AB2E  20F4               	addwfc	prodh,w,c
 22229  00AB30  6EDA               	movwf	fsr2h,c
 22230  00AB32  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22231  00AB34  6FBC               	movwf	??_display_prepare& (0+255),b
 22232  00AB36  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22233  00AB38  0E0B               	movlw	11
 22234  00AB3A  27BC               	addwf	??_display_prepare& (0+255),f,b
 22235  00AB3C  0E00               	movlw	0
 22236  00AB3E  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22237  00AB40  0EBC               	movlw	low (_display_content+60)
 22238  00AB42  25BC               	addwf	??_display_prepare& (0+255),w,b
 22239  00AB44  6EE1               	movwf	fsr1l,c
 22240  00AB46  0E02               	movlw	high (_display_content+60)
 22241  00AB48  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22242  00AB4A  6EE2               	movwf	fsr1h,c
 22243  00AB4C  CFDF FFE7          	movff	indf2,indf1
 22244                           
 22245                           ; BSR set to: 0
 22246  00AB50  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 22247  00AB52                     l1401:
 22248                           
 22249                           ; BSR set to: 0
 22250                           
 22251                           ; BSR set to: 0
 22252  00AB52  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22253  00AB54  0D01               	mullw	1
 22254  00AB56  0EBE               	movlw	low display_prepare@temp
 22255  00AB58  24F3               	addwf	prodl,w,c
 22256  00AB5A  6ED9               	movwf	fsr2l,c
 22257  00AB5C  0E00               	movlw	high display_prepare@temp
 22258  00AB5E  20F4               	addwfc	prodh,w,c
 22259  00AB60  6EDA               	movwf	fsr2h,c
 22260  00AB62  50DF               	movf	indf2,w,c
 22261  00AB64  A4D8               	btfss	status,2,c
 22262  00AB66  D7DD               	goto	l1402
 22263  00AB68  D12D               	goto	L87
 22264  00AB6A                     
 22265                           ; BSR set to: 0
 22266                           ;display.c: 447: memcpy(display_content, dc_zero, sizeof display_content);
 22267                           
 22268                           ; BSR set to: 0
 22269  00AB6A  0E80               	movlw	low _display_content
 22270  00AB6C  6F60               	movwf	memcpy@d1& (0+255),b
 22271  00AB6E  0E02               	movlw	high _display_content
 22272  00AB70  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 22273  00AB72  0E3E               	movlw	low _dc_zero
 22274  00AB74  6F62               	movwf	memcpy@s1& (0+255),b
 22275  00AB76  0E9E               	movlw	high _dc_zero
 22276  00AB78  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 22277  00AB7A  0E00               	movlw	0
 22278  00AB7C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 22279  00AB7E  0E50               	movlw	80
 22280  00AB80  6F64               	movwf	memcpy@n& (0+255),b
 22281  00AB82  EC3C  F098         	call	_memcpy	;wreg free
 22282                           
 22283                           ;display.c: 450: _display_itoa_long(os.current_position_in_degrees, 2, temp);
 22284  00AB86  C17E  F0AD         	movff	_os+11,__display_itoa_long@value	;volatile
 22285  00AB8A  C17F  F0AE         	movff	_os+12,__display_itoa_long@value+1	;volatile
 22286  00AB8E  0100               	movlb	0	; () banked
 22287  00AB90  6BAF               	clrf	(__display_itoa_long@value+2)& (0+255),b
 22288  00AB92  6BB0               	clrf	(__display_itoa_long@value+3)& (0+255),b
 22289  00AB94  0E02               	movlw	2
 22290  00AB96  6FB1               	movwf	__display_itoa_long@decimals& (0+255),b
 22291  00AB98  0EBE               	movlw	low display_prepare@temp
 22292  00AB9A  6FB2               	movwf	__display_itoa_long@text& (0+255),b
 22293  00AB9C  0E00               	movlw	high display_prepare@temp
 22294  00AB9E  6FB3               	movwf	(__display_itoa_long@text+1)& (0+255),b
 22295  00ABA0  EC58  F080         	call	__display_itoa_long	;wreg free
 22296                           
 22297                           ;display.c: 451: for(cntr=0; temp[cntr]; ++cntr)
 22298  00ABA4  0E00               	movlw	0
 22299  00ABA6  0100               	movlb	0	; () banked
 22300  00ABA8  6FC9               	movwf	display_prepare@cntr& (0+255),b
 22301  00ABAA  D018               	goto	l1405
 22302  00ABAC                     
 22303                           ; BSR set to: 0
 22304                           ;display.c: 452: {;display.c: 453: display_content[1][13+cntr] = temp[cntr];
 22305                           
 22306                           ; BSR set to: 0
 22307  00ABAC  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22308  00ABAE  0D01               	mullw	1
 22309  00ABB0  0EBE               	movlw	low display_prepare@temp
 22310  00ABB2  24F3               	addwf	prodl,w,c
 22311  00ABB4  6ED9               	movwf	fsr2l,c
 22312  00ABB6  0E00               	movlw	high display_prepare@temp
 22313  00ABB8  20F4               	addwfc	prodh,w,c
 22314  00ABBA  6EDA               	movwf	fsr2h,c
 22315  00ABBC  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22316  00ABBE  6FBC               	movwf	??_display_prepare& (0+255),b
 22317  00ABC0  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22318  00ABC2  0E0D               	movlw	13
 22319  00ABC4  27BC               	addwf	??_display_prepare& (0+255),f,b
 22320  00ABC6  0E00               	movlw	0
 22321  00ABC8  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22322  00ABCA  0E94               	movlw	low (_display_content+20)
 22323  00ABCC  25BC               	addwf	??_display_prepare& (0+255),w,b
 22324  00ABCE  6EE1               	movwf	fsr1l,c
 22325  00ABD0  0E02               	movlw	high (_display_content+20)
 22326  00ABD2  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22327  00ABD4  6EE2               	movwf	fsr1h,c
 22328  00ABD6  CFDF FFE7          	movff	indf2,indf1
 22329                           
 22330                           ; BSR set to: 0
 22331  00ABDA  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 22332  00ABDC                     l1405:
 22333                           
 22334                           ; BSR set to: 0
 22335                           
 22336                           ; BSR set to: 0
 22337  00ABDC  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22338  00ABDE  0D01               	mullw	1
 22339  00ABE0  0EBE               	movlw	low display_prepare@temp
 22340  00ABE2  24F3               	addwf	prodl,w,c
 22341  00ABE4  6ED9               	movwf	fsr2l,c
 22342  00ABE6  0E00               	movlw	high display_prepare@temp
 22343  00ABE8  20F4               	addwfc	prodh,w,c
 22344  00ABEA  6EDA               	movwf	fsr2h,c
 22345  00ABEC  50DF               	movf	indf2,w,c
 22346  00ABEE  A4D8               	btfss	status,2,c
 22347  00ABF0  D7DD               	goto	l1406
 22348                           
 22349                           ; BSR set to: 0
 22350                           ;display.c: 454: };display.c: 455: display_content[1][13+cntr] = 0x01;
 22351                           
 22352                           ; BSR set to: 0
 22353  00ABF2  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22354  00ABF4  6FBC               	movwf	??_display_prepare& (0+255),b
 22355  00ABF6  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22356  00ABF8  0E0D               	movlw	13
 22357  00ABFA  27BC               	addwf	??_display_prepare& (0+255),f,b
 22358  00ABFC  0E00               	movlw	0
 22359  00ABFE  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22360  00AC00  0E94               	movlw	low (_display_content+20)
 22361  00AC02  25BC               	addwf	??_display_prepare& (0+255),w,b
 22362  00AC04  6ED9               	movwf	fsr2l,c
 22363  00AC06  0E02               	movlw	high (_display_content+20)
 22364  00AC08  D6AA               	goto	L36
 22365  00AC0A                     
 22366                           ; BSR set to: 0
 22367                           ;display.c: 460: memcpy(display_content, dc_manual, sizeof display_content);
 22368                           
 22369                           ; BSR set to: 0
 22370  00AC0A  0E80               	movlw	low _display_content
 22371  00AC0C  6F60               	movwf	memcpy@d1& (0+255),b
 22372  00AC0E  0E02               	movlw	high _display_content
 22373  00AC10  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 22374  00AC12  0EEE               	movlw	low _dc_manual
 22375  00AC14  6F62               	movwf	memcpy@s1& (0+255),b
 22376  00AC16  0E9D               	movlw	high _dc_manual
 22377  00AC18  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 22378  00AC1A  0E00               	movlw	0
 22379  00AC1C  6F65               	movwf	(memcpy@n+1)& (0+255),b
 22380  00AC1E  0E50               	movlw	80
 22381  00AC20  6F64               	movwf	memcpy@n& (0+255),b
 22382  00AC22  EC3C  F098         	call	_memcpy	;wreg free
 22383                           
 22384                           ;display.c: 461: switch(os.displayState)
 22385  00AC26  D044               	goto	l1409
 22386  00AC28                     
 22387                           ;display.c: 464: display_content[2][6] = 'W';
 22388  00AC28  0E57               	movlw	87
 22389  00AC2A  0102               	movlb	2	; () banked
 22390  00AC2C  6FAE               	movwf	(_display_content+46)& (0+255),b
 22391                           
 22392                           ;display.c: 465: display_content[2][7] = ' ';
 22393  00AC2E  0E20               	movlw	32
 22394  00AC30  6FAF               	movwf	(_display_content+47)& (0+255),b
 22395                           
 22396                           ;display.c: 466: break;
 22397  00AC32  D049               	goto	l1411
 22398  00AC34                     
 22399                           ;display.c: 468: memcpy(display_content[2], "        ", 8);
 22400                           
 22401                           ; BSR set to: 2
 22402  00AC34  0EA8               	movlw	low (_display_content+40)
 22403  00AC36  0100               	movlb	0	; () banked
 22404  00AC38  6F60               	movwf	memcpy@d1& (0+255),b
 22405  00AC3A  0E02               	movlw	high (_display_content+40)
 22406  00AC3C  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 22407  00AC3E  0EE6               	movlw	low STR_1
 22408  00AC40  6F62               	movwf	memcpy@s1& (0+255),b
 22409  00AC42  0EA2               	movlw	high STR_1
 22410  00AC44  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 22411  00AC46  0E00               	movlw	0
 22412  00AC48  6F65               	movwf	(memcpy@n+1)& (0+255),b
 22413  00AC4A  0E08               	movlw	8
 22414  00AC4C  6F64               	movwf	memcpy@n& (0+255),b
 22415  00AC4E  EC3C  F098         	call	_memcpy	;wreg free
 22416                           
 22417                           ;display.c: 469: memcpy(display_content[3], "Cancel", 6);
 22418  00AC52  0EBC               	movlw	low (_display_content+60)
 22419  00AC54  0100               	movlb	0	; () banked
 22420  00AC56  6F60               	movwf	memcpy@d1& (0+255),b
 22421  00AC58  0E02               	movlw	high (_display_content+60)
 22422  00AC5A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 22423  00AC5C  0EEF               	movlw	low STR_2
 22424  00AC5E  6F62               	movwf	memcpy@s1& (0+255),b
 22425  00AC60  0EA2               	movlw	high STR_2
 22426  00AC62  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 22427  00AC64  0E00               	movlw	0
 22428  00AC66  6F65               	movwf	(memcpy@n+1)& (0+255),b
 22429  00AC68  0E06               	movlw	6
 22430  00AC6A  6F64               	movwf	memcpy@n& (0+255),b
 22431  00AC6C  EC3C  F098         	call	_memcpy	;wreg free
 22432                           
 22433                           ;display.c: 470: break;
 22434  00AC70  D02A               	goto	l1411
 22435  00AC72                     
 22436                           ;display.c: 472: memcpy(&display_content[2][0], "        ", 8);
 22437  00AC72  0EA8               	movlw	low (_display_content+40)
 22438  00AC74  0100               	movlb	0	; () banked
 22439  00AC76  6F60               	movwf	memcpy@d1& (0+255),b
 22440  00AC78  0E02               	movlw	high (_display_content+40)
 22441  00AC7A  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 22442  00AC7C  0EE6               	movlw	low STR_1
 22443  00AC7E  6F62               	movwf	memcpy@s1& (0+255),b
 22444  00AC80  0EA2               	movlw	high STR_1
 22445  00AC82  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 22446  00AC84  0E00               	movlw	0
 22447  00AC86  6F65               	movwf	(memcpy@n+1)& (0+255),b
 22448  00AC88  0E08               	movlw	8
 22449  00AC8A  6F64               	movwf	memcpy@n& (0+255),b
 22450  00AC8C  EC3C  F098         	call	_memcpy	;wreg free
 22451                           
 22452                           ;display.c: 473: memcpy(&display_content[3][0], "Stop ", 5);
 22453  00AC90  0EBC               	movlw	low (_display_content+60)
 22454  00AC92  0100               	movlb	0	; () banked
 22455  00AC94  6F60               	movwf	memcpy@d1& (0+255),b
 22456  00AC96  0E02               	movlw	high (_display_content+60)
 22457  00AC98  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 22458  00AC9A  0EF6               	movlw	low STR_6
 22459  00AC9C  6F62               	movwf	memcpy@s1& (0+255),b
 22460  00AC9E  0EA2               	movlw	high STR_6
 22461  00ACA0  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 22462  00ACA2  0E00               	movlw	0
 22463  00ACA4  6F65               	movwf	(memcpy@n+1)& (0+255),b
 22464  00ACA6  0E05               	movlw	5
 22465  00ACA8  6F64               	movwf	memcpy@n& (0+255),b
 22466  00ACAA  EC3C  F098         	call	_memcpy	;wreg free
 22467                           
 22468                           ;display.c: 475: }
 22469                           
 22470                           ;display.c: 474: break;
 22471  00ACAE  D00B               	goto	l1411
 22472  00ACB0                     l1409:
 22473  00ACB0  0101               	movlb	1	; () banked
 22474  00ACB2  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 22475                           
 22476                           ; Switch size 1, requested type "space"
 22477                           ; Number of cases is 3, Range of values is 130 to 132
 22478                           ; switch strategies available:
 22479                           ; Name         Instructions Cycles
 22480                           ; simple_byte           10     6 (average)
 22481                           ;	Chosen strategy is simple_byte
 22482  00ACB4  0A82               	xorlw	130	; case 130
 22483  00ACB6  B4D8               	btfsc	status,2,c
 22484  00ACB8  D7BD               	goto	l1412
 22485  00ACBA  0A01               	xorlw	1	; case 131
 22486  00ACBC  B4D8               	btfsc	status,2,c
 22487  00ACBE  D7B4               	goto	l1410
 22488  00ACC0  0A07               	xorlw	7	; case 132
 22489  00ACC2  B4D8               	btfsc	status,2,c
 22490  00ACC4  D7D6               	goto	l1413
 22491  00ACC6                     l1411:
 22492                           
 22493                           ;display.c: 478: _display_itoa_long(os.current_position_in_degrees, 2, temp);
 22494                           
 22495                           ; BSR set to: 1
 22496  00ACC6  C17E  F0AD         	movff	_os+11,__display_itoa_long@value	;volatile
 22497  00ACCA  C17F  F0AE         	movff	_os+12,__display_itoa_long@value+1	;volatile
 22498  00ACCE  0100               	movlb	0	; () banked
 22499  00ACD0  6BAF               	clrf	(__display_itoa_long@value+2)& (0+255),b
 22500  00ACD2  6BB0               	clrf	(__display_itoa_long@value+3)& (0+255),b
 22501  00ACD4  0E02               	movlw	2
 22502  00ACD6  6FB1               	movwf	__display_itoa_long@decimals& (0+255),b
 22503  00ACD8  0EBE               	movlw	low display_prepare@temp
 22504  00ACDA  6FB2               	movwf	__display_itoa_long@text& (0+255),b
 22505  00ACDC  0E00               	movlw	high display_prepare@temp
 22506  00ACDE  6FB3               	movwf	(__display_itoa_long@text+1)& (0+255),b
 22507  00ACE0  EC58  F080         	call	__display_itoa_long	;wreg free
 22508                           
 22509                           ;display.c: 479: space = 7-strlen(temp);
 22510  00ACE4  0EBE               	movlw	low display_prepare@temp
 22511  00ACE6  0100               	movlb	0	; () banked
 22512  00ACE8  6F60               	movwf	strlen@s& (0+255),b
 22513  00ACEA  0E00               	movlw	high display_prepare@temp
 22514  00ACEC  6F61               	movwf	(strlen@s+1)& (0+255),b
 22515  00ACEE  ECA6  F09D         	call	_strlen	;wreg free
 22516  00ACF2  0100               	movlb	0	; () banked
 22517  00ACF4  5160               	movf	?_strlen& (0+255),w,b
 22518  00ACF6  0800               	sublw	0
 22519  00ACF8  0F07               	addlw	7
 22520  00ACFA  6FC8               	movwf	display_prepare@space& (0+255),b
 22521                           
 22522                           ; BSR set to: 0
 22523                           ;display.c: 480: for(cntr=0; temp[cntr]; ++cntr)
 22524  00ACFC  0E00               	movlw	0
 22525  00ACFE  6FC9               	movwf	display_prepare@cntr& (0+255),b
 22526  00AD00  D01C               	goto	l1414
 22527  00AD02                     
 22528                           ; BSR set to: 0
 22529                           ;display.c: 481: {;display.c: 482: display_content[1][12+space+cntr] = temp[cntr];
 22530                           
 22531                           ; BSR set to: 0
 22532  00AD02  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22533  00AD04  0D01               	mullw	1
 22534  00AD06  0EBE               	movlw	low display_prepare@temp
 22535  00AD08  24F3               	addwf	prodl,w,c
 22536  00AD0A  6ED9               	movwf	fsr2l,c
 22537  00AD0C  0E00               	movlw	high display_prepare@temp
 22538  00AD0E  20F4               	addwfc	prodh,w,c
 22539  00AD10  6EDA               	movwf	fsr2h,c
 22540  00AD12  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22541  00AD14  C0C8  F0BC         	movff	display_prepare@space,??_display_prepare
 22542  00AD18  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22543  00AD1A  27BC               	addwf	??_display_prepare& (0+255),f,b
 22544  00AD1C  0E00               	movlw	0
 22545  00AD1E  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22546  00AD20  0E0C               	movlw	12
 22547  00AD22  27BC               	addwf	??_display_prepare& (0+255),f,b
 22548  00AD24  0E00               	movlw	0
 22549  00AD26  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22550  00AD28  0E94               	movlw	low (_display_content+20)
 22551  00AD2A  25BC               	addwf	??_display_prepare& (0+255),w,b
 22552  00AD2C  6EE1               	movwf	fsr1l,c
 22553  00AD2E  0E02               	movlw	high (_display_content+20)
 22554  00AD30  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22555  00AD32  6EE2               	movwf	fsr1h,c
 22556  00AD34  CFDF FFE7          	movff	indf2,indf1
 22557                           
 22558                           ; BSR set to: 0
 22559  00AD38  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 22560  00AD3A                     l1414:
 22561                           
 22562                           ; BSR set to: 0
 22563                           
 22564                           ; BSR set to: 0
 22565  00AD3A  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22566  00AD3C  0D01               	mullw	1
 22567  00AD3E  0EBE               	movlw	low display_prepare@temp
 22568  00AD40  24F3               	addwf	prodl,w,c
 22569  00AD42  6ED9               	movwf	fsr2l,c
 22570  00AD44  0E00               	movlw	high display_prepare@temp
 22571  00AD46  20F4               	addwfc	prodh,w,c
 22572  00AD48  6EDA               	movwf	fsr2h,c
 22573  00AD4A  50DF               	movf	indf2,w,c
 22574  00AD4C  A4D8               	btfss	status,2,c
 22575  00AD4E  D7D9               	goto	l1415
 22576                           
 22577                           ; BSR set to: 0
 22578                           ;display.c: 483: };display.c: 486: _display_itoa(motor_speed_from_index(os.manual_speed)
      +                          , 2, temp);
 22579                           
 22580                           ; BSR set to: 0
 22581  00AD50  C196  F093         	movff	_os+35,motor_speed_from_index@speed_index	;volatile
 22582  00AD54  C197  F094         	movff	_os+36,motor_speed_from_index@speed_index+1	;volatile
 22583  00AD58  EC3C  F0A1         	call	_motor_speed_from_index	;wreg free
 22584  00AD5C  C093  F095         	movff	?_motor_speed_from_index,__display_itoa@value
 22585  00AD60  C094  F096         	movff	?_motor_speed_from_index+1,__display_itoa@value+1
 22586  00AD64  0E02               	movlw	2
 22587  00AD66  0100               	movlb	0	; () banked
 22588  00AD68  6F97               	movwf	__display_itoa@decimals& (0+255),b
 22589  00AD6A  0EBE               	movlw	low display_prepare@temp
 22590  00AD6C  6F98               	movwf	__display_itoa@text& (0+255),b
 22591  00AD6E  0E00               	movlw	high display_prepare@temp
 22592  00AD70  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 22593  00AD72  EC17  F070         	call	__display_itoa	;wreg free
 22594                           
 22595                           ;display.c: 487: for(cntr=0; temp[cntr]; ++cntr)
 22596  00AD76  0E00               	movlw	0
 22597  00AD78  0100               	movlb	0	; () banked
 22598  00AD7A  6FC9               	movwf	display_prepare@cntr& (0+255),b
 22599  00AD7C  D018               	goto	l1417
 22600  00AD7E                     
 22601                           ; BSR set to: 0
 22602                           ;display.c: 488: {;display.c: 489: display_content[3][11+cntr] = temp[cntr];
 22603                           
 22604                           ; BSR set to: 0
 22605  00AD7E  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22606  00AD80  0D01               	mullw	1
 22607  00AD82  0EBE               	movlw	low display_prepare@temp
 22608  00AD84  24F3               	addwf	prodl,w,c
 22609  00AD86  6ED9               	movwf	fsr2l,c
 22610  00AD88  0E00               	movlw	high display_prepare@temp
 22611  00AD8A  20F4               	addwfc	prodh,w,c
 22612  00AD8C  6EDA               	movwf	fsr2h,c
 22613  00AD8E  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22614  00AD90  6FBC               	movwf	??_display_prepare& (0+255),b
 22615  00AD92  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22616  00AD94  0E0B               	movlw	11
 22617  00AD96  27BC               	addwf	??_display_prepare& (0+255),f,b
 22618  00AD98  0E00               	movlw	0
 22619  00AD9A  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22620  00AD9C  0EBC               	movlw	low (_display_content+60)
 22621  00AD9E  25BC               	addwf	??_display_prepare& (0+255),w,b
 22622  00ADA0  6EE1               	movwf	fsr1l,c
 22623  00ADA2  0E02               	movlw	high (_display_content+60)
 22624  00ADA4  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22625  00ADA6  6EE2               	movwf	fsr1h,c
 22626  00ADA8  CFDF FFE7          	movff	indf2,indf1
 22627                           
 22628                           ; BSR set to: 0
 22629  00ADAC  2BC9               	incf	display_prepare@cntr& (0+255),f,b
 22630  00ADAE                     l1417:
 22631                           
 22632                           ; BSR set to: 0
 22633                           
 22634                           ; BSR set to: 0
 22635  00ADAE  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22636  00ADB0  0D01               	mullw	1
 22637  00ADB2  0EBE               	movlw	low display_prepare@temp
 22638  00ADB4  24F3               	addwf	prodl,w,c
 22639  00ADB6  6ED9               	movwf	fsr2l,c
 22640  00ADB8  0E00               	movlw	high display_prepare@temp
 22641  00ADBA  20F4               	addwfc	prodh,w,c
 22642  00ADBC  6EDA               	movwf	fsr2h,c
 22643  00ADBE  50DF               	movf	indf2,w,c
 22644  00ADC0  A4D8               	btfss	status,2,c
 22645  00ADC2  D7DD               	goto	l1418
 22646  00ADC4                     L87:
 22647                           
 22648                           ; BSR set to: 0
 22649                           ;display.c: 490: };display.c: 491: display_content[3][11+cntr] = 0x01;
 22650                           
 22651                           ; BSR set to: 0
 22652  00ADC4  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22653  00ADC6  6FBC               	movwf	??_display_prepare& (0+255),b
 22654  00ADC8  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22655  00ADCA  0E0B               	movlw	11
 22656  00ADCC  27BC               	addwf	??_display_prepare& (0+255),f,b
 22657  00ADCE  0E00               	movlw	0
 22658  00ADD0  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22659  00ADD2  0EBC               	movlw	low (_display_content+60)
 22660  00ADD4  25BC               	addwf	??_display_prepare& (0+255),w,b
 22661  00ADD6  6ED9               	movwf	fsr2l,c
 22662  00ADD8  0E02               	movlw	high (_display_content+60)
 22663  00ADDA  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22664  00ADDC  6EDA               	movwf	fsr2h,c
 22665  00ADDE  0E01               	movlw	1
 22666  00ADE0  6EDF               	movwf	indf2,c
 22667                           
 22668                           ;display.c: 492: display_content[3][12+cntr] = '/';
 22669  00ADE2  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22670  00ADE4  6FBC               	movwf	??_display_prepare& (0+255),b
 22671  00ADE6  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22672  00ADE8  0E0C               	movlw	12
 22673  00ADEA  27BC               	addwf	??_display_prepare& (0+255),f,b
 22674  00ADEC  0E00               	movlw	0
 22675  00ADEE  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22676  00ADF0  0EBC               	movlw	low (_display_content+60)
 22677  00ADF2  25BC               	addwf	??_display_prepare& (0+255),w,b
 22678  00ADF4  6ED9               	movwf	fsr2l,c
 22679  00ADF6  0E02               	movlw	high (_display_content+60)
 22680  00ADF8  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22681  00ADFA  6EDA               	movwf	fsr2h,c
 22682  00ADFC  0E2F               	movlw	47
 22683  00ADFE  6EDF               	movwf	indf2,c
 22684                           
 22685                           ;display.c: 493: display_content[3][13+cntr] = 's';
 22686  00AE00  51C9               	movf	display_prepare@cntr& (0+255),w,b
 22687  00AE02  6FBC               	movwf	??_display_prepare& (0+255),b
 22688  00AE04  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22689  00AE06  0E0D               	movlw	13
 22690  00AE08  27BC               	addwf	??_display_prepare& (0+255),f,b
 22691  00AE0A  0E00               	movlw	0
 22692  00AE0C  23BD               	addwfc	(??_display_prepare+1)& (0+255),f,b
 22693  00AE0E  0EBC               	movlw	low (_display_content+60)
 22694  00AE10  25BC               	addwf	??_display_prepare& (0+255),w,b
 22695  00AE12  6ED9               	movwf	fsr2l,c
 22696  00AE14  0E02               	movlw	high (_display_content+60)
 22697  00AE16  21BD               	addwfc	(??_display_prepare+1)& (0+255),w,b
 22698  00AE18  6EDA               	movwf	fsr2h,c
 22699  00AE1A  0E73               	movlw	115
 22700  00AE1C                     L27:
 22701  00AE1C  6EDF               	movwf	indf2,c
 22702                           
 22703                           ;display.c: 494: break;
 22704  00AE1E  D095               	goto	l1337
 22705  00AE20                     
 22706                           ; BSR set to: 0
 22707                           ;display.c: 497: _display_clear();
 22708                           
 22709                           ; BSR set to: 0
 22710  00AE20  EC72  F09C         	call	__display_clear	;wreg free
 22711                           
 22712                           ;display.c: 498: _display_itoa((int16_t) (os.encoder1Count), 0, display_content[0]);
 22713  00AE24  0101               	movlb	1	; () banked
 22714  00AE26  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 22715  00AE28  0100               	movlb	0	; () banked
 22716  00AE2A  6F95               	movwf	__display_itoa@value& (0+255),b
 22717  00AE2C  6B96               	clrf	(__display_itoa@value+1)& (0+255),b
 22718  00AE2E  BF95               	btfsc	__display_itoa@value& (0+255),7,b
 22719  00AE30  0796               	decf	(__display_itoa@value+1)& (0+255),f,b
 22720  00AE32  0E00               	movlw	0
 22721  00AE34  6F97               	movwf	__display_itoa@decimals& (0+255),b
 22722  00AE36  0E80               	movlw	low _display_content
 22723  00AE38  6F98               	movwf	__display_itoa@text& (0+255),b
 22724  00AE3A  0E02               	movlw	high _display_content
 22725  00AE3C  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 22726  00AE3E  EC17  F070         	call	__display_itoa	;wreg free
 22727                           
 22728                           ;display.c: 499: if(PORTEbits.RE2)
 22729  00AE42  A484               	btfss	3972,2,c	;volatile
 22730  00AE44  D002               	goto	l1421
 22731                           
 22732                           ;display.c: 500: display_content[0][8] = 'H';
 22733  00AE46  0E48               	movlw	72
 22734  00AE48  D001               	goto	L31
 22735  00AE4A                     l1421:
 22736                           
 22737                           ;display.c: 501: else;display.c: 502: display_content[0][8] = 'L';
 22738                           
 22739                           ; BSR set to: 2
 22740  00AE4A  0E4C               	movlw	76
 22741  00AE4C                     L31:
 22742  00AE4C  0102               	movlb	2	; () banked
 22743  00AE4E  6F88               	movwf	(_display_content+8)& (0+255),b
 22744                           
 22745                           ; BSR set to: 2
 22746                           ;display.c: 503: if(PORTEbits.RE0)
 22747                           
 22748                           ; BSR set to: 2
 22749  00AE50  A084               	btfss	3972,0,c	;volatile
 22750  00AE52  D002               	goto	l1423
 22751                           
 22752                           ; BSR set to: 2
 22753                           ;display.c: 504: display_content[0][9] = 'H';
 22754  00AE54  0E48               	movlw	72
 22755  00AE56  D001               	goto	L32
 22756  00AE58                     l1423:
 22757                           
 22758                           ; BSR set to: 2
 22759                           ;display.c: 505: else;display.c: 506: display_content[0][9] = 'L';
 22760                           
 22761                           ; BSR set to: 2
 22762  00AE58  0E4C               	movlw	76
 22763  00AE5A                     L32:
 22764  00AE5A  6F89               	movwf	(_display_content+9)& (0+255),b
 22765                           
 22766                           ; BSR set to: 2
 22767                           ;display.c: 507: _display_itoa((int16_t) (os.button1), 0, display_content[1]);
 22768                           
 22769                           ; BSR set to: 2
 22770  00AE5C  0101               	movlb	1	; () banked
 22771  00AE5E  5177               	movf	(_os+4)& (0+255),w,b	;volatile
 22772  00AE60  0100               	movlb	0	; () banked
 22773  00AE62  6F95               	movwf	__display_itoa@value& (0+255),b
 22774  00AE64  6B96               	clrf	(__display_itoa@value+1)& (0+255),b
 22775  00AE66  BF95               	btfsc	__display_itoa@value& (0+255),7,b
 22776  00AE68  0796               	decf	(__display_itoa@value+1)& (0+255),f,b
 22777  00AE6A  0E00               	movlw	0
 22778  00AE6C  6F97               	movwf	__display_itoa@decimals& (0+255),b
 22779  00AE6E  0E94               	movlw	low (_display_content+20)
 22780  00AE70  6F98               	movwf	__display_itoa@text& (0+255),b
 22781  00AE72  0E02               	movlw	high (_display_content+20)
 22782  00AE74  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 22783  00AE76  EC17  F070         	call	__display_itoa	;wreg free
 22784                           
 22785                           ;display.c: 508: if(PORTEbits.RE1)
 22786  00AE7A  A284               	btfss	3972,1,c	;volatile
 22787  00AE7C  D002               	goto	l1425
 22788                           
 22789                           ;display.c: 509: display_content[1][8] = 'H';
 22790  00AE7E  0E48               	movlw	72
 22791  00AE80  D001               	goto	L33
 22792  00AE82                     l1425:
 22793                           
 22794                           ;display.c: 510: else;display.c: 511: display_content[1][8] = 'L';
 22795                           
 22796                           ; BSR set to: 2
 22797  00AE82  0E4C               	movlw	76
 22798  00AE84                     L33:
 22799  00AE84  0102               	movlb	2	; () banked
 22800  00AE86  6F9C               	movwf	(_display_content+28)& (0+255),b
 22801                           
 22802                           ; BSR set to: 2
 22803                           ;display.c: 512: _display_itoa((int16_t) (os.encoder2Count), 0, display_content[2]);
 22804                           
 22805                           ; BSR set to: 2
 22806  00AE88  0101               	movlb	1	; () banked
 22807  00AE8A  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 22808  00AE8C  0100               	movlb	0	; () banked
 22809  00AE8E  6F95               	movwf	__display_itoa@value& (0+255),b
 22810  00AE90  6B96               	clrf	(__display_itoa@value+1)& (0+255),b
 22811  00AE92  BF95               	btfsc	__display_itoa@value& (0+255),7,b
 22812  00AE94  0796               	decf	(__display_itoa@value+1)& (0+255),f,b
 22813  00AE96  0E00               	movlw	0
 22814  00AE98  6F97               	movwf	__display_itoa@decimals& (0+255),b
 22815  00AE9A  0EA8               	movlw	low (_display_content+40)
 22816  00AE9C  6F98               	movwf	__display_itoa@text& (0+255),b
 22817  00AE9E  0E02               	movlw	high (_display_content+40)
 22818  00AEA0  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 22819  00AEA2  EC17  F070         	call	__display_itoa	;wreg free
 22820                           
 22821                           ;display.c: 513: if(PORTAbits.RA0)
 22822  00AEA6  A080               	btfss	3968,0,c	;volatile
 22823  00AEA8  D002               	goto	l1427
 22824                           
 22825                           ;display.c: 514: display_content[2][8] = 'H';
 22826  00AEAA  0E48               	movlw	72
 22827  00AEAC  D001               	goto	L34
 22828  00AEAE                     l1427:
 22829                           
 22830                           ;display.c: 515: else;display.c: 516: display_content[2][8] = 'L';
 22831                           
 22832                           ; BSR set to: 2
 22833  00AEAE  0E4C               	movlw	76
 22834  00AEB0                     L34:
 22835  00AEB0  0102               	movlb	2	; () banked
 22836  00AEB2  6FB0               	movwf	(_display_content+48)& (0+255),b
 22837                           
 22838                           ; BSR set to: 2
 22839                           ;display.c: 517: if(PORTAbits.RA2)
 22840                           
 22841                           ; BSR set to: 2
 22842  00AEB4  A480               	btfss	3968,2,c	;volatile
 22843  00AEB6  D002               	goto	l1429
 22844                           
 22845                           ; BSR set to: 2
 22846                           ;display.c: 518: display_content[2][9] = 'H';
 22847  00AEB8  0E48               	movlw	72
 22848  00AEBA  D001               	goto	L35
 22849  00AEBC                     l1429:
 22850                           
 22851                           ; BSR set to: 2
 22852                           ;display.c: 519: else;display.c: 520: display_content[2][9] = 'L';
 22853                           
 22854                           ; BSR set to: 2
 22855  00AEBC  0E4C               	movlw	76
 22856  00AEBE                     L35:
 22857  00AEBE  6FB1               	movwf	(_display_content+49)& (0+255),b
 22858                           
 22859                           ; BSR set to: 2
 22860                           ;display.c: 521: _display_itoa((int16_t) (os.button2), 0, display_content[3]);
 22861                           
 22862                           ; BSR set to: 2
 22863  00AEC0  0101               	movlb	1	; () banked
 22864  00AEC2  5179               	movf	(_os+6)& (0+255),w,b	;volatile
 22865  00AEC4  0100               	movlb	0	; () banked
 22866  00AEC6  6F95               	movwf	__display_itoa@value& (0+255),b
 22867  00AEC8  6B96               	clrf	(__display_itoa@value+1)& (0+255),b
 22868  00AECA  BF95               	btfsc	__display_itoa@value& (0+255),7,b
 22869  00AECC  0796               	decf	(__display_itoa@value+1)& (0+255),f,b
 22870  00AECE  0E00               	movlw	0
 22871  00AED0  6F97               	movwf	__display_itoa@decimals& (0+255),b
 22872  00AED2  0EBC               	movlw	low (_display_content+60)
 22873  00AED4  6F98               	movwf	__display_itoa@text& (0+255),b
 22874  00AED6  0E02               	movlw	high (_display_content+60)
 22875  00AED8  6F99               	movwf	(__display_itoa@text+1)& (0+255),b
 22876  00AEDA  EC17  F070         	call	__display_itoa	;wreg free
 22877                           
 22878                           ;display.c: 522: if(PORTAbits.RA1)
 22879  00AEDE  A280               	btfss	3968,1,c	;volatile
 22880  00AEE0  D002               	goto	l1431
 22881                           
 22882                           ;display.c: 523: display_content[3][8] = 'H';
 22883  00AEE2  0E48               	movlw	72
 22884  00AEE4  D001               	goto	L28
 22885  00AEE6                     l1431:
 22886                           
 22887                           ;display.c: 524: else;display.c: 525: display_content[3][8] = 'L';
 22888                           
 22889                           ; BSR set to: 2
 22890  00AEE6  0E4C               	movlw	76
 22891  00AEE8                     L28:
 22892  00AEE8  0102               	movlb	2	; () banked
 22893  00AEEA  6FC4               	movwf	(_display_content+68)& (0+255),b
 22894                           
 22895                           ; BSR set to: 2
 22896                           ;display.c: 527: }
 22897                           
 22898                           ; BSR set to: 2
 22899                           ;display.c: 526: break;
 22900  00AEEC  D02E               	goto	l1337
 22901  00AEEE                     l1328:
 22902                           
 22903                           ; BSR set to: 2
 22904  00AEEE  0101               	movlb	1	; () banked
 22905  00AEF0  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 22906  00AEF2  0BF0               	andlw	240
 22907  00AEF4  0100               	movlb	0	; () banked
 22908  00AEF6  6FBC               	movwf	??_display_prepare& (0+255),b
 22909  00AEF8  6BBD               	clrf	(??_display_prepare+1)& (0+255),b
 22910                           
 22911                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22912                           ; Switch size 1, requested type "space"
 22913                           ; Number of cases is 1, Range of values is 0 to 0
 22914                           ; switch strategies available:
 22915                           ; Name         Instructions Cycles
 22916                           ; simple_byte            4     3 (average)
 22917                           ;	Chosen strategy is simple_byte
 22918  00AEFA  51BD               	movf	(??_display_prepare+1)& (0+255),w,b
 22919  00AEFC  0A00               	xorlw	0	; case 0
 22920  00AEFE  A4D8               	btfss	status,2,c
 22921  00AF00  D024               	goto	l1337
 22922                           
 22923                           ; BSR set to: 0
 22924                           ; Switch size 1, requested type "space"
 22925                           ; Number of cases is 10, Range of values is 0 to 240
 22926                           ; switch strategies available:
 22927                           ; Name         Instructions Cycles
 22928                           ; simple_byte           31    16 (average)
 22929                           ;	Chosen strategy is simple_byte
 22930  00AF02  51BC               	movf	??_display_prepare& (0+255),w,b
 22931  00AF04  0A00               	xorlw	0	; case 0
 22932  00AF06  B4D8               	btfsc	status,2,c
 22933  00AF08  EF83  F051         	goto	l1329
 22934  00AF0C  0A10               	xorlw	16	; case 16
 22935  00AF0E  B4D8               	btfsc	status,2,c
 22936  00AF10  EFB2  F051         	goto	l1338
 22937  00AF14  0A30               	xorlw	48	; case 32
 22938  00AF16  B4D8               	btfsc	status,2,c
 22939  00AF18  EF04  F052         	goto	l1348
 22940  00AF1C  0A10               	xorlw	16	; case 48
 22941  00AF1E  B4D8               	btfsc	status,2,c
 22942  00AF20  EF28  F052         	goto	l1353
 22943  00AF24  0A70               	xorlw	112	; case 64
 22944  00AF26  B4D8               	btfsc	status,2,c
 22945  00AF28  EF99  F052         	goto	l1362
 22946  00AF2C  0A10               	xorlw	16	; case 80
 22947  00AF2E  B4D8               	btfsc	status,2,c
 22948  00AF30  D467               	goto	l1377
 22949  00AF32  0A30               	xorlw	48	; case 96
 22950  00AF34  B4D8               	btfsc	status,2,c
 22951  00AF36  D517               	goto	l1390
 22952  00AF38  0A10               	xorlw	16	; case 112
 22953  00AF3A  B4D8               	btfsc	status,2,c
 22954  00AF3C  D616               	goto	l1404
 22955  00AF3E  0AF0               	xorlw	240	; case 128
 22956  00AF40  B4D8               	btfsc	status,2,c
 22957  00AF42  D663               	goto	l1408
 22958  00AF44  0A70               	xorlw	112	; case 240
 22959  00AF46  B4D8               	btfsc	status,2,c
 22960  00AF48  D76B               	goto	l1420
 22961  00AF4A                     l1337:
 22962                           
 22963                           ;display.c: 529: if(!PORTDbits.RD2)
 22964  00AF4A  B483               	btfsc	3971,2,c	;volatile
 22965  00AF4C  0012               	return	
 22966                           
 22967                           ;display.c: 530: {;display.c: 531: display_content[0][0] = 'E';
 22968  00AF4E  0E45               	movlw	69
 22969  00AF50  0102               	movlb	2	; () banked
 22970  00AF52  6F80               	movwf	_display_content& (0+255),b
 22971                           
 22972                           ;display.c: 532: display_content[0][1] = 'R';
 22973  00AF54  0E52               	movlw	82
 22974  00AF56  6F81               	movwf	(_display_content+1)& (0+255),b
 22975                           
 22976                           ;display.c: 533: display_content[0][2] = 'R';
 22977  00AF58  0E52               	movlw	82
 22978  00AF5A  6F82               	movwf	(_display_content+2)& (0+255),b
 22979                           
 22980                           ;display.c: 534: display_content[0][3] = 'O';
 22981  00AF5C  0E4F               	movlw	79
 22982  00AF5E  6F83               	movwf	(_display_content+3)& (0+255),b
 22983                           
 22984                           ;display.c: 535: display_content[0][4] = 'R';
 22985  00AF60  0E52               	movlw	82
 22986  00AF62  6F84               	movwf	(_display_content+4)& (0+255),b
 22987  00AF64  0012               	return	
 22988  00AF66                     __end_of_display_prepare:
 22989                           	opt stack 0
 22990                           tblptru	equ	0xFF8
 22991                           tblptrh	equ	0xFF7
 22992                           tblptrl	equ	0xFF6
 22993                           tablat	equ	0xFF5
 22994                           prodh	equ	0xFF4
 22995                           prodl	equ	0xFF3
 22996                           intcon	equ	0xFF2
 22997                           postinc0	equ	0xFEE
 22998                           wreg	equ	0xFE8
 22999                           indf1	equ	0xFE7
 23000                           postinc1	equ	0xFE6
 23001                           postdec1	equ	0xFE5
 23002                           plusw1	equ	0xFE3
 23003                           fsr1h	equ	0xFE2
 23004                           fsr1l	equ	0xFE1
 23005                           indf2	equ	0xFDF
 23006                           postinc2	equ	0xFDE
 23007                           postdec2	equ	0xFDD
 23008                           plusw2	equ	0xFDB
 23009                           fsr2h	equ	0xFDA
 23010                           fsr2l	equ	0xFD9
 23011                           status	equ	0xFD8
 23012                           
 23013 ;; *************** function _motor_speed_from_index *****************
 23014 ;; Defined at:
 23015 ;;		line 89 in file "motor.c"
 23016 ;; Parameters:    Size  Location     Type
 23017 ;;  speed_index     2   51[BANK0 ] unsigned int 
 23018 ;; Auto vars:     Size  Location     Type
 23019 ;;		None
 23020 ;; Return value:  Size  Location     Type
 23021 ;;                  2   51[BANK0 ] unsigned int 
 23022 ;; Registers used:
 23023 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23024 ;; Tracked objects:
 23025 ;;		On entry : 0/0
 23026 ;;		On exit  : 0/0
 23027 ;;		Unchanged: 0/0
 23028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 23029 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23033 ;;Total ram usage:        2 bytes
 23034 ;; Hardware stack levels used:    1
 23035 ;; Hardware stack levels required when called:   12
 23036 ;; This function calls:
 23037 ;;		__motor_get_speed_in_degrees
 23038 ;; This function is called by:
 23039 ;;		_display_prepare
 23040 ;; This function uses a non-reentrant model
 23041 ;;
 23042                           
 23043                           	psect	text83
 23044  014278                     __ptext83:
 23045                           	opt stack 0
 23046  014278                     _motor_speed_from_index:
 23047                           	opt stack 17
 23048                           
 23049                           ;motor.c: 91: return _motor_get_speed_in_degrees(speed_index);
 23050                           
 23051                           ;incstack = 0
 23052  014278  C093  F087         	movff	motor_speed_from_index@speed_index,__motor_get_speed_in_degrees@speed_index
 23053  01427C  C094  F088         	movff	motor_speed_from_index@speed_index+1,__motor_get_speed_in_degrees@speed_index+1
 23054  014280  EC6A  F07D         	call	__motor_get_speed_in_degrees	;wreg free
 23055  014284  C087  F093         	movff	?__motor_get_speed_in_degrees,?_motor_speed_from_index
 23056  014288  C088  F094         	movff	?__motor_get_speed_in_degrees+1,?_motor_speed_from_index+1
 23057  01428C  0012               	return	
 23058  01428E                     __end_of_motor_speed_from_index:
 23059                           	opt stack 0
 23060                           tblptru	equ	0xFF8
 23061                           tblptrh	equ	0xFF7
 23062                           tblptrl	equ	0xFF6
 23063                           tablat	equ	0xFF5
 23064                           prodh	equ	0xFF4
 23065                           prodl	equ	0xFF3
 23066                           intcon	equ	0xFF2
 23067                           postinc0	equ	0xFEE
 23068                           wreg	equ	0xFE8
 23069                           indf1	equ	0xFE7
 23070                           postinc1	equ	0xFE6
 23071                           postdec1	equ	0xFE5
 23072                           plusw1	equ	0xFE3
 23073                           fsr1h	equ	0xFE2
 23074                           fsr1l	equ	0xFE1
 23075                           indf2	equ	0xFDF
 23076                           postinc2	equ	0xFDE
 23077                           postdec2	equ	0xFDD
 23078                           plusw2	equ	0xFDB
 23079                           fsr2h	equ	0xFDA
 23080                           fsr2l	equ	0xFD9
 23081                           status	equ	0xFD8
 23082                           
 23083 ;; *************** function __motor_get_speed_in_degrees *****************
 23084 ;; Defined at:
 23085 ;;		line 50 in file "motor.c"
 23086 ;; Parameters:    Size  Location     Type
 23087 ;;  speed_index     2   39[BANK0 ] unsigned int 
 23088 ;; Auto vars:     Size  Location     Type
 23089 ;;  lookup          4   47[BANK0 ] unsigned long 
 23090 ;;  speed           4   43[BANK0 ] float 
 23091 ;; Return value:  Size  Location     Type
 23092 ;;                  2   39[BANK0 ] unsigned int 
 23093 ;; Registers used:
 23094 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23095 ;; Tracked objects:
 23096 ;;		On entry : 0/0
 23097 ;;		On exit  : 0/0
 23098 ;;		Unchanged: 0/0
 23099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 23100 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23101 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23102 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23103 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23104 ;;Total ram usage:       12 bytes
 23105 ;; Hardware stack levels used:    1
 23106 ;; Hardware stack levels required when called:   11
 23107 ;; This function calls:
 23108 ;;		___fldiv
 23109 ;;		___fltol
 23110 ;;		___lmul
 23111 ;;		___xxtofl
 23112 ;; This function is called by:
 23113 ;;		_motor_speed_from_index
 23114 ;;		_motor_get_maximum_speed
 23115 ;;		_motor_get_current_speed
 23116 ;; This function uses a non-reentrant model
 23117 ;;
 23118                           
 23119                           	psect	text84
 23120  00FAD4                     __ptext84:
 23121                           	opt stack 0
 23122  00FAD4                     __motor_get_speed_in_degrees:
 23123                           	opt stack 17
 23124                           
 23125                           ;motor.c: 52: uint32_t lookup;;motor.c: 53: float speed;;motor.c: 55: lookup = motor_spe
      +                          ed_lookup[speed_index];
 23126                           
 23127                           ;incstack = 0
 23128  00FAD4  90D8               	bcf	status,0,c
 23129  00FAD6  0100               	movlb	0	; () banked
 23130  00FAD8  3587               	rlcf	__motor_get_speed_in_degrees@speed_index& (0+255),w,b
 23131  00FADA  6EF6               	movwf	tblptrl,c
 23132  00FADC  3588               	rlcf	(__motor_get_speed_in_degrees@speed_index+1)& (0+255),w,b
 23133  00FADE  6EF7               	movwf	tblptrh,c
 23134  00FAE0  0E93               	movlw	low _motor_speed_lookup
 23135  00FAE2  26F6               	addwf	tblptrl,f,c
 23136  00FAE4  0E90               	movlw	high _motor_speed_lookup
 23137  00FAE6  22F7               	addwfc	tblptrh,f,c
 23138  00FAE8                     	if	1	;There are 3 active tblptr bytes
 23139  00FAE8  6AF8               	clrf	tblptru,c
 23140  00FAEA  0E00               	movlw	low (__mediumconst shr (0+16))
 23141  00FAEC  22F8               	addwfc	tblptru,f,c
 23142  00FAEE                     	endif
 23143  00FAEE  0009               	tblrd		*+
 23144  00FAF0  CFF5 F089          	movff	tablat,??__motor_get_speed_in_degrees
 23145  00FAF4  0009               	tblrd		*+
 23146  00FAF6  CFF5 F08A          	movff	tablat,??__motor_get_speed_in_degrees+1
 23147  00FAFA  C089  F08F         	movff	??__motor_get_speed_in_degrees,__motor_get_speed_in_degrees@lookup
 23148  00FAFE  C08A  F090         	movff	??__motor_get_speed_in_degrees+1,__motor_get_speed_in_degrees@lookup+1
 23149  00FB02  6B91               	clrf	(__motor_get_speed_in_degrees@lookup+2)& (0+255),b
 23150  00FB04  6B92               	clrf	(__motor_get_speed_in_degrees@lookup+3)& (0+255),b
 23151                           
 23152                           ; BSR set to: 0
 23153                           ;motor.c: 56: lookup *= 16;
 23154  00FB06  0E04               	movlw	4
 23155  00FB08                     u21285:
 23156  00FB08  90D8               	bcf	status,0,c
 23157  00FB0A  378F               	rlcf	__motor_get_speed_in_degrees@lookup& (0+255),f,b
 23158  00FB0C  3790               	rlcf	(__motor_get_speed_in_degrees@lookup+1)& (0+255),f,b
 23159  00FB0E  3791               	rlcf	(__motor_get_speed_in_degrees@lookup+2)& (0+255),f,b
 23160  00FB10  3792               	rlcf	(__motor_get_speed_in_degrees@lookup+3)& (0+255),f,b
 23161  00FB12  2EE8               	decfsz	wreg,f,c
 23162  00FB14  D7F9               	goto	u21285
 23163                           
 23164                           ; BSR set to: 0
 23165                           ;motor.c: 57: lookup *= 360;
 23166  00FB16  C08F  F060         	movff	__motor_get_speed_in_degrees@lookup,___lmul@multiplier
 23167  00FB1A  C090  F061         	movff	__motor_get_speed_in_degrees@lookup+1,___lmul@multiplier+1
 23168  00FB1E  C091  F062         	movff	__motor_get_speed_in_degrees@lookup+2,___lmul@multiplier+2
 23169  00FB22  C092  F063         	movff	__motor_get_speed_in_degrees@lookup+3,___lmul@multiplier+3
 23170  00FB26  0E68               	movlw	104
 23171  00FB28  6F64               	movwf	___lmul@multiplicand& (0+255),b
 23172  00FB2A  0E01               	movlw	1
 23173  00FB2C  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 23174  00FB2E  0E00               	movlw	0
 23175  00FB30  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 23176  00FB32  0E00               	movlw	0
 23177  00FB34  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 23178  00FB36  EC2F  F09A         	call	___lmul	;wreg free
 23179  00FB3A  C060  F08F         	movff	?___lmul,__motor_get_speed_in_degrees@lookup
 23180  00FB3E  C061  F090         	movff	?___lmul+1,__motor_get_speed_in_degrees@lookup+1
 23181  00FB42  C062  F091         	movff	?___lmul+2,__motor_get_speed_in_degrees@lookup+2
 23182  00FB46  C063  F092         	movff	?___lmul+3,__motor_get_speed_in_degrees@lookup+3
 23183                           
 23184                           ;motor.c: 58: lookup *= 100;
 23185  00FB4A  C08F  F060         	movff	__motor_get_speed_in_degrees@lookup,___lmul@multiplier
 23186  00FB4E  C090  F061         	movff	__motor_get_speed_in_degrees@lookup+1,___lmul@multiplier+1
 23187  00FB52  C091  F062         	movff	__motor_get_speed_in_degrees@lookup+2,___lmul@multiplier+2
 23188  00FB56  C092  F063         	movff	__motor_get_speed_in_degrees@lookup+3,___lmul@multiplier+3
 23189  00FB5A  0E64               	movlw	100
 23190  00FB5C  0100               	movlb	0	; () banked
 23191  00FB5E  6F64               	movwf	___lmul@multiplicand& (0+255),b
 23192  00FB60  0E00               	movlw	0
 23193  00FB62  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 23194  00FB64  0E00               	movlw	0
 23195  00FB66  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 23196  00FB68  0E00               	movlw	0
 23197  00FB6A  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 23198  00FB6C  EC2F  F09A         	call	___lmul	;wreg free
 23199  00FB70  C060  F08F         	movff	?___lmul,__motor_get_speed_in_degrees@lookup
 23200  00FB74  C061  F090         	movff	?___lmul+1,__motor_get_speed_in_degrees@lookup+1
 23201  00FB78  C062  F091         	movff	?___lmul+2,__motor_get_speed_in_degrees@lookup+2
 23202  00FB7C  C063  F092         	movff	?___lmul+3,__motor_get_speed_in_degrees@lookup+3
 23203                           
 23204                           ;motor.c: 60: speed = (float) lookup;
 23205  00FB80  C08F  F060         	movff	__motor_get_speed_in_degrees@lookup,___xxtofl@val
 23206  00FB84  C090  F061         	movff	__motor_get_speed_in_degrees@lookup+1,___xxtofl@val+1
 23207  00FB88  C091  F062         	movff	__motor_get_speed_in_degrees@lookup+2,___xxtofl@val+2
 23208  00FB8C  C092  F063         	movff	__motor_get_speed_in_degrees@lookup+3,___xxtofl@val+3
 23209  00FB90  0E00               	movlw	0
 23210  00FB92  ECE7  F07A         	call	___xxtofl
 23211  00FB96  C060  F08B         	movff	?___xxtofl,__motor_get_speed_in_degrees@speed
 23212  00FB9A  C061  F08C         	movff	?___xxtofl+1,__motor_get_speed_in_degrees@speed+1
 23213  00FB9E  C062  F08D         	movff	?___xxtofl+2,__motor_get_speed_in_degrees@speed+2
 23214  00FBA2  C063  F08E         	movff	?___xxtofl+3,__motor_get_speed_in_degrees@speed+3
 23215                           
 23216                           ;motor.c: 61: speed /= config.full_circle_in_steps;
 23217  00FBA6  C08B  F06E         	movff	__motor_get_speed_in_degrees@speed,___fldiv@b
 23218  00FBAA  C08C  F06F         	movff	__motor_get_speed_in_degrees@speed+1,___fldiv@b+1
 23219  00FBAE  C08D  F070         	movff	__motor_get_speed_in_degrees@speed+2,___fldiv@b+2
 23220  00FBB2  C08E  F071         	movff	__motor_get_speed_in_degrees@speed+3,___fldiv@b+3
 23221  00FBB6  C1A3  F060         	movff	_config,___xxtofl@val
 23222  00FBBA  C1A4  F061         	movff	_config+1,___xxtofl@val+1
 23223  00FBBE  C1A5  F062         	movff	_config+2,___xxtofl@val+2
 23224  00FBC2  C1A6  F063         	movff	_config+3,___xxtofl@val+3
 23225  00FBC6  0E00               	movlw	0
 23226  00FBC8  ECE7  F07A         	call	___xxtofl
 23227  00FBCC  C060  F072         	movff	?___xxtofl,___fldiv@a
 23228  00FBD0  C061  F073         	movff	?___xxtofl+1,___fldiv@a+1
 23229  00FBD4  C062  F074         	movff	?___xxtofl+2,___fldiv@a+2
 23230  00FBD8  C063  F075         	movff	?___xxtofl+3,___fldiv@a+3
 23231  00FBDC  ECFD  F069         	call	___fldiv	;wreg free
 23232  00FBE0  C06E  F08B         	movff	?___fldiv,__motor_get_speed_in_degrees@speed
 23233  00FBE4  C06F  F08C         	movff	?___fldiv+1,__motor_get_speed_in_degrees@speed+1
 23234  00FBE8  C070  F08D         	movff	?___fldiv+2,__motor_get_speed_in_degrees@speed+2
 23235  00FBEC  C071  F08E         	movff	?___fldiv+3,__motor_get_speed_in_degrees@speed+3
 23236                           
 23237                           ;motor.c: 64: return (uint16_t) speed;
 23238  00FBF0  C08B  F060         	movff	__motor_get_speed_in_degrees@speed,___fltol@f1
 23239  00FBF4  C08C  F061         	movff	__motor_get_speed_in_degrees@speed+1,___fltol@f1+1
 23240  00FBF8  C08D  F062         	movff	__motor_get_speed_in_degrees@speed+2,___fltol@f1+2
 23241  00FBFC  C08E  F063         	movff	__motor_get_speed_in_degrees@speed+3,___fltol@f1+3
 23242  00FC00  EC28  F089         	call	___fltol	;wreg free
 23243  00FC04  C060  F087         	movff	?___fltol,?__motor_get_speed_in_degrees
 23244  00FC08  C061  F088         	movff	?___fltol+1,?__motor_get_speed_in_degrees+1
 23245  00FC0C  0012               	return	
 23246  00FC0E                     __end_of__motor_get_speed_in_degrees:
 23247                           	opt stack 0
 23248                           tblptru	equ	0xFF8
 23249                           tblptrh	equ	0xFF7
 23250                           tblptrl	equ	0xFF6
 23251                           tablat	equ	0xFF5
 23252                           prodh	equ	0xFF4
 23253                           prodl	equ	0xFF3
 23254                           intcon	equ	0xFF2
 23255                           postinc0	equ	0xFEE
 23256                           wreg	equ	0xFE8
 23257                           indf1	equ	0xFE7
 23258                           postinc1	equ	0xFE6
 23259                           postdec1	equ	0xFE5
 23260                           plusw1	equ	0xFE3
 23261                           fsr1h	equ	0xFE2
 23262                           fsr1l	equ	0xFE1
 23263                           indf2	equ	0xFDF
 23264                           postinc2	equ	0xFDE
 23265                           postdec2	equ	0xFDD
 23266                           plusw2	equ	0xFDB
 23267                           fsr2h	equ	0xFDA
 23268                           fsr2l	equ	0xFD9
 23269                           status	equ	0xFD8
 23270                           
 23271 ;; *************** function ___lmul *****************
 23272 ;; Defined at:
 23273 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul32.c"
 23274 ;; Parameters:    Size  Location     Type
 23275 ;;  multiplier      4    0[BANK0 ] unsigned long 
 23276 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 23277 ;; Auto vars:     Size  Location     Type
 23278 ;;  product         4    8[BANK0 ] unsigned long 
 23279 ;; Return value:  Size  Location     Type
 23280 ;;                  4    0[BANK0 ] unsigned long 
 23281 ;; Registers used:
 23282 ;;		wreg, status,2, status,0
 23283 ;; Tracked objects:
 23284 ;;		On entry : 0/0
 23285 ;;		On exit  : 0/0
 23286 ;;		Unchanged: 0/0
 23287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 23288 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23289 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23291 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23292 ;;Total ram usage:       12 bytes
 23293 ;; Hardware stack levels used:    1
 23294 ;; Hardware stack levels required when called:   10
 23295 ;; This function calls:
 23296 ;;		Nothing
 23297 ;; This function is called by:
 23298 ;;		__motor_get_speed_in_degrees
 23299 ;; This function uses a non-reentrant model
 23300 ;;
 23301                           
 23302                           	psect	text85
 23303  01345E                     __ptext85:
 23304                           	opt stack 0
 23305  01345E                     ___lmul:
 23306                           	opt stack 17
 23307                           
 23308                           ;incstack = 0
 23309  01345E  0E00               	movlw	0
 23310  013460  0100               	movlb	0	; () banked
 23311  013462  6F68               	movwf	___lmul@product& (0+255),b
 23312  013464  0E00               	movlw	0
 23313  013466  6F69               	movwf	(___lmul@product+1)& (0+255),b
 23314  013468  0E00               	movlw	0
 23315  01346A  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 23316  01346C  0E00               	movlw	0
 23317  01346E  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 23318  013470                     
 23319                           ; BSR set to: 0
 23320                           
 23321                           ; BSR set to: 0
 23322  013470  A160               	btfss	___lmul@multiplier& (0+255),0,b
 23323  013472  D008               	goto	l2798
 23324                           
 23325                           ; BSR set to: 0
 23326  013474  5164               	movf	___lmul@multiplicand& (0+255),w,b
 23327  013476  2768               	addwf	___lmul@product& (0+255),f,b
 23328  013478  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 23329  01347A  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 23330  01347C  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 23331  01347E  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 23332  013480  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 23333  013482  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 23334  013484                     l2798:
 23335                           
 23336                           ; BSR set to: 0
 23337                           
 23338                           ; BSR set to: 0
 23339  013484  90D8               	bcf	status,0,c
 23340  013486  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 23341  013488  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 23342  01348A  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 23343  01348C  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 23344                           
 23345                           ; BSR set to: 0
 23346  01348E  90D8               	bcf	status,0,c
 23347  013490  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 23348  013492  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 23349  013494  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 23350  013496  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 23351  013498  5160               	movf	___lmul@multiplier& (0+255),w,b
 23352  01349A  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 23353  01349C  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 23354  01349E  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 23355  0134A0  A4D8               	btfss	status,2,c
 23356  0134A2  D7E6               	goto	l2797
 23357                           
 23358                           ; BSR set to: 0
 23359  0134A4  C068  F060         	movff	___lmul@product,?___lmul
 23360  0134A8  C069  F061         	movff	___lmul@product+1,?___lmul+1
 23361  0134AC  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 23362  0134B0  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 23363                           
 23364                           ; BSR set to: 0
 23365  0134B4  0012               	return		;funcret
 23366  0134B6                     __end_of___lmul:
 23367                           	opt stack 0
 23368                           tblptru	equ	0xFF8
 23369                           tblptrh	equ	0xFF7
 23370                           tblptrl	equ	0xFF6
 23371                           tablat	equ	0xFF5
 23372                           prodh	equ	0xFF4
 23373                           prodl	equ	0xFF3
 23374                           intcon	equ	0xFF2
 23375                           postinc0	equ	0xFEE
 23376                           wreg	equ	0xFE8
 23377                           indf1	equ	0xFE7
 23378                           postinc1	equ	0xFE6
 23379                           postdec1	equ	0xFE5
 23380                           plusw1	equ	0xFE3
 23381                           fsr1h	equ	0xFE2
 23382                           fsr1l	equ	0xFE1
 23383                           indf2	equ	0xFDF
 23384                           postinc2	equ	0xFDE
 23385                           postdec2	equ	0xFDD
 23386                           plusw2	equ	0xFDB
 23387                           fsr2h	equ	0xFDA
 23388                           fsr2l	equ	0xFD9
 23389                           status	equ	0xFD8
 23390                           
 23391 ;; *************** function ___fldiv *****************
 23392 ;; Defined at:
 23393 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcdiv.c"
 23394 ;; Parameters:    Size  Location     Type
 23395 ;;  b               4   14[BANK0 ] unsigned long 
 23396 ;;  a               4   18[BANK0 ] unsigned long 
 23397 ;; Auto vars:     Size  Location     Type
 23398 ;;  grs             4   33[BANK0 ] unsigned long 
 23399 ;;  rem             4   26[BANK0 ] unsigned long 
 23400 ;;  new_exp         2   31[BANK0 ] int 
 23401 ;;  aexp            1   38[BANK0 ] unsigned char 
 23402 ;;  bexp            1   37[BANK0 ] unsigned char 
 23403 ;;  sign            1   30[BANK0 ] unsigned char 
 23404 ;; Return value:  Size  Location     Type
 23405 ;;                  4   14[BANK0 ] unsigned char 
 23406 ;; Registers used:
 23407 ;;		wreg, status,2, status,0
 23408 ;; Tracked objects:
 23409 ;;		On entry : 0/0
 23410 ;;		On exit  : 0/0
 23411 ;;		Unchanged: 0/0
 23412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 23413 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23414 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23415 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23416 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 23417 ;;Total ram usage:       25 bytes
 23418 ;; Hardware stack levels used:    1
 23419 ;; Hardware stack levels required when called:   10
 23420 ;; This function calls:
 23421 ;;		Nothing
 23422 ;; This function is called by:
 23423 ;;		_main
 23424 ;;		_motor_steps_from_degrees
 23425 ;;		__motor_get_speed_in_degrees
 23426 ;;		__step_position_from_divide_position
 23427 ;;		_motor_divide_jump_to_nearest
 23428 ;;		_motor_arc_move
 23429 ;;		_motor_go_to_degrees_position
 23430 ;; This function uses a non-reentrant model
 23431 ;;
 23432                           
 23433                           	psect	text86
 23434  00D3FA                     __ptext86:
 23435                           	opt stack 0
 23436  00D3FA                     ___fldiv:
 23437                           	opt stack 17
 23438                           
 23439                           ; BSR set to: 0
 23440                           ;incstack = 0
 23441  00D3FA  0100               	movlb	0	; () banked
 23442  00D3FC  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 23443  00D3FE  0B80               	andlw	128
 23444  00D400  6F7E               	movwf	___fldiv@sign& (0+255),b
 23445  00D402  5171               	movf	(___fldiv@b+3)& (0+255),w,b
 23446  00D404  2571               	addwf	(___fldiv@b+3)& (0+255),w,b
 23447  00D406  6F85               	movwf	___fldiv@bexp& (0+255),b
 23448                           
 23449                           ; BSR set to: 0
 23450  00D408  BF70               	btfsc	(___fldiv@b+2)& (0+255),7,b
 23451                           
 23452                           ; BSR set to: 0
 23453  00D40A  8185               	bsf	___fldiv@bexp& (0+255),0,b
 23454                           
 23455                           ; BSR set to: 0
 23456                           
 23457                           ; BSR set to: 0
 23458  00D40C  5185               	movf	___fldiv@bexp& (0+255),w,b
 23459  00D40E  B4D8               	btfsc	status,2,c
 23460  00D410  D00D               	goto	l3350
 23461                           
 23462                           ; BSR set to: 0
 23463  00D412  2985               	incf	___fldiv@bexp& (0+255),w,b
 23464  00D414  A4D8               	btfss	status,2,c
 23465  00D416  D008               	goto	l3351
 23466                           
 23467                           ; BSR set to: 0
 23468  00D418  0E00               	movlw	0
 23469  00D41A  6F6E               	movwf	___fldiv@b& (0+255),b
 23470  00D41C  0E00               	movlw	0
 23471  00D41E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 23472  00D420  0E00               	movlw	0
 23473  00D422  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 23474  00D424  0E00               	movlw	0
 23475  00D426  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23476  00D428                     l3351:
 23477                           
 23478                           ; BSR set to: 0
 23479                           
 23480                           ; BSR set to: 0
 23481  00D428  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 23482  00D42A  D006               	goto	L37
 23483  00D42C                     l3350:
 23484                           
 23485                           ; BSR set to: 0
 23486                           
 23487                           ; BSR set to: 0
 23488  00D42C  0E00               	movlw	0
 23489  00D42E  6F6E               	movwf	___fldiv@b& (0+255),b
 23490  00D430  0E00               	movlw	0
 23491  00D432  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 23492  00D434  0E00               	movlw	0
 23493  00D436  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 23494  00D438                     L37:
 23495  00D438  0E00               	movlw	0
 23496  00D43A  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23497                           
 23498                           ; BSR set to: 0
 23499                           
 23500                           ; BSR set to: 0
 23501  00D43C  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 23502  00D43E  0B80               	andlw	128
 23503  00D440  1B7E               	xorwf	___fldiv@sign& (0+255),f,b
 23504                           
 23505                           ; BSR set to: 0
 23506  00D442  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 23507  00D444  2575               	addwf	(___fldiv@a+3)& (0+255),w,b
 23508  00D446  6F86               	movwf	___fldiv@aexp& (0+255),b
 23509                           
 23510                           ; BSR set to: 0
 23511  00D448  BF74               	btfsc	(___fldiv@a+2)& (0+255),7,b
 23512                           
 23513                           ; BSR set to: 0
 23514  00D44A  8186               	bsf	___fldiv@aexp& (0+255),0,b
 23515                           
 23516                           ; BSR set to: 0
 23517                           
 23518                           ; BSR set to: 0
 23519  00D44C  5186               	movf	___fldiv@aexp& (0+255),w,b
 23520  00D44E  B4D8               	btfsc	status,2,c
 23521  00D450  D00D               	goto	l3354
 23522                           
 23523                           ; BSR set to: 0
 23524  00D452  2986               	incf	___fldiv@aexp& (0+255),w,b
 23525  00D454  A4D8               	btfss	status,2,c
 23526  00D456  D008               	goto	l3355
 23527                           
 23528                           ; BSR set to: 0
 23529  00D458  0E00               	movlw	0
 23530  00D45A  6F72               	movwf	___fldiv@a& (0+255),b
 23531  00D45C  0E00               	movlw	0
 23532  00D45E  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 23533  00D460  0E00               	movlw	0
 23534  00D462  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 23535  00D464  0E00               	movlw	0
 23536  00D466  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 23537  00D468                     l3355:
 23538                           
 23539                           ; BSR set to: 0
 23540                           
 23541                           ; BSR set to: 0
 23542  00D468  8F74               	bsf	(___fldiv@a+2)& (0+255),7,b
 23543  00D46A  D006               	goto	L38
 23544  00D46C                     l3354:
 23545                           
 23546                           ; BSR set to: 0
 23547                           
 23548                           ; BSR set to: 0
 23549  00D46C  0E00               	movlw	0
 23550  00D46E  6F72               	movwf	___fldiv@a& (0+255),b
 23551  00D470  0E00               	movlw	0
 23552  00D472  6F73               	movwf	(___fldiv@a+1)& (0+255),b
 23553  00D474  0E00               	movlw	0
 23554  00D476  6F74               	movwf	(___fldiv@a+2)& (0+255),b
 23555  00D478                     L38:
 23556  00D478  0E00               	movlw	0
 23557  00D47A  6F75               	movwf	(___fldiv@a+3)& (0+255),b
 23558                           
 23559                           ; BSR set to: 0
 23560                           
 23561                           ; BSR set to: 0
 23562  00D47C  5172               	movf	___fldiv@a& (0+255),w,b
 23563  00D47E  1173               	iorwf	(___fldiv@a+1)& (0+255),w,b
 23564  00D480  1174               	iorwf	(___fldiv@a+2)& (0+255),w,b
 23565  00D482  1175               	iorwf	(___fldiv@a+3)& (0+255),w,b
 23566  00D484  A4D8               	btfss	status,2,c
 23567  00D486  D017               	goto	l3357
 23568                           
 23569                           ; BSR set to: 0
 23570  00D488  0E00               	movlw	0
 23571  00D48A  6F6E               	movwf	___fldiv@b& (0+255),b
 23572  00D48C  0E00               	movlw	0
 23573  00D48E  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 23574  00D490  0E00               	movlw	0
 23575  00D492  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 23576  00D494  0E00               	movlw	0
 23577  00D496  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23578                           
 23579                           ; BSR set to: 0
 23580  00D498  0E80               	movlw	128
 23581  00D49A  1370               	iorwf	(___fldiv@b+2)& (0+255),f,b
 23582  00D49C  0E7F               	movlw	127
 23583  00D49E  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 23584                           
 23585                           ; BSR set to: 0
 23586  00D4A0  517E               	movf	___fldiv@sign& (0+255),w,b
 23587  00D4A2  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 23588                           
 23589                           ; BSR set to: 0
 23590  00D4A4  C06E  F06E         	movff	___fldiv@b,?___fldiv
 23591  00D4A8  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 23592  00D4AC  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 23593  00D4B0  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 23594                           
 23595                           ; BSR set to: 0
 23596  00D4B4  0012               	return	
 23597  00D4B6                     l3357:
 23598                           
 23599                           ; BSR set to: 0
 23600                           
 23601                           ; BSR set to: 0
 23602  00D4B6  5185               	movf	___fldiv@bexp& (0+255),w,b
 23603  00D4B8  A4D8               	btfss	status,2,c
 23604  00D4BA  D011               	goto	l3359
 23605                           
 23606                           ; BSR set to: 0
 23607  00D4BC  0E00               	movlw	0
 23608  00D4BE  6F6E               	movwf	___fldiv@b& (0+255),b
 23609  00D4C0  0E00               	movlw	0
 23610  00D4C2  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 23611  00D4C4  0E00               	movlw	0
 23612  00D4C6  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 23613  00D4C8  0E00               	movlw	0
 23614  00D4CA  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23615                           
 23616                           ; BSR set to: 0
 23617  00D4CC  C06E  F06E         	movff	___fldiv@b,?___fldiv
 23618  00D4D0  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 23619  00D4D4  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 23620  00D4D8  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 23621                           
 23622                           ; BSR set to: 0
 23623  00D4DC  0012               	return	
 23624  00D4DE                     l3359:
 23625                           
 23626                           ; BSR set to: 0
 23627                           
 23628                           ; BSR set to: 0
 23629  00D4DE  5186               	movf	___fldiv@aexp& (0+255),w,b
 23630  00D4E0  6F76               	movwf	??___fldiv& (0+255),b
 23631  00D4E2  6B77               	clrf	(??___fldiv+1)& (0+255),b
 23632  00D4E4  1F76               	comf	??___fldiv& (0+255),f,b
 23633  00D4E6  1F77               	comf	(??___fldiv+1)& (0+255),f,b
 23634  00D4E8  4B76               	infsnz	??___fldiv& (0+255),f,b
 23635  00D4EA  2B77               	incf	(??___fldiv+1)& (0+255),f,b
 23636  00D4EC  5185               	movf	___fldiv@bexp& (0+255),w,b
 23637  00D4EE  6F78               	movwf	(??___fldiv+2)& (0+255),b
 23638  00D4F0  6B79               	clrf	(??___fldiv+3)& (0+255),b
 23639  00D4F2  5176               	movf	??___fldiv& (0+255),w,b
 23640  00D4F4  2778               	addwf	(??___fldiv+2)& (0+255),f,b
 23641  00D4F6  5177               	movf	(??___fldiv+1)& (0+255),w,b
 23642  00D4F8  2379               	addwfc	(??___fldiv+3)& (0+255),f,b
 23643  00D4FA  0E7F               	movlw	127
 23644  00D4FC  2578               	addwf	(??___fldiv+2)& (0+255),w,b
 23645  00D4FE  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 23646  00D500  0E00               	movlw	0
 23647  00D502  2179               	addwfc	(??___fldiv+3)& (0+255),w,b
 23648  00D504  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 23649                           
 23650                           ; BSR set to: 0
 23651  00D506  C06E  F07A         	movff	___fldiv@b,___fldiv@rem
 23652  00D50A  C06F  F07B         	movff	___fldiv@b+1,___fldiv@rem+1
 23653  00D50E  C070  F07C         	movff	___fldiv@b+2,___fldiv@rem+2
 23654  00D512  C071  F07D         	movff	___fldiv@b+3,___fldiv@rem+3
 23655                           
 23656                           ; BSR set to: 0
 23657  00D516  0E00               	movlw	0
 23658  00D518  6F6E               	movwf	___fldiv@b& (0+255),b
 23659  00D51A  0E00               	movlw	0
 23660  00D51C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 23661  00D51E  0E00               	movlw	0
 23662  00D520  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 23663  00D522  0E00               	movlw	0
 23664  00D524  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23665                           
 23666                           ; BSR set to: 0
 23667  00D526  0E00               	movlw	0
 23668  00D528  6F81               	movwf	___fldiv@grs& (0+255),b
 23669  00D52A  0E00               	movlw	0
 23670  00D52C  6F82               	movwf	(___fldiv@grs+1)& (0+255),b
 23671  00D52E  0E00               	movlw	0
 23672  00D530  6F83               	movwf	(___fldiv@grs+2)& (0+255),b
 23673  00D532  0E00               	movlw	0
 23674  00D534  6F84               	movwf	(___fldiv@grs+3)& (0+255),b
 23675                           
 23676                           ; BSR set to: 0
 23677  00D536  0E00               	movlw	0
 23678  00D538  6F86               	movwf	___fldiv@aexp& (0+255),b
 23679  00D53A  D028               	goto	l3360
 23680  00D53C                     
 23681                           ; BSR set to: 0
 23682                           
 23683                           ; BSR set to: 0
 23684  00D53C  5186               	movf	___fldiv@aexp& (0+255),w,b
 23685  00D53E  B4D8               	btfsc	status,2,c
 23686  00D540  D011               	goto	l3362
 23687                           
 23688                           ; BSR set to: 0
 23689  00D542  90D8               	bcf	status,0,c
 23690  00D544  377A               	rlcf	___fldiv@rem& (0+255),f,b
 23691  00D546  377B               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 23692  00D548  377C               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 23693  00D54A  377D               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 23694  00D54C  90D8               	bcf	status,0,c
 23695  00D54E  376E               	rlcf	___fldiv@b& (0+255),f,b
 23696  00D550  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 23697  00D552  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 23698  00D554  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 23699                           
 23700                           ; BSR set to: 0
 23701  00D556  BF84               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 23702                           
 23703                           ; BSR set to: 0
 23704  00D558  816E               	bsf	___fldiv@b& (0+255),0,b
 23705                           
 23706                           ; BSR set to: 0
 23707  00D55A  90D8               	bcf	status,0,c
 23708  00D55C  3781               	rlcf	___fldiv@grs& (0+255),f,b
 23709  00D55E  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 23710  00D560  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 23711  00D562  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 23712  00D564                     l3362:
 23713                           
 23714                           ; BSR set to: 0
 23715                           
 23716                           ; BSR set to: 0
 23717  00D564  5172               	movf	___fldiv@a& (0+255),w,b
 23718  00D566  5D7A               	subwf	___fldiv@rem& (0+255),w,b
 23719  00D568  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 23720  00D56A  597B               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 23721  00D56C  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 23722  00D56E  597C               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 23723  00D570  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 23724  00D572  597D               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 23725  00D574  A0D8               	btfss	status,0,c
 23726  00D576  D009               	goto	l3364
 23727                           
 23728                           ; BSR set to: 0
 23729  00D578  8D84               	bsf	(___fldiv@grs+3)& (0+255),6,b
 23730                           
 23731                           ; BSR set to: 0
 23732  00D57A  5172               	movf	___fldiv@a& (0+255),w,b
 23733  00D57C  5F7A               	subwf	___fldiv@rem& (0+255),f,b
 23734  00D57E  5173               	movf	(___fldiv@a+1)& (0+255),w,b
 23735  00D580  5B7B               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 23736  00D582  5174               	movf	(___fldiv@a+2)& (0+255),w,b
 23737  00D584  5B7C               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 23738  00D586  5175               	movf	(___fldiv@a+3)& (0+255),w,b
 23739  00D588  5B7D               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 23740  00D58A                     l3364:
 23741                           
 23742                           ; BSR set to: 0
 23743                           
 23744                           ; BSR set to: 0
 23745  00D58A  2B86               	incf	___fldiv@aexp& (0+255),f,b
 23746  00D58C                     l3360:
 23747                           
 23748                           ; BSR set to: 0
 23749  00D58C  0E19               	movlw	25
 23750  00D58E  6586               	cpfsgt	___fldiv@aexp& (0+255),b
 23751  00D590  D7D5               	goto	l3361
 23752                           
 23753                           ; BSR set to: 0
 23754                           
 23755                           ; BSR set to: 0
 23756  00D592  517A               	movf	___fldiv@rem& (0+255),w,b
 23757  00D594  117B               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 23758  00D596  117C               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 23759  00D598  117D               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 23760  00D59A  B4D8               	btfsc	status,2,c
 23761  00D59C  D011               	goto	l3367
 23762                           
 23763                           ; BSR set to: 0
 23764  00D59E  8181               	bsf	___fldiv@grs& (0+255),0,b
 23765                           
 23766                           ; BSR set to: 0
 23767  00D5A0  D00F               	goto	l3367
 23768  00D5A2                     
 23769                           ; BSR set to: 0
 23770                           
 23771                           ; BSR set to: 0
 23772  00D5A2  90D8               	bcf	status,0,c
 23773  00D5A4  376E               	rlcf	___fldiv@b& (0+255),f,b
 23774  00D5A6  376F               	rlcf	(___fldiv@b+1)& (0+255),f,b
 23775  00D5A8  3770               	rlcf	(___fldiv@b+2)& (0+255),f,b
 23776  00D5AA  3771               	rlcf	(___fldiv@b+3)& (0+255),f,b
 23777                           
 23778                           ; BSR set to: 0
 23779  00D5AC  BF84               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 23780                           
 23781                           ; BSR set to: 0
 23782  00D5AE  816E               	bsf	___fldiv@b& (0+255),0,b
 23783                           
 23784                           ; BSR set to: 0
 23785  00D5B0  90D8               	bcf	status,0,c
 23786  00D5B2  3781               	rlcf	___fldiv@grs& (0+255),f,b
 23787  00D5B4  3782               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 23788  00D5B6  3783               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 23789  00D5B8  3784               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 23790  00D5BA  077F               	decf	___fldiv@new_exp& (0+255),f,b
 23791  00D5BC  A0D8               	btfss	status,0,c
 23792  00D5BE  0780               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 23793  00D5C0                     l3367:
 23794                           
 23795                           ; BSR set to: 0
 23796                           
 23797                           ; BSR set to: 0
 23798  00D5C0  AF70               	btfss	(___fldiv@b+2)& (0+255),7,b
 23799  00D5C2  D7EF               	goto	l3368
 23800                           
 23801                           ; BSR set to: 0
 23802                           
 23803                           ; BSR set to: 0
 23804  00D5C4  0E00               	movlw	0
 23805  00D5C6  6F86               	movwf	___fldiv@aexp& (0+255),b
 23806                           
 23807                           ; BSR set to: 0
 23808  00D5C8  AF84               	btfss	(___fldiv@grs+3)& (0+255),7,b
 23809  00D5CA  D016               	goto	l3374
 23810                           
 23811                           ; BSR set to: 0
 23812  00D5CC  0EFF               	movlw	255
 23813  00D5CE  1581               	andwf	___fldiv@grs& (0+255),w,b
 23814  00D5D0  6F76               	movwf	??___fldiv& (0+255),b
 23815  00D5D2  0EFF               	movlw	255
 23816  00D5D4  1582               	andwf	(___fldiv@grs+1)& (0+255),w,b
 23817  00D5D6  6F77               	movwf	(??___fldiv+1)& (0+255),b
 23818  00D5D8  0EFF               	movlw	255
 23819  00D5DA  1583               	andwf	(___fldiv@grs+2)& (0+255),w,b
 23820  00D5DC  6F78               	movwf	(??___fldiv+2)& (0+255),b
 23821  00D5DE  0E7F               	movlw	127
 23822  00D5E0  1584               	andwf	(___fldiv@grs+3)& (0+255),w,b
 23823  00D5E2  6F79               	movwf	(??___fldiv+3)& (0+255),b
 23824  00D5E4  5176               	movf	??___fldiv& (0+255),w,b
 23825  00D5E6  1177               	iorwf	(??___fldiv+1)& (0+255),w,b
 23826  00D5E8  1178               	iorwf	(??___fldiv+2)& (0+255),w,b
 23827  00D5EA  1179               	iorwf	(??___fldiv+3)& (0+255),w,b
 23828  00D5EC  A4D8               	btfss	status,2,c
 23829  00D5EE  D002               	goto	u20100
 23830                           
 23831                           ; BSR set to: 0
 23832                           
 23833                           ; BSR set to: 0
 23834  00D5F0  A16E               	btfss	___fldiv@b& (0+255),0,b
 23835  00D5F2  D002               	goto	l3374
 23836  00D5F4                     u20100:
 23837                           
 23838                           ; BSR set to: 0
 23839  00D5F4  0E01               	movlw	1
 23840  00D5F6  6F86               	movwf	___fldiv@aexp& (0+255),b
 23841  00D5F8                     l3374:
 23842                           
 23843                           ; BSR set to: 0
 23844                           
 23845                           ; BSR set to: 0
 23846                           
 23847                           ; BSR set to: 0
 23848  00D5F8  5186               	movf	___fldiv@aexp& (0+255),w,b
 23849  00D5FA  B4D8               	btfsc	status,2,c
 23850  00D5FC  D01F               	goto	l3376
 23851                           
 23852                           ; BSR set to: 0
 23853  00D5FE  0E01               	movlw	1
 23854  00D600  276E               	addwf	___fldiv@b& (0+255),f,b
 23855  00D602  0E00               	movlw	0
 23856  00D604  236F               	addwfc	(___fldiv@b+1)& (0+255),f,b
 23857  00D606  2370               	addwfc	(___fldiv@b+2)& (0+255),f,b
 23858  00D608  2371               	addwfc	(___fldiv@b+3)& (0+255),f,b
 23859                           
 23860                           ; BSR set to: 0
 23861  00D60A  A171               	btfss	(___fldiv@b+3)& (0+255),0,b
 23862  00D60C  D017               	goto	l3376
 23863                           
 23864                           ; BSR set to: 0
 23865  00D60E  C06E  F076         	movff	___fldiv@b,??___fldiv
 23866  00D612  C06F  F077         	movff	___fldiv@b+1,??___fldiv+1
 23867  00D616  C070  F078         	movff	___fldiv@b+2,??___fldiv+2
 23868  00D61A  C071  F079         	movff	___fldiv@b+3,??___fldiv+3
 23869  00D61E  3579               	rlcf	(??___fldiv+3)& (0+255),w,b
 23870  00D620  3379               	rrcf	(??___fldiv+3)& (0+255),f,b
 23871  00D622  3378               	rrcf	(??___fldiv+2)& (0+255),f,b
 23872  00D624  3377               	rrcf	(??___fldiv+1)& (0+255),f,b
 23873  00D626  3376               	rrcf	??___fldiv& (0+255),f,b
 23874  00D628  C076  F06E         	movff	??___fldiv,___fldiv@b
 23875  00D62C  C077  F06F         	movff	??___fldiv+1,___fldiv@b+1
 23876  00D630  C078  F070         	movff	??___fldiv+2,___fldiv@b+2
 23877  00D634  C079  F071         	movff	??___fldiv+3,___fldiv@b+3
 23878                           
 23879                           ; BSR set to: 0
 23880  00D638  4B7F               	infsnz	___fldiv@new_exp& (0+255),f,b
 23881  00D63A  2B80               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 23882  00D63C                     l3376:
 23883                           
 23884                           ; BSR set to: 0
 23885                           
 23886                           ; BSR set to: 0
 23887                           
 23888                           ; BSR set to: 0
 23889  00D63C  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 23890  00D63E  D010               	goto	l3377
 23891  00D640  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 23892  00D642  E103               	bnz	u20130
 23893  00D644  297F               	incf	___fldiv@new_exp& (0+255),w,b
 23894  00D646  A0D8               	btfss	status,0,c
 23895  00D648  D00B               	goto	l3377
 23896  00D64A                     u20130:
 23897                           
 23898                           ; BSR set to: 0
 23899  00D64A  0E00               	movlw	0
 23900  00D64C  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 23901  00D64E  697F               	setf	___fldiv@new_exp& (0+255),b
 23902  00D650  0E00               	movlw	0
 23903  00D652  6F6E               	movwf	___fldiv@b& (0+255),b
 23904  00D654  0E00               	movlw	0
 23905  00D656  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 23906  00D658  0E00               	movlw	0
 23907  00D65A  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 23908  00D65C  0E00               	movlw	0
 23909  00D65E  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23910  00D660                     l3377:
 23911                           
 23912                           ; BSR set to: 0
 23913                           
 23914                           ; BSR set to: 0
 23915  00D660  BF80               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 23916  00D662  D005               	goto	u20140
 23917  00D664  5180               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 23918  00D666  E111               	bnz	l20470
 23919  00D668  057F               	decf	___fldiv@new_exp& (0+255),w,b
 23920  00D66A  B0D8               	btfsc	status,0,c
 23921  00D66C  D00E               	goto	l3378
 23922  00D66E                     u20140:
 23923                           
 23924                           ; BSR set to: 0
 23925  00D66E  0E00               	movlw	0
 23926  00D670  6F80               	movwf	(___fldiv@new_exp+1)& (0+255),b
 23927  00D672  0E00               	movlw	0
 23928  00D674  6F7F               	movwf	___fldiv@new_exp& (0+255),b
 23929  00D676  0E00               	movlw	0
 23930  00D678  6F6E               	movwf	___fldiv@b& (0+255),b
 23931  00D67A  0E00               	movlw	0
 23932  00D67C  6F6F               	movwf	(___fldiv@b+1)& (0+255),b
 23933  00D67E  0E00               	movlw	0
 23934  00D680  6F70               	movwf	(___fldiv@b+2)& (0+255),b
 23935  00D682  0E00               	movlw	0
 23936  00D684  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23937  00D686  0E00               	movlw	0
 23938  00D688  6F7E               	movwf	___fldiv@sign& (0+255),b
 23939  00D68A                     l3378:
 23940  00D68A                     l20470:
 23941                           
 23942                           ; BSR set to: 0
 23943  00D68A  C07F  F085         	movff	___fldiv@new_exp,___fldiv@bexp
 23944                           
 23945                           ; BSR set to: 0
 23946  00D68E  A185               	btfss	___fldiv@bexp& (0+255),0,b
 23947  00D690  D002               	goto	l3379
 23948                           
 23949                           ; BSR set to: 0
 23950  00D692  8F70               	bsf	(___fldiv@b+2)& (0+255),7,b
 23951  00D694  D001               	goto	l3380
 23952  00D696                     l3379:
 23953                           
 23954                           ; BSR set to: 0
 23955                           
 23956                           ; BSR set to: 0
 23957  00D696  9F70               	bcf	(___fldiv@b+2)& (0+255),7,b
 23958  00D698                     l3380:
 23959                           
 23960                           ; BSR set to: 0
 23961                           
 23962                           ; BSR set to: 0
 23963  00D698  90D8               	bcf	status,0,c
 23964  00D69A  3185               	rrcf	___fldiv@bexp& (0+255),w,b
 23965  00D69C  6F71               	movwf	(___fldiv@b+3)& (0+255),b
 23966                           
 23967                           ; BSR set to: 0
 23968  00D69E  517E               	movf	___fldiv@sign& (0+255),w,b
 23969  00D6A0  1371               	iorwf	(___fldiv@b+3)& (0+255),f,b
 23970                           
 23971                           ; BSR set to: 0
 23972  00D6A2  C06E  F06E         	movff	___fldiv@b,?___fldiv
 23973  00D6A6  C06F  F06F         	movff	___fldiv@b+1,?___fldiv+1
 23974  00D6AA  C070  F070         	movff	___fldiv@b+2,?___fldiv+2
 23975  00D6AE  C071  F071         	movff	___fldiv@b+3,?___fldiv+3
 23976  00D6B2  0012               	return	
 23977  00D6B4                     __end_of___fldiv:
 23978                           	opt stack 0
 23979                           tblptru	equ	0xFF8
 23980                           tblptrh	equ	0xFF7
 23981                           tblptrl	equ	0xFF6
 23982                           tablat	equ	0xFF5
 23983                           prodh	equ	0xFF4
 23984                           prodl	equ	0xFF3
 23985                           intcon	equ	0xFF2
 23986                           postinc0	equ	0xFEE
 23987                           wreg	equ	0xFE8
 23988                           indf1	equ	0xFE7
 23989                           postinc1	equ	0xFE6
 23990                           postdec1	equ	0xFE5
 23991                           plusw1	equ	0xFE3
 23992                           fsr1h	equ	0xFE2
 23993                           fsr1l	equ	0xFE1
 23994                           indf2	equ	0xFDF
 23995                           postinc2	equ	0xFDE
 23996                           postdec2	equ	0xFDD
 23997                           plusw2	equ	0xFDB
 23998                           fsr2h	equ	0xFDA
 23999                           fsr2l	equ	0xFD9
 24000                           status	equ	0xFD8
 24001                           
 24002 ;; *************** function __display_signed_itoa *****************
 24003 ;; Defined at:
 24004 ;;		line 116 in file "display.c"
 24005 ;; Parameters:    Size  Location     Type
 24006 ;;  value           2   47[BANK0 ] int 
 24007 ;;  text            2   49[BANK0 ] PTR unsigned char 
 24008 ;;		 -> display_prepare@temp(10), 
 24009 ;; Auto vars:     Size  Location     Type
 24010 ;;		None
 24011 ;; Return value:  Size  Location     Type
 24012 ;;                  1    wreg      void 
 24013 ;; Registers used:
 24014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24015 ;; Tracked objects:
 24016 ;;		On entry : 0/0
 24017 ;;		On exit  : 0/0
 24018 ;;		Unchanged: 0/0
 24019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 24020 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24023 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24024 ;;Total ram usage:        4 bytes
 24025 ;; Hardware stack levels used:    1
 24026 ;; Hardware stack levels required when called:   14
 24027 ;; This function calls:
 24028 ;;		__display_padded_itoa
 24029 ;; This function is called by:
 24030 ;;		_display_prepare
 24031 ;; This function uses a non-reentrant model
 24032 ;;
 24033                           
 24034                           	psect	text87
 24035  0139BC                     __ptext87:
 24036                           	opt stack 0
 24037  0139BC                     __display_signed_itoa:
 24038                           	opt stack 15
 24039                           
 24040                           ;display.c: 118: if(value<0)
 24041                           
 24042                           ; BSR set to: 0
 24043                           ;incstack = 0
 24044  0139BC  0100               	movlb	0	; () banked
 24045  0139BE  AF90               	btfss	(__display_signed_itoa@value+1)& (0+255),7,b
 24046  0139C0  D00A               	goto	l1292
 24047                           
 24048                           ; BSR set to: 0
 24049                           ;display.c: 119: {;display.c: 120: value = -value;
 24050  0139C2  6D8F               	negf	__display_signed_itoa@value& (0+255),b
 24051  0139C4  1F90               	comf	(__display_signed_itoa@value+1)& (0+255),f,b
 24052  0139C6  B0D8               	btfsc	status,0,c
 24053  0139C8  2B90               	incf	(__display_signed_itoa@value+1)& (0+255),f,b
 24054                           
 24055                           ; BSR set to: 0
 24056                           ;display.c: 121: text[0] = '-';
 24057  0139CA  C091  FFD9         	movff	__display_signed_itoa@text,fsr2l
 24058  0139CE  C092  FFDA         	movff	__display_signed_itoa@text+1,fsr2h
 24059  0139D2  0E2D               	movlw	45
 24060  0139D4  D005               	goto	L39
 24061  0139D6                     l1292:
 24062                           
 24063                           ; BSR set to: 0
 24064                           ;display.c: 123: else;display.c: 124: {;display.c: 125: text[0] = '+';
 24065                           
 24066                           ; BSR set to: 0
 24067  0139D6  C091  FFD9         	movff	__display_signed_itoa@text,fsr2l
 24068  0139DA  C092  FFDA         	movff	__display_signed_itoa@text+1,fsr2h
 24069  0139DE  0E2B               	movlw	43
 24070  0139E0                     L39:
 24071  0139E0  6EDF               	movwf	indf2,c
 24072                           
 24073                           ; BSR set to: 0
 24074                           ;display.c: 126: };display.c: 127: _display_padded_itoa(value, 0, &text[1]);
 24075                           
 24076                           ; BSR set to: 0
 24077  0139E2  C08F  F078         	movff	__display_signed_itoa@value,__display_padded_itoa@value
 24078  0139E6  C090  F079         	movff	__display_signed_itoa@value+1,__display_padded_itoa@value+1
 24079  0139EA  0E00               	movlw	0
 24080  0139EC  6F7A               	movwf	__display_padded_itoa@length& (0+255),b
 24081  0139EE  0E01               	movlw	1
 24082  0139F0  2591               	addwf	__display_signed_itoa@text& (0+255),w,b
 24083  0139F2  6F7B               	movwf	__display_padded_itoa@text& (0+255),b
 24084  0139F4  0E00               	movlw	0
 24085  0139F6  2192               	addwfc	(__display_signed_itoa@text+1)& (0+255),w,b
 24086  0139F8  6F7C               	movwf	(__display_padded_itoa@text+1)& (0+255),b
 24087  0139FA  EC47  F088         	call	__display_padded_itoa	;wreg free
 24088  0139FE  0012               	return		;funcret
 24089  013A00                     __end_of__display_signed_itoa:
 24090                           	opt stack 0
 24091                           tblptru	equ	0xFF8
 24092                           tblptrh	equ	0xFF7
 24093                           tblptrl	equ	0xFF6
 24094                           tablat	equ	0xFF5
 24095                           prodh	equ	0xFF4
 24096                           prodl	equ	0xFF3
 24097                           intcon	equ	0xFF2
 24098                           postinc0	equ	0xFEE
 24099                           wreg	equ	0xFE8
 24100                           indf1	equ	0xFE7
 24101                           postinc1	equ	0xFE6
 24102                           postdec1	equ	0xFE5
 24103                           plusw1	equ	0xFE3
 24104                           fsr1h	equ	0xFE2
 24105                           fsr1l	equ	0xFE1
 24106                           indf2	equ	0xFDF
 24107                           postinc2	equ	0xFDE
 24108                           postdec2	equ	0xFDD
 24109                           plusw2	equ	0xFDB
 24110                           fsr2h	equ	0xFDA
 24111                           fsr2l	equ	0xFD9
 24112                           status	equ	0xFD8
 24113                           
 24114 ;; *************** function __display_padded_itoa *****************
 24115 ;; Defined at:
 24116 ;;		line 94 in file "display.c"
 24117 ;; Parameters:    Size  Location     Type
 24118 ;;  value           2   24[BANK0 ] int 
 24119 ;;  length          1   26[BANK0 ] unsigned char 
 24120 ;;  text            2   27[BANK0 ] PTR unsigned char 
 24121 ;;		 -> display_prepare@temp(10), 
 24122 ;; Auto vars:     Size  Location     Type
 24123 ;;  tmp            10   34[BANK0 ] unsigned char [10]
 24124 ;;  padding         1   46[BANK0 ] unsigned char 
 24125 ;;  pos             1   45[BANK0 ] unsigned char 
 24126 ;;  len             1   44[BANK0 ] unsigned char 
 24127 ;; Return value:  Size  Location     Type
 24128 ;;                  1    wreg      void 
 24129 ;; Registers used:
 24130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24131 ;; Tracked objects:
 24132 ;;		On entry : 0/0
 24133 ;;		On exit  : 0/0
 24134 ;;		Unchanged: 0/0
 24135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 24136 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24137 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24138 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24139 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24140 ;;Total ram usage:       23 bytes
 24141 ;; Hardware stack levels used:    1
 24142 ;; Hardware stack levels required when called:   13
 24143 ;; This function calls:
 24144 ;;		_itoa
 24145 ;;		_strlen
 24146 ;; This function is called by:
 24147 ;;		__display_signed_itoa
 24148 ;;		_display_prepare
 24149 ;; This function uses a non-reentrant model
 24150 ;;
 24151                           
 24152                           	psect	text88
 24153  01108E                     __ptext88:
 24154                           	opt stack 0
 24155  01108E                     __display_padded_itoa:
 24156                           	opt stack 15
 24157                           
 24158                           ;display.c: 96: uint8_t pos;;display.c: 97: uint8_t padding;;display.c: 99: uint8_t len;
      +                          ;display.c: 100: char tmp[10];;display.c: 101: itoa(tmp, value, 10);
 24159                           
 24160                           ;incstack = 0
 24161  01108E  0E82               	movlw	low __display_padded_itoa@tmp
 24162  011090  0100               	movlb	0	; () banked
 24163  011092  6F70               	movwf	itoa@buf& (0+255),b
 24164  011094  0E00               	movlw	high __display_padded_itoa@tmp
 24165  011096  6F71               	movwf	(itoa@buf+1)& (0+255),b
 24166  011098  C078  F072         	movff	__display_padded_itoa@value,itoa@val
 24167  01109C  C079  F073         	movff	__display_padded_itoa@value+1,itoa@val+1
 24168  0110A0  0E00               	movlw	0
 24169  0110A2  6F75               	movwf	(itoa@base+1)& (0+255),b
 24170  0110A4  0E0A               	movlw	10
 24171  0110A6  6F74               	movwf	itoa@base& (0+255),b
 24172  0110A8  EC00  F09D         	call	_itoa	;wreg free
 24173                           
 24174                           ;display.c: 102: len = strlen(tmp);
 24175  0110AC  0E82               	movlw	low __display_padded_itoa@tmp
 24176  0110AE  0100               	movlb	0	; () banked
 24177  0110B0  6F60               	movwf	strlen@s& (0+255),b
 24178  0110B2  0E00               	movlw	high __display_padded_itoa@tmp
 24179  0110B4  6F61               	movwf	(strlen@s+1)& (0+255),b
 24180  0110B6  ECA6  F09D         	call	_strlen	;wreg free
 24181  0110BA  0100               	movlb	0	; () banked
 24182  0110BC  5160               	movf	?_strlen& (0+255),w,b
 24183  0110BE  6F8C               	movwf	__display_padded_itoa@len& (0+255),b
 24184                           
 24185                           ; BSR set to: 0
 24186                           ;display.c: 103: padding = 0;
 24187  0110C0  0E00               	movlw	0
 24188  0110C2  6F8E               	movwf	__display_padded_itoa@padding& (0+255),b
 24189                           
 24190                           ;display.c: 104: while((padding+len)<length)
 24191  0110C4  D00B               	goto	l1283
 24192  0110C6                     
 24193                           ; BSR set to: 0
 24194                           ;display.c: 105: {;display.c: 106: text[padding] = ' ';
 24195                           
 24196                           ; BSR set to: 0
 24197  0110C6  518E               	movf	__display_padded_itoa@padding& (0+255),w,b
 24198  0110C8  0D01               	mullw	1
 24199  0110CA  50F3               	movf	prodl,w,c
 24200  0110CC  257B               	addwf	__display_padded_itoa@text& (0+255),w,b
 24201  0110CE  6ED9               	movwf	fsr2l,c
 24202  0110D0  50F4               	movf	prodh,w,c
 24203  0110D2  217C               	addwfc	(__display_padded_itoa@text+1)& (0+255),w,b
 24204  0110D4  6EDA               	movwf	fsr2h,c
 24205  0110D6  0E20               	movlw	32
 24206  0110D8  6EDF               	movwf	indf2,c
 24207                           
 24208                           ; BSR set to: 0
 24209                           ;display.c: 107: ++padding;
 24210  0110DA  2B8E               	incf	__display_padded_itoa@padding& (0+255),f,b
 24211  0110DC                     l1283:
 24212                           
 24213                           ; BSR set to: 0
 24214                           
 24215                           ; BSR set to: 0
 24216  0110DC  517A               	movf	__display_padded_itoa@length& (0+255),w,b
 24217  0110DE  6F7D               	movwf	??__display_padded_itoa& (0+255),b
 24218  0110E0  6B7E               	clrf	(??__display_padded_itoa+1)& (0+255),b
 24219  0110E2  518C               	movf	__display_padded_itoa@len& (0+255),w,b
 24220  0110E4  C08E  F07F         	movff	__display_padded_itoa@padding,??__display_padded_itoa+2
 24221  0110E8  6B80               	clrf	(??__display_padded_itoa+3)& (0+255),b
 24222  0110EA  277F               	addwf	(??__display_padded_itoa+2)& (0+255),f,b
 24223  0110EC  0E00               	movlw	0
 24224  0110EE  2380               	addwfc	(??__display_padded_itoa+3)& (0+255),f,b
 24225  0110F0  517D               	movf	??__display_padded_itoa& (0+255),w,b
 24226  0110F2  5D7F               	subwf	(??__display_padded_itoa+2)& (0+255),w,b
 24227  0110F4  5180               	movf	(??__display_padded_itoa+3)& (0+255),w,b
 24228  0110F6  0A80               	xorlw	128
 24229  0110F8  6F81               	movwf	(??__display_padded_itoa+4)& (0+255),b
 24230  0110FA  517E               	movf	(??__display_padded_itoa+1)& (0+255),w,b
 24231  0110FC  0A80               	xorlw	128
 24232  0110FE  5981               	subwfb	(??__display_padded_itoa+4)& (0+255),w,b
 24233  011100  A0D8               	btfss	status,0,c
 24234  011102  D7E1               	goto	l1284
 24235                           
 24236                           ; BSR set to: 0
 24237                           ;display.c: 108: };display.c: 109: for(pos=0; tmp[pos]; ++pos)
 24238                           
 24239                           ; BSR set to: 0
 24240  011104  0E00               	movlw	0
 24241  011106  6F8D               	movwf	__display_padded_itoa@pos& (0+255),b
 24242  011108  D018               	goto	l1286
 24243  01110A                     
 24244                           ; BSR set to: 0
 24245                           ;display.c: 110: {;display.c: 111: text[pos+padding] = tmp[pos];
 24246                           
 24247                           ; BSR set to: 0
 24248  01110A  518D               	movf	__display_padded_itoa@pos& (0+255),w,b
 24249  01110C  0D01               	mullw	1
 24250  01110E  0E82               	movlw	low __display_padded_itoa@tmp
 24251  011110  24F3               	addwf	prodl,w,c
 24252  011112  6ED9               	movwf	fsr2l,c
 24253  011114  0E00               	movlw	high __display_padded_itoa@tmp
 24254  011116  20F4               	addwfc	prodh,w,c
 24255  011118  6EDA               	movwf	fsr2h,c
 24256  01111A  518E               	movf	__display_padded_itoa@padding& (0+255),w,b
 24257  01111C  C08D  F07D         	movff	__display_padded_itoa@pos,??__display_padded_itoa
 24258  011120  6B7E               	clrf	(??__display_padded_itoa+1)& (0+255),b
 24259  011122  277D               	addwf	??__display_padded_itoa& (0+255),f,b
 24260  011124  0E00               	movlw	0
 24261  011126  237E               	addwfc	(??__display_padded_itoa+1)& (0+255),f,b
 24262  011128  517D               	movf	??__display_padded_itoa& (0+255),w,b
 24263  01112A  257B               	addwf	__display_padded_itoa@text& (0+255),w,b
 24264  01112C  6EE1               	movwf	fsr1l,c
 24265  01112E  517E               	movf	(??__display_padded_itoa+1)& (0+255),w,b
 24266  011130  217C               	addwfc	(__display_padded_itoa@text+1)& (0+255),w,b
 24267  011132  6EE2               	movwf	fsr1h,c
 24268  011134  CFDF FFE7          	movff	indf2,indf1
 24269                           
 24270                           ; BSR set to: 0
 24271  011138  2B8D               	incf	__display_padded_itoa@pos& (0+255),f,b
 24272  01113A                     l1286:
 24273                           
 24274                           ; BSR set to: 0
 24275                           
 24276                           ; BSR set to: 0
 24277  01113A  518D               	movf	__display_padded_itoa@pos& (0+255),w,b
 24278  01113C  0D01               	mullw	1
 24279  01113E  0E82               	movlw	low __display_padded_itoa@tmp
 24280  011140  24F3               	addwf	prodl,w,c
 24281  011142  6ED9               	movwf	fsr2l,c
 24282  011144  0E00               	movlw	high __display_padded_itoa@tmp
 24283  011146  20F4               	addwfc	prodh,w,c
 24284  011148  6EDA               	movwf	fsr2h,c
 24285  01114A  50DF               	movf	indf2,w,c
 24286  01114C  A4D8               	btfss	status,2,c
 24287  01114E  D7DD               	goto	l1287
 24288                           
 24289                           ; BSR set to: 0
 24290                           ;display.c: 112: };display.c: 113: text[pos+padding] = 0x00;
 24291                           
 24292                           ; BSR set to: 0
 24293  011150  518E               	movf	__display_padded_itoa@padding& (0+255),w,b
 24294  011152  C08D  F07D         	movff	__display_padded_itoa@pos,??__display_padded_itoa
 24295  011156  6B7E               	clrf	(??__display_padded_itoa+1)& (0+255),b
 24296  011158  277D               	addwf	??__display_padded_itoa& (0+255),f,b
 24297  01115A  0E00               	movlw	0
 24298  01115C  237E               	addwfc	(??__display_padded_itoa+1)& (0+255),f,b
 24299  01115E  517D               	movf	??__display_padded_itoa& (0+255),w,b
 24300  011160  257B               	addwf	__display_padded_itoa@text& (0+255),w,b
 24301  011162  6ED9               	movwf	fsr2l,c
 24302  011164  517E               	movf	(??__display_padded_itoa+1)& (0+255),w,b
 24303  011166  217C               	addwfc	(__display_padded_itoa@text+1)& (0+255),w,b
 24304  011168  6EDA               	movwf	fsr2h,c
 24305  01116A  0E00               	movlw	0
 24306  01116C  6EDF               	movwf	indf2,c
 24307                           
 24308                           ; BSR set to: 0
 24309  01116E  0012               	return		;funcret
 24310  011170                     __end_of__display_padded_itoa:
 24311                           	opt stack 0
 24312                           tblptru	equ	0xFF8
 24313                           tblptrh	equ	0xFF7
 24314                           tblptrl	equ	0xFF6
 24315                           tablat	equ	0xFF5
 24316                           prodh	equ	0xFF4
 24317                           prodl	equ	0xFF3
 24318                           intcon	equ	0xFF2
 24319                           postinc0	equ	0xFEE
 24320                           wreg	equ	0xFE8
 24321                           indf1	equ	0xFE7
 24322                           postinc1	equ	0xFE6
 24323                           postdec1	equ	0xFE5
 24324                           plusw1	equ	0xFE3
 24325                           fsr1h	equ	0xFE2
 24326                           fsr1l	equ	0xFE1
 24327                           indf2	equ	0xFDF
 24328                           postinc2	equ	0xFDE
 24329                           postdec2	equ	0xFDD
 24330                           plusw2	equ	0xFDB
 24331                           fsr2h	equ	0xFDA
 24332                           fsr2l	equ	0xFD9
 24333                           status	equ	0xFD8
 24334                           
 24335 ;; *************** function __display_itoa_long *****************
 24336 ;; Defined at:
 24337 ;;		line 198 in file "display.c"
 24338 ;; Parameters:    Size  Location     Type
 24339 ;;  value           4   77[BANK0 ] long 
 24340 ;;  decimals        1   81[BANK0 ] unsigned char 
 24341 ;;  text            2   82[BANK0 ] PTR unsigned char 
 24342 ;;		 -> display_prepare@temp(10), 
 24343 ;; Auto vars:     Size  Location     Type
 24344 ;;  short_value     2   89[BANK0 ] int 
 24345 ;;  last_digit      1   91[BANK0 ] char 
 24346 ;;  length          1   88[BANK0 ] unsigned char 
 24347 ;; Return value:  Size  Location     Type
 24348 ;;                  1    wreg      void 
 24349 ;; Registers used:
 24350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24351 ;; Tracked objects:
 24352 ;;		On entry : 0/0
 24353 ;;		On exit  : 0/0
 24354 ;;		Unchanged: 0/0
 24355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 24356 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24357 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24358 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24359 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24360 ;;Total ram usage:       15 bytes
 24361 ;; Hardware stack levels used:    1
 24362 ;; Hardware stack levels required when called:   14
 24363 ;; This function calls:
 24364 ;;		___aldiv
 24365 ;;		___almod
 24366 ;;		__display_itoa
 24367 ;;		_strlen
 24368 ;; This function is called by:
 24369 ;;		_display_prepare
 24370 ;; This function uses a non-reentrant model
 24371 ;;
 24372                           
 24373                           	psect	text89
 24374  0100B0                     __ptext89:
 24375                           	opt stack 0
 24376  0100B0                     __display_itoa_long:
 24377                           	opt stack 15
 24378                           
 24379                           ;display.c: 200: int16_t short_value;;display.c: 201: int8_t last_digit;;display.c: 202:
      +                           uint8_t length;;display.c: 204: short_value = (int16_t) value;
 24380                           
 24381                           ; BSR set to: 0
 24382                           ;incstack = 0
 24383  0100B0  C0AD  F0B9         	movff	__display_itoa_long@value,__display_itoa_long@short_value
 24384  0100B4  C0AE  F0BA         	movff	__display_itoa_long@value+1,__display_itoa_long@short_value+1
 24385                           
 24386                           ;display.c: 205: if(short_value==value)
 24387  0100B8  C0B9  F0B4         	movff	__display_itoa_long@short_value,??__display_itoa_long
 24388  0100BC  C0BA  F0B5         	movff	__display_itoa_long@short_value+1,??__display_itoa_long+1
 24389  0100C0  0E00               	movlw	0
 24390  0100C2  0100               	movlb	0	; () banked
 24391  0100C4  BFB5               	btfsc	(??__display_itoa_long+1)& (0+255),7,b
 24392  0100C6  0EFF               	movlw	255
 24393  0100C8  6FB6               	movwf	(??__display_itoa_long+2)& (0+255),b
 24394  0100CA  6FB7               	movwf	(??__display_itoa_long+3)& (0+255),b
 24395  0100CC  51AD               	movf	__display_itoa_long@value& (0+255),w,b
 24396  0100CE  19B4               	xorwf	??__display_itoa_long& (0+255),w,b
 24397  0100D0  E117               	bnz	l22164
 24398  0100D2  51AE               	movf	(__display_itoa_long@value+1)& (0+255),w,b
 24399  0100D4  19B5               	xorwf	(??__display_itoa_long+1)& (0+255),w,b
 24400  0100D6  E114               	bnz	l22164
 24401  0100D8  51AF               	movf	(__display_itoa_long@value+2)& (0+255),w,b
 24402  0100DA  19B6               	xorwf	(??__display_itoa_long+2)& (0+255),w,b
 24403  0100DC  E111               	bnz	l22164
 24404  0100DE  51B0               	movf	(__display_itoa_long@value+3)& (0+255),w,b
 24405  0100E0  19B7               	xorwf	(??__display_itoa_long+3)& (0+255),w,b
 24406  0100E2  A4D8               	btfss	status,2,c
 24407  0100E4  D00D               	goto	l1319
 24408                           
 24409                           ; BSR set to: 0
 24410                           ;display.c: 206: {;display.c: 207: _display_itoa(short_value, decimals, text);
 24411  0100E6  C0B9  F095         	movff	__display_itoa_long@short_value,__display_itoa@value
 24412  0100EA  C0BA  F096         	movff	__display_itoa_long@short_value+1,__display_itoa@value+1
 24413  0100EE  C0B1  F097         	movff	__display_itoa_long@decimals,__display_itoa@decimals
 24414  0100F2  C0B2  F098         	movff	__display_itoa_long@text,__display_itoa@text
 24415  0100F6  C0B3  F099         	movff	__display_itoa_long@text+1,__display_itoa@text+1
 24416  0100FA  EC17  F070         	call	__display_itoa	;wreg free
 24417                           
 24418                           ;display.c: 208: }
 24419  0100FE  0012               	return	
 24420  010100                     l1319:
 24421  010100                     l22164:
 24422                           
 24423                           ;display.c: 209: else;display.c: 210: {;display.c: 211: short_value = value / 10;
 24424  010100  C0AD  F060         	movff	__display_itoa_long@value,___aldiv@dividend
 24425  010104  C0AE  F061         	movff	__display_itoa_long@value+1,___aldiv@dividend+1
 24426  010108  C0AF  F062         	movff	__display_itoa_long@value+2,___aldiv@dividend+2
 24427  01010C  C0B0  F063         	movff	__display_itoa_long@value+3,___aldiv@dividend+3
 24428  010110  0E0A               	movlw	10
 24429  010112  0100               	movlb	0	; () banked
 24430  010114  6F64               	movwf	___aldiv@divisor& (0+255),b
 24431  010116  0E00               	movlw	0
 24432  010118  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
 24433  01011A  0E00               	movlw	0
 24434  01011C  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
 24435  01011E  0E00               	movlw	0
 24436  010120  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
 24437  010122  EC7F  F08C         	call	___aldiv	;wreg free
 24438  010126  C060  F0B9         	movff	?___aldiv,__display_itoa_long@short_value
 24439  01012A  C061  F0BA         	movff	?___aldiv+1,__display_itoa_long@short_value+1
 24440                           
 24441                           ;display.c: 212: _display_itoa(short_value, decimals-1, text);
 24442  01012E  C0B9  F095         	movff	__display_itoa_long@short_value,__display_itoa@value
 24443  010132  C0BA  F096         	movff	__display_itoa_long@short_value+1,__display_itoa@value+1
 24444  010136  0100               	movlb	0	; () banked
 24445  010138  05B1               	decf	__display_itoa_long@decimals& (0+255),w,b
 24446  01013A  6F97               	movwf	__display_itoa@decimals& (0+255),b
 24447  01013C  C0B2  F098         	movff	__display_itoa_long@text,__display_itoa@text
 24448  010140  C0B3  F099         	movff	__display_itoa_long@text+1,__display_itoa@text+1
 24449  010144  EC17  F070         	call	__display_itoa	;wreg free
 24450                           
 24451                           ;display.c: 213: length = strlen(text);
 24452  010148  C0B2  F060         	movff	__display_itoa_long@text,strlen@s
 24453  01014C  C0B3  F061         	movff	__display_itoa_long@text+1,strlen@s+1
 24454  010150  ECA6  F09D         	call	_strlen	;wreg free
 24455  010154  0100               	movlb	0	; () banked
 24456  010156  5160               	movf	?_strlen& (0+255),w,b
 24457  010158  6FB8               	movwf	__display_itoa_long@length& (0+255),b
 24458                           
 24459                           ; BSR set to: 0
 24460                           ;display.c: 214: last_digit = value % 10;
 24461  01015A  C0AD  F060         	movff	__display_itoa_long@value,___almod@dividend
 24462  01015E  C0AE  F061         	movff	__display_itoa_long@value+1,___almod@dividend+1
 24463  010162  C0AF  F062         	movff	__display_itoa_long@value+2,___almod@dividend+2
 24464  010166  C0B0  F063         	movff	__display_itoa_long@value+3,___almod@dividend+3
 24465  01016A  0E0A               	movlw	10
 24466  01016C  6F64               	movwf	___almod@divisor& (0+255),b
 24467  01016E  0E00               	movlw	0
 24468  010170  6F65               	movwf	(___almod@divisor+1)& (0+255),b
 24469  010172  0E00               	movlw	0
 24470  010174  6F66               	movwf	(___almod@divisor+2)& (0+255),b
 24471  010176  0E00               	movlw	0
 24472  010178  6F67               	movwf	(___almod@divisor+3)& (0+255),b
 24473  01017A  EC77  F08F         	call	___almod	;wreg free
 24474  01017E  0100               	movlb	0	; () banked
 24475  010180  5160               	movf	?___almod& (0+255),w,b
 24476  010182  6FBB               	movwf	__display_itoa_long@last_digit& (0+255),b
 24477                           
 24478                           ; BSR set to: 0
 24479                           ;display.c: 215: if(last_digit<0)
 24480  010184  BFBB               	btfsc	__display_itoa_long@last_digit& (0+255),7,b
 24481                           
 24482                           ; BSR set to: 0
 24483                           ;display.c: 216: last_digit = -last_digit;
 24484  010186  6DBB               	negf	__display_itoa_long@last_digit& (0+255),b
 24485                           
 24486                           ; BSR set to: 0
 24487                           ;display.c: 217: text[length] = last_digit + 0x30;
 24488                           
 24489                           ; BSR set to: 0
 24490  010188  51B8               	movf	__display_itoa_long@length& (0+255),w,b
 24491  01018A  0D01               	mullw	1
 24492  01018C  50F3               	movf	prodl,w,c
 24493  01018E  25B2               	addwf	__display_itoa_long@text& (0+255),w,b
 24494  010190  6ED9               	movwf	fsr2l,c
 24495  010192  50F4               	movf	prodh,w,c
 24496  010194  21B3               	addwfc	(__display_itoa_long@text+1)& (0+255),w,b
 24497  010196  6EDA               	movwf	fsr2h,c
 24498  010198  51BB               	movf	__display_itoa_long@last_digit& (0+255),w,b
 24499  01019A  0F30               	addlw	48
 24500  01019C  6EDF               	movwf	indf2,c
 24501                           
 24502                           ; BSR set to: 0
 24503                           ;display.c: 218: text[length+1] = 0x00;
 24504  01019E  51B8               	movf	__display_itoa_long@length& (0+255),w,b
 24505  0101A0  6FB4               	movwf	??__display_itoa_long& (0+255),b
 24506  0101A2  6BB5               	clrf	(??__display_itoa_long+1)& (0+255),b
 24507  0101A4  0E01               	movlw	1
 24508  0101A6  27B4               	addwf	??__display_itoa_long& (0+255),f,b
 24509  0101A8  0E00               	movlw	0
 24510  0101AA  23B5               	addwfc	(??__display_itoa_long+1)& (0+255),f,b
 24511  0101AC  51B4               	movf	??__display_itoa_long& (0+255),w,b
 24512  0101AE  25B2               	addwf	__display_itoa_long@text& (0+255),w,b
 24513  0101B0  6ED9               	movwf	fsr2l,c
 24514  0101B2  51B5               	movf	(??__display_itoa_long+1)& (0+255),w,b
 24515  0101B4  21B3               	addwfc	(__display_itoa_long@text+1)& (0+255),w,b
 24516  0101B6  6EDA               	movwf	fsr2h,c
 24517  0101B8  0E00               	movlw	0
 24518  0101BA  6EDF               	movwf	indf2,c
 24519  0101BC  0012               	return	
 24520  0101BE                     __end_of__display_itoa_long:
 24521                           	opt stack 0
 24522                           tblptru	equ	0xFF8
 24523                           tblptrh	equ	0xFF7
 24524                           tblptrl	equ	0xFF6
 24525                           tablat	equ	0xFF5
 24526                           prodh	equ	0xFF4
 24527                           prodl	equ	0xFF3
 24528                           intcon	equ	0xFF2
 24529                           postinc0	equ	0xFEE
 24530                           wreg	equ	0xFE8
 24531                           indf1	equ	0xFE7
 24532                           postinc1	equ	0xFE6
 24533                           postdec1	equ	0xFE5
 24534                           plusw1	equ	0xFE3
 24535                           fsr1h	equ	0xFE2
 24536                           fsr1l	equ	0xFE1
 24537                           indf2	equ	0xFDF
 24538                           postinc2	equ	0xFDE
 24539                           postdec2	equ	0xFDD
 24540                           plusw2	equ	0xFDB
 24541                           fsr2h	equ	0xFDA
 24542                           fsr2l	equ	0xFD9
 24543                           status	equ	0xFD8
 24544                           
 24545 ;; *************** function __display_itoa *****************
 24546 ;; Defined at:
 24547 ;;		line 130 in file "display.c"
 24548 ;; Parameters:    Size  Location     Type
 24549 ;;  value           2   53[BANK0 ] int 
 24550 ;;  decimals        1   55[BANK0 ] unsigned char 
 24551 ;;  text            2   56[BANK0 ] PTR unsigned char 
 24552 ;;		 -> display_prepare@temp(10), display_content(80), 
 24553 ;; Auto vars:     Size  Location     Type
 24554 ;;  tmp            10   64[BANK0 ] unsigned char [10]
 24555 ;;  pos             1   76[BANK0 ] unsigned char 
 24556 ;;  missing         1   75[BANK0 ] char 
 24557 ;;  len             1   74[BANK0 ] unsigned char 
 24558 ;; Return value:  Size  Location     Type
 24559 ;;                  1    wreg      void 
 24560 ;; Registers used:
 24561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24562 ;; Tracked objects:
 24563 ;;		On entry : 0/0
 24564 ;;		On exit  : 0/0
 24565 ;;		Unchanged: 0/0
 24566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 24567 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24568 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24569 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24570 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 24571 ;;Total ram usage:       24 bytes
 24572 ;; Hardware stack levels used:    1
 24573 ;; Hardware stack levels required when called:   13
 24574 ;; This function calls:
 24575 ;;		_itoa
 24576 ;;		_strlen
 24577 ;; This function is called by:
 24578 ;;		__display_itoa_long
 24579 ;;		_display_prepare
 24580 ;; This function uses a non-reentrant model
 24581 ;;
 24582                           
 24583                           	psect	text90
 24584  00E02E                     __ptext90:
 24585                           	opt stack 0
 24586  00E02E                     __display_itoa:
 24587                           	opt stack 15
 24588                           
 24589                           ;display.c: 132: uint8_t pos;;display.c: 133: uint8_t len;;display.c: 134: int8_t missin
      +                          g;;display.c: 135: char tmp[10];;display.c: 136: itoa(tmp, value, 10);
 24590                           
 24591                           ;incstack = 0
 24592  00E02E  0EA0               	movlw	low __display_itoa@tmp
 24593  00E030  0100               	movlb	0	; () banked
 24594  00E032  6F70               	movwf	itoa@buf& (0+255),b
 24595  00E034  0E00               	movlw	high __display_itoa@tmp
 24596  00E036  6F71               	movwf	(itoa@buf+1)& (0+255),b
 24597  00E038  C095  F072         	movff	__display_itoa@value,itoa@val
 24598  00E03C  C096  F073         	movff	__display_itoa@value+1,itoa@val+1
 24599  00E040  0E00               	movlw	0
 24600  00E042  6F75               	movwf	(itoa@base+1)& (0+255),b
 24601  00E044  0E0A               	movlw	10
 24602  00E046  6F74               	movwf	itoa@base& (0+255),b
 24603  00E048  EC00  F09D         	call	_itoa	;wreg free
 24604                           
 24605                           ;display.c: 137: len = strlen(tmp);
 24606  00E04C  0EA0               	movlw	low __display_itoa@tmp
 24607  00E04E  0100               	movlb	0	; () banked
 24608  00E050  6F60               	movwf	strlen@s& (0+255),b
 24609  00E052  0E00               	movlw	high __display_itoa@tmp
 24610  00E054  6F61               	movwf	(strlen@s+1)& (0+255),b
 24611  00E056  ECA6  F09D         	call	_strlen	;wreg free
 24612  00E05A  0100               	movlb	0	; () banked
 24613  00E05C  5160               	movf	?_strlen& (0+255),w,b
 24614  00E05E  6FAA               	movwf	__display_itoa@len& (0+255),b
 24615                           
 24616                           ; BSR set to: 0
 24617                           ;display.c: 139: if(value<0)
 24618  00E060  AF96               	btfss	(__display_itoa@value+1)& (0+255),7,b
 24619  00E062  D054               	goto	l1297
 24620                           
 24621                           ; BSR set to: 0
 24622                           ;display.c: 140: {;display.c: 141: missing = decimals + 2 - len;
 24623  00E064  51AA               	movf	__display_itoa@len& (0+255),w,b
 24624  00E066  0800               	sublw	0
 24625  00E068  2597               	addwf	__display_itoa@decimals& (0+255),w,b
 24626  00E06A  0F02               	addlw	2
 24627  00E06C  6FAB               	movwf	__display_itoa@missing& (0+255),b
 24628                           
 24629                           ;display.c: 142: if(missing>0)
 24630  00E06E  51AB               	movf	__display_itoa@missing& (0+255),w,b
 24631  00E070  0A80               	xorlw	128
 24632  00E072  0F7F               	addlw	-129
 24633  00E074  A0D8               	btfss	status,0,c
 24634  00E076  D090               	goto	l1304
 24635                           
 24636                           ; BSR set to: 0
 24637                           ;display.c: 143: {;display.c: 144: for(pos=decimals;pos!=0xFF;--pos)
 24638  00E078  C097  F0AC         	movff	__display_itoa@decimals,__display_itoa@pos
 24639  00E07C                     l20852:
 24640                           
 24641                           ; BSR set to: 0
 24642  00E07C  29AC               	incf	__display_itoa@pos& (0+255),w,b
 24643  00E07E  B4D8               	btfsc	status,2,c
 24644  00E080  D042               	goto	u20710
 24645                           
 24646                           ; BSR set to: 0
 24647                           ;display.c: 145: {;display.c: 146: if(pos>=missing)
 24648                           
 24649                           ; BSR set to: 0
 24650                           
 24651                           ; BSR set to: 0
 24652  00E082  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24653  00E084  BFAB               	btfsc	__display_itoa@missing& (0+255),7,b
 24654  00E086  D004               	goto	u20700
 24655  00E088  0AFF               	xorlw	255
 24656  00E08A  25AB               	addwf	__display_itoa@missing& (0+255),w,b
 24657  00E08C  B0D8               	btfsc	status,0,c
 24658  00E08E  D02A               	goto	l1301
 24659  00E090                     u20700:
 24660                           
 24661                           ; BSR set to: 0
 24662                           ;display.c: 147: {;display.c: 148: tmp[pos+1] = tmp[pos+1-missing];
 24663  00E090  C0AB  F09A         	movff	__display_itoa@missing,??__display_itoa
 24664  00E094  6B9B               	clrf	(??__display_itoa+1)& (0+255),b
 24665  00E096  BF9A               	btfsc	??__display_itoa& (0+255),7,b
 24666  00E098  079B               	decf	(??__display_itoa+1)& (0+255),f,b
 24667  00E09A  1F9A               	comf	??__display_itoa& (0+255),f,b
 24668  00E09C  1F9B               	comf	(??__display_itoa+1)& (0+255),f,b
 24669  00E09E  4B9A               	infsnz	??__display_itoa& (0+255),f,b
 24670  00E0A0  2B9B               	incf	(??__display_itoa+1)& (0+255),f,b
 24671  00E0A2  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24672  00E0A4  6F9C               	movwf	(??__display_itoa+2)& (0+255),b
 24673  00E0A6  6B9D               	clrf	(??__display_itoa+3)& (0+255),b
 24674  00E0A8  519A               	movf	??__display_itoa& (0+255),w,b
 24675  00E0AA  279C               	addwf	(??__display_itoa+2)& (0+255),f,b
 24676  00E0AC  519B               	movf	(??__display_itoa+1)& (0+255),w,b
 24677  00E0AE  239D               	addwfc	(??__display_itoa+3)& (0+255),f,b
 24678  00E0B0  0E01               	movlw	1
 24679  00E0B2  279C               	addwf	(??__display_itoa+2)& (0+255),f,b
 24680  00E0B4  0E00               	movlw	0
 24681  00E0B6  239D               	addwfc	(??__display_itoa+3)& (0+255),f,b
 24682  00E0B8  0EA0               	movlw	low __display_itoa@tmp
 24683  00E0BA  259C               	addwf	(??__display_itoa+2)& (0+255),w,b
 24684  00E0BC  6ED9               	movwf	fsr2l,c
 24685  00E0BE  0E00               	movlw	high __display_itoa@tmp
 24686  00E0C0  219D               	addwfc	(??__display_itoa+3)& (0+255),w,b
 24687  00E0C2  6EDA               	movwf	fsr2h,c
 24688  00E0C4  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24689  00E0C6  6F9E               	movwf	(??__display_itoa+4)& (0+255),b
 24690  00E0C8  6B9F               	clrf	(??__display_itoa+5)& (0+255),b
 24691  00E0CA  0E01               	movlw	1
 24692  00E0CC  279E               	addwf	(??__display_itoa+4)& (0+255),f,b
 24693  00E0CE  0E00               	movlw	0
 24694  00E0D0  239F               	addwfc	(??__display_itoa+5)& (0+255),f,b
 24695  00E0D2  0EA0               	movlw	low __display_itoa@tmp
 24696  00E0D4  259E               	addwf	(??__display_itoa+4)& (0+255),w,b
 24697  00E0D6  6EE1               	movwf	fsr1l,c
 24698  00E0D8  0E00               	movlw	high __display_itoa@tmp
 24699  00E0DA  219F               	addwfc	(??__display_itoa+5)& (0+255),w,b
 24700  00E0DC  6EE2               	movwf	fsr1h,c
 24701  00E0DE  CFDF FFE7          	movff	indf2,indf1
 24702                           
 24703                           ;display.c: 149: }
 24704  00E0E2  D00F               	goto	l1302
 24705  00E0E4                     l1301:
 24706                           
 24707                           ; BSR set to: 0
 24708                           ;display.c: 150: else;display.c: 151: {;display.c: 152: tmp[pos+1] = '0';
 24709                           
 24710                           ; BSR set to: 0
 24711  00E0E4  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24712  00E0E6  6F9A               	movwf	??__display_itoa& (0+255),b
 24713  00E0E8  6B9B               	clrf	(??__display_itoa+1)& (0+255),b
 24714  00E0EA  0E01               	movlw	1
 24715  00E0EC  279A               	addwf	??__display_itoa& (0+255),f,b
 24716  00E0EE  0E00               	movlw	0
 24717  00E0F0  239B               	addwfc	(??__display_itoa+1)& (0+255),f,b
 24718  00E0F2  0EA0               	movlw	low __display_itoa@tmp
 24719  00E0F4  259A               	addwf	??__display_itoa& (0+255),w,b
 24720  00E0F6  6ED9               	movwf	fsr2l,c
 24721  00E0F8  0E00               	movlw	high __display_itoa@tmp
 24722  00E0FA  219B               	addwfc	(??__display_itoa+1)& (0+255),w,b
 24723  00E0FC  6EDA               	movwf	fsr2h,c
 24724  00E0FE  0E30               	movlw	48
 24725  00E100  6EDF               	movwf	indf2,c
 24726  00E102                     l1302:
 24727                           
 24728                           ; BSR set to: 0
 24729                           
 24730                           ; BSR set to: 0
 24731  00E102  07AC               	decf	__display_itoa@pos& (0+255),f,b
 24732  00E104  D7BB               	goto	l20852
 24733  00E106                     u20710:
 24734                           
 24735                           ; BSR set to: 0
 24736                           ;display.c: 153: };display.c: 154: };display.c: 155: len = decimals + 2;
 24737                           
 24738                           ; BSR set to: 0
 24739  00E106  5197               	movf	__display_itoa@decimals& (0+255),w,b
 24740  00E108  0F02               	addlw	2
 24741  00E10A  D045               	goto	L40
 24742  00E10C                     l1297:
 24743                           
 24744                           ; BSR set to: 0
 24745                           ;display.c: 158: else;display.c: 159: {;display.c: 160: missing = decimals + 1 - len;
 24746                           
 24747                           ; BSR set to: 0
 24748  00E10C  51AA               	movf	__display_itoa@len& (0+255),w,b
 24749  00E10E  0800               	sublw	0
 24750  00E110  2597               	addwf	__display_itoa@decimals& (0+255),w,b
 24751  00E112  6F9A               	movwf	??__display_itoa& (0+255),b
 24752  00E114  299A               	incf	??__display_itoa& (0+255),w,b
 24753  00E116  6FAB               	movwf	__display_itoa@missing& (0+255),b
 24754                           
 24755                           ;display.c: 161: if(missing>0)
 24756  00E118  51AB               	movf	__display_itoa@missing& (0+255),w,b
 24757  00E11A  0A80               	xorlw	128
 24758  00E11C  0F7F               	addlw	-129
 24759  00E11E  A0D8               	btfss	status,0,c
 24760  00E120  D03B               	goto	l1304
 24761                           
 24762                           ; BSR set to: 0
 24763                           ;display.c: 162: {;display.c: 163: for(pos=decimals;pos!=0xFF;--pos)
 24764  00E122  C097  F0AC         	movff	__display_itoa@decimals,__display_itoa@pos
 24765  00E126                     l20872:
 24766                           
 24767                           ; BSR set to: 0
 24768  00E126  29AC               	incf	__display_itoa@pos& (0+255),w,b
 24769  00E128  B4D8               	btfsc	status,2,c
 24770  00E12A  D034               	goto	u20750
 24771                           
 24772                           ; BSR set to: 0
 24773                           ;display.c: 164: {;display.c: 165: if(pos>=missing)
 24774                           
 24775                           ; BSR set to: 0
 24776                           
 24777                           ; BSR set to: 0
 24778  00E12C  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24779  00E12E  BFAB               	btfsc	__display_itoa@missing& (0+255),7,b
 24780  00E130  D004               	goto	u20740
 24781  00E132  0AFF               	xorlw	255
 24782  00E134  25AB               	addwf	__display_itoa@missing& (0+255),w,b
 24783  00E136  B0D8               	btfsc	status,0,c
 24784  00E138  D021               	goto	l1307
 24785  00E13A                     u20740:
 24786                           
 24787                           ; BSR set to: 0
 24788                           ;display.c: 166: {;display.c: 167: tmp[pos] = tmp[pos-missing];
 24789  00E13A  C0AB  F09A         	movff	__display_itoa@missing,??__display_itoa
 24790  00E13E  6B9B               	clrf	(??__display_itoa+1)& (0+255),b
 24791  00E140  BF9A               	btfsc	??__display_itoa& (0+255),7,b
 24792  00E142  079B               	decf	(??__display_itoa+1)& (0+255),f,b
 24793  00E144  1F9A               	comf	??__display_itoa& (0+255),f,b
 24794  00E146  1F9B               	comf	(??__display_itoa+1)& (0+255),f,b
 24795  00E148  4B9A               	infsnz	??__display_itoa& (0+255),f,b
 24796  00E14A  2B9B               	incf	(??__display_itoa+1)& (0+255),f,b
 24797  00E14C  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24798  00E14E  6F9C               	movwf	(??__display_itoa+2)& (0+255),b
 24799  00E150  6B9D               	clrf	(??__display_itoa+3)& (0+255),b
 24800  00E152  519A               	movf	??__display_itoa& (0+255),w,b
 24801  00E154  279C               	addwf	(??__display_itoa+2)& (0+255),f,b
 24802  00E156  519B               	movf	(??__display_itoa+1)& (0+255),w,b
 24803  00E158  239D               	addwfc	(??__display_itoa+3)& (0+255),f,b
 24804  00E15A  0EA0               	movlw	low __display_itoa@tmp
 24805  00E15C  259C               	addwf	(??__display_itoa+2)& (0+255),w,b
 24806  00E15E  6ED9               	movwf	fsr2l,c
 24807  00E160  0E00               	movlw	high __display_itoa@tmp
 24808  00E162  219D               	addwfc	(??__display_itoa+3)& (0+255),w,b
 24809  00E164  6EDA               	movwf	fsr2h,c
 24810  00E166  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24811  00E168  0D01               	mullw	1
 24812  00E16A  0EA0               	movlw	low __display_itoa@tmp
 24813  00E16C  24F3               	addwf	prodl,w,c
 24814  00E16E  6EE1               	movwf	fsr1l,c
 24815  00E170  0E00               	movlw	high __display_itoa@tmp
 24816  00E172  20F4               	addwfc	prodh,w,c
 24817  00E174  6EE2               	movwf	fsr1h,c
 24818  00E176  CFDF FFE7          	movff	indf2,indf1
 24819                           
 24820                           ;display.c: 168: }
 24821  00E17A  D00A               	goto	l1308
 24822  00E17C                     l1307:
 24823                           
 24824                           ; BSR set to: 0
 24825                           ;display.c: 169: else;display.c: 170: {;display.c: 171: tmp[pos] = '0';
 24826                           
 24827                           ; BSR set to: 0
 24828  00E17C  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24829  00E17E  0D01               	mullw	1
 24830  00E180  0EA0               	movlw	low __display_itoa@tmp
 24831  00E182  24F3               	addwf	prodl,w,c
 24832  00E184  6ED9               	movwf	fsr2l,c
 24833  00E186  0E00               	movlw	high __display_itoa@tmp
 24834  00E188  20F4               	addwfc	prodh,w,c
 24835  00E18A  6EDA               	movwf	fsr2h,c
 24836  00E18C  0E30               	movlw	48
 24837  00E18E  6EDF               	movwf	indf2,c
 24838  00E190                     l1308:
 24839                           
 24840                           ; BSR set to: 0
 24841                           
 24842                           ; BSR set to: 0
 24843  00E190  07AC               	decf	__display_itoa@pos& (0+255),f,b
 24844  00E192  D7C9               	goto	l20872
 24845  00E194                     u20750:
 24846                           
 24847                           ; BSR set to: 0
 24848                           ;display.c: 172: };display.c: 173: };display.c: 174: len = decimals + 1;
 24849                           
 24850                           ; BSR set to: 0
 24851  00E194  2997               	incf	__display_itoa@decimals& (0+255),w,b
 24852  00E196                     L40:
 24853  00E196  6FAA               	movwf	__display_itoa@len& (0+255),b
 24854  00E198                     l1304:
 24855                           
 24856                           ; BSR set to: 0
 24857                           ;display.c: 175: };display.c: 176: };display.c: 178: decimals = len - decimals - 1;
 24858                           
 24859                           ; BSR set to: 0
 24860  00E198  5197               	movf	__display_itoa@decimals& (0+255),w,b
 24861  00E19A  0800               	sublw	0
 24862  00E19C  25AA               	addwf	__display_itoa@len& (0+255),w,b
 24863  00E19E  6F9A               	movwf	??__display_itoa& (0+255),b
 24864  00E1A0  059A               	decf	??__display_itoa& (0+255),w,b
 24865  00E1A2  6F97               	movwf	__display_itoa@decimals& (0+255),b
 24866                           
 24867                           ; BSR set to: 0
 24868                           ;display.c: 180: for(pos=0;pos<len;++pos)
 24869  00E1A4  0E00               	movlw	0
 24870  00E1A6  6FAC               	movwf	__display_itoa@pos& (0+255),b
 24871  00E1A8  D023               	goto	l1309
 24872  00E1AA                     
 24873                           ; BSR set to: 0
 24874                           ;display.c: 181: {;display.c: 182: text[pos] = tmp[pos];
 24875                           
 24876                           ; BSR set to: 0
 24877  00E1AA  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24878  00E1AC  0D01               	mullw	1
 24879  00E1AE  0EA0               	movlw	low __display_itoa@tmp
 24880  00E1B0  24F3               	addwf	prodl,w,c
 24881  00E1B2  6ED9               	movwf	fsr2l,c
 24882  00E1B4  0E00               	movlw	high __display_itoa@tmp
 24883  00E1B6  20F4               	addwfc	prodh,w,c
 24884  00E1B8  6EDA               	movwf	fsr2h,c
 24885  00E1BA  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24886  00E1BC  0D01               	mullw	1
 24887  00E1BE  50F3               	movf	prodl,w,c
 24888  00E1C0  2598               	addwf	__display_itoa@text& (0+255),w,b
 24889  00E1C2  6EE1               	movwf	fsr1l,c
 24890  00E1C4  50F4               	movf	prodh,w,c
 24891  00E1C6  2199               	addwfc	(__display_itoa@text+1)& (0+255),w,b
 24892  00E1C8  6EE2               	movwf	fsr1h,c
 24893  00E1CA  CFDF FFE7          	movff	indf2,indf1
 24894                           
 24895                           ; BSR set to: 0
 24896                           ;display.c: 183: if(pos==decimals)
 24897  00E1CE  5197               	movf	__display_itoa@decimals& (0+255),w,b
 24898  00E1D0  19AC               	xorwf	__display_itoa@pos& (0+255),w,b
 24899  00E1D2  A4D8               	btfss	status,2,c
 24900  00E1D4  D00C               	goto	l1311
 24901                           
 24902                           ; BSR set to: 0
 24903                           ;display.c: 184: {;display.c: 186: ++pos;
 24904  00E1D6  2BAC               	incf	__display_itoa@pos& (0+255),f,b
 24905                           
 24906                           ; BSR set to: 0
 24907                           ;display.c: 187: text[pos] = '.';
 24908  00E1D8  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24909  00E1DA  0D01               	mullw	1
 24910  00E1DC  50F3               	movf	prodl,w,c
 24911  00E1DE  2598               	addwf	__display_itoa@text& (0+255),w,b
 24912  00E1E0  6ED9               	movwf	fsr2l,c
 24913  00E1E2  50F4               	movf	prodh,w,c
 24914  00E1E4  2199               	addwfc	(__display_itoa@text+1)& (0+255),w,b
 24915  00E1E6  6EDA               	movwf	fsr2h,c
 24916  00E1E8  0E2E               	movlw	46
 24917  00E1EA  6EDF               	movwf	indf2,c
 24918                           
 24919                           ;display.c: 188: break;
 24920  00E1EC  D01E               	goto	l1313
 24921  00E1EE                     l1311:
 24922                           
 24923                           ; BSR set to: 0
 24924                           
 24925                           ; BSR set to: 0
 24926  00E1EE  2BAC               	incf	__display_itoa@pos& (0+255),f,b
 24927  00E1F0                     l1309:
 24928                           
 24929                           ; BSR set to: 0
 24930                           
 24931                           ; BSR set to: 0
 24932  00E1F0  51AA               	movf	__display_itoa@len& (0+255),w,b
 24933  00E1F2  5DAC               	subwf	__display_itoa@pos& (0+255),w,b
 24934  00E1F4  B0D8               	btfsc	status,0,c
 24935  00E1F6  D019               	goto	l1313
 24936  00E1F8  D7D8               	goto	l1310
 24937  00E1FA                     
 24938                           ; BSR set to: 0
 24939                           ;display.c: 192: {;display.c: 193: text[pos+1] = tmp[pos];
 24940                           
 24941                           ; BSR set to: 0
 24942  00E1FA  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24943  00E1FC  0D01               	mullw	1
 24944  00E1FE  0EA0               	movlw	low __display_itoa@tmp
 24945  00E200  24F3               	addwf	prodl,w,c
 24946  00E202  6ED9               	movwf	fsr2l,c
 24947  00E204  0E00               	movlw	high __display_itoa@tmp
 24948  00E206  20F4               	addwfc	prodh,w,c
 24949  00E208  6EDA               	movwf	fsr2h,c
 24950  00E20A  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24951  00E20C  6F9A               	movwf	??__display_itoa& (0+255),b
 24952  00E20E  6B9B               	clrf	(??__display_itoa+1)& (0+255),b
 24953  00E210  0E01               	movlw	1
 24954  00E212  279A               	addwf	??__display_itoa& (0+255),f,b
 24955  00E214  0E00               	movlw	0
 24956  00E216  239B               	addwfc	(??__display_itoa+1)& (0+255),f,b
 24957  00E218  519A               	movf	??__display_itoa& (0+255),w,b
 24958  00E21A  2598               	addwf	__display_itoa@text& (0+255),w,b
 24959  00E21C  6EE1               	movwf	fsr1l,c
 24960  00E21E  519B               	movf	(??__display_itoa+1)& (0+255),w,b
 24961  00E220  2199               	addwfc	(__display_itoa@text+1)& (0+255),w,b
 24962  00E222  6EE2               	movwf	fsr1h,c
 24963  00E224  CFDF FFE7          	movff	indf2,indf1
 24964                           
 24965                           ; BSR set to: 0
 24966  00E228  2BAC               	incf	__display_itoa@pos& (0+255),f,b
 24967  00E22A                     l1313:
 24968                           
 24969                           ; BSR set to: 0
 24970                           
 24971                           ; BSR set to: 0
 24972  00E22A  51AA               	movf	__display_itoa@len& (0+255),w,b
 24973  00E22C  5DAC               	subwf	__display_itoa@pos& (0+255),w,b
 24974  00E22E  A0D8               	btfss	status,0,c
 24975  00E230  D7E4               	goto	l1314
 24976                           
 24977                           ; BSR set to: 0
 24978                           ;display.c: 194: };display.c: 195: text[pos+1] = 0;
 24979                           
 24980                           ; BSR set to: 0
 24981  00E232  51AC               	movf	__display_itoa@pos& (0+255),w,b
 24982  00E234  6F9A               	movwf	??__display_itoa& (0+255),b
 24983  00E236  6B9B               	clrf	(??__display_itoa+1)& (0+255),b
 24984  00E238  0E01               	movlw	1
 24985  00E23A  279A               	addwf	??__display_itoa& (0+255),f,b
 24986  00E23C  0E00               	movlw	0
 24987  00E23E  239B               	addwfc	(??__display_itoa+1)& (0+255),f,b
 24988  00E240  519A               	movf	??__display_itoa& (0+255),w,b
 24989  00E242  2598               	addwf	__display_itoa@text& (0+255),w,b
 24990  00E244  6ED9               	movwf	fsr2l,c
 24991  00E246  519B               	movf	(??__display_itoa+1)& (0+255),w,b
 24992  00E248  2199               	addwfc	(__display_itoa@text+1)& (0+255),w,b
 24993  00E24A  6EDA               	movwf	fsr2h,c
 24994  00E24C  0E00               	movlw	0
 24995  00E24E  6EDF               	movwf	indf2,c
 24996                           
 24997                           ; BSR set to: 0
 24998  00E250  0012               	return		;funcret
 24999  00E252                     __end_of__display_itoa:
 25000                           	opt stack 0
 25001                           tblptru	equ	0xFF8
 25002                           tblptrh	equ	0xFF7
 25003                           tblptrl	equ	0xFF6
 25004                           tablat	equ	0xFF5
 25005                           prodh	equ	0xFF4
 25006                           prodl	equ	0xFF3
 25007                           intcon	equ	0xFF2
 25008                           postinc0	equ	0xFEE
 25009                           wreg	equ	0xFE8
 25010                           indf1	equ	0xFE7
 25011                           postinc1	equ	0xFE6
 25012                           postdec1	equ	0xFE5
 25013                           plusw1	equ	0xFE3
 25014                           fsr1h	equ	0xFE2
 25015                           fsr1l	equ	0xFE1
 25016                           indf2	equ	0xFDF
 25017                           postinc2	equ	0xFDE
 25018                           postdec2	equ	0xFDD
 25019                           plusw2	equ	0xFDB
 25020                           fsr2h	equ	0xFDA
 25021                           fsr2l	equ	0xFD9
 25022                           status	equ	0xFD8
 25023                           
 25024 ;; *************** function _strlen *****************
 25025 ;; Defined at:
 25026 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\strlen.c"
 25027 ;; Parameters:    Size  Location     Type
 25028 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 25029 ;;		 -> display_prepare@temp(10), _display_itoa@tmp(10), _display_padded_itoa@tmp(10), 
 25030 ;; Auto vars:     Size  Location     Type
 25031 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
 25032 ;;		 -> display_prepare@temp(10), _display_itoa@tmp(10), _display_padded_itoa@tmp(10), 
 25033 ;; Return value:  Size  Location     Type
 25034 ;;                  2    0[BANK0 ] unsigned int 
 25035 ;; Registers used:
 25036 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25037 ;; Tracked objects:
 25038 ;;		On entry : 0/0
 25039 ;;		On exit  : 0/0
 25040 ;;		Unchanged: 0/0
 25041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 25042 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25045 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25046 ;;Total ram usage:        6 bytes
 25047 ;; Hardware stack levels used:    1
 25048 ;; Hardware stack levels required when called:   10
 25049 ;; This function calls:
 25050 ;;		Nothing
 25051 ;; This function is called by:
 25052 ;;		__display_padded_itoa
 25053 ;;		__display_itoa
 25054 ;;		__display_itoa_long
 25055 ;;		_display_prepare
 25056 ;; This function uses a non-reentrant model
 25057 ;;
 25058                           
 25059                           	psect	text91
 25060  013B4C                     __ptext91:
 25061                           	opt stack 0
 25062  013B4C                     _strlen:
 25063                           	opt stack 19
 25064                           
 25065                           ; BSR set to: 0
 25066                           ;incstack = 0
 25067  013B4C  C060  F064         	movff	strlen@s,strlen@cp
 25068  013B50  C061  F065         	movff	strlen@s+1,strlen@cp+1
 25069  013B54  D003               	goto	l3490
 25070  013B56  0100               	movlb	0	; () banked
 25071  013B58  4B64               	infsnz	strlen@cp& (0+255),f,b
 25072  013B5A  2B65               	incf	(strlen@cp+1)& (0+255),f,b
 25073  013B5C                     l3490:
 25074                           
 25075                           ; BSR set to: 0
 25076  013B5C  C064  FFD9         	movff	strlen@cp,fsr2l
 25077  013B60  C065  FFDA         	movff	strlen@cp+1,fsr2h
 25078  013B64  50DF               	movf	indf2,w,c
 25079  013B66  A4D8               	btfss	status,2,c
 25080  013B68  D7F6               	goto	l3491
 25081  013B6A  C060  F062         	movff	strlen@s,??_strlen
 25082  013B6E  C061  F063         	movff	strlen@s+1,??_strlen+1
 25083  013B72  0100               	movlb	0	; () banked
 25084  013B74  1F62               	comf	??_strlen& (0+255),f,b
 25085  013B76  1F63               	comf	(??_strlen+1)& (0+255),f,b
 25086  013B78  4B62               	infsnz	??_strlen& (0+255),f,b
 25087  013B7A  2B63               	incf	(??_strlen+1)& (0+255),f,b
 25088  013B7C  5164               	movf	strlen@cp& (0+255),w,b
 25089  013B7E  2562               	addwf	??_strlen& (0+255),w,b
 25090  013B80  6F60               	movwf	?_strlen& (0+255),b
 25091  013B82  5165               	movf	(strlen@cp+1)& (0+255),w,b
 25092  013B84  2163               	addwfc	(??_strlen+1)& (0+255),w,b
 25093  013B86  6F61               	movwf	(?_strlen+1)& (0+255),b
 25094  013B88  0012               	return	
 25095  013B8A                     __end_of_strlen:
 25096                           	opt stack 0
 25097                           tblptru	equ	0xFF8
 25098                           tblptrh	equ	0xFF7
 25099                           tblptrl	equ	0xFF6
 25100                           tablat	equ	0xFF5
 25101                           prodh	equ	0xFF4
 25102                           prodl	equ	0xFF3
 25103                           intcon	equ	0xFF2
 25104                           postinc0	equ	0xFEE
 25105                           wreg	equ	0xFE8
 25106                           indf1	equ	0xFE7
 25107                           postinc1	equ	0xFE6
 25108                           postdec1	equ	0xFE5
 25109                           plusw1	equ	0xFE3
 25110                           fsr1h	equ	0xFE2
 25111                           fsr1l	equ	0xFE1
 25112                           indf2	equ	0xFDF
 25113                           postinc2	equ	0xFDE
 25114                           postdec2	equ	0xFDD
 25115                           plusw2	equ	0xFDB
 25116                           fsr2h	equ	0xFDA
 25117                           fsr2l	equ	0xFD9
 25118                           status	equ	0xFD8
 25119                           
 25120 ;; *************** function _itoa *****************
 25121 ;; Defined at:
 25122 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\itoa.c"
 25123 ;; Parameters:    Size  Location     Type
 25124 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 25125 ;;		 -> _display_itoa@tmp(10), _display_padded_itoa@tmp(10), 
 25126 ;;  val             2   18[BANK0 ] int 
 25127 ;;  base            2   20[BANK0 ] int 
 25128 ;; Auto vars:     Size  Location     Type
 25129 ;;  cp              2   22[BANK0 ] PTR unsigned char 
 25130 ;;		 -> _display_itoa@tmp(10), _display_padded_itoa@tmp(10), 
 25131 ;; Return value:  Size  Location     Type
 25132 ;;                  2   16[BANK0 ] PTR unsigned char 
 25133 ;; Registers used:
 25134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25135 ;; Tracked objects:
 25136 ;;		On entry : 0/0
 25137 ;;		On exit  : 0/0
 25138 ;;		Unchanged: 0/0
 25139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 25140 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25143 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25144 ;;Total ram usage:        8 bytes
 25145 ;; Hardware stack levels used:    1
 25146 ;; Hardware stack levels required when called:   12
 25147 ;; This function calls:
 25148 ;;		_utoa
 25149 ;; This function is called by:
 25150 ;;		__display_padded_itoa
 25151 ;;		__display_itoa
 25152 ;; This function uses a non-reentrant model
 25153 ;;
 25154                           
 25155                           	psect	text92
 25156  013A00                     __ptext92:
 25157                           	opt stack 0
 25158  013A00                     _itoa:
 25159                           	opt stack 15
 25160                           
 25161                           ; BSR set to: 0
 25162                           ;incstack = 0
 25163  013A00  C070  F076         	movff	itoa@buf,itoa@cp
 25164  013A04  C071  F077         	movff	itoa@buf+1,itoa@cp+1
 25165  013A08  0100               	movlb	0	; () banked
 25166  013A0A  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 25167  013A0C  D00C               	goto	l3452
 25168                           
 25169                           ; BSR set to: 0
 25170  013A0E  C070  FFD9         	movff	itoa@buf,fsr2l
 25171  013A12  C071  FFDA         	movff	itoa@buf+1,fsr2h
 25172  013A16  0E2D               	movlw	45
 25173  013A18  6EDF               	movwf	indf2,c
 25174                           
 25175                           ; BSR set to: 0
 25176  013A1A  4B70               	infsnz	itoa@buf& (0+255),f,b
 25177  013A1C  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 25178                           
 25179                           ; BSR set to: 0
 25180  013A1E  6D72               	negf	itoa@val& (0+255),b
 25181  013A20  1F73               	comf	(itoa@val+1)& (0+255),f,b
 25182  013A22  B0D8               	btfsc	status,0,c
 25183  013A24  2B73               	incf	(itoa@val+1)& (0+255),f,b
 25184  013A26                     l3452:
 25185                           
 25186                           ; BSR set to: 0
 25187                           
 25188                           ; BSR set to: 0
 25189  013A26  C070  F067         	movff	itoa@buf,utoa@buf
 25190  013A2A  C071  F068         	movff	itoa@buf+1,utoa@buf+1
 25191  013A2E  C072  F069         	movff	itoa@val,utoa@val
 25192  013A32  C073  F06A         	movff	itoa@val+1,utoa@val+1
 25193  013A36  C074  F06B         	movff	itoa@base,utoa@base
 25194  013A3A  C075  F06C         	movff	itoa@base+1,utoa@base+1
 25195  013A3E  EC79  F090         	call	_utoa	;wreg free
 25196  013A42  0012               	return	
 25197  013A44                     __end_of_itoa:
 25198                           	opt stack 0
 25199                           tblptru	equ	0xFF8
 25200                           tblptrh	equ	0xFF7
 25201                           tblptrl	equ	0xFF6
 25202                           tablat	equ	0xFF5
 25203                           prodh	equ	0xFF4
 25204                           prodl	equ	0xFF3
 25205                           intcon	equ	0xFF2
 25206                           postinc0	equ	0xFEE
 25207                           wreg	equ	0xFE8
 25208                           indf1	equ	0xFE7
 25209                           postinc1	equ	0xFE6
 25210                           postdec1	equ	0xFE5
 25211                           plusw1	equ	0xFE3
 25212                           fsr1h	equ	0xFE2
 25213                           fsr1l	equ	0xFE1
 25214                           indf2	equ	0xFDF
 25215                           postinc2	equ	0xFDE
 25216                           postdec2	equ	0xFDD
 25217                           plusw2	equ	0xFDB
 25218                           fsr2h	equ	0xFDA
 25219                           fsr2l	equ	0xFD9
 25220                           status	equ	0xFD8
 25221                           
 25222 ;; *************** function _utoa *****************
 25223 ;; Defined at:
 25224 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\itoa.c"
 25225 ;; Parameters:    Size  Location     Type
 25226 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 25227 ;;		 -> _display_itoa@tmp(10), _display_padded_itoa@tmp(10), 
 25228 ;;  val             2    9[BANK0 ] unsigned int 
 25229 ;;  base            2   11[BANK0 ] int 
 25230 ;; Auto vars:     Size  Location     Type
 25231 ;;  v               2   13[BANK0 ] unsigned int 
 25232 ;;  c               1   15[BANK0 ] unsigned char 
 25233 ;; Return value:  Size  Location     Type
 25234 ;;                  2    7[BANK0 ] PTR unsigned char 
 25235 ;; Registers used:
 25236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25237 ;; Tracked objects:
 25238 ;;		On entry : 0/0
 25239 ;;		On exit  : 0/0
 25240 ;;		Unchanged: 0/0
 25241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 25242 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25243 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25245 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25246 ;;Total ram usage:        9 bytes
 25247 ;; Hardware stack levels used:    1
 25248 ;; Hardware stack levels required when called:   11
 25249 ;; This function calls:
 25250 ;;		___lwdiv
 25251 ;;		___lwmod
 25252 ;; This function is called by:
 25253 ;;		_itoa
 25254 ;; This function uses a non-reentrant model
 25255 ;;
 25256                           
 25257                           	psect	text93
 25258  0120F2                     __ptext93:
 25259                           	opt stack 0
 25260  0120F2                     _utoa:
 25261                           	opt stack 15
 25262                           
 25263                           ;incstack = 0
 25264  0120F2  C069  F06D         	movff	utoa@val,utoa@v
 25265  0120F6  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 25266  0120FA  C06D  F060         	movff	utoa@v,___lwdiv@dividend
 25267  0120FE  C06E  F061         	movff	utoa@v+1,___lwdiv@dividend+1
 25268  012102  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 25269  012106  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 25270  01210A  EC31  F09B         	call	___lwdiv	;wreg free
 25271  01210E  C060  F06D         	movff	?___lwdiv,utoa@v
 25272  012112  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 25273  012116  0100               	movlb	0	; () banked
 25274  012118  4B67               	infsnz	utoa@buf& (0+255),f,b
 25275  01211A  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 25276                           
 25277                           ; BSR set to: 0
 25278  01211C  516D               	movf	utoa@v& (0+255),w,b
 25279  01211E  116E               	iorwf	(utoa@v+1)& (0+255),w,b
 25280  012120  A4D8               	btfss	status,2,c
 25281  012122  D7EB               	goto	l3456
 25282                           
 25283                           ; BSR set to: 0
 25284                           
 25285                           ; BSR set to: 0
 25286  012124  C067  FFD9         	movff	utoa@buf,fsr2l
 25287  012128  C068  FFDA         	movff	utoa@buf+1,fsr2h
 25288  01212C  0E00               	movlw	0
 25289  01212E  6EDF               	movwf	indf2,c
 25290                           
 25291                           ; BSR set to: 0
 25292  012130  0767               	decf	utoa@buf& (0+255),f,b
 25293  012132  A0D8               	btfss	status,0,c
 25294  012134  0768               	decf	(utoa@buf+1)& (0+255),f,b
 25295  012136                     
 25296                           ; BSR set to: 0
 25297                           
 25298                           ; BSR set to: 0
 25299  012136  C069  F060         	movff	utoa@val,___lwmod@dividend
 25300  01213A  C06A  F061         	movff	utoa@val+1,___lwmod@dividend+1
 25301  01213E  C06B  F062         	movff	utoa@base,___lwmod@divisor
 25302  012142  C06C  F063         	movff	utoa@base+1,___lwmod@divisor+1
 25303  012146  EC22  F09D         	call	___lwmod	;wreg free
 25304  01214A  0100               	movlb	0	; () banked
 25305  01214C  5160               	movf	?___lwmod& (0+255),w,b
 25306  01214E  6F6F               	movwf	utoa@c& (0+255),b
 25307                           
 25308                           ; BSR set to: 0
 25309  012150  C069  F060         	movff	utoa@val,___lwdiv@dividend
 25310  012154  C06A  F061         	movff	utoa@val+1,___lwdiv@dividend+1
 25311  012158  C06B  F062         	movff	utoa@base,___lwdiv@divisor
 25312  01215C  C06C  F063         	movff	utoa@base+1,___lwdiv@divisor+1
 25313  012160  EC31  F09B         	call	___lwdiv	;wreg free
 25314  012164  C060  F069         	movff	?___lwdiv,utoa@val
 25315  012168  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 25316  01216C  0E09               	movlw	9
 25317  01216E  0100               	movlb	0	; () banked
 25318  012170  656F               	cpfsgt	utoa@c& (0+255),b
 25319  012172  D002               	goto	l3459
 25320                           
 25321                           ; BSR set to: 0
 25322  012174  0E07               	movlw	7
 25323  012176  276F               	addwf	utoa@c& (0+255),f,b
 25324  012178                     l3459:
 25325                           
 25326                           ; BSR set to: 0
 25327  012178  0E30               	movlw	48
 25328  01217A  276F               	addwf	utoa@c& (0+255),f,b
 25329                           
 25330                           ; BSR set to: 0
 25331  01217C  C067  FFD9         	movff	utoa@buf,fsr2l
 25332  012180  C068  FFDA         	movff	utoa@buf+1,fsr2h
 25333  012184  C06F  FFDF         	movff	utoa@c,indf2
 25334                           
 25335                           ; BSR set to: 0
 25336  012188  0767               	decf	utoa@buf& (0+255),f,b
 25337  01218A  A0D8               	btfss	status,0,c
 25338  01218C  0768               	decf	(utoa@buf+1)& (0+255),f,b
 25339                           
 25340                           ; BSR set to: 0
 25341  01218E  5169               	movf	utoa@val& (0+255),w,b
 25342  012190  116A               	iorwf	(utoa@val+1)& (0+255),w,b
 25343  012192  A4D8               	btfss	status,2,c
 25344  012194  D7D0               	goto	l3458
 25345                           
 25346                           ; BSR set to: 0
 25347                           ;	Return value of _utoa is never used
 25348                           
 25349                           ; BSR set to: 0
 25350  012196  4B67               	infsnz	utoa@buf& (0+255),f,b
 25351  012198  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 25352  01219A  0012               	return	
 25353  01219C                     __end_of_utoa:
 25354                           	opt stack 0
 25355                           tblptru	equ	0xFF8
 25356                           tblptrh	equ	0xFF7
 25357                           tblptrl	equ	0xFF6
 25358                           tablat	equ	0xFF5
 25359                           prodh	equ	0xFF4
 25360                           prodl	equ	0xFF3
 25361                           intcon	equ	0xFF2
 25362                           postinc0	equ	0xFEE
 25363                           wreg	equ	0xFE8
 25364                           indf1	equ	0xFE7
 25365                           postinc1	equ	0xFE6
 25366                           postdec1	equ	0xFE5
 25367                           plusw1	equ	0xFE3
 25368                           fsr1h	equ	0xFE2
 25369                           fsr1l	equ	0xFE1
 25370                           indf2	equ	0xFDF
 25371                           postinc2	equ	0xFDE
 25372                           postdec2	equ	0xFDD
 25373                           plusw2	equ	0xFDB
 25374                           fsr2h	equ	0xFDA
 25375                           fsr2l	equ	0xFD9
 25376                           status	equ	0xFD8
 25377                           
 25378 ;; *************** function ___lwmod *****************
 25379 ;; Defined at:
 25380 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwmod.c"
 25381 ;; Parameters:    Size  Location     Type
 25382 ;;  dividend        2    0[BANK0 ] unsigned int 
 25383 ;;  divisor         2    2[BANK0 ] unsigned int 
 25384 ;; Auto vars:     Size  Location     Type
 25385 ;;  counter         1    4[BANK0 ] unsigned char 
 25386 ;; Return value:  Size  Location     Type
 25387 ;;                  2    0[BANK0 ] unsigned int 
 25388 ;; Registers used:
 25389 ;;		wreg, status,2, status,0
 25390 ;; Tracked objects:
 25391 ;;		On entry : 0/0
 25392 ;;		On exit  : 0/0
 25393 ;;		Unchanged: 0/0
 25394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 25395 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25398 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25399 ;;Total ram usage:        5 bytes
 25400 ;; Hardware stack levels used:    1
 25401 ;; Hardware stack levels required when called:   10
 25402 ;; This function calls:
 25403 ;;		Nothing
 25404 ;; This function is called by:
 25405 ;;		_utoa
 25406 ;; This function uses a non-reentrant model
 25407 ;;
 25408                           
 25409                           	psect	text94
 25410  013A44                     __ptext94:
 25411                           	opt stack 0
 25412  013A44                     ___lwmod:
 25413                           	opt stack 15
 25414                           
 25415                           ; BSR set to: 0
 25416                           ;incstack = 0
 25417  013A44  0100               	movlb	0	; () banked
 25418  013A46  5162               	movf	___lwmod@divisor& (0+255),w,b
 25419  013A48  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 25420  013A4A  B4D8               	btfsc	status,2,c
 25421  013A4C  D018               	goto	l3283
 25422                           
 25423                           ; BSR set to: 0
 25424  013A4E  0E01               	movlw	1
 25425  013A50  6F64               	movwf	___lwmod@counter& (0+255),b
 25426  013A52  D004               	goto	l3278
 25427  013A54                     
 25428                           ; BSR set to: 0
 25429                           
 25430                           ; BSR set to: 0
 25431  013A54  90D8               	bcf	status,0,c
 25432  013A56  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 25433  013A58  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 25434  013A5A  2B64               	incf	___lwmod@counter& (0+255),f,b
 25435  013A5C                     l3278:
 25436                           
 25437                           ; BSR set to: 0
 25438                           
 25439                           ; BSR set to: 0
 25440  013A5C  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 25441  013A5E  D7FA               	goto	l3279
 25442  013A60                     u18660:
 25443                           
 25444                           ; BSR set to: 0
 25445                           
 25446                           ; BSR set to: 0
 25447                           
 25448                           ; BSR set to: 0
 25449  013A60  5162               	movf	___lwmod@divisor& (0+255),w,b
 25450  013A62  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 25451  013A64  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 25452  013A66  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 25453  013A68  A0D8               	btfss	status,0,c
 25454  013A6A  D004               	goto	l3282
 25455                           
 25456                           ; BSR set to: 0
 25457  013A6C  5162               	movf	___lwmod@divisor& (0+255),w,b
 25458  013A6E  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 25459  013A70  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 25460  013A72  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 25461  013A74                     l3282:
 25462                           
 25463                           ; BSR set to: 0
 25464                           
 25465                           ; BSR set to: 0
 25466  013A74  90D8               	bcf	status,0,c
 25467  013A76  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 25468  013A78  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 25469                           
 25470                           ; BSR set to: 0
 25471  013A7A  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 25472  013A7C  D7F1               	goto	u18660
 25473  013A7E                     l3283:
 25474                           
 25475                           ; BSR set to: 0
 25476                           
 25477                           ; BSR set to: 0
 25478  013A7E  C060  F060         	movff	___lwmod@dividend,?___lwmod
 25479  013A82  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 25480                           
 25481                           ; BSR set to: 0
 25482  013A86  0012               	return		;funcret
 25483  013A88                     __end_of___lwmod:
 25484                           	opt stack 0
 25485                           tblptru	equ	0xFF8
 25486                           tblptrh	equ	0xFF7
 25487                           tblptrl	equ	0xFF6
 25488                           tablat	equ	0xFF5
 25489                           prodh	equ	0xFF4
 25490                           prodl	equ	0xFF3
 25491                           intcon	equ	0xFF2
 25492                           postinc0	equ	0xFEE
 25493                           wreg	equ	0xFE8
 25494                           indf1	equ	0xFE7
 25495                           postinc1	equ	0xFE6
 25496                           postdec1	equ	0xFE5
 25497                           plusw1	equ	0xFE3
 25498                           fsr1h	equ	0xFE2
 25499                           fsr1l	equ	0xFE1
 25500                           indf2	equ	0xFDF
 25501                           postinc2	equ	0xFDE
 25502                           postdec2	equ	0xFDD
 25503                           plusw2	equ	0xFDB
 25504                           fsr2h	equ	0xFDA
 25505                           fsr2l	equ	0xFD9
 25506                           status	equ	0xFD8
 25507                           
 25508 ;; *************** function ___lwdiv *****************
 25509 ;; Defined at:
 25510 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\lwdiv.c"
 25511 ;; Parameters:    Size  Location     Type
 25512 ;;  dividend        2    0[BANK0 ] unsigned int 
 25513 ;;  divisor         2    2[BANK0 ] unsigned int 
 25514 ;; Auto vars:     Size  Location     Type
 25515 ;;  quotient        2    5[BANK0 ] unsigned int 
 25516 ;;  counter         1    4[BANK0 ] unsigned char 
 25517 ;; Return value:  Size  Location     Type
 25518 ;;                  2    0[BANK0 ] unsigned int 
 25519 ;; Registers used:
 25520 ;;		wreg, status,2, status,0
 25521 ;; Tracked objects:
 25522 ;;		On entry : 0/0
 25523 ;;		On exit  : 0/0
 25524 ;;		Unchanged: 0/0
 25525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 25526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25527 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25529 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25530 ;;Total ram usage:        7 bytes
 25531 ;; Hardware stack levels used:    1
 25532 ;; Hardware stack levels required when called:   10
 25533 ;; This function calls:
 25534 ;;		Nothing
 25535 ;; This function is called by:
 25536 ;;		_utoa
 25537 ;; This function uses a non-reentrant model
 25538 ;;
 25539                           
 25540                           	psect	text95
 25541  013662                     __ptext95:
 25542                           	opt stack 0
 25543  013662                     ___lwdiv:
 25544                           	opt stack 15
 25545                           
 25546                           ; BSR set to: 0
 25547                           ;incstack = 0
 25548  013662  0E00               	movlw	0
 25549  013664  0100               	movlb	0	; () banked
 25550  013666  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 25551  013668  0E00               	movlw	0
 25552  01366A  6F65               	movwf	___lwdiv@quotient& (0+255),b
 25553                           
 25554                           ; BSR set to: 0
 25555  01366C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25556  01366E  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 25557  013670  B4D8               	btfsc	status,2,c
 25558  013672  D01C               	goto	l3273
 25559                           
 25560                           ; BSR set to: 0
 25561  013674  0E01               	movlw	1
 25562  013676  6F64               	movwf	___lwdiv@counter& (0+255),b
 25563  013678  D004               	goto	l3268
 25564  01367A                     
 25565                           ; BSR set to: 0
 25566                           
 25567                           ; BSR set to: 0
 25568  01367A  90D8               	bcf	status,0,c
 25569  01367C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 25570  01367E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 25571  013680  2B64               	incf	___lwdiv@counter& (0+255),f,b
 25572  013682                     l3268:
 25573                           
 25574                           ; BSR set to: 0
 25575                           
 25576                           ; BSR set to: 0
 25577  013682  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 25578  013684  D7FA               	goto	l3269
 25579  013686                     u18630:
 25580                           
 25581                           ; BSR set to: 0
 25582                           
 25583                           ; BSR set to: 0
 25584                           
 25585                           ; BSR set to: 0
 25586  013686  90D8               	bcf	status,0,c
 25587  013688  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 25588  01368A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 25589                           
 25590                           ; BSR set to: 0
 25591  01368C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25592  01368E  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 25593  013690  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 25594  013692  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 25595  013694  A0D8               	btfss	status,0,c
 25596  013696  D005               	goto	l3272
 25597                           
 25598                           ; BSR set to: 0
 25599  013698  5162               	movf	___lwdiv@divisor& (0+255),w,b
 25600  01369A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 25601  01369C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 25602  01369E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 25603                           
 25604                           ; BSR set to: 0
 25605  0136A0  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 25606  0136A2                     l3272:
 25607                           
 25608                           ; BSR set to: 0
 25609                           
 25610                           ; BSR set to: 0
 25611  0136A2  90D8               	bcf	status,0,c
 25612  0136A4  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 25613  0136A6  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 25614                           
 25615                           ; BSR set to: 0
 25616  0136A8  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 25617  0136AA  D7ED               	goto	u18630
 25618  0136AC                     l3273:
 25619                           
 25620                           ; BSR set to: 0
 25621                           
 25622                           ; BSR set to: 0
 25623  0136AC  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 25624  0136B0  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 25625                           
 25626                           ; BSR set to: 0
 25627  0136B4  0012               	return		;funcret
 25628  0136B6                     __end_of___lwdiv:
 25629                           	opt stack 0
 25630                           tblptru	equ	0xFF8
 25631                           tblptrh	equ	0xFF7
 25632                           tblptrl	equ	0xFF6
 25633                           tablat	equ	0xFF5
 25634                           prodh	equ	0xFF4
 25635                           prodl	equ	0xFF3
 25636                           intcon	equ	0xFF2
 25637                           postinc0	equ	0xFEE
 25638                           wreg	equ	0xFE8
 25639                           indf1	equ	0xFE7
 25640                           postinc1	equ	0xFE6
 25641                           postdec1	equ	0xFE5
 25642                           plusw1	equ	0xFE3
 25643                           fsr1h	equ	0xFE2
 25644                           fsr1l	equ	0xFE1
 25645                           indf2	equ	0xFDF
 25646                           postinc2	equ	0xFDE
 25647                           postdec2	equ	0xFDD
 25648                           plusw2	equ	0xFDB
 25649                           fsr2h	equ	0xFDA
 25650                           fsr2l	equ	0xFD9
 25651                           status	equ	0xFD8
 25652                           
 25653 ;; *************** function ___almod *****************
 25654 ;; Defined at:
 25655 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\almod.c"
 25656 ;; Parameters:    Size  Location     Type
 25657 ;;  dividend        4    0[BANK0 ] long 
 25658 ;;  divisor         4    4[BANK0 ] long 
 25659 ;; Auto vars:     Size  Location     Type
 25660 ;;  sign            1    9[BANK0 ] unsigned char 
 25661 ;;  counter         1    8[BANK0 ] unsigned char 
 25662 ;; Return value:  Size  Location     Type
 25663 ;;                  4    0[BANK0 ] long 
 25664 ;; Registers used:
 25665 ;;		wreg, status,2, status,0
 25666 ;; Tracked objects:
 25667 ;;		On entry : 0/0
 25668 ;;		On exit  : 0/0
 25669 ;;		Unchanged: 0/0
 25670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 25671 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25674 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25675 ;;Total ram usage:       10 bytes
 25676 ;; Hardware stack levels used:    1
 25677 ;; Hardware stack levels required when called:   10
 25678 ;; This function calls:
 25679 ;;		Nothing
 25680 ;; This function is called by:
 25681 ;;		__display_itoa_long
 25682 ;; This function uses a non-reentrant model
 25683 ;;
 25684                           
 25685                           	psect	text96
 25686  011EEE                     __ptext96:
 25687                           	opt stack 0
 25688  011EEE                     ___almod:
 25689                           	opt stack 18
 25690                           
 25691                           ; BSR set to: 0
 25692                           ;incstack = 0
 25693  011EEE  0E00               	movlw	0
 25694  011EF0  0100               	movlb	0	; () banked
 25695  011EF2  6F69               	movwf	___almod@sign& (0+255),b
 25696                           
 25697                           ; BSR set to: 0
 25698  011EF4  AF63               	btfss	(___almod@dividend+3)& (0+255),7,b
 25699  011EF6  D00A               	goto	l2870
 25700                           
 25701                           ; BSR set to: 0
 25702  011EF8  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
 25703  011EFA  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
 25704  011EFC  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
 25705  011EFE  6D60               	negf	___almod@dividend& (0+255),b
 25706  011F00  0E00               	movlw	0
 25707  011F02  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
 25708  011F04  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
 25709  011F06  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
 25710                           
 25711                           ; BSR set to: 0
 25712  011F08  0E01               	movlw	1
 25713  011F0A  6F69               	movwf	___almod@sign& (0+255),b
 25714  011F0C                     l2870:
 25715                           
 25716                           ; BSR set to: 0
 25717                           
 25718                           ; BSR set to: 0
 25719  011F0C  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
 25720  011F0E  D008               	goto	l2871
 25721                           
 25722                           ; BSR set to: 0
 25723  011F10  1F67               	comf	(___almod@divisor+3)& (0+255),f,b
 25724  011F12  1F66               	comf	(___almod@divisor+2)& (0+255),f,b
 25725  011F14  1F65               	comf	(___almod@divisor+1)& (0+255),f,b
 25726  011F16  6D64               	negf	___almod@divisor& (0+255),b
 25727  011F18  0E00               	movlw	0
 25728  011F1A  2365               	addwfc	(___almod@divisor+1)& (0+255),f,b
 25729  011F1C  2366               	addwfc	(___almod@divisor+2)& (0+255),f,b
 25730  011F1E  2367               	addwfc	(___almod@divisor+3)& (0+255),f,b
 25731  011F20                     l2871:
 25732                           
 25733                           ; BSR set to: 0
 25734                           
 25735                           ; BSR set to: 0
 25736  011F20  5164               	movf	___almod@divisor& (0+255),w,b
 25737  011F22  1165               	iorwf	(___almod@divisor+1)& (0+255),w,b
 25738  011F24  1166               	iorwf	(___almod@divisor+2)& (0+255),w,b
 25739  011F26  1167               	iorwf	(___almod@divisor+3)& (0+255),w,b
 25740  011F28  B4D8               	btfsc	status,2,c
 25741  011F2A  D024               	goto	l2878
 25742                           
 25743                           ; BSR set to: 0
 25744  011F2C  0E01               	movlw	1
 25745  011F2E  6F68               	movwf	___almod@counter& (0+255),b
 25746  011F30  D006               	goto	l2873
 25747  011F32                     
 25748                           ; BSR set to: 0
 25749                           
 25750                           ; BSR set to: 0
 25751  011F32  90D8               	bcf	status,0,c
 25752  011F34  3764               	rlcf	___almod@divisor& (0+255),f,b
 25753  011F36  3765               	rlcf	(___almod@divisor+1)& (0+255),f,b
 25754  011F38  3766               	rlcf	(___almod@divisor+2)& (0+255),f,b
 25755  011F3A  3767               	rlcf	(___almod@divisor+3)& (0+255),f,b
 25756  011F3C  2B68               	incf	___almod@counter& (0+255),f,b
 25757  011F3E                     l2873:
 25758                           
 25759                           ; BSR set to: 0
 25760                           
 25761                           ; BSR set to: 0
 25762  011F3E  AF67               	btfss	(___almod@divisor+3)& (0+255),7,b
 25763  011F40  D7F8               	goto	l2874
 25764  011F42                     u21400:
 25765                           
 25766                           ; BSR set to: 0
 25767                           
 25768                           ; BSR set to: 0
 25769                           
 25770                           ; BSR set to: 0
 25771  011F42  5164               	movf	___almod@divisor& (0+255),w,b
 25772  011F44  5D60               	subwf	___almod@dividend& (0+255),w,b
 25773  011F46  5165               	movf	(___almod@divisor+1)& (0+255),w,b
 25774  011F48  5961               	subwfb	(___almod@dividend+1)& (0+255),w,b
 25775  011F4A  5166               	movf	(___almod@divisor+2)& (0+255),w,b
 25776  011F4C  5962               	subwfb	(___almod@dividend+2)& (0+255),w,b
 25777  011F4E  5167               	movf	(___almod@divisor+3)& (0+255),w,b
 25778  011F50  5963               	subwfb	(___almod@dividend+3)& (0+255),w,b
 25779  011F52  A0D8               	btfss	status,0,c
 25780  011F54  D008               	goto	l2877
 25781                           
 25782                           ; BSR set to: 0
 25783  011F56  5164               	movf	___almod@divisor& (0+255),w,b
 25784  011F58  5F60               	subwf	___almod@dividend& (0+255),f,b
 25785  011F5A  5165               	movf	(___almod@divisor+1)& (0+255),w,b
 25786  011F5C  5B61               	subwfb	(___almod@dividend+1)& (0+255),f,b
 25787  011F5E  5166               	movf	(___almod@divisor+2)& (0+255),w,b
 25788  011F60  5B62               	subwfb	(___almod@dividend+2)& (0+255),f,b
 25789  011F62  5167               	movf	(___almod@divisor+3)& (0+255),w,b
 25790  011F64  5B63               	subwfb	(___almod@dividend+3)& (0+255),f,b
 25791  011F66                     l2877:
 25792                           
 25793                           ; BSR set to: 0
 25794                           
 25795                           ; BSR set to: 0
 25796  011F66  90D8               	bcf	status,0,c
 25797  011F68  3367               	rrcf	(___almod@divisor+3)& (0+255),f,b
 25798  011F6A  3366               	rrcf	(___almod@divisor+2)& (0+255),f,b
 25799  011F6C  3365               	rrcf	(___almod@divisor+1)& (0+255),f,b
 25800  011F6E  3364               	rrcf	___almod@divisor& (0+255),f,b
 25801                           
 25802                           ; BSR set to: 0
 25803  011F70  2F68               	decfsz	___almod@counter& (0+255),f,b
 25804  011F72  D7E7               	goto	u21400
 25805  011F74                     l2878:
 25806                           
 25807                           ; BSR set to: 0
 25808                           
 25809                           ; BSR set to: 0
 25810                           
 25811                           ; BSR set to: 0
 25812  011F74  5169               	movf	___almod@sign& (0+255),w,b
 25813  011F76  B4D8               	btfsc	status,2,c
 25814  011F78  D008               	goto	l2879
 25815                           
 25816                           ; BSR set to: 0
 25817  011F7A  1F63               	comf	(___almod@dividend+3)& (0+255),f,b
 25818  011F7C  1F62               	comf	(___almod@dividend+2)& (0+255),f,b
 25819  011F7E  1F61               	comf	(___almod@dividend+1)& (0+255),f,b
 25820  011F80  6D60               	negf	___almod@dividend& (0+255),b
 25821  011F82  0E00               	movlw	0
 25822  011F84  2361               	addwfc	(___almod@dividend+1)& (0+255),f,b
 25823  011F86  2362               	addwfc	(___almod@dividend+2)& (0+255),f,b
 25824  011F88  2363               	addwfc	(___almod@dividend+3)& (0+255),f,b
 25825  011F8A                     l2879:
 25826                           
 25827                           ; BSR set to: 0
 25828                           
 25829                           ; BSR set to: 0
 25830  011F8A  C060  F060         	movff	___almod@dividend,?___almod
 25831  011F8E  C061  F061         	movff	___almod@dividend+1,?___almod+1
 25832  011F92  C062  F062         	movff	___almod@dividend+2,?___almod+2
 25833  011F96  C063  F063         	movff	___almod@dividend+3,?___almod+3
 25834  011F9A  0012               	return	
 25835  011F9C                     __end_of___almod:
 25836                           	opt stack 0
 25837                           tblptru	equ	0xFF8
 25838                           tblptrh	equ	0xFF7
 25839                           tblptrl	equ	0xFF6
 25840                           tablat	equ	0xFF5
 25841                           prodh	equ	0xFF4
 25842                           prodl	equ	0xFF3
 25843                           intcon	equ	0xFF2
 25844                           postinc0	equ	0xFEE
 25845                           wreg	equ	0xFE8
 25846                           indf1	equ	0xFE7
 25847                           postinc1	equ	0xFE6
 25848                           postdec1	equ	0xFE5
 25849                           plusw1	equ	0xFE3
 25850                           fsr1h	equ	0xFE2
 25851                           fsr1l	equ	0xFE1
 25852                           indf2	equ	0xFDF
 25853                           postinc2	equ	0xFDE
 25854                           postdec2	equ	0xFDD
 25855                           plusw2	equ	0xFDB
 25856                           fsr2h	equ	0xFDA
 25857                           fsr2l	equ	0xFD9
 25858                           status	equ	0xFD8
 25859                           
 25860 ;; *************** function ___aldiv *****************
 25861 ;; Defined at:
 25862 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\aldiv.c"
 25863 ;; Parameters:    Size  Location     Type
 25864 ;;  dividend        4    0[BANK0 ] long 
 25865 ;;  divisor         4    4[BANK0 ] long 
 25866 ;; Auto vars:     Size  Location     Type
 25867 ;;  quotient        4   10[BANK0 ] long 
 25868 ;;  sign            1    9[BANK0 ] unsigned char 
 25869 ;;  counter         1    8[BANK0 ] unsigned char 
 25870 ;; Return value:  Size  Location     Type
 25871 ;;                  4    0[BANK0 ] long 
 25872 ;; Registers used:
 25873 ;;		wreg, status,2, status,0
 25874 ;; Tracked objects:
 25875 ;;		On entry : 0/0
 25876 ;;		On exit  : 0/0
 25877 ;;		Unchanged: 0/0
 25878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 25879 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25880 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25882 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 25883 ;;Total ram usage:       14 bytes
 25884 ;; Hardware stack levels used:    1
 25885 ;; Hardware stack levels required when called:   10
 25886 ;; This function calls:
 25887 ;;		Nothing
 25888 ;; This function is called by:
 25889 ;;		__display_itoa_long
 25890 ;; This function uses a non-reentrant model
 25891 ;;
 25892                           
 25893                           	psect	text97
 25894  0118FE                     __ptext97:
 25895                           	opt stack 0
 25896  0118FE                     ___aldiv:
 25897                           	opt stack 18
 25898                           
 25899                           ; BSR set to: 0
 25900                           ;incstack = 0
 25901  0118FE  0E00               	movlw	0
 25902  011900  0100               	movlb	0	; () banked
 25903  011902  6F69               	movwf	___aldiv@sign& (0+255),b
 25904                           
 25905                           ; BSR set to: 0
 25906  011904  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 25907  011906  D00A               	goto	l2857
 25908                           
 25909                           ; BSR set to: 0
 25910  011908  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
 25911  01190A  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
 25912  01190C  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
 25913  01190E  6D64               	negf	___aldiv@divisor& (0+255),b
 25914  011910  0E00               	movlw	0
 25915  011912  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 25916  011914  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 25917  011916  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 25918                           
 25919                           ; BSR set to: 0
 25920  011918  0E01               	movlw	1
 25921  01191A  6F69               	movwf	___aldiv@sign& (0+255),b
 25922  01191C                     l2857:
 25923                           
 25924                           ; BSR set to: 0
 25925                           
 25926                           ; BSR set to: 0
 25927  01191C  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 25928  01191E  D00A               	goto	l2858
 25929                           
 25930                           ; BSR set to: 0
 25931  011920  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
 25932  011922  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
 25933  011924  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
 25934  011926  6D60               	negf	___aldiv@dividend& (0+255),b
 25935  011928  0E00               	movlw	0
 25936  01192A  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 25937  01192C  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 25938  01192E  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 25939                           
 25940                           ; BSR set to: 0
 25941  011930  0E01               	movlw	1
 25942  011932  1B69               	xorwf	___aldiv@sign& (0+255),f,b
 25943  011934                     l2858:
 25944                           
 25945                           ; BSR set to: 0
 25946                           
 25947                           ; BSR set to: 0
 25948  011934  0E00               	movlw	0
 25949  011936  6F6A               	movwf	___aldiv@quotient& (0+255),b
 25950  011938  0E00               	movlw	0
 25951  01193A  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
 25952  01193C  0E00               	movlw	0
 25953  01193E  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
 25954  011940  0E00               	movlw	0
 25955  011942  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
 25956                           
 25957                           ; BSR set to: 0
 25958  011944  5164               	movf	___aldiv@divisor& (0+255),w,b
 25959  011946  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 25960  011948  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 25961  01194A  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 25962  01194C  B4D8               	btfsc	status,2,c
 25963  01194E  D02A               	goto	l2865
 25964                           
 25965                           ; BSR set to: 0
 25966  011950  0E01               	movlw	1
 25967  011952  6F68               	movwf	___aldiv@counter& (0+255),b
 25968  011954  D006               	goto	l2860
 25969  011956                     
 25970                           ; BSR set to: 0
 25971                           
 25972                           ; BSR set to: 0
 25973  011956  90D8               	bcf	status,0,c
 25974  011958  3764               	rlcf	___aldiv@divisor& (0+255),f,b
 25975  01195A  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 25976  01195C  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 25977  01195E  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 25978  011960  2B68               	incf	___aldiv@counter& (0+255),f,b
 25979  011962                     l2860:
 25980                           
 25981                           ; BSR set to: 0
 25982                           
 25983                           ; BSR set to: 0
 25984  011962  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 25985  011964  D7F8               	goto	l2861
 25986  011966                     u21340:
 25987                           
 25988                           ; BSR set to: 0
 25989                           
 25990                           ; BSR set to: 0
 25991                           
 25992                           ; BSR set to: 0
 25993  011966  90D8               	bcf	status,0,c
 25994  011968  376A               	rlcf	___aldiv@quotient& (0+255),f,b
 25995  01196A  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 25996  01196C  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 25997  01196E  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 25998                           
 25999                           ; BSR set to: 0
 26000  011970  5164               	movf	___aldiv@divisor& (0+255),w,b
 26001  011972  5D60               	subwf	___aldiv@dividend& (0+255),w,b
 26002  011974  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 26003  011976  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 26004  011978  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 26005  01197A  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 26006  01197C  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 26007  01197E  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 26008  011980  A0D8               	btfss	status,0,c
 26009  011982  D009               	goto	l2864
 26010                           
 26011                           ; BSR set to: 0
 26012  011984  5164               	movf	___aldiv@divisor& (0+255),w,b
 26013  011986  5F60               	subwf	___aldiv@dividend& (0+255),f,b
 26014  011988  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 26015  01198A  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 26016  01198C  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 26017  01198E  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 26018  011990  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 26019  011992  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 26020                           
 26021                           ; BSR set to: 0
 26022  011994  816A               	bsf	___aldiv@quotient& (0+255),0,b
 26023  011996                     l2864:
 26024                           
 26025                           ; BSR set to: 0
 26026                           
 26027                           ; BSR set to: 0
 26028  011996  90D8               	bcf	status,0,c
 26029  011998  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 26030  01199A  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 26031  01199C  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 26032  01199E  3364               	rrcf	___aldiv@divisor& (0+255),f,b
 26033                           
 26034                           ; BSR set to: 0
 26035  0119A0  2F68               	decfsz	___aldiv@counter& (0+255),f,b
 26036  0119A2  D7E1               	goto	u21340
 26037  0119A4                     l2865:
 26038                           
 26039                           ; BSR set to: 0
 26040                           
 26041                           ; BSR set to: 0
 26042                           
 26043                           ; BSR set to: 0
 26044  0119A4  5169               	movf	___aldiv@sign& (0+255),w,b
 26045  0119A6  B4D8               	btfsc	status,2,c
 26046  0119A8  D008               	goto	l2866
 26047                           
 26048                           ; BSR set to: 0
 26049  0119AA  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 26050  0119AC  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 26051  0119AE  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 26052  0119B0  6D6A               	negf	___aldiv@quotient& (0+255),b
 26053  0119B2  0E00               	movlw	0
 26054  0119B4  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 26055  0119B6  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 26056  0119B8  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 26057  0119BA                     l2866:
 26058                           
 26059                           ; BSR set to: 0
 26060                           
 26061                           ; BSR set to: 0
 26062  0119BA  C06A  F060         	movff	___aldiv@quotient,?___aldiv
 26063  0119BE  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
 26064  0119C2  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
 26065  0119C6  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
 26066  0119CA  0012               	return	
 26067  0119CC                     __end_of___aldiv:
 26068                           	opt stack 0
 26069                           tblptru	equ	0xFF8
 26070                           tblptrh	equ	0xFF7
 26071                           tblptrl	equ	0xFF6
 26072                           tablat	equ	0xFF5
 26073                           prodh	equ	0xFF4
 26074                           prodl	equ	0xFF3
 26075                           intcon	equ	0xFF2
 26076                           postinc0	equ	0xFEE
 26077                           wreg	equ	0xFE8
 26078                           indf1	equ	0xFE7
 26079                           postinc1	equ	0xFE6
 26080                           postdec1	equ	0xFE5
 26081                           plusw1	equ	0xFE3
 26082                           fsr1h	equ	0xFE2
 26083                           fsr1l	equ	0xFE1
 26084                           indf2	equ	0xFDF
 26085                           postinc2	equ	0xFDE
 26086                           postdec2	equ	0xFDD
 26087                           plusw2	equ	0xFDB
 26088                           fsr2h	equ	0xFDA
 26089                           fsr2l	equ	0xFD9
 26090                           status	equ	0xFD8
 26091                           
 26092 ;; *************** function __display_clear *****************
 26093 ;; Defined at:
 26094 ;;		line 81 in file "display.c"
 26095 ;; Parameters:    Size  Location     Type
 26096 ;;		None
 26097 ;; Auto vars:     Size  Location     Type
 26098 ;;  col             1    3[BANK0 ] unsigned char 
 26099 ;;  row             1    2[BANK0 ] unsigned char 
 26100 ;; Return value:  Size  Location     Type
 26101 ;;                  1    wreg      void 
 26102 ;; Registers used:
 26103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26104 ;; Tracked objects:
 26105 ;;		On entry : 0/0
 26106 ;;		On exit  : 0/0
 26107 ;;		Unchanged: 0/0
 26108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 26109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26110 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26112 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26113 ;;Total ram usage:        4 bytes
 26114 ;; Hardware stack levels used:    1
 26115 ;; Hardware stack levels required when called:   10
 26116 ;; This function calls:
 26117 ;;		Nothing
 26118 ;; This function is called by:
 26119 ;;		_display_prepare
 26120 ;; This function uses a non-reentrant model
 26121 ;;
 26122                           
 26123                           	psect	text98
 26124  0138E4                     __ptext98:
 26125                           	opt stack 0
 26126  0138E4                     __display_clear:
 26127                           	opt stack 19
 26128                           
 26129                           ;display.c: 83: uint8_t row;;display.c: 84: uint8_t col;;display.c: 85: for(row=0;row<4;
      +                          ++row)
 26130                           
 26131                           ; BSR set to: 0
 26132                           ;incstack = 0
 26133  0138E4  0E00               	movlw	0
 26134  0138E6  0100               	movlb	0	; () banked
 26135  0138E8  6F62               	movwf	__display_clear@row& (0+255),b
 26136  0138EA                     l22128:
 26137                           
 26138                           ; BSR set to: 0
 26139  0138EA  0E03               	movlw	3
 26140  0138EC  6562               	cpfsgt	__display_clear@row& (0+255),b
 26141  0138EE  D001               	goto	l1276
 26142  0138F0  0012               	return	
 26143  0138F2                     l1276:
 26144                           
 26145                           ; BSR set to: 0
 26146                           ;display.c: 86: {;display.c: 87: for(col=0;col<20;++col)
 26147                           
 26148                           ; BSR set to: 0
 26149  0138F2  0E00               	movlw	0
 26150  0138F4  6F63               	movwf	__display_clear@col& (0+255),b
 26151  0138F6                     l22134:
 26152                           
 26153                           ; BSR set to: 0
 26154  0138F6  0E13               	movlw	19
 26155  0138F8  6563               	cpfsgt	__display_clear@col& (0+255),b
 26156  0138FA  D001               	goto	l1278
 26157  0138FC  D016               	goto	u22210
 26158  0138FE                     l1278:
 26159                           
 26160                           ; BSR set to: 0
 26161                           ;display.c: 88: {;display.c: 89: display_content[row][col] = ' ';
 26162                           
 26163                           ; BSR set to: 0
 26164  0138FE  5162               	movf	__display_clear@row& (0+255),w,b
 26165  013900  0D14               	mullw	20
 26166  013902  0E80               	movlw	low _display_content
 26167  013904  6F60               	movwf	??__display_clear& (0+255),b
 26168  013906  0E02               	movlw	high _display_content
 26169  013908  6F61               	movwf	(??__display_clear+1)& (0+255),b
 26170  01390A  50F3               	movf	prodl,w,c
 26171  01390C  2760               	addwf	??__display_clear& (0+255),f,b
 26172  01390E  50F4               	movf	prodh,w,c
 26173  013910  2361               	addwfc	(??__display_clear+1)& (0+255),f,b
 26174  013912  5163               	movf	__display_clear@col& (0+255),w,b
 26175  013914  0D01               	mullw	1
 26176  013916  50F3               	movf	prodl,w,c
 26177  013918  2560               	addwf	??__display_clear& (0+255),w,b
 26178  01391A  6ED9               	movwf	fsr2l,c
 26179  01391C  50F4               	movf	prodh,w,c
 26180  01391E  2161               	addwfc	(??__display_clear+1)& (0+255),w,b
 26181  013920  6EDA               	movwf	fsr2h,c
 26182  013922  0E20               	movlw	32
 26183  013924  6EDF               	movwf	indf2,c
 26184                           
 26185                           ; BSR set to: 0
 26186  013926  2B63               	incf	__display_clear@col& (0+255),f,b
 26187  013928  D7E6               	goto	l22134
 26188  01392A                     u22210:
 26189                           
 26190                           ; BSR set to: 0
 26191                           
 26192                           ; BSR set to: 0
 26193  01392A  2B62               	incf	__display_clear@row& (0+255),f,b
 26194  01392C  D7DE               	goto	l22128
 26195  01392E                     __end_of__display_clear:
 26196                           	opt stack 0
 26197                           tblptru	equ	0xFF8
 26198                           tblptrh	equ	0xFF7
 26199                           tblptrl	equ	0xFF6
 26200                           tablat	equ	0xFF5
 26201                           prodh	equ	0xFF4
 26202                           prodl	equ	0xFF3
 26203                           intcon	equ	0xFF2
 26204                           postinc0	equ	0xFEE
 26205                           wreg	equ	0xFE8
 26206                           indf1	equ	0xFE7
 26207                           postinc1	equ	0xFE6
 26208                           postdec1	equ	0xFE5
 26209                           plusw1	equ	0xFE3
 26210                           fsr1h	equ	0xFE2
 26211                           fsr1l	equ	0xFE1
 26212                           indf2	equ	0xFDF
 26213                           postinc2	equ	0xFDE
 26214                           postdec2	equ	0xFDD
 26215                           plusw2	equ	0xFDB
 26216                           fsr2h	equ	0xFDA
 26217                           fsr2l	equ	0xFD9
 26218                           status	equ	0xFD8
 26219                           
 26220 ;; *************** function _adc_read_temperature *****************
 26221 ;; Defined at:
 26222 ;;		line 44 in file "adc.c"
 26223 ;; Parameters:    Size  Location     Type
 26224 ;;		None
 26225 ;; Auto vars:     Size  Location     Type
 26226 ;;  temperature     4   43[BANK0 ] float 
 26227 ;;  adc_result      2   41[BANK0 ] unsigned int 
 26228 ;; Return value:  Size  Location     Type
 26229 ;;                  1    wreg      void 
 26230 ;; Registers used:
 26231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26232 ;; Tracked objects:
 26233 ;;		On entry : 0/0
 26234 ;;		On exit  : 0/0
 26235 ;;		Unchanged: 0/0
 26236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 26237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26238 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26240 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26241 ;;Total ram usage:        8 bytes
 26242 ;; Hardware stack levels used:    1
 26243 ;; Hardware stack levels required when called:   11
 26244 ;; This function calls:
 26245 ;;		___fladd
 26246 ;;		___flmul
 26247 ;;		___flneg
 26248 ;;		___fltol
 26249 ;;		___xxtofl
 26250 ;; This function is called by:
 26251 ;;		_main
 26252 ;; This function uses a non-reentrant model
 26253 ;;
 26254                           
 26255                           	psect	text99
 26256  00E834                     __ptext99:
 26257                           	opt stack 0
 26258  00E834                     _adc_read_temperature:
 26259                           	opt stack 19
 26260                           
 26261                           ;adc.c: 46: uint16_t adc_result;;adc.c: 47: float temperature;;adc.c: 50: adc_result = A
      +                          DRESH;
 26262                           
 26263                           ; BSR set to: 0
 26264                           ;incstack = 0
 26265  00E834  CFC4 F089          	movff	4036,adc_read_temperature@adc_result	;volatile
 26266  00E838  0100               	movlb	0	; () banked
 26267  00E83A  6B8A               	clrf	(adc_read_temperature@adc_result+1)& (0+255),b
 26268                           
 26269                           ; BSR set to: 0
 26270                           ;adc.c: 51: adc_result <<= 8;
 26271  00E83C  5189               	movf	adc_read_temperature@adc_result& (0+255),w,b
 26272  00E83E  6F8A               	movwf	(adc_read_temperature@adc_result+1)& (0+255),b
 26273  00E840  6B89               	clrf	adc_read_temperature@adc_result& (0+255),b
 26274                           
 26275                           ; BSR set to: 0
 26276                           ;adc.c: 52: adc_result |= ADRESL;
 26277  00E842  50C3               	movf	4035,w,c	;volatile
 26278  00E844  1389               	iorwf	adc_read_temperature@adc_result& (0+255),f,b
 26279                           
 26280                           ; BSR set to: 0
 26281                           ;adc.c: 55: params.temperature_adc_sum[params.temperature_source] += adc_result;
 26282  00E846  0101               	movlb	1	; () banked
 26283  00E848  5131               	movf	_params& (0+255),w,b
 26284  00E84A  0D02               	mullw	2
 26285  00E84C  0E32               	movlw	low (_params+1)
 26286  00E84E  24F3               	addwf	prodl,w,c
 26287  00E850  6ED9               	movwf	fsr2l,c
 26288  00E852  0E01               	movlw	high (_params+1)
 26289  00E854  20F4               	addwfc	prodh,w,c
 26290  00E856  6EDA               	movwf	fsr2h,c
 26291  00E858  0100               	movlb	0	; () banked
 26292  00E85A  5189               	movf	adc_read_temperature@adc_result& (0+255),w,b
 26293  00E85C  26DE               	addwf	postinc2,f,c
 26294  00E85E  518A               	movf	(adc_read_temperature@adc_result+1)& (0+255),w,b
 26295  00E860  22DD               	addwfc	postdec2,f,c
 26296                           
 26297                           ; BSR set to: 0
 26298                           ;adc.c: 56: ++params.temperature_count[params.temperature_source];
 26299  00E862  0101               	movlb	1	; () banked
 26300  00E864  5131               	movf	_params& (0+255),w,b
 26301  00E866  0D01               	mullw	1
 26302  00E868  0E36               	movlw	low (_params+5)
 26303  00E86A  24F3               	addwf	prodl,w,c
 26304  00E86C  6ED9               	movwf	fsr2l,c
 26305  00E86E  0E01               	movlw	high (_params+5)
 26306  00E870  20F4               	addwfc	prodh,w,c
 26307  00E872  6EDA               	movwf	fsr2h,c
 26308  00E874  2ADF               	incf	indf2,f,c
 26309                           
 26310                           ; BSR set to: 1
 26311                           ;adc.c: 59: ADCON0bits.GO = 1;
 26312  00E876  82C2               	bsf	4034,1,c	;volatile
 26313                           
 26314                           ; BSR set to: 1
 26315                           ;adc.c: 62: if(params.temperature_count[params.temperature_source]==8)
 26316  00E878  5131               	movf	_params& (0+255),w,b
 26317  00E87A  0D01               	mullw	1
 26318  00E87C  0E36               	movlw	low (_params+5)
 26319  00E87E  24F3               	addwf	prodl,w,c
 26320  00E880  6ED9               	movwf	fsr2l,c
 26321  00E882  0E01               	movlw	high (_params+5)
 26322  00E884  20F4               	addwfc	prodh,w,c
 26323  00E886  6EDA               	movwf	fsr2h,c
 26324  00E888  0E08               	movlw	8
 26325  00E88A  18DE               	xorwf	postinc2,w,c
 26326  00E88C  A4D8               	btfss	status,2,c
 26327  00E88E  D0AE               	goto	l2721
 26328                           
 26329                           ; BSR set to: 1
 26330                           ;adc.c: 63: {;adc.c: 67: temperature = 21064.0 - (float) params.temperature_adc_sum[para
      +                          ms.temperature_source];
 26331  00E890  5131               	movf	_params& (0+255),w,b
 26332  00E892  0D02               	mullw	2
 26333  00E894  0E32               	movlw	low (_params+1)
 26334  00E896  24F3               	addwf	prodl,w,c
 26335  00E898  6ED9               	movwf	fsr2l,c
 26336  00E89A  0E01               	movlw	high (_params+1)
 26337  00E89C  20F4               	addwfc	prodh,w,c
 26338  00E89E  6EDA               	movwf	fsr2h,c
 26339  00E8A0  CFDE F087          	movff	postinc2,??_adc_read_temperature
 26340  00E8A4  CFDD F088          	movff	postdec2,??_adc_read_temperature+1
 26341  00E8A8  C087  F060         	movff	??_adc_read_temperature,___xxtofl@val
 26342  00E8AC  C088  F061         	movff	??_adc_read_temperature+1,___xxtofl@val+1
 26343  00E8B0  0100               	movlb	0	; () banked
 26344  00E8B2  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 26345  00E8B4  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 26346  00E8B6  0E00               	movlw	0
 26347  00E8B8  ECE7  F07A         	call	___xxtofl
 26348  00E8BC  C060  F06E         	movff	?___xxtofl,___flneg@f1
 26349  00E8C0  C061  F06F         	movff	?___xxtofl+1,___flneg@f1+1
 26350  00E8C4  C062  F070         	movff	?___xxtofl+2,___flneg@f1+2
 26351  00E8C8  C063  F071         	movff	?___xxtofl+3,___flneg@f1+3
 26352  00E8CC  EC5E  F09F         	call	___flneg	;wreg free
 26353  00E8D0  C06E  F072         	movff	?___flneg,___fladd@b
 26354  00E8D4  C06F  F073         	movff	?___flneg+1,___fladd@b+1
 26355  00E8D8  C070  F074         	movff	?___flneg+2,___fladd@b+2
 26356  00E8DC  C071  F075         	movff	?___flneg+3,___fladd@b+3
 26357  00E8E0  0E00               	movlw	0
 26358  00E8E2  0100               	movlb	0	; () banked
 26359  00E8E4  6F76               	movwf	___fladd@a& (0+255),b
 26360  00E8E6  0E90               	movlw	144
 26361  00E8E8  6F77               	movwf	(___fladd@a+1)& (0+255),b
 26362  00E8EA  0EA4               	movlw	164
 26363  00E8EC  6F78               	movwf	(___fladd@a+2)& (0+255),b
 26364  00E8EE  0E46               	movlw	70
 26365  00E8F0  6F79               	movwf	(___fladd@a+3)& (0+255),b
 26366  00E8F2  EC91  F062         	call	___fladd	;wreg free
 26367  00E8F6  C072  F08B         	movff	?___fladd,adc_read_temperature@temperature
 26368  00E8FA  C073  F08C         	movff	?___fladd+1,adc_read_temperature@temperature+1
 26369  00E8FE  C074  F08D         	movff	?___fladd+2,adc_read_temperature@temperature+2
 26370  00E902  C075  F08E         	movff	?___fladd+3,adc_read_temperature@temperature+3
 26371                           
 26372                           ;adc.c: 68: temperature *= 0.7405;
 26373  00E906  C08B  F06E         	movff	adc_read_temperature@temperature,___flmul@b
 26374  00E90A  C08C  F06F         	movff	adc_read_temperature@temperature+1,___flmul@b+1
 26375  00E90E  C08D  F070         	movff	adc_read_temperature@temperature+2,___flmul@b+2
 26376  00E912  C08E  F071         	movff	adc_read_temperature@temperature+3,___flmul@b+3
 26377  00E916  0E68               	movlw	104
 26378  00E918  0100               	movlb	0	; () banked
 26379  00E91A  6F72               	movwf	___flmul@a& (0+255),b
 26380  00E91C  0E91               	movlw	145
 26381  00E91E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 26382  00E920  0E3D               	movlw	61
 26383  00E922  6F74               	movwf	(___flmul@a+2)& (0+255),b
 26384  00E924  0E3F               	movlw	63
 26385  00E926  6F75               	movwf	(___flmul@a+3)& (0+255),b
 26386  00E928  ECE8  F060         	call	___flmul	;wreg free
 26387  00E92C  C06E  F08B         	movff	?___flmul,adc_read_temperature@temperature
 26388  00E930  C06F  F08C         	movff	?___flmul+1,adc_read_temperature@temperature+1
 26389  00E934  C070  F08D         	movff	?___flmul+2,adc_read_temperature@temperature+2
 26390  00E938  C071  F08E         	movff	?___flmul+3,adc_read_temperature@temperature+3
 26391                           
 26392                           ;adc.c: 71: os.temperature[params.temperature_source] = (int16_t) temperature;
 26393  00E93C  C08B  F060         	movff	adc_read_temperature@temperature,___fltol@f1
 26394  00E940  C08C  F061         	movff	adc_read_temperature@temperature+1,___fltol@f1+1
 26395  00E944  C08D  F062         	movff	adc_read_temperature@temperature+2,___fltol@f1+2
 26396  00E948  C08E  F063         	movff	adc_read_temperature@temperature+3,___fltol@f1+3
 26397  00E94C  EC28  F089         	call	___fltol	;wreg free
 26398  00E950  0101               	movlb	1	; () banked
 26399  00E952  5131               	movf	_params& (0+255),w,b
 26400  00E954  0D02               	mullw	2
 26401  00E956  0E9A               	movlw	low (_os+39)
 26402  00E958  24F3               	addwf	prodl,w,c
 26403  00E95A  6ED9               	movwf	fsr2l,c
 26404  00E95C  0E01               	movlw	high (_os+39)
 26405  00E95E  20F4               	addwfc	prodh,w,c
 26406  00E960  6EDA               	movwf	fsr2h,c
 26407  00E962  0100               	movlb	0	; () banked
 26408  00E964  C060  FFDE         	movff	?___fltol,postinc2
 26409  00E968  C061  FFDD         	movff	?___fltol+1,postdec2
 26410                           
 26411                           ; BSR set to: 0
 26412                           ;adc.c: 74: params.temperature_adc_sum[params.temperature_source] = 0;
 26413  00E96C  0101               	movlb	1	; () banked
 26414  00E96E  5131               	movf	_params& (0+255),w,b
 26415  00E970  0D02               	mullw	2
 26416  00E972  0E32               	movlw	low (_params+1)
 26417  00E974  24F3               	addwf	prodl,w,c
 26418  00E976  6ED9               	movwf	fsr2l,c
 26419  00E978  0E01               	movlw	high (_params+1)
 26420  00E97A  20F4               	addwfc	prodh,w,c
 26421  00E97C  6EDA               	movwf	fsr2h,c
 26422  00E97E  0E00               	movlw	0
 26423  00E980  6EDE               	movwf	postinc2,c
 26424  00E982  0E00               	movlw	0
 26425  00E984  6EDD               	movwf	postdec2,c
 26426                           
 26427                           ; BSR set to: 1
 26428                           ;adc.c: 75: params.temperature_count[params.temperature_source] = 0;
 26429  00E986  5131               	movf	_params& (0+255),w,b
 26430  00E988  0D01               	mullw	1
 26431  00E98A  0E36               	movlw	low (_params+5)
 26432  00E98C  24F3               	addwf	prodl,w,c
 26433  00E98E  6ED9               	movwf	fsr2l,c
 26434  00E990  0E01               	movlw	high (_params+5)
 26435  00E992  20F4               	addwfc	prodh,w,c
 26436  00E994  6EDA               	movwf	fsr2h,c
 26437  00E996  0E00               	movlw	0
 26438  00E998  6EDF               	movwf	indf2,c
 26439                           
 26440                           ; BSR set to: 1
 26441                           ;adc.c: 78: if(os.fan_on)
 26442  00E99A  51A1               	movf	(_os+46)& (0+255),w,b	;volatile
 26443  00E99C  B4D8               	btfsc	status,2,c
 26444  00E99E  D013               	goto	l2718
 26445                           
 26446                           ; BSR set to: 1
 26447                           ;adc.c: 79: {;adc.c: 80: if((os.temperature[TEMPERATURE_SOURCE_INTERNAL]<2400) && (os.te
      +                          mperature[TEMPERATURE_SOURCE_EXTERNAL]<2400))
 26448  00E9A0  BF9B               	btfsc	(_os+40)& (0+255),7,b	;volatile
 26449  00E9A2  D006               	goto	u23790
 26450  00E9A4  0E60               	movlw	96
 26451  00E9A6  5D9A               	subwf	(_os+39)& (0+255),w,b	;volatile
 26452  00E9A8  0E09               	movlw	9
 26453  00E9AA  599B               	subwfb	(_os+40)& (0+255),w,b	;volatile
 26454  00E9AC  B0D8               	btfsc	status,0,c
 26455  00E9AE  D01E               	goto	l2721
 26456  00E9B0                     u23790:
 26457                           
 26458                           ; BSR set to: 1
 26459  00E9B0  BF9D               	btfsc	(_os+42)& (0+255),7,b	;volatile
 26460  00E9B2  D006               	goto	u23800
 26461  00E9B4  0E60               	movlw	96
 26462  00E9B6  5D9C               	subwf	(_os+41)& (0+255),w,b	;volatile
 26463  00E9B8  0E09               	movlw	9
 26464  00E9BA  599D               	subwfb	(_os+42)& (0+255),w,b	;volatile
 26465  00E9BC  B0D8               	btfsc	status,0,c
 26466  00E9BE  D016               	goto	l2721
 26467  00E9C0                     u23800:
 26468                           
 26469                           ; BSR set to: 1
 26470                           ;adc.c: 81: {;adc.c: 82: LATCbits.LC6 = 0;
 26471  00E9C0  9C8B               	bcf	3979,6,c	;volatile
 26472                           
 26473                           ; BSR set to: 1
 26474                           ;adc.c: 83: os.fan_on = 0;
 26475  00E9C2  0E00               	movlw	0
 26476  00E9C4  D012               	goto	L41
 26477  00E9C6                     l2718:
 26478                           
 26479                           ; BSR set to: 1
 26480                           ;adc.c: 86: else;adc.c: 87: {;adc.c: 88: if((os.temperature[TEMPERATURE_SOURCE_INTERNAL]
      +                          >2500) || (os.temperature[TEMPERATURE_SOURCE_EXTERNAL]>2500))
 26481                           
 26482                           ; BSR set to: 1
 26483  00E9C6  BF9B               	btfsc	(_os+40)& (0+255),7,b	;volatile
 26484  00E9C8  D006               	goto	u23810
 26485  00E9CA  0EC5               	movlw	197
 26486  00E9CC  5D9A               	subwf	(_os+39)& (0+255),w,b	;volatile
 26487  00E9CE  0E09               	movlw	9
 26488  00E9D0  599B               	subwfb	(_os+40)& (0+255),w,b	;volatile
 26489  00E9D2  B0D8               	btfsc	status,0,c
 26490  00E9D4  D008               	goto	u23820
 26491  00E9D6                     u23810:
 26492                           
 26493                           ; BSR set to: 1
 26494  00E9D6  BF9D               	btfsc	(_os+42)& (0+255),7,b	;volatile
 26495  00E9D8  D009               	goto	l2721
 26496  00E9DA  0EC5               	movlw	197
 26497  00E9DC  5D9C               	subwf	(_os+41)& (0+255),w,b	;volatile
 26498  00E9DE  0E09               	movlw	9
 26499  00E9E0  599D               	subwfb	(_os+42)& (0+255),w,b	;volatile
 26500  00E9E2  A0D8               	btfss	status,0,c
 26501  00E9E4  D003               	goto	l2721
 26502  00E9E6                     u23820:
 26503                           
 26504                           ; BSR set to: 1
 26505                           ;adc.c: 89: {;adc.c: 90: LATCbits.LC6 = 1;
 26506  00E9E6  8C8B               	bsf	3979,6,c	;volatile
 26507                           
 26508                           ; BSR set to: 1
 26509                           ;adc.c: 91: os.fan_on = 1;
 26510  00E9E8  0E01               	movlw	1
 26511  00E9EA                     L41:
 26512  00E9EA  6FA1               	movwf	(_os+46)& (0+255),b	;volatile
 26513  00E9EC                     l2721:
 26514                           
 26515                           ; BSR set to: 1
 26516                           ;adc.c: 92: };adc.c: 93: };adc.c: 94: };adc.c: 97: if(params.temperature_source==TEMPERA
      +                          TURE_SOURCE_INTERNAL)
 26517                           
 26518                           ; BSR set to: 1
 26519                           
 26520                           ; BSR set to: 1
 26521  00E9EC  5131               	movf	_params& (0+255),w,b
 26522  00E9EE  A4D8               	btfss	status,2,c
 26523  00E9F0  D007               	goto	l2724
 26524                           
 26525                           ; BSR set to: 1
 26526                           ;adc.c: 98: {;adc.c: 99: ADCON0bits.CHS = 0b1011;
 26527  00E9F2  50C2               	movf	4034,w,c	;volatile
 26528  00E9F4  0BC3               	andlw	-61
 26529  00E9F6  092C               	iorlw	44
 26530  00E9F8  6EC2               	movwf	4034,c	;volatile
 26531                           
 26532                           ;adc.c: 100: params.temperature_source = TEMPERATURE_SOURCE_EXTERNAL;
 26533  00E9FA  0E01               	movlw	1
 26534  00E9FC  6F31               	movwf	_params& (0+255),b
 26535                           
 26536                           ;adc.c: 101: }
 26537  00E9FE  0012               	return	
 26538  00EA00                     l2724:
 26539                           
 26540                           ; BSR set to: 1
 26541                           ;adc.c: 102: else;adc.c: 103: {;adc.c: 104: ADCON0bits.CHS = 0b1001;
 26542                           
 26543                           ; BSR set to: 1
 26544  00EA00  50C2               	movf	4034,w,c	;volatile
 26545  00EA02  0BC3               	andlw	-61
 26546  00EA04  0924               	iorlw	36
 26547  00EA06  6EC2               	movwf	4034,c	;volatile
 26548                           
 26549                           ;adc.c: 105: params.temperature_source = TEMPERATURE_SOURCE_INTERNAL;
 26550  00EA08  0E00               	movlw	0
 26551  00EA0A  6F31               	movwf	_params& (0+255),b
 26552  00EA0C  0012               	return	
 26553  00EA0E                     __end_of_adc_read_temperature:
 26554                           	opt stack 0
 26555                           tblptru	equ	0xFF8
 26556                           tblptrh	equ	0xFF7
 26557                           tblptrl	equ	0xFF6
 26558                           tablat	equ	0xFF5
 26559                           prodh	equ	0xFF4
 26560                           prodl	equ	0xFF3
 26561                           intcon	equ	0xFF2
 26562                           postinc0	equ	0xFEE
 26563                           wreg	equ	0xFE8
 26564                           indf1	equ	0xFE7
 26565                           postinc1	equ	0xFE6
 26566                           postdec1	equ	0xFE5
 26567                           plusw1	equ	0xFE3
 26568                           fsr1h	equ	0xFE2
 26569                           fsr1l	equ	0xFE1
 26570                           indf2	equ	0xFDF
 26571                           postinc2	equ	0xFDE
 26572                           postdec2	equ	0xFDD
 26573                           plusw2	equ	0xFDB
 26574                           fsr2h	equ	0xFDA
 26575                           fsr2l	equ	0xFD9
 26576                           status	equ	0xFD8
 26577                           
 26578 ;; *************** function ___xxtofl *****************
 26579 ;; Defined at:
 26580 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\xxtofl.c"
 26581 ;; Parameters:    Size  Location     Type
 26582 ;;  sign            1    wreg     unsigned char 
 26583 ;;  val             4    0[BANK0 ] long 
 26584 ;; Auto vars:     Size  Location     Type
 26585 ;;  sign            1    8[BANK0 ] unsigned char 
 26586 ;;  arg             4   10[BANK0 ] unsigned long 
 26587 ;;  exp             1    9[BANK0 ] unsigned char 
 26588 ;; Return value:  Size  Location     Type
 26589 ;;                  4    0[BANK0 ] unsigned char 
 26590 ;; Registers used:
 26591 ;;		wreg, status,2, status,0
 26592 ;; Tracked objects:
 26593 ;;		On entry : 0/0
 26594 ;;		On exit  : 0/0
 26595 ;;		Unchanged: 0/0
 26596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 26597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26598 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26599 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26600 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26601 ;;Total ram usage:       14 bytes
 26602 ;; Hardware stack levels used:    1
 26603 ;; Hardware stack levels required when called:   10
 26604 ;; This function calls:
 26605 ;;		Nothing
 26606 ;; This function is called by:
 26607 ;;		_main
 26608 ;;		_motor_steps_from_degrees
 26609 ;;		__motor_get_speed_in_degrees
 26610 ;;		__step_position_from_divide_position
 26611 ;;		_motor_divide_jump_to_nearest
 26612 ;;		_motor_arc_move
 26613 ;;		_adc_read_temperature
 26614 ;;		_motor_go_to_degrees_position
 26615 ;; This function uses a non-reentrant model
 26616 ;;
 26617                           
 26618                           	psect	text100
 26619  00F5CE                     __ptext100:
 26620                           	opt stack 0
 26621  00F5CE                     ___xxtofl:
 26622                           	opt stack 17
 26623                           
 26624                           ; BSR set to: 1
 26625                           ;incstack = 0
 26626                           ;___xxtofl@sign stored from wreg
 26627  00F5CE  0100               	movlb	0	; () banked
 26628  00F5D0  6F68               	movwf	___xxtofl@sign& (0+255),b
 26629  00F5D2  0100               	movlb	0	; () banked
 26630  00F5D4  5168               	movf	___xxtofl@sign& (0+255),w,b
 26631  00F5D6  A4D8               	btfss	status,2,c
 26632                           
 26633                           ; BSR set to: 0
 26634  00F5D8  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 26635  00F5DA  D01A               	goto	l3431
 26636                           
 26637                           ; BSR set to: 0
 26638  00F5DC  C060  F064         	movff	___xxtofl@val,??___xxtofl
 26639  00F5E0  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 26640  00F5E4  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 26641  00F5E8  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 26642  00F5EC  1F64               	comf	??___xxtofl& (0+255),f,b
 26643  00F5EE  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 26644  00F5F0  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 26645  00F5F2  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 26646  00F5F4  2B64               	incf	??___xxtofl& (0+255),f,b
 26647  00F5F6  0E00               	movlw	0
 26648  00F5F8  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 26649  00F5FA  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 26650  00F5FC  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 26651  00F5FE  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 26652  00F602  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 26653  00F606  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 26654  00F60A  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 26655  00F60E  D008               	goto	l3432
 26656  00F610                     l3431:
 26657                           
 26658                           ; BSR set to: 0
 26659  00F610  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 26660  00F614  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 26661  00F618  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 26662  00F61C  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 26663  00F620                     l3432:
 26664                           
 26665                           ; BSR set to: 0
 26666                           
 26667                           ; BSR set to: 0
 26668  00F620  5160               	movf	___xxtofl@val& (0+255),w,b
 26669  00F622  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 26670  00F624  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 26671  00F626  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 26672  00F628  A4D8               	btfss	status,2,c
 26673  00F62A  D009               	goto	l3433
 26674                           
 26675                           ; BSR set to: 0
 26676  00F62C  0E00               	movlw	0
 26677  00F62E  6F60               	movwf	?___xxtofl& (0+255),b
 26678  00F630  0E00               	movlw	0
 26679  00F632  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 26680  00F634  0E00               	movlw	0
 26681  00F636  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 26682  00F638  0E00               	movlw	0
 26683  00F63A  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 26684                           
 26685                           ; BSR set to: 0
 26686  00F63C  0012               	return	
 26687  00F63E                     l3433:
 26688                           
 26689                           ; BSR set to: 0
 26690                           
 26691                           ; BSR set to: 0
 26692  00F63E  0E96               	movlw	150
 26693  00F640  6F69               	movwf	___xxtofl@exp& (0+255),b
 26694  00F642  D006               	goto	l3435
 26695  00F644                     
 26696                           ; BSR set to: 0
 26697                           
 26698                           ; BSR set to: 0
 26699  00F644  2B69               	incf	___xxtofl@exp& (0+255),f,b
 26700  00F646  90D8               	bcf	status,0,c
 26701  00F648  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 26702  00F64A  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 26703  00F64C  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 26704  00F64E  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 26705  00F650                     l3435:
 26706                           
 26707                           ; BSR set to: 0
 26708                           
 26709                           ; BSR set to: 0
 26710  00F650  0E00               	movlw	0
 26711  00F652  156A               	andwf	___xxtofl@arg& (0+255),w,b
 26712  00F654  6F64               	movwf	??___xxtofl& (0+255),b
 26713  00F656  0E00               	movlw	0
 26714  00F658  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 26715  00F65A  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 26716  00F65C  0E00               	movlw	0
 26717  00F65E  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 26718  00F660  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 26719  00F662  0EFE               	movlw	254
 26720  00F664  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 26721  00F666  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 26722  00F668  5164               	movf	??___xxtofl& (0+255),w,b
 26723  00F66A  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 26724  00F66C  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 26725  00F66E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 26726  00F670  B4D8               	btfsc	status,2,c
 26727  00F672  D00D               	goto	l3438
 26728  00F674  D7E7               	goto	l3436
 26729  00F676                     
 26730                           ; BSR set to: 0
 26731                           
 26732                           ; BSR set to: 0
 26733  00F676  2B69               	incf	___xxtofl@exp& (0+255),f,b
 26734                           
 26735                           ; BSR set to: 0
 26736  00F678  0E01               	movlw	1
 26737  00F67A  276A               	addwf	___xxtofl@arg& (0+255),f,b
 26738  00F67C  0E00               	movlw	0
 26739  00F67E  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 26740  00F680  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 26741  00F682  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 26742                           
 26743                           ; BSR set to: 0
 26744  00F684  90D8               	bcf	status,0,c
 26745  00F686  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 26746  00F688  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 26747  00F68A  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 26748  00F68C  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 26749  00F68E                     l3438:
 26750                           
 26751                           ; BSR set to: 0
 26752  00F68E  0E00               	movlw	0
 26753  00F690  156A               	andwf	___xxtofl@arg& (0+255),w,b
 26754  00F692  6F64               	movwf	??___xxtofl& (0+255),b
 26755  00F694  0E00               	movlw	0
 26756  00F696  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 26757  00F698  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 26758  00F69A  0E00               	movlw	0
 26759  00F69C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 26760  00F69E  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 26761  00F6A0  0EFF               	movlw	255
 26762  00F6A2  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 26763  00F6A4  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 26764  00F6A6  5164               	movf	??___xxtofl& (0+255),w,b
 26765  00F6A8  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 26766  00F6AA  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 26767  00F6AC  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 26768  00F6AE  B4D8               	btfsc	status,2,c
 26769  00F6B0  D007               	goto	l3441
 26770  00F6B2  D7E1               	goto	l3439
 26771  00F6B4                     
 26772                           ; BSR set to: 0
 26773                           
 26774                           ; BSR set to: 0
 26775  00F6B4  0769               	decf	___xxtofl@exp& (0+255),f,b
 26776  00F6B6  90D8               	bcf	status,0,c
 26777  00F6B8  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 26778  00F6BA  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 26779  00F6BC  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 26780  00F6BE  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 26781  00F6C0                     l3441:
 26782                           
 26783                           ; BSR set to: 0
 26784                           
 26785                           ; BSR set to: 0
 26786  00F6C0  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 26787  00F6C2  D003               	goto	u20480
 26788                           
 26789                           ; BSR set to: 0
 26790  00F6C4  0E02               	movlw	2
 26791  00F6C6  6169               	cpfslt	___xxtofl@exp& (0+255),b
 26792  00F6C8  D7F5               	goto	l3442
 26793  00F6CA                     u20480:
 26794                           
 26795                           ; BSR set to: 0
 26796                           
 26797                           ; BSR set to: 0
 26798  00F6CA  A169               	btfss	___xxtofl@exp& (0+255),0,b
 26799                           
 26800                           ; BSR set to: 0
 26801  00F6CC  9F6C               	bcf	(___xxtofl@arg+2)& (0+255),7,b
 26802                           
 26803                           ; BSR set to: 0
 26804                           
 26805                           ; BSR set to: 0
 26806  00F6CE  90D8               	bcf	status,0,c
 26807  00F6D0  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 26808                           
 26809                           ; BSR set to: 0
 26810  00F6D2  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 26811  00F6D6  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 26812  00F6D8  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 26813  00F6DA  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 26814  00F6DC  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 26815  00F6E0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 26816  00F6E2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 26817  00F6E4  6B64               	clrf	??___xxtofl& (0+255),b
 26818  00F6E6  5164               	movf	??___xxtofl& (0+255),w,b
 26819  00F6E8  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 26820  00F6EA  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 26821  00F6EC  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 26822  00F6EE  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 26823  00F6F0  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 26824  00F6F2  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 26825  00F6F4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 26826                           
 26827                           ; BSR set to: 0
 26828  00F6F6  5168               	movf	___xxtofl@sign& (0+255),w,b
 26829  00F6F8  A4D8               	btfss	status,2,c
 26830                           
 26831                           ; BSR set to: 0
 26832  00F6FA  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 26833  00F6FC  D001               	goto	l3447
 26834                           
 26835                           ; BSR set to: 0
 26836  00F6FE  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 26837  00F700                     l3447:
 26838                           
 26839                           ; BSR set to: 0
 26840                           
 26841                           ; BSR set to: 0
 26842  00F700  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 26843  00F704  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 26844  00F708  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 26845  00F70C  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 26846  00F710  0012               	return	
 26847  00F712                     __end_of___xxtofl:
 26848                           	opt stack 0
 26849                           tblptru	equ	0xFF8
 26850                           tblptrh	equ	0xFF7
 26851                           tblptrl	equ	0xFF6
 26852                           tablat	equ	0xFF5
 26853                           prodh	equ	0xFF4
 26854                           prodl	equ	0xFF3
 26855                           intcon	equ	0xFF2
 26856                           postinc0	equ	0xFEE
 26857                           wreg	equ	0xFE8
 26858                           indf1	equ	0xFE7
 26859                           postinc1	equ	0xFE6
 26860                           postdec1	equ	0xFE5
 26861                           plusw1	equ	0xFE3
 26862                           fsr1h	equ	0xFE2
 26863                           fsr1l	equ	0xFE1
 26864                           indf2	equ	0xFDF
 26865                           postinc2	equ	0xFDE
 26866                           postdec2	equ	0xFDD
 26867                           plusw2	equ	0xFDB
 26868                           fsr2h	equ	0xFDA
 26869                           fsr2l	equ	0xFD9
 26870                           status	equ	0xFD8
 26871                           
 26872 ;; *************** function ___fltol *****************
 26873 ;; Defined at:
 26874 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\fltol.c"
 26875 ;; Parameters:    Size  Location     Type
 26876 ;;  f1              4    0[BANK0 ] unsigned char 
 26877 ;; Auto vars:     Size  Location     Type
 26878 ;;  exp1            1    9[BANK0 ] unsigned char 
 26879 ;;  sign1           1    8[BANK0 ] unsigned char 
 26880 ;; Return value:  Size  Location     Type
 26881 ;;                  4    0[BANK0 ] long 
 26882 ;; Registers used:
 26883 ;;		wreg, status,2, status,0
 26884 ;; Tracked objects:
 26885 ;;		On entry : 0/0
 26886 ;;		On exit  : 0/0
 26887 ;;		Unchanged: 0/0
 26888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 26889 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26890 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26891 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26892 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 26893 ;;Total ram usage:       10 bytes
 26894 ;; Hardware stack levels used:    1
 26895 ;; Hardware stack levels required when called:   10
 26896 ;; This function calls:
 26897 ;;		Nothing
 26898 ;; This function is called by:
 26899 ;;		_main
 26900 ;;		_motor_steps_from_degrees
 26901 ;;		__motor_get_speed_in_degrees
 26902 ;;		__step_position_from_divide_position
 26903 ;;		_motor_divide_jump_to_nearest
 26904 ;;		_motor_arc_move
 26905 ;;		_adc_read_temperature
 26906 ;;		_motor_go_to_degrees_position
 26907 ;; This function uses a non-reentrant model
 26908 ;;
 26909                           
 26910                           	psect	text101
 26911  011250                     __ptext101:
 26912                           	opt stack 0
 26913  011250                     ___fltol:
 26914                           	opt stack 17
 26915                           
 26916                           ; BSR set to: 0
 26917                           ;incstack = 0
 26918  011250  0100               	movlb	0	; () banked
 26919  011252  3562               	rlcf	(___fltol@f1+2)& (0+255),w,b
 26920  011254  3563               	rlcf	(___fltol@f1+3)& (0+255),w,b
 26921  011256  6F69               	movwf	___fltol@exp1& (0+255),b
 26922  011258  5169               	movf	___fltol@exp1& (0+255),w,b
 26923  01125A  A4D8               	btfss	status,2,c
 26924  01125C  D009               	goto	l3076
 26925                           
 26926                           ; BSR set to: 0
 26927  01125E  0E00               	movlw	0
 26928  011260  6F60               	movwf	?___fltol& (0+255),b
 26929  011262  0E00               	movlw	0
 26930  011264  6F61               	movwf	(?___fltol+1)& (0+255),b
 26931  011266  0E00               	movlw	0
 26932  011268  6F62               	movwf	(?___fltol+2)& (0+255),b
 26933  01126A  0E00               	movlw	0
 26934  01126C  6F63               	movwf	(?___fltol+3)& (0+255),b
 26935                           
 26936                           ; BSR set to: 0
 26937  01126E  0012               	return	
 26938  011270                     l3076:
 26939                           
 26940                           ; BSR set to: 0
 26941                           
 26942                           ; BSR set to: 0
 26943  011270  C060  F064         	movff	___fltol@f1,??___fltol
 26944  011274  C061  F065         	movff	___fltol@f1+1,??___fltol+1
 26945  011278  C062  F066         	movff	___fltol@f1+2,??___fltol+2
 26946  01127C  C063  F067         	movff	___fltol@f1+3,??___fltol+3
 26947  011280  0E20               	movlw	32
 26948  011282  D005               	goto	u20360
 26949  011284                     u20365:
 26950  011284  90D8               	bcf	status,0,c
 26951  011286  3367               	rrcf	(??___fltol+3)& (0+255),f,b
 26952  011288  3366               	rrcf	(??___fltol+2)& (0+255),f,b
 26953  01128A  3365               	rrcf	(??___fltol+1)& (0+255),f,b
 26954  01128C  3364               	rrcf	??___fltol& (0+255),f,b
 26955  01128E                     u20360:
 26956  01128E  2EE8               	decfsz	wreg,f,c
 26957  011290  D7F9               	goto	u20365
 26958  011292  5164               	movf	??___fltol& (0+255),w,b
 26959  011294  6F68               	movwf	___fltol@sign1& (0+255),b
 26960                           
 26961                           ; BSR set to: 0
 26962  011296  8F62               	bsf	(___fltol@f1+2)& (0+255),7,b
 26963                           
 26964                           ; BSR set to: 0
 26965  011298  0EFF               	movlw	255
 26966  01129A  1760               	andwf	___fltol@f1& (0+255),f,b
 26967  01129C  0EFF               	movlw	255
 26968  01129E  1761               	andwf	(___fltol@f1+1)& (0+255),f,b
 26969  0112A0  0EFF               	movlw	255
 26970  0112A2  1762               	andwf	(___fltol@f1+2)& (0+255),f,b
 26971  0112A4  0E00               	movlw	0
 26972  0112A6  1763               	andwf	(___fltol@f1+3)& (0+255),f,b
 26973                           
 26974                           ; BSR set to: 0
 26975  0112A8  0E96               	movlw	150
 26976  0112AA  5F69               	subwf	___fltol@exp1& (0+255),f,b
 26977                           
 26978                           ; BSR set to: 0
 26979  0112AC  AF69               	btfss	___fltol@exp1& (0+255),7,b
 26980  0112AE  D016               	goto	l3078
 26981                           
 26982                           ; BSR set to: 0
 26983  0112B0  5169               	movf	___fltol@exp1& (0+255),w,b
 26984  0112B2  0A80               	xorlw	128
 26985  0112B4  0F97               	addlw	151
 26986  0112B6  B0D8               	btfsc	status,0,c
 26987  0112B8  D009               	goto	l3079
 26988                           
 26989                           ; BSR set to: 0
 26990  0112BA  0E00               	movlw	0
 26991  0112BC  6F60               	movwf	?___fltol& (0+255),b
 26992  0112BE  0E00               	movlw	0
 26993  0112C0  6F61               	movwf	(?___fltol+1)& (0+255),b
 26994  0112C2  0E00               	movlw	0
 26995  0112C4  6F62               	movwf	(?___fltol+2)& (0+255),b
 26996  0112C6  0E00               	movlw	0
 26997  0112C8  6F63               	movwf	(?___fltol+3)& (0+255),b
 26998                           
 26999                           ; BSR set to: 0
 27000  0112CA  0012               	return	
 27001  0112CC                     l3079:
 27002                           
 27003                           ; BSR set to: 0
 27004                           
 27005                           ; BSR set to: 0
 27006                           
 27007                           ; BSR set to: 0
 27008  0112CC  90D8               	bcf	status,0,c
 27009  0112CE  3363               	rrcf	(___fltol@f1+3)& (0+255),f,b
 27010  0112D0  3362               	rrcf	(___fltol@f1+2)& (0+255),f,b
 27011  0112D2  3361               	rrcf	(___fltol@f1+1)& (0+255),f,b
 27012  0112D4  3360               	rrcf	___fltol@f1& (0+255),f,b
 27013                           
 27014                           ; BSR set to: 0
 27015  0112D6  3F69               	incfsz	___fltol@exp1& (0+255),f,b
 27016  0112D8  D7F9               	goto	l3079
 27017                           
 27018                           ; BSR set to: 0
 27019  0112DA  D015               	goto	u20400
 27020  0112DC                     l3078:
 27021                           
 27022                           ; BSR set to: 0
 27023                           
 27024                           ; BSR set to: 0
 27025  0112DC  0E1F               	movlw	31
 27026  0112DE  6569               	cpfsgt	___fltol@exp1& (0+255),b
 27027  0112E0  D00F               	goto	l3084
 27028                           
 27029                           ; BSR set to: 0
 27030  0112E2  0E00               	movlw	0
 27031  0112E4  6F60               	movwf	?___fltol& (0+255),b
 27032  0112E6  0E00               	movlw	0
 27033  0112E8  6F61               	movwf	(?___fltol+1)& (0+255),b
 27034  0112EA  0E00               	movlw	0
 27035  0112EC  6F62               	movwf	(?___fltol+2)& (0+255),b
 27036  0112EE  0E00               	movlw	0
 27037  0112F0  6F63               	movwf	(?___fltol+3)& (0+255),b
 27038                           
 27039                           ; BSR set to: 0
 27040  0112F2  0012               	return	
 27041  0112F4                     
 27042                           ; BSR set to: 0
 27043                           
 27044                           ; BSR set to: 0
 27045  0112F4  90D8               	bcf	status,0,c
 27046  0112F6  3760               	rlcf	___fltol@f1& (0+255),f,b
 27047  0112F8  3761               	rlcf	(___fltol@f1+1)& (0+255),f,b
 27048  0112FA  3762               	rlcf	(___fltol@f1+2)& (0+255),f,b
 27049  0112FC  3763               	rlcf	(___fltol@f1+3)& (0+255),f,b
 27050  0112FE  0769               	decf	___fltol@exp1& (0+255),f,b
 27051  011300                     l3084:
 27052                           
 27053                           ; BSR set to: 0
 27054                           
 27055                           ; BSR set to: 0
 27056  011300  5169               	movf	___fltol@exp1& (0+255),w,b
 27057  011302  A4D8               	btfss	status,2,c
 27058  011304  D7F7               	goto	l3085
 27059  011306                     u20400:
 27060                           
 27061                           ; BSR set to: 0
 27062                           
 27063                           ; BSR set to: 0
 27064                           
 27065                           ; BSR set to: 0
 27066  011306  5168               	movf	___fltol@sign1& (0+255),w,b
 27067  011308  B4D8               	btfsc	status,2,c
 27068  01130A  D008               	goto	l3087
 27069                           
 27070                           ; BSR set to: 0
 27071  01130C  1F63               	comf	(___fltol@f1+3)& (0+255),f,b
 27072  01130E  1F62               	comf	(___fltol@f1+2)& (0+255),f,b
 27073  011310  1F61               	comf	(___fltol@f1+1)& (0+255),f,b
 27074  011312  6D60               	negf	___fltol@f1& (0+255),b
 27075  011314  0E00               	movlw	0
 27076  011316  2361               	addwfc	(___fltol@f1+1)& (0+255),f,b
 27077  011318  2362               	addwfc	(___fltol@f1+2)& (0+255),f,b
 27078  01131A  2363               	addwfc	(___fltol@f1+3)& (0+255),f,b
 27079  01131C                     l3087:
 27080                           
 27081                           ; BSR set to: 0
 27082                           
 27083                           ; BSR set to: 0
 27084  01131C  C060  F060         	movff	___fltol@f1,?___fltol
 27085  011320  C061  F061         	movff	___fltol@f1+1,?___fltol+1
 27086  011324  C062  F062         	movff	___fltol@f1+2,?___fltol+2
 27087  011328  C063  F063         	movff	___fltol@f1+3,?___fltol+3
 27088  01132C  0012               	return	
 27089  01132E                     __end_of___fltol:
 27090                           	opt stack 0
 27091                           tblptru	equ	0xFF8
 27092                           tblptrh	equ	0xFF7
 27093                           tblptrl	equ	0xFF6
 27094                           tablat	equ	0xFF5
 27095                           prodh	equ	0xFF4
 27096                           prodl	equ	0xFF3
 27097                           intcon	equ	0xFF2
 27098                           postinc0	equ	0xFEE
 27099                           wreg	equ	0xFE8
 27100                           indf1	equ	0xFE7
 27101                           postinc1	equ	0xFE6
 27102                           postdec1	equ	0xFE5
 27103                           plusw1	equ	0xFE3
 27104                           fsr1h	equ	0xFE2
 27105                           fsr1l	equ	0xFE1
 27106                           indf2	equ	0xFDF
 27107                           postinc2	equ	0xFDE
 27108                           postdec2	equ	0xFDD
 27109                           plusw2	equ	0xFDB
 27110                           fsr2h	equ	0xFDA
 27111                           fsr2l	equ	0xFD9
 27112                           status	equ	0xFD8
 27113                           
 27114 ;; *************** function ___flneg *****************
 27115 ;; Defined at:
 27116 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\flneg.c"
 27117 ;; Parameters:    Size  Location     Type
 27118 ;;  f1              4   14[BANK0 ] long 
 27119 ;; Auto vars:     Size  Location     Type
 27120 ;;		None
 27121 ;; Return value:  Size  Location     Type
 27122 ;;                  4   14[BANK0 ] long 
 27123 ;; Registers used:
 27124 ;;		wreg, status,2, status,0
 27125 ;; Tracked objects:
 27126 ;;		On entry : 0/0
 27127 ;;		On exit  : 0/0
 27128 ;;		Unchanged: 0/0
 27129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 27130 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27133 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27134 ;;Total ram usage:        4 bytes
 27135 ;; Hardware stack levels used:    1
 27136 ;; Hardware stack levels required when called:   10
 27137 ;; This function calls:
 27138 ;;		Nothing
 27139 ;; This function is called by:
 27140 ;;		_adc_read_temperature
 27141 ;; This function uses a non-reentrant model
 27142 ;;
 27143                           
 27144                           	psect	text102
 27145  013EBC                     __ptext102:
 27146                           	opt stack 0
 27147  013EBC                     ___flneg:
 27148                           	opt stack 19
 27149                           
 27150                           ; BSR set to: 0
 27151                           ;incstack = 0
 27152  013EBC  0100               	movlb	0	; () banked
 27153  013EBE  516E               	movf	___flneg@f1& (0+255),w,b
 27154  013EC0  116F               	iorwf	(___flneg@f1+1)& (0+255),w,b
 27155  013EC2  1170               	iorwf	(___flneg@f1+2)& (0+255),w,b
 27156  013EC4  1171               	iorwf	(___flneg@f1+3)& (0+255),w,b
 27157  013EC6  B4D8               	btfsc	status,2,c
 27158  013EC8  D008               	goto	l3053
 27159                           
 27160                           ; BSR set to: 0
 27161  013ECA  0E00               	movlw	0
 27162  013ECC  1B6E               	xorwf	___flneg@f1& (0+255),f,b
 27163  013ECE  0E00               	movlw	0
 27164  013ED0  1B6F               	xorwf	(___flneg@f1+1)& (0+255),f,b
 27165  013ED2  0E00               	movlw	0
 27166  013ED4  1B70               	xorwf	(___flneg@f1+2)& (0+255),f,b
 27167  013ED6  0E80               	movlw	128
 27168  013ED8  1B71               	xorwf	(___flneg@f1+3)& (0+255),f,b
 27169  013EDA                     l3053:
 27170                           
 27171                           ; BSR set to: 0
 27172                           
 27173                           ; BSR set to: 0
 27174  013EDA  C06E  F06E         	movff	___flneg@f1,?___flneg
 27175  013EDE  C06F  F06F         	movff	___flneg@f1+1,?___flneg+1
 27176  013EE2  C070  F070         	movff	___flneg@f1+2,?___flneg+2
 27177  013EE6  C071  F071         	movff	___flneg@f1+3,?___flneg+3
 27178  013EEA  0012               	return	
 27179  013EEC                     __end_of___flneg:
 27180                           	opt stack 0
 27181                           tblptru	equ	0xFF8
 27182                           tblptrh	equ	0xFF7
 27183                           tblptrl	equ	0xFF6
 27184                           tablat	equ	0xFF5
 27185                           prodh	equ	0xFF4
 27186                           prodl	equ	0xFF3
 27187                           intcon	equ	0xFF2
 27188                           postinc0	equ	0xFEE
 27189                           wreg	equ	0xFE8
 27190                           indf1	equ	0xFE7
 27191                           postinc1	equ	0xFE6
 27192                           postdec1	equ	0xFE5
 27193                           plusw1	equ	0xFE3
 27194                           fsr1h	equ	0xFE2
 27195                           fsr1l	equ	0xFE1
 27196                           indf2	equ	0xFDF
 27197                           postinc2	equ	0xFDE
 27198                           postdec2	equ	0xFDD
 27199                           plusw2	equ	0xFDB
 27200                           fsr2h	equ	0xFDA
 27201                           fsr2l	equ	0xFD9
 27202                           status	equ	0xFD8
 27203                           
 27204 ;; *************** function ___flmul *****************
 27205 ;; Defined at:
 27206 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcmul.c"
 27207 ;; Parameters:    Size  Location     Type
 27208 ;;  b               4   14[BANK0 ] long 
 27209 ;;  a               4   18[BANK0 ] long 
 27210 ;; Auto vars:     Size  Location     Type
 27211 ;;  prod            4   33[BANK0 ] struct .
 27212 ;;  grs             4   28[BANK0 ] unsigned long 
 27213 ;;  temp            2   37[BANK0 ] struct .
 27214 ;;  bexp            1   32[BANK0 ] unsigned char 
 27215 ;;  aexp            1   27[BANK0 ] unsigned char 
 27216 ;;  sign            1   26[BANK0 ] unsigned char 
 27217 ;; Return value:  Size  Location     Type
 27218 ;;                  4   14[BANK0 ] unsigned char 
 27219 ;; Registers used:
 27220 ;;		wreg, status,2, status,0, prodl, prodh
 27221 ;; Tracked objects:
 27222 ;;		On entry : 0/0
 27223 ;;		On exit  : 0/0
 27224 ;;		Unchanged: 0/0
 27225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 27226 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27227 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27229 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27230 ;;Total ram usage:       25 bytes
 27231 ;; Hardware stack levels used:    1
 27232 ;; Hardware stack levels required when called:   10
 27233 ;; This function calls:
 27234 ;;		Nothing
 27235 ;; This function is called by:
 27236 ;;		_main
 27237 ;;		_motor_steps_from_degrees
 27238 ;;		__step_position_from_divide_position
 27239 ;;		_motor_divide_jump_to_nearest
 27240 ;;		_motor_arc_move
 27241 ;;		_adc_read_temperature
 27242 ;;		_motor_go_to_degrees_position
 27243 ;; This function uses a non-reentrant model
 27244 ;;
 27245                           
 27246                           	psect	text103
 27247  00C1D0                     __ptext103:
 27248                           	opt stack 0
 27249  00C1D0                     ___flmul:
 27250                           	opt stack 17
 27251                           
 27252                           ; BSR set to: 0
 27253                           ;incstack = 0
 27254  00C1D0  0100               	movlb	0	; () banked
 27255  00C1D2  5171               	movf	(___flmul@b+3)& (0+255),w,b
 27256  00C1D4  0B80               	andlw	128
 27257  00C1D6  6F7A               	movwf	___flmul@sign& (0+255),b
 27258  00C1D8  5171               	movf	(___flmul@b+3)& (0+255),w,b
 27259  00C1DA  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 27260  00C1DC  6F80               	movwf	___flmul@bexp& (0+255),b
 27261                           
 27262                           ; BSR set to: 0
 27263  00C1DE  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 27264                           
 27265                           ; BSR set to: 0
 27266  00C1E0  8180               	bsf	___flmul@bexp& (0+255),0,b
 27267                           
 27268                           ; BSR set to: 0
 27269                           
 27270                           ; BSR set to: 0
 27271  00C1E2  5180               	movf	___flmul@bexp& (0+255),w,b
 27272  00C1E4  B4D8               	btfsc	status,2,c
 27273  00C1E6  D00D               	goto	l3384
 27274                           
 27275                           ; BSR set to: 0
 27276  00C1E8  2980               	incf	___flmul@bexp& (0+255),w,b
 27277  00C1EA  A4D8               	btfss	status,2,c
 27278  00C1EC  D008               	goto	l3385
 27279                           
 27280                           ; BSR set to: 0
 27281  00C1EE  0E00               	movlw	0
 27282  00C1F0  6F6E               	movwf	___flmul@b& (0+255),b
 27283  00C1F2  0E00               	movlw	0
 27284  00C1F4  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 27285  00C1F6  0E00               	movlw	0
 27286  00C1F8  6F70               	movwf	(___flmul@b+2)& (0+255),b
 27287  00C1FA  0E00               	movlw	0
 27288  00C1FC  6F71               	movwf	(___flmul@b+3)& (0+255),b
 27289  00C1FE                     l3385:
 27290                           
 27291                           ; BSR set to: 0
 27292                           
 27293                           ; BSR set to: 0
 27294  00C1FE  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 27295  00C200  D008               	goto	l3386
 27296  00C202                     l3384:
 27297                           
 27298                           ; BSR set to: 0
 27299                           
 27300                           ; BSR set to: 0
 27301  00C202  0E00               	movlw	0
 27302  00C204  6F6E               	movwf	___flmul@b& (0+255),b
 27303  00C206  0E00               	movlw	0
 27304  00C208  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 27305  00C20A  0E00               	movlw	0
 27306  00C20C  6F70               	movwf	(___flmul@b+2)& (0+255),b
 27307  00C20E  0E00               	movlw	0
 27308  00C210  6F71               	movwf	(___flmul@b+3)& (0+255),b
 27309  00C212                     l3386:
 27310                           
 27311                           ; BSR set to: 0
 27312                           
 27313                           ; BSR set to: 0
 27314  00C212  5175               	movf	(___flmul@a+3)& (0+255),w,b
 27315  00C214  0B80               	andlw	128
 27316  00C216  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 27317                           
 27318                           ; BSR set to: 0
 27319  00C218  5175               	movf	(___flmul@a+3)& (0+255),w,b
 27320  00C21A  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 27321  00C21C  6F7B               	movwf	___flmul@aexp& (0+255),b
 27322                           
 27323                           ; BSR set to: 0
 27324  00C21E  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 27325                           
 27326                           ; BSR set to: 0
 27327  00C220  817B               	bsf	___flmul@aexp& (0+255),0,b
 27328                           
 27329                           ; BSR set to: 0
 27330                           
 27331                           ; BSR set to: 0
 27332  00C222  517B               	movf	___flmul@aexp& (0+255),w,b
 27333  00C224  B4D8               	btfsc	status,2,c
 27334  00C226  D00D               	goto	l3388
 27335                           
 27336                           ; BSR set to: 0
 27337  00C228  297B               	incf	___flmul@aexp& (0+255),w,b
 27338  00C22A  A4D8               	btfss	status,2,c
 27339  00C22C  D008               	goto	l3389
 27340                           
 27341                           ; BSR set to: 0
 27342  00C22E  0E00               	movlw	0
 27343  00C230  6F72               	movwf	___flmul@a& (0+255),b
 27344  00C232  0E00               	movlw	0
 27345  00C234  6F73               	movwf	(___flmul@a+1)& (0+255),b
 27346  00C236  0E00               	movlw	0
 27347  00C238  6F74               	movwf	(___flmul@a+2)& (0+255),b
 27348  00C23A  0E00               	movlw	0
 27349  00C23C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 27350  00C23E                     l3389:
 27351                           
 27352                           ; BSR set to: 0
 27353                           
 27354                           ; BSR set to: 0
 27355  00C23E  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 27356  00C240  D008               	goto	l3390
 27357  00C242                     l3388:
 27358                           
 27359                           ; BSR set to: 0
 27360                           
 27361                           ; BSR set to: 0
 27362  00C242  0E00               	movlw	0
 27363  00C244  6F72               	movwf	___flmul@a& (0+255),b
 27364  00C246  0E00               	movlw	0
 27365  00C248  6F73               	movwf	(___flmul@a+1)& (0+255),b
 27366  00C24A  0E00               	movlw	0
 27367  00C24C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 27368  00C24E  0E00               	movlw	0
 27369  00C250  6F75               	movwf	(___flmul@a+3)& (0+255),b
 27370  00C252                     l3390:
 27371                           
 27372                           ; BSR set to: 0
 27373  00C252  517B               	movf	___flmul@aexp& (0+255),w,b
 27374  00C254  B4D8               	btfsc	status,2,c
 27375  00C256  D003               	goto	u20230
 27376                           
 27377                           ; BSR set to: 0
 27378  00C258  5180               	movf	___flmul@bexp& (0+255),w,b
 27379  00C25A  A4D8               	btfss	status,2,c
 27380  00C25C  D009               	goto	l3391
 27381  00C25E                     u20230:
 27382                           
 27383                           ; BSR set to: 0
 27384                           
 27385                           ; BSR set to: 0
 27386  00C25E  0E00               	movlw	0
 27387  00C260  6F6E               	movwf	?___flmul& (0+255),b
 27388  00C262  0E00               	movlw	0
 27389  00C264  6F6F               	movwf	(?___flmul+1)& (0+255),b
 27390  00C266  0E00               	movlw	0
 27391  00C268  6F70               	movwf	(?___flmul+2)& (0+255),b
 27392  00C26A  0E00               	movlw	0
 27393  00C26C  6F71               	movwf	(?___flmul+3)& (0+255),b
 27394                           
 27395                           ; BSR set to: 0
 27396  00C26E  0012               	return	
 27397  00C270                     l3391:
 27398                           
 27399                           ; BSR set to: 0
 27400                           
 27401                           ; BSR set to: 0
 27402  00C270  5174               	movf	(___flmul@a+2)& (0+255),w,b
 27403  00C272  036E               	mulwf	___flmul@b& (0+255),b
 27404  00C274  CFF3 F085          	movff	prodl,___flmul@temp
 27405  00C278  CFF4 F086          	movff	prodh,___flmul@temp+1
 27406                           
 27407                           ; BSR set to: 0
 27408  00C27C  5185               	movf	___flmul@temp& (0+255),w,b
 27409  00C27E  6F7C               	movwf	___flmul@grs& (0+255),b
 27410  00C280  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 27411  00C282  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 27412  00C284  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 27413                           
 27414                           ; BSR set to: 0
 27415  00C286  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27416  00C288  6F81               	movwf	___flmul@prod& (0+255),b
 27417  00C28A  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 27418  00C28C  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 27419  00C28E  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 27420  00C290  5173               	movf	(___flmul@a+1)& (0+255),w,b
 27421  00C292  036F               	mulwf	(___flmul@b+1)& (0+255),b
 27422  00C294  CFF3 F085          	movff	prodl,___flmul@temp
 27423  00C298  CFF4 F086          	movff	prodh,___flmul@temp+1
 27424                           
 27425                           ; BSR set to: 0
 27426  00C29C  5185               	movf	___flmul@temp& (0+255),w,b
 27427  00C29E  277C               	addwf	___flmul@grs& (0+255),f,b
 27428  00C2A0  0E00               	movlw	0
 27429  00C2A2  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27430  00C2A4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27431  00C2A6  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27432                           
 27433                           ; BSR set to: 0
 27434  00C2A8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27435  00C2AA  2781               	addwf	___flmul@prod& (0+255),f,b
 27436  00C2AC  0E00               	movlw	0
 27437  00C2AE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27438  00C2B0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27439  00C2B2  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27440  00C2B4  5172               	movf	___flmul@a& (0+255),w,b
 27441  00C2B6  0370               	mulwf	(___flmul@b+2)& (0+255),b
 27442  00C2B8  CFF3 F085          	movff	prodl,___flmul@temp
 27443  00C2BC  CFF4 F086          	movff	prodh,___flmul@temp+1
 27444                           
 27445                           ; BSR set to: 0
 27446  00C2C0  5185               	movf	___flmul@temp& (0+255),w,b
 27447  00C2C2  277C               	addwf	___flmul@grs& (0+255),f,b
 27448  00C2C4  0E00               	movlw	0
 27449  00C2C6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27450  00C2C8  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27451  00C2CA  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27452                           
 27453                           ; BSR set to: 0
 27454  00C2CC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27455  00C2CE  2781               	addwf	___flmul@prod& (0+255),f,b
 27456  00C2D0  0E00               	movlw	0
 27457  00C2D2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27458  00C2D4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27459  00C2D6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27460                           
 27461                           ; BSR set to: 0
 27462  00C2D8  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 27463  00C2DC  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 27464  00C2E0  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 27465  00C2E4  6B7C               	clrf	___flmul@grs& (0+255),b
 27466                           
 27467                           ; BSR set to: 0
 27468  00C2E6  5172               	movf	___flmul@a& (0+255),w,b
 27469  00C2E8  036F               	mulwf	(___flmul@b+1)& (0+255),b
 27470  00C2EA  CFF3 F085          	movff	prodl,___flmul@temp
 27471  00C2EE  CFF4 F086          	movff	prodh,___flmul@temp+1
 27472                           
 27473                           ; BSR set to: 0
 27474  00C2F2  5185               	movf	___flmul@temp& (0+255),w,b
 27475  00C2F4  277C               	addwf	___flmul@grs& (0+255),f,b
 27476  00C2F6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27477  00C2F8  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27478  00C2FA  0E00               	movlw	0
 27479  00C2FC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27480  00C2FE  0E00               	movlw	0
 27481  00C300  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27482                           
 27483                           ; BSR set to: 0
 27484  00C302  5173               	movf	(___flmul@a+1)& (0+255),w,b
 27485  00C304  036E               	mulwf	___flmul@b& (0+255),b
 27486  00C306  CFF3 F085          	movff	prodl,___flmul@temp
 27487  00C30A  CFF4 F086          	movff	prodh,___flmul@temp+1
 27488                           
 27489                           ; BSR set to: 0
 27490  00C30E  5185               	movf	___flmul@temp& (0+255),w,b
 27491  00C310  277C               	addwf	___flmul@grs& (0+255),f,b
 27492  00C312  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27493  00C314  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27494  00C316  0E00               	movlw	0
 27495  00C318  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27496  00C31A  0E00               	movlw	0
 27497  00C31C  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27498                           
 27499                           ; BSR set to: 0
 27500  00C31E  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 27501  00C322  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 27502  00C326  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 27503  00C32A  6B7C               	clrf	___flmul@grs& (0+255),b
 27504  00C32C  5172               	movf	___flmul@a& (0+255),w,b
 27505  00C32E  036E               	mulwf	___flmul@b& (0+255),b
 27506  00C330  CFF3 F085          	movff	prodl,___flmul@temp
 27507  00C334  CFF4 F086          	movff	prodh,___flmul@temp+1
 27508                           
 27509                           ; BSR set to: 0
 27510  00C338  5185               	movf	___flmul@temp& (0+255),w,b
 27511  00C33A  277C               	addwf	___flmul@grs& (0+255),f,b
 27512  00C33C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27513  00C33E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27514  00C340  0E00               	movlw	0
 27515  00C342  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27516  00C344  0E00               	movlw	0
 27517  00C346  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27518                           
 27519                           ; BSR set to: 0
 27520  00C348  5174               	movf	(___flmul@a+2)& (0+255),w,b
 27521  00C34A  036F               	mulwf	(___flmul@b+1)& (0+255),b
 27522  00C34C  CFF3 F085          	movff	prodl,___flmul@temp
 27523  00C350  CFF4 F086          	movff	prodh,___flmul@temp+1
 27524  00C354  5185               	movf	___flmul@temp& (0+255),w,b
 27525  00C356  2781               	addwf	___flmul@prod& (0+255),f,b
 27526  00C358  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27527  00C35A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27528  00C35C  0E00               	movlw	0
 27529  00C35E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27530  00C360  0E00               	movlw	0
 27531  00C362  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27532                           
 27533                           ; BSR set to: 0
 27534  00C364  5173               	movf	(___flmul@a+1)& (0+255),w,b
 27535  00C366  0370               	mulwf	(___flmul@b+2)& (0+255),b
 27536  00C368  CFF3 F085          	movff	prodl,___flmul@temp
 27537  00C36C  CFF4 F086          	movff	prodh,___flmul@temp+1
 27538                           
 27539                           ; BSR set to: 0
 27540  00C370  5185               	movf	___flmul@temp& (0+255),w,b
 27541  00C372  2781               	addwf	___flmul@prod& (0+255),f,b
 27542  00C374  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27543  00C376  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27544  00C378  0E00               	movlw	0
 27545  00C37A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27546  00C37C  0E00               	movlw	0
 27547  00C37E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27548  00C380  5174               	movf	(___flmul@a+2)& (0+255),w,b
 27549  00C382  0370               	mulwf	(___flmul@b+2)& (0+255),b
 27550  00C384  CFF3 F085          	movff	prodl,___flmul@temp
 27551  00C388  CFF4 F086          	movff	prodh,___flmul@temp+1
 27552                           
 27553                           ; BSR set to: 0
 27554  00C38C  5185               	movf	___flmul@temp& (0+255),w,b
 27555  00C38E  6F76               	movwf	??___flmul& (0+255),b
 27556  00C390  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27557  00C392  6F77               	movwf	(??___flmul+1)& (0+255),b
 27558  00C394  6B78               	clrf	(??___flmul+2)& (0+255),b
 27559  00C396  6B79               	clrf	(??___flmul+3)& (0+255),b
 27560  00C398  C078  F079         	movff	??___flmul+2,??___flmul+3
 27561  00C39C  C077  F078         	movff	??___flmul+1,??___flmul+2
 27562  00C3A0  C076  F077         	movff	??___flmul,??___flmul+1
 27563  00C3A4  6B76               	clrf	??___flmul& (0+255),b
 27564  00C3A6  5176               	movf	??___flmul& (0+255),w,b
 27565  00C3A8  2781               	addwf	___flmul@prod& (0+255),f,b
 27566  00C3AA  5177               	movf	(??___flmul+1)& (0+255),w,b
 27567  00C3AC  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27568  00C3AE  5178               	movf	(??___flmul+2)& (0+255),w,b
 27569  00C3B0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27570  00C3B2  5179               	movf	(??___flmul+3)& (0+255),w,b
 27571  00C3B4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27572                           
 27573                           ; BSR set to: 0
 27574  00C3B6  C07C  F076         	movff	___flmul@grs,??___flmul
 27575  00C3BA  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 27576  00C3BE  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 27577  00C3C2  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 27578  00C3C6  0E19               	movlw	25
 27579  00C3C8  D005               	goto	u20240
 27580  00C3CA                     u20245:
 27581  00C3CA  90D8               	bcf	status,0,c
 27582  00C3CC  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 27583  00C3CE  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 27584  00C3D0  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 27585  00C3D2  3376               	rrcf	??___flmul& (0+255),f,b
 27586  00C3D4                     u20240:
 27587  00C3D4  2EE8               	decfsz	wreg,f,c
 27588  00C3D6  D7F9               	goto	u20245
 27589  00C3D8  5176               	movf	??___flmul& (0+255),w,b
 27590  00C3DA  2781               	addwf	___flmul@prod& (0+255),f,b
 27591  00C3DC  5177               	movf	(??___flmul+1)& (0+255),w,b
 27592  00C3DE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27593  00C3E0  5178               	movf	(??___flmul+2)& (0+255),w,b
 27594  00C3E2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27595  00C3E4  5179               	movf	(??___flmul+3)& (0+255),w,b
 27596  00C3E6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27597                           
 27598                           ; BSR set to: 0
 27599  00C3E8  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 27600  00C3EC  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 27601  00C3F0  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 27602  00C3F4  6B7C               	clrf	___flmul@grs& (0+255),b
 27603                           
 27604                           ; BSR set to: 0
 27605  00C3F6  517B               	movf	___flmul@aexp& (0+255),w,b
 27606  00C3F8  C080  F076         	movff	___flmul@bexp,??___flmul
 27607  00C3FC  6B77               	clrf	(??___flmul+1)& (0+255),b
 27608  00C3FE  2776               	addwf	??___flmul& (0+255),f,b
 27609  00C400  0E00               	movlw	0
 27610  00C402  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 27611  00C404  0E82               	movlw	130
 27612  00C406  2576               	addwf	??___flmul& (0+255),w,b
 27613  00C408  6F85               	movwf	___flmul@temp& (0+255),b
 27614  00C40A  0EFF               	movlw	255
 27615  00C40C  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 27616  00C40E  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 27617  00C410  D00F               	goto	l3395
 27618  00C412                     
 27619                           ; BSR set to: 0
 27620                           
 27621                           ; BSR set to: 0
 27622  00C412  90D8               	bcf	status,0,c
 27623  00C414  3781               	rlcf	___flmul@prod& (0+255),f,b
 27624  00C416  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 27625  00C418  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 27626  00C41A  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 27627                           
 27628                           ; BSR set to: 0
 27629  00C41C  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 27630                           
 27631                           ; BSR set to: 0
 27632  00C41E  8181               	bsf	___flmul@prod& (0+255),0,b
 27633                           
 27634                           ; BSR set to: 0
 27635  00C420  90D8               	bcf	status,0,c
 27636  00C422  377C               	rlcf	___flmul@grs& (0+255),f,b
 27637  00C424  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 27638  00C426  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 27639  00C428  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 27640  00C42A  0785               	decf	___flmul@temp& (0+255),f,b
 27641  00C42C  A0D8               	btfss	status,0,c
 27642  00C42E  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 27643  00C430                     l3395:
 27644                           
 27645                           ; BSR set to: 0
 27646                           
 27647                           ; BSR set to: 0
 27648  00C430  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 27649  00C432  D7EF               	goto	l3396
 27650                           
 27651                           ; BSR set to: 0
 27652                           
 27653                           ; BSR set to: 0
 27654  00C434  0E00               	movlw	0
 27655  00C436  6F7B               	movwf	___flmul@aexp& (0+255),b
 27656                           
 27657                           ; BSR set to: 0
 27658  00C438  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 27659  00C43A  D016               	goto	l3402
 27660                           
 27661                           ; BSR set to: 0
 27662  00C43C  0EFF               	movlw	255
 27663  00C43E  157C               	andwf	___flmul@grs& (0+255),w,b
 27664  00C440  6F76               	movwf	??___flmul& (0+255),b
 27665  00C442  0EFF               	movlw	255
 27666  00C444  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 27667  00C446  6F77               	movwf	(??___flmul+1)& (0+255),b
 27668  00C448  0EFF               	movlw	255
 27669  00C44A  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 27670  00C44C  6F78               	movwf	(??___flmul+2)& (0+255),b
 27671  00C44E  0E7F               	movlw	127
 27672  00C450  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 27673  00C452  6F79               	movwf	(??___flmul+3)& (0+255),b
 27674  00C454  5176               	movf	??___flmul& (0+255),w,b
 27675  00C456  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 27676  00C458  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 27677  00C45A  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 27678  00C45C  A4D8               	btfss	status,2,c
 27679  00C45E  D002               	goto	u20290
 27680                           
 27681                           ; BSR set to: 0
 27682                           
 27683                           ; BSR set to: 0
 27684  00C460  A181               	btfss	___flmul@prod& (0+255),0,b
 27685  00C462  D002               	goto	l3402
 27686  00C464                     u20290:
 27687                           
 27688                           ; BSR set to: 0
 27689  00C464  0E01               	movlw	1
 27690  00C466  6F7B               	movwf	___flmul@aexp& (0+255),b
 27691  00C468                     l3402:
 27692                           
 27693                           ; BSR set to: 0
 27694                           
 27695                           ; BSR set to: 0
 27696                           
 27697                           ; BSR set to: 0
 27698  00C468  517B               	movf	___flmul@aexp& (0+255),w,b
 27699  00C46A  B4D8               	btfsc	status,2,c
 27700  00C46C  D01F               	goto	l3404
 27701                           
 27702                           ; BSR set to: 0
 27703  00C46E  0E01               	movlw	1
 27704  00C470  2781               	addwf	___flmul@prod& (0+255),f,b
 27705  00C472  0E00               	movlw	0
 27706  00C474  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27707  00C476  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27708  00C478  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27709                           
 27710                           ; BSR set to: 0
 27711  00C47A  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 27712  00C47C  D017               	goto	l3404
 27713                           
 27714                           ; BSR set to: 0
 27715  00C47E  C081  F076         	movff	___flmul@prod,??___flmul
 27716  00C482  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 27717  00C486  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 27718  00C48A  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 27719  00C48E  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 27720  00C490  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 27721  00C492  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 27722  00C494  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 27723  00C496  3376               	rrcf	??___flmul& (0+255),f,b
 27724  00C498  C076  F081         	movff	??___flmul,___flmul@prod
 27725  00C49C  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 27726  00C4A0  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 27727  00C4A4  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 27728                           
 27729                           ; BSR set to: 0
 27730  00C4A8  4B85               	infsnz	___flmul@temp& (0+255),f,b
 27731  00C4AA  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 27732  00C4AC                     l3404:
 27733                           
 27734                           ; BSR set to: 0
 27735                           
 27736                           ; BSR set to: 0
 27737                           
 27738                           ; BSR set to: 0
 27739  00C4AC  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 27740  00C4AE  D00D               	goto	l3405
 27741  00C4B0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27742  00C4B2  E103               	bnz	u20320
 27743  00C4B4  2985               	incf	___flmul@temp& (0+255),w,b
 27744  00C4B6  A0D8               	btfss	status,0,c
 27745  00C4B8  D008               	goto	l3405
 27746  00C4BA                     u20320:
 27747                           
 27748                           ; BSR set to: 0
 27749  00C4BA  0E00               	movlw	0
 27750  00C4BC  6F81               	movwf	___flmul@prod& (0+255),b
 27751  00C4BE  0E00               	movlw	0
 27752  00C4C0  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 27753  00C4C2  0E80               	movlw	128
 27754  00C4C4  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 27755  00C4C6  0E7F               	movlw	127
 27756  00C4C8  D020               	goto	L42
 27757  00C4CA                     l3405:
 27758                           
 27759                           ; BSR set to: 0
 27760                           
 27761                           ; BSR set to: 0
 27762  00C4CA  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 27763  00C4CC  D005               	goto	u20330
 27764  00C4CE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27765  00C4D0  E10E               	bnz	l3407
 27766  00C4D2  0585               	decf	___flmul@temp& (0+255),w,b
 27767  00C4D4  B0D8               	btfsc	status,0,c
 27768  00C4D6  D00B               	goto	l3407
 27769  00C4D8                     u20330:
 27770                           
 27771                           ; BSR set to: 0
 27772  00C4D8  0E00               	movlw	0
 27773  00C4DA  6F81               	movwf	___flmul@prod& (0+255),b
 27774  00C4DC  0E00               	movlw	0
 27775  00C4DE  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 27776  00C4E0  0E00               	movlw	0
 27777  00C4E2  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 27778  00C4E4  0E00               	movlw	0
 27779  00C4E6  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 27780  00C4E8  0E00               	movlw	0
 27781  00C4EA  6F7A               	movwf	___flmul@sign& (0+255),b
 27782  00C4EC  D00F               	goto	l3408
 27783  00C4EE                     l3407:
 27784                           
 27785                           ; BSR set to: 0
 27786  00C4EE  C085  F080         	movff	___flmul@temp,___flmul@bexp
 27787                           
 27788                           ; BSR set to: 0
 27789  00C4F2  0EFF               	movlw	255
 27790  00C4F4  1781               	andwf	___flmul@prod& (0+255),f,b
 27791  00C4F6  0EFF               	movlw	255
 27792  00C4F8  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 27793  00C4FA  0E7F               	movlw	127
 27794  00C4FC  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 27795  00C4FE  0E00               	movlw	0
 27796  00C500  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 27797                           
 27798                           ; BSR set to: 0
 27799  00C502  B180               	btfsc	___flmul@bexp& (0+255),0,b
 27800                           
 27801                           ; BSR set to: 0
 27802  00C504  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 27803                           
 27804                           ; BSR set to: 0
 27805                           
 27806                           ; BSR set to: 0
 27807  00C506  90D8               	bcf	status,0,c
 27808  00C508  3180               	rrcf	___flmul@bexp& (0+255),w,b
 27809  00C50A                     L42:
 27810  00C50A  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 27811  00C50C                     l3408:
 27812                           
 27813                           ; BSR set to: 0
 27814                           
 27815                           ; BSR set to: 0
 27816                           
 27817                           ; BSR set to: 0
 27818  00C50C  517A               	movf	___flmul@sign& (0+255),w,b
 27819  00C50E  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 27820                           
 27821                           ; BSR set to: 0
 27822  00C510  C081  F06E         	movff	___flmul@prod,?___flmul
 27823  00C514  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 27824  00C518  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 27825  00C51C  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 27826  00C520  0012               	return	
 27827  00C522                     __end_of___flmul:
 27828                           	opt stack 0
 27829                           tblptru	equ	0xFF8
 27830                           tblptrh	equ	0xFF7
 27831                           tblptrl	equ	0xFF6
 27832                           tablat	equ	0xFF5
 27833                           prodh	equ	0xFF4
 27834                           prodl	equ	0xFF3
 27835                           intcon	equ	0xFF2
 27836                           postinc0	equ	0xFEE
 27837                           wreg	equ	0xFE8
 27838                           indf1	equ	0xFE7
 27839                           postinc1	equ	0xFE6
 27840                           postdec1	equ	0xFE5
 27841                           plusw1	equ	0xFE3
 27842                           fsr1h	equ	0xFE2
 27843                           fsr1l	equ	0xFE1
 27844                           indf2	equ	0xFDF
 27845                           postinc2	equ	0xFDE
 27846                           postdec2	equ	0xFDD
 27847                           plusw2	equ	0xFDB
 27848                           fsr2h	equ	0xFDA
 27849                           fsr2l	equ	0xFD9
 27850                           status	equ	0xFD8
 27851                           
 27852 ;; *************** function ___fladd *****************
 27853 ;; Defined at:
 27854 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\sprcadd.c"
 27855 ;; Parameters:    Size  Location     Type
 27856 ;;  b               4   18[BANK0 ] unsigned char 
 27857 ;;  a               4   22[BANK0 ] unsigned char 
 27858 ;; Auto vars:     Size  Location     Type
 27859 ;;  grs             1   37[BANK0 ] unsigned char 
 27860 ;;  bexp            1   36[BANK0 ] unsigned char 
 27861 ;;  aexp            1   35[BANK0 ] unsigned char 
 27862 ;;  signs           1   34[BANK0 ] unsigned char 
 27863 ;; Return value:  Size  Location     Type
 27864 ;;                  4   18[BANK0 ] unsigned char 
 27865 ;; Registers used:
 27866 ;;		wreg, status,2, status,0
 27867 ;; Tracked objects:
 27868 ;;		On entry : 0/0
 27869 ;;		On exit  : 0/0
 27870 ;;		Unchanged: 0/0
 27871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 27872 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27873 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27874 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27875 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 27876 ;;Total ram usage:       20 bytes
 27877 ;; Hardware stack levels used:    1
 27878 ;; Hardware stack levels required when called:   10
 27879 ;; This function calls:
 27880 ;;		Nothing
 27881 ;; This function is called by:
 27882 ;;		_motor_divide_jump_to_nearest
 27883 ;;		_adc_read_temperature
 27884 ;; This function uses a non-reentrant model
 27885 ;;
 27886                           
 27887                           	psect	text104
 27888  00C522                     __ptext104:
 27889                           	opt stack 0
 27890  00C522                     ___fladd:
 27891                           	opt stack 18
 27892                           
 27893                           ; BSR set to: 0
 27894                           ;incstack = 0
 27895  00C522  0100               	movlb	0	; () banked
 27896  00C524  5175               	movf	(___fladd@b+3)& (0+255),w,b
 27897  00C526  0B80               	andlw	128
 27898  00C528  6F82               	movwf	___fladd@signs& (0+255),b
 27899  00C52A  5175               	movf	(___fladd@b+3)& (0+255),w,b
 27900  00C52C  2575               	addwf	(___fladd@b+3)& (0+255),w,b
 27901  00C52E  6F84               	movwf	___fladd@bexp& (0+255),b
 27902                           
 27903                           ; BSR set to: 0
 27904  00C530  BF74               	btfsc	(___fladd@b+2)& (0+255),7,b
 27905                           
 27906                           ; BSR set to: 0
 27907  00C532  8184               	bsf	___fladd@bexp& (0+255),0,b
 27908                           
 27909                           ; BSR set to: 0
 27910                           
 27911                           ; BSR set to: 0
 27912  00C534  5184               	movf	___fladd@bexp& (0+255),w,b
 27913  00C536  B4D8               	btfsc	status,2,c
 27914  00C538  D00D               	goto	l3293
 27915                           
 27916                           ; BSR set to: 0
 27917  00C53A  2984               	incf	___fladd@bexp& (0+255),w,b
 27918  00C53C  A4D8               	btfss	status,2,c
 27919  00C53E  D008               	goto	l3294
 27920                           
 27921                           ; BSR set to: 0
 27922  00C540  0E00               	movlw	0
 27923  00C542  6F72               	movwf	___fladd@b& (0+255),b
 27924  00C544  0E00               	movlw	0
 27925  00C546  6F73               	movwf	(___fladd@b+1)& (0+255),b
 27926  00C548  0E00               	movlw	0
 27927  00C54A  6F74               	movwf	(___fladd@b+2)& (0+255),b
 27928  00C54C  0E00               	movlw	0
 27929  00C54E  6F75               	movwf	(___fladd@b+3)& (0+255),b
 27930  00C550                     l3294:
 27931                           
 27932                           ; BSR set to: 0
 27933                           
 27934                           ; BSR set to: 0
 27935  00C550  8F74               	bsf	(___fladd@b+2)& (0+255),7,b
 27936  00C552  D006               	goto	L43
 27937  00C554                     l3293:
 27938                           
 27939                           ; BSR set to: 0
 27940                           
 27941                           ; BSR set to: 0
 27942  00C554  0E00               	movlw	0
 27943  00C556  6F72               	movwf	___fladd@b& (0+255),b
 27944  00C558  0E00               	movlw	0
 27945  00C55A  6F73               	movwf	(___fladd@b+1)& (0+255),b
 27946  00C55C  0E00               	movlw	0
 27947  00C55E  6F74               	movwf	(___fladd@b+2)& (0+255),b
 27948  00C560                     L43:
 27949  00C560  0E00               	movlw	0
 27950  00C562  6F75               	movwf	(___fladd@b+3)& (0+255),b
 27951                           
 27952                           ; BSR set to: 0
 27953                           
 27954                           ; BSR set to: 0
 27955  00C564  5179               	movf	(___fladd@a+3)& (0+255),w,b
 27956  00C566  0B80               	andlw	128
 27957  00C568  6F83               	movwf	___fladd@aexp& (0+255),b
 27958                           
 27959                           ; BSR set to: 0
 27960  00C56A  5182               	movf	___fladd@signs& (0+255),w,b
 27961  00C56C  1983               	xorwf	___fladd@aexp& (0+255),w,b
 27962  00C56E  A4D8               	btfss	status,2,c
 27963                           
 27964                           ; BSR set to: 0
 27965  00C570  8D82               	bsf	___fladd@signs& (0+255),6,b
 27966                           
 27967                           ; BSR set to: 0
 27968                           
 27969                           ; BSR set to: 0
 27970  00C572  5179               	movf	(___fladd@a+3)& (0+255),w,b
 27971  00C574  2579               	addwf	(___fladd@a+3)& (0+255),w,b
 27972  00C576  6F83               	movwf	___fladd@aexp& (0+255),b
 27973                           
 27974                           ; BSR set to: 0
 27975  00C578  BF78               	btfsc	(___fladd@a+2)& (0+255),7,b
 27976                           
 27977                           ; BSR set to: 0
 27978  00C57A  8183               	bsf	___fladd@aexp& (0+255),0,b
 27979                           
 27980                           ; BSR set to: 0
 27981                           
 27982                           ; BSR set to: 0
 27983  00C57C  5183               	movf	___fladd@aexp& (0+255),w,b
 27984  00C57E  B4D8               	btfsc	status,2,c
 27985  00C580  D00D               	goto	l3298
 27986                           
 27987                           ; BSR set to: 0
 27988  00C582  2983               	incf	___fladd@aexp& (0+255),w,b
 27989  00C584  A4D8               	btfss	status,2,c
 27990  00C586  D008               	goto	l3299
 27991                           
 27992                           ; BSR set to: 0
 27993  00C588  0E00               	movlw	0
 27994  00C58A  6F76               	movwf	___fladd@a& (0+255),b
 27995  00C58C  0E00               	movlw	0
 27996  00C58E  6F77               	movwf	(___fladd@a+1)& (0+255),b
 27997  00C590  0E00               	movlw	0
 27998  00C592  6F78               	movwf	(___fladd@a+2)& (0+255),b
 27999  00C594  0E00               	movlw	0
 28000  00C596  6F79               	movwf	(___fladd@a+3)& (0+255),b
 28001  00C598                     l3299:
 28002                           
 28003                           ; BSR set to: 0
 28004                           
 28005                           ; BSR set to: 0
 28006  00C598  8F78               	bsf	(___fladd@a+2)& (0+255),7,b
 28007  00C59A  D006               	goto	L44
 28008  00C59C                     l3298:
 28009                           
 28010                           ; BSR set to: 0
 28011                           
 28012                           ; BSR set to: 0
 28013  00C59C  0E00               	movlw	0
 28014  00C59E  6F76               	movwf	___fladd@a& (0+255),b
 28015  00C5A0  0E00               	movlw	0
 28016  00C5A2  6F77               	movwf	(___fladd@a+1)& (0+255),b
 28017  00C5A4  0E00               	movlw	0
 28018  00C5A6  6F78               	movwf	(___fladd@a+2)& (0+255),b
 28019  00C5A8                     L44:
 28020  00C5A8  0E00               	movlw	0
 28021  00C5AA  6F79               	movwf	(___fladd@a+3)& (0+255),b
 28022                           
 28023                           ; BSR set to: 0
 28024                           
 28025                           ; BSR set to: 0
 28026  00C5AC  5184               	movf	___fladd@bexp& (0+255),w,b
 28027  00C5AE  5D83               	subwf	___fladd@aexp& (0+255),w,b
 28028  00C5B0  B0D8               	btfsc	status,0,c
 28029  00C5B2  D022               	goto	l3301
 28030                           
 28031                           ; BSR set to: 0
 28032  00C5B4  AD82               	btfss	___fladd@signs& (0+255),6,b
 28033  00C5B6  D002               	goto	l3302
 28034                           
 28035                           ; BSR set to: 0
 28036  00C5B8  0E80               	movlw	128
 28037  00C5BA  1B82               	xorwf	___fladd@signs& (0+255),f,b
 28038  00C5BC                     l3302:
 28039                           
 28040                           ; BSR set to: 0
 28041                           
 28042                           ; BSR set to: 0
 28043  00C5BC  C084  F085         	movff	___fladd@bexp,___fladd@grs
 28044                           
 28045                           ; BSR set to: 0
 28046  00C5C0  C083  F084         	movff	___fladd@aexp,___fladd@bexp
 28047                           
 28048                           ; BSR set to: 0
 28049  00C5C4  C085  F083         	movff	___fladd@grs,___fladd@aexp
 28050                           
 28051                           ; BSR set to: 0
 28052  00C5C8  C072  F085         	movff	___fladd@b,___fladd@grs
 28053                           
 28054                           ; BSR set to: 0
 28055  00C5CC  C076  F072         	movff	___fladd@a,___fladd@b
 28056                           
 28057                           ; BSR set to: 0
 28058  00C5D0  C085  F076         	movff	___fladd@grs,___fladd@a
 28059                           
 28060                           ; BSR set to: 0
 28061  00C5D4  C073  F085         	movff	___fladd@b+1,___fladd@grs
 28062                           
 28063                           ; BSR set to: 0
 28064  00C5D8  C077  F073         	movff	___fladd@a+1,___fladd@b+1
 28065                           
 28066                           ; BSR set to: 0
 28067  00C5DC  C085  F077         	movff	___fladd@grs,___fladd@a+1
 28068                           
 28069                           ; BSR set to: 0
 28070  00C5E0  C074  F085         	movff	___fladd@b+2,___fladd@grs
 28071                           
 28072                           ; BSR set to: 0
 28073  00C5E4  C078  F074         	movff	___fladd@a+2,___fladd@b+2
 28074                           
 28075                           ; BSR set to: 0
 28076  00C5E8  C085  F078         	movff	___fladd@grs,___fladd@a+2
 28077                           
 28078                           ; BSR set to: 0
 28079  00C5EC  C075  F085         	movff	___fladd@b+3,___fladd@grs
 28080                           
 28081                           ; BSR set to: 0
 28082  00C5F0  C079  F075         	movff	___fladd@a+3,___fladd@b+3
 28083                           
 28084                           ; BSR set to: 0
 28085  00C5F4  C085  F079         	movff	___fladd@grs,___fladd@a+3
 28086  00C5F8                     l3301:
 28087                           
 28088                           ; BSR set to: 0
 28089                           
 28090                           ; BSR set to: 0
 28091  00C5F8  0E00               	movlw	0
 28092  00C5FA  6F85               	movwf	___fladd@grs& (0+255),b
 28093                           
 28094                           ; BSR set to: 0
 28095  00C5FC  5184               	movf	___fladd@bexp& (0+255),w,b
 28096  00C5FE  6F7A               	movwf	??___fladd& (0+255),b
 28097  00C600  6B7B               	clrf	(??___fladd+1)& (0+255),b
 28098  00C602  1F7A               	comf	??___fladd& (0+255),f,b
 28099  00C604  1F7B               	comf	(??___fladd+1)& (0+255),f,b
 28100  00C606  4B7A               	infsnz	??___fladd& (0+255),f,b
 28101  00C608  2B7B               	incf	(??___fladd+1)& (0+255),f,b
 28102  00C60A  5183               	movf	___fladd@aexp& (0+255),w,b
 28103  00C60C  6F7C               	movwf	(??___fladd+2)& (0+255),b
 28104  00C60E  6B7D               	clrf	(??___fladd+3)& (0+255),b
 28105  00C610  517A               	movf	??___fladd& (0+255),w,b
 28106  00C612  277C               	addwf	(??___fladd+2)& (0+255),f,b
 28107  00C614  517B               	movf	(??___fladd+1)& (0+255),w,b
 28108  00C616  237D               	addwfc	(??___fladd+3)& (0+255),f,b
 28109  00C618  BF7D               	btfsc	(??___fladd+3)& (0+255),7,b
 28110  00C61A  D02C               	goto	l3305
 28111  00C61C  517D               	movf	(??___fladd+3)& (0+255),w,b
 28112  00C61E  E104               	bnz	u21520
 28113  00C620  0E1A               	movlw	26
 28114  00C622  5D7C               	subwf	(??___fladd+2)& (0+255),w,b
 28115  00C624  A0D8               	btfss	status,0,c
 28116  00C626  D026               	goto	l3305
 28117  00C628                     u21520:
 28118                           
 28119                           ; BSR set to: 0
 28120  00C628  5172               	movf	___fladd@b& (0+255),w,b
 28121  00C62A  1173               	iorwf	(___fladd@b+1)& (0+255),w,b
 28122  00C62C  1174               	iorwf	(___fladd@b+2)& (0+255),w,b
 28123  00C62E  1175               	iorwf	(___fladd@b+3)& (0+255),w,b
 28124  00C630  B4D8               	btfsc	status,2,c
 28125  00C632  D002               	goto	u21530
 28126  00C634  0E01               	movlw	1
 28127  00C636  D001               	goto	u21540
 28128  00C638                     u21530:
 28129  00C638  0E00               	movlw	0
 28130  00C63A                     u21540:
 28131  00C63A  6F85               	movwf	___fladd@grs& (0+255),b
 28132                           
 28133                           ; BSR set to: 0
 28134  00C63C  0E00               	movlw	0
 28135  00C63E  6F72               	movwf	___fladd@b& (0+255),b
 28136  00C640  0E00               	movlw	0
 28137  00C642  6F73               	movwf	(___fladd@b+1)& (0+255),b
 28138  00C644  0E00               	movlw	0
 28139  00C646  6F74               	movwf	(___fladd@b+2)& (0+255),b
 28140  00C648  0E00               	movlw	0
 28141  00C64A  6F75               	movwf	(___fladd@b+3)& (0+255),b
 28142                           
 28143                           ; BSR set to: 0
 28144  00C64C  C083  F084         	movff	___fladd@aexp,___fladd@bexp
 28145  00C650  D015               	goto	u21570
 28146  00C652                     l3306:
 28147                           
 28148                           ; BSR set to: 0
 28149  00C652  A185               	btfss	___fladd@grs& (0+255),0,b
 28150  00C654  D005               	goto	l3307
 28151                           
 28152                           ; BSR set to: 0
 28153  00C656  90D8               	bcf	status,0,c
 28154  00C658  3185               	rrcf	___fladd@grs& (0+255),w,b
 28155  00C65A  0901               	iorlw	1
 28156  00C65C  6F85               	movwf	___fladd@grs& (0+255),b
 28157  00C65E  D002               	goto	l3308
 28158  00C660                     l3307:
 28159                           
 28160                           ; BSR set to: 0
 28161                           
 28162                           ; BSR set to: 0
 28163  00C660  90D8               	bcf	status,0,c
 28164  00C662  3385               	rrcf	___fladd@grs& (0+255),f,b
 28165  00C664                     l3308:
 28166                           
 28167                           ; BSR set to: 0
 28168                           
 28169                           ; BSR set to: 0
 28170  00C664  B172               	btfsc	___fladd@b& (0+255),0,b
 28171                           
 28172                           ; BSR set to: 0
 28173  00C666  8F85               	bsf	___fladd@grs& (0+255),7,b
 28174                           
 28175                           ; BSR set to: 0
 28176                           
 28177                           ; BSR set to: 0
 28178  00C668  3575               	rlcf	(___fladd@b+3)& (0+255),w,b
 28179  00C66A  3375               	rrcf	(___fladd@b+3)& (0+255),f,b
 28180  00C66C  3374               	rrcf	(___fladd@b+2)& (0+255),f,b
 28181  00C66E  3373               	rrcf	(___fladd@b+1)& (0+255),f,b
 28182  00C670  3372               	rrcf	___fladd@b& (0+255),f,b
 28183                           
 28184                           ; BSR set to: 0
 28185  00C672  2B84               	incf	___fladd@bexp& (0+255),f,b
 28186  00C674                     l3305:
 28187                           
 28188                           ; BSR set to: 0
 28189  00C674  5183               	movf	___fladd@aexp& (0+255),w,b
 28190  00C676  5D84               	subwf	___fladd@bexp& (0+255),w,b
 28191  00C678  A0D8               	btfss	status,0,c
 28192  00C67A  D7EB               	goto	l3306
 28193  00C67C                     u21570:
 28194                           
 28195                           ; BSR set to: 0
 28196                           
 28197                           ; BSR set to: 0
 28198  00C67C  BD82               	btfsc	___fladd@signs& (0+255),6,b
 28199  00C67E  D028               	goto	l3311
 28200                           
 28201                           ; BSR set to: 0
 28202  00C680  5184               	movf	___fladd@bexp& (0+255),w,b
 28203  00C682  A4D8               	btfss	status,2,c
 28204  00C684  D009               	goto	l3312
 28205                           
 28206                           ; BSR set to: 0
 28207  00C686  0E00               	movlw	0
 28208  00C688  6F72               	movwf	?___fladd& (0+255),b
 28209  00C68A  0E00               	movlw	0
 28210  00C68C  6F73               	movwf	(?___fladd+1)& (0+255),b
 28211  00C68E  0E00               	movlw	0
 28212  00C690  6F74               	movwf	(?___fladd+2)& (0+255),b
 28213  00C692  0E00               	movlw	0
 28214  00C694  6F75               	movwf	(?___fladd+3)& (0+255),b
 28215                           
 28216                           ; BSR set to: 0
 28217  00C696  0012               	return	
 28218  00C698                     l3312:
 28219                           
 28220                           ; BSR set to: 0
 28221                           
 28222                           ; BSR set to: 0
 28223  00C698  5176               	movf	___fladd@a& (0+255),w,b
 28224  00C69A  2772               	addwf	___fladd@b& (0+255),f,b
 28225  00C69C  5177               	movf	(___fladd@a+1)& (0+255),w,b
 28226  00C69E  2373               	addwfc	(___fladd@b+1)& (0+255),f,b
 28227  00C6A0  5178               	movf	(___fladd@a+2)& (0+255),w,b
 28228  00C6A2  2374               	addwfc	(___fladd@b+2)& (0+255),f,b
 28229  00C6A4  5179               	movf	(___fladd@a+3)& (0+255),w,b
 28230  00C6A6  2375               	addwfc	(___fladd@b+3)& (0+255),f,b
 28231                           
 28232                           ; BSR set to: 0
 28233  00C6A8  A175               	btfss	(___fladd@b+3)& (0+255),0,b
 28234  00C6AA  D082               	goto	u21700
 28235                           
 28236                           ; BSR set to: 0
 28237  00C6AC  A185               	btfss	___fladd@grs& (0+255),0,b
 28238  00C6AE  D005               	goto	l3315
 28239                           
 28240                           ; BSR set to: 0
 28241  00C6B0  90D8               	bcf	status,0,c
 28242  00C6B2  3185               	rrcf	___fladd@grs& (0+255),w,b
 28243  00C6B4  0901               	iorlw	1
 28244  00C6B6  6F85               	movwf	___fladd@grs& (0+255),b
 28245  00C6B8  D002               	goto	l3316
 28246  00C6BA                     l3315:
 28247                           
 28248                           ; BSR set to: 0
 28249                           
 28250                           ; BSR set to: 0
 28251  00C6BA  90D8               	bcf	status,0,c
 28252  00C6BC  3385               	rrcf	___fladd@grs& (0+255),f,b
 28253  00C6BE                     l3316:
 28254                           
 28255                           ; BSR set to: 0
 28256                           
 28257                           ; BSR set to: 0
 28258  00C6BE  B172               	btfsc	___fladd@b& (0+255),0,b
 28259                           
 28260                           ; BSR set to: 0
 28261  00C6C0  8F85               	bsf	___fladd@grs& (0+255),7,b
 28262                           
 28263                           ; BSR set to: 0
 28264                           
 28265                           ; BSR set to: 0
 28266  00C6C2  3575               	rlcf	(___fladd@b+3)& (0+255),w,b
 28267  00C6C4  3375               	rrcf	(___fladd@b+3)& (0+255),f,b
 28268  00C6C6  3374               	rrcf	(___fladd@b+2)& (0+255),f,b
 28269  00C6C8  3373               	rrcf	(___fladd@b+1)& (0+255),f,b
 28270  00C6CA  3372               	rrcf	___fladd@b& (0+255),f,b
 28271                           
 28272                           ; BSR set to: 0
 28273  00C6CC  2B84               	incf	___fladd@bexp& (0+255),f,b
 28274                           
 28275                           ; BSR set to: 0
 28276  00C6CE  D070               	goto	u21700
 28277  00C6D0                     l3311:
 28278                           
 28279                           ; BSR set to: 0
 28280                           
 28281                           ; BSR set to: 0
 28282  00C6D0  5176               	movf	___fladd@a& (0+255),w,b
 28283  00C6D2  5D72               	subwf	___fladd@b& (0+255),w,b
 28284  00C6D4  5177               	movf	(___fladd@a+1)& (0+255),w,b
 28285  00C6D6  5973               	subwfb	(___fladd@b+1)& (0+255),w,b
 28286  00C6D8  5178               	movf	(___fladd@a+2)& (0+255),w,b
 28287  00C6DA  5974               	subwfb	(___fladd@b+2)& (0+255),w,b
 28288  00C6DC  5175               	movf	(___fladd@b+3)& (0+255),w,b
 28289  00C6DE  0A80               	xorlw	128
 28290  00C6E0  6F7A               	movwf	??___fladd& (0+255),b
 28291  00C6E2  5179               	movf	(___fladd@a+3)& (0+255),w,b
 28292  00C6E4  0A80               	xorlw	128
 28293  00C6E6  597A               	subwfb	??___fladd& (0+255),w,b
 28294  00C6E8  B0D8               	btfsc	status,0,c
 28295  00C6EA  D036               	goto	l3319
 28296                           
 28297                           ; BSR set to: 0
 28298  00C6EC  C072  F07A         	movff	___fladd@b,??___fladd
 28299  00C6F0  C073  F07B         	movff	___fladd@b+1,??___fladd+1
 28300  00C6F4  C074  F07C         	movff	___fladd@b+2,??___fladd+2
 28301  00C6F8  C075  F07D         	movff	___fladd@b+3,??___fladd+3
 28302  00C6FC  1F7A               	comf	??___fladd& (0+255),f,b
 28303  00C6FE  1F7B               	comf	(??___fladd+1)& (0+255),f,b
 28304  00C700  1F7C               	comf	(??___fladd+2)& (0+255),f,b
 28305  00C702  1F7D               	comf	(??___fladd+3)& (0+255),f,b
 28306  00C704  2B7A               	incf	??___fladd& (0+255),f,b
 28307  00C706  0E00               	movlw	0
 28308  00C708  237B               	addwfc	(??___fladd+1)& (0+255),f,b
 28309  00C70A  237C               	addwfc	(??___fladd+2)& (0+255),f,b
 28310  00C70C  237D               	addwfc	(??___fladd+3)& (0+255),f,b
 28311  00C70E  5176               	movf	___fladd@a& (0+255),w,b
 28312  00C710  257A               	addwf	??___fladd& (0+255),w,b
 28313  00C712  6F7E               	movwf	(??___fladd+4)& (0+255),b
 28314  00C714  5177               	movf	(___fladd@a+1)& (0+255),w,b
 28315  00C716  217B               	addwfc	(??___fladd+1)& (0+255),w,b
 28316  00C718  6F7F               	movwf	(??___fladd+5)& (0+255),b
 28317  00C71A  5178               	movf	(___fladd@a+2)& (0+255),w,b
 28318  00C71C  217C               	addwfc	(??___fladd+2)& (0+255),w,b
 28319  00C71E  6F80               	movwf	(??___fladd+6)& (0+255),b
 28320  00C720  5179               	movf	(___fladd@a+3)& (0+255),w,b
 28321  00C722  217D               	addwfc	(??___fladd+3)& (0+255),w,b
 28322  00C724  6F81               	movwf	(??___fladd+7)& (0+255),b
 28323  00C726  0EFF               	movlw	255
 28324  00C728  257E               	addwf	(??___fladd+4)& (0+255),w,b
 28325  00C72A  6F72               	movwf	___fladd@b& (0+255),b
 28326  00C72C  0EFF               	movlw	255
 28327  00C72E  217F               	addwfc	(??___fladd+5)& (0+255),w,b
 28328  00C730  6F73               	movwf	(___fladd@b+1)& (0+255),b
 28329  00C732  0EFF               	movlw	255
 28330  00C734  2180               	addwfc	(??___fladd+6)& (0+255),w,b
 28331  00C736  6F74               	movwf	(___fladd@b+2)& (0+255),b
 28332  00C738  0EFF               	movlw	255
 28333  00C73A  2181               	addwfc	(??___fladd+7)& (0+255),w,b
 28334  00C73C  6F75               	movwf	(___fladd@b+3)& (0+255),b
 28335  00C73E  0E80               	movlw	128
 28336  00C740  1B82               	xorwf	___fladd@signs& (0+255),f,b
 28337                           
 28338                           ; BSR set to: 0
 28339  00C742  6D85               	negf	___fladd@grs& (0+255),b
 28340                           
 28341                           ; BSR set to: 0
 28342  00C744  5185               	movf	___fladd@grs& (0+255),w,b
 28343  00C746  A4D8               	btfss	status,2,c
 28344  00C748  D00F               	goto	l3321
 28345                           
 28346                           ; BSR set to: 0
 28347  00C74A  0E01               	movlw	1
 28348  00C74C  2772               	addwf	___fladd@b& (0+255),f,b
 28349  00C74E  0E00               	movlw	0
 28350  00C750  2373               	addwfc	(___fladd@b+1)& (0+255),f,b
 28351  00C752  2374               	addwfc	(___fladd@b+2)& (0+255),f,b
 28352  00C754  2375               	addwfc	(___fladd@b+3)& (0+255),f,b
 28353                           
 28354                           ; BSR set to: 0
 28355  00C756  D008               	goto	l3321
 28356  00C758                     l3319:
 28357                           
 28358                           ; BSR set to: 0
 28359                           
 28360                           ; BSR set to: 0
 28361  00C758  5176               	movf	___fladd@a& (0+255),w,b
 28362  00C75A  5F72               	subwf	___fladd@b& (0+255),f,b
 28363  00C75C  5177               	movf	(___fladd@a+1)& (0+255),w,b
 28364  00C75E  5B73               	subwfb	(___fladd@b+1)& (0+255),f,b
 28365  00C760  5178               	movf	(___fladd@a+2)& (0+255),w,b
 28366  00C762  5B74               	subwfb	(___fladd@b+2)& (0+255),f,b
 28367  00C764  5179               	movf	(___fladd@a+3)& (0+255),w,b
 28368  00C766  5B75               	subwfb	(___fladd@b+3)& (0+255),f,b
 28369  00C768                     l3321:
 28370                           
 28371                           ; BSR set to: 0
 28372  00C768  5172               	movf	___fladd@b& (0+255),w,b
 28373  00C76A  1173               	iorwf	(___fladd@b+1)& (0+255),w,b
 28374  00C76C  1174               	iorwf	(___fladd@b+2)& (0+255),w,b
 28375  00C76E  1175               	iorwf	(___fladd@b+3)& (0+255),w,b
 28376  00C770  A4D8               	btfss	status,2,c
 28377  00C772  D01C               	goto	l3328
 28378                           
 28379                           ; BSR set to: 0
 28380  00C774  5185               	movf	___fladd@grs& (0+255),w,b
 28381  00C776  A4D8               	btfss	status,2,c
 28382  00C778  D019               	goto	l3328
 28383                           
 28384                           ; BSR set to: 0
 28385  00C77A  0E00               	movlw	0
 28386  00C77C  6F72               	movwf	?___fladd& (0+255),b
 28387  00C77E  0E00               	movlw	0
 28388  00C780  6F73               	movwf	(?___fladd+1)& (0+255),b
 28389  00C782  0E00               	movlw	0
 28390  00C784  6F74               	movwf	(?___fladd+2)& (0+255),b
 28391  00C786  0E00               	movlw	0
 28392  00C788  6F75               	movwf	(?___fladd+3)& (0+255),b
 28393                           
 28394                           ; BSR set to: 0
 28395  00C78A  0012               	return	
 28396  00C78C                     
 28397                           ; BSR set to: 0
 28398                           
 28399                           ; BSR set to: 0
 28400  00C78C  90D8               	bcf	status,0,c
 28401  00C78E  3772               	rlcf	___fladd@b& (0+255),f,b
 28402  00C790  3773               	rlcf	(___fladd@b+1)& (0+255),f,b
 28403  00C792  3774               	rlcf	(___fladd@b+2)& (0+255),f,b
 28404  00C794  3775               	rlcf	(___fladd@b+3)& (0+255),f,b
 28405                           
 28406                           ; BSR set to: 0
 28407  00C796  BF85               	btfsc	___fladd@grs& (0+255),7,b
 28408                           
 28409                           ; BSR set to: 0
 28410  00C798  8172               	bsf	___fladd@b& (0+255),0,b
 28411                           
 28412                           ; BSR set to: 0
 28413                           
 28414                           ; BSR set to: 0
 28415  00C79A  A185               	btfss	___fladd@grs& (0+255),0,b
 28416  00C79C  D002               	goto	l3326
 28417                           
 28418                           ; BSR set to: 0
 28419  00C79E  80D8               	bsf	status,0,c
 28420  00C7A0  D001               	goto	L45
 28421  00C7A2                     l3326:
 28422                           
 28423                           ; BSR set to: 0
 28424                           
 28425                           ; BSR set to: 0
 28426  00C7A2  90D8               	bcf	status,0,c
 28427  00C7A4                     L45:
 28428  00C7A4  3785               	rlcf	___fladd@grs& (0+255),f,b
 28429                           
 28430                           ; BSR set to: 0
 28431                           
 28432                           ; BSR set to: 0
 28433  00C7A6  5184               	movf	___fladd@bexp& (0+255),w,b
 28434  00C7A8  A4D8               	btfss	status,2,c
 28435                           
 28436                           ; BSR set to: 0
 28437  00C7AA  0784               	decf	___fladd@bexp& (0+255),f,b
 28438  00C7AC                     l3328:
 28439                           
 28440                           ; BSR set to: 0
 28441                           
 28442                           ; BSR set to: 0
 28443                           
 28444                           ; BSR set to: 0
 28445  00C7AC  AF74               	btfss	(___fladd@b+2)& (0+255),7,b
 28446  00C7AE  D7EE               	goto	l3324
 28447  00C7B0                     u21700:
 28448                           
 28449                           ; BSR set to: 0
 28450                           
 28451                           ; BSR set to: 0
 28452                           
 28453                           ; BSR set to: 0
 28454  00C7B0  0E00               	movlw	0
 28455  00C7B2  6F83               	movwf	___fladd@aexp& (0+255),b
 28456                           
 28457                           ; BSR set to: 0
 28458  00C7B4  AF85               	btfss	___fladd@grs& (0+255),7,b
 28459  00C7B6  D00A               	goto	l3333
 28460                           
 28461                           ; BSR set to: 0
 28462  00C7B8  C085  F07A         	movff	___fladd@grs,??___fladd
 28463  00C7BC  0E7F               	movlw	127
 28464  00C7BE  177A               	andwf	??___fladd& (0+255),f,b
 28465  00C7C0  A4D8               	btfss	status,2,c
 28466  00C7C2  D002               	goto	u21730
 28467                           
 28468                           ; BSR set to: 0
 28469                           
 28470                           ; BSR set to: 0
 28471  00C7C4  A172               	btfss	___fladd@b& (0+255),0,b
 28472  00C7C6  D002               	goto	l3333
 28473  00C7C8                     u21730:
 28474                           
 28475                           ; BSR set to: 0
 28476  00C7C8  0E01               	movlw	1
 28477  00C7CA  6F83               	movwf	___fladd@aexp& (0+255),b
 28478  00C7CC                     l3333:
 28479                           
 28480                           ; BSR set to: 0
 28481                           
 28482                           ; BSR set to: 0
 28483                           
 28484                           ; BSR set to: 0
 28485  00C7CC  5183               	movf	___fladd@aexp& (0+255),w,b
 28486  00C7CE  B4D8               	btfsc	status,2,c
 28487  00C7D0  D020               	goto	l3336
 28488                           
 28489                           ; BSR set to: 0
 28490  00C7D2  0E01               	movlw	1
 28491  00C7D4  2772               	addwf	___fladd@b& (0+255),f,b
 28492  00C7D6  0E00               	movlw	0
 28493  00C7D8  2373               	addwfc	(___fladd@b+1)& (0+255),f,b
 28494  00C7DA  2374               	addwfc	(___fladd@b+2)& (0+255),f,b
 28495  00C7DC  2375               	addwfc	(___fladd@b+3)& (0+255),f,b
 28496                           
 28497                           ; BSR set to: 0
 28498  00C7DE  A175               	btfss	(___fladd@b+3)& (0+255),0,b
 28499  00C7E0  D018               	goto	l3336
 28500                           
 28501                           ; BSR set to: 0
 28502  00C7E2  C072  F07A         	movff	___fladd@b,??___fladd
 28503  00C7E6  C073  F07B         	movff	___fladd@b+1,??___fladd+1
 28504  00C7EA  C074  F07C         	movff	___fladd@b+2,??___fladd+2
 28505  00C7EE  C075  F07D         	movff	___fladd@b+3,??___fladd+3
 28506  00C7F2  357D               	rlcf	(??___fladd+3)& (0+255),w,b
 28507  00C7F4  337D               	rrcf	(??___fladd+3)& (0+255),f,b
 28508  00C7F6  337C               	rrcf	(??___fladd+2)& (0+255),f,b
 28509  00C7F8  337B               	rrcf	(??___fladd+1)& (0+255),f,b
 28510  00C7FA  337A               	rrcf	??___fladd& (0+255),f,b
 28511  00C7FC  C07A  F072         	movff	??___fladd,___fladd@b
 28512  00C800  C07B  F073         	movff	??___fladd+1,___fladd@b+1
 28513  00C804  C07C  F074         	movff	??___fladd+2,___fladd@b+2
 28514  00C808  C07D  F075         	movff	??___fladd+3,___fladd@b+3
 28515  00C80C  2984               	incf	___fladd@bexp& (0+255),w,b
 28516  00C80E  A4D8               	btfss	status,2,c
 28517                           
 28518                           ; BSR set to: 0
 28519  00C810  2B84               	incf	___fladd@bexp& (0+255),f,b
 28520  00C812                     l3336:
 28521                           
 28522                           ; BSR set to: 0
 28523                           
 28524                           ; BSR set to: 0
 28525                           
 28526                           ; BSR set to: 0
 28527                           
 28528                           ; BSR set to: 0
 28529  00C812  2984               	incf	___fladd@bexp& (0+255),w,b
 28530  00C814  B4D8               	btfsc	status,2,c
 28531  00C816  D003               	goto	u21780
 28532                           
 28533                           ; BSR set to: 0
 28534  00C818  5184               	movf	___fladd@bexp& (0+255),w,b
 28535  00C81A  A4D8               	btfss	status,2,c
 28536  00C81C  D00D               	goto	l3340
 28537  00C81E                     u21780:
 28538                           
 28539                           ; BSR set to: 0
 28540                           
 28541                           ; BSR set to: 0
 28542  00C81E  0E00               	movlw	0
 28543  00C820  6F72               	movwf	___fladd@b& (0+255),b
 28544  00C822  0E00               	movlw	0
 28545  00C824  6F73               	movwf	(___fladd@b+1)& (0+255),b
 28546  00C826  0E00               	movlw	0
 28547  00C828  6F74               	movwf	(___fladd@b+2)& (0+255),b
 28548  00C82A  0E00               	movlw	0
 28549  00C82C  6F75               	movwf	(___fladd@b+3)& (0+255),b
 28550  00C82E  5184               	movf	___fladd@bexp& (0+255),w,b
 28551  00C830  A4D8               	btfss	status,2,c
 28552  00C832  D002               	goto	l3340
 28553                           
 28554                           ; BSR set to: 0
 28555  00C834  0E00               	movlw	0
 28556  00C836  6F82               	movwf	___fladd@signs& (0+255),b
 28557  00C838                     l3340:
 28558                           
 28559                           ; BSR set to: 0
 28560                           
 28561                           ; BSR set to: 0
 28562                           
 28563                           ; BSR set to: 0
 28564  00C838  A184               	btfss	___fladd@bexp& (0+255),0,b
 28565  00C83A  D002               	goto	l3341
 28566                           
 28567                           ; BSR set to: 0
 28568  00C83C  8F74               	bsf	(___fladd@b+2)& (0+255),7,b
 28569  00C83E  D001               	goto	l3342
 28570  00C840                     l3341:
 28571                           
 28572                           ; BSR set to: 0
 28573                           
 28574                           ; BSR set to: 0
 28575  00C840  9F74               	bcf	(___fladd@b+2)& (0+255),7,b
 28576  00C842                     l3342:
 28577                           
 28578                           ; BSR set to: 0
 28579                           
 28580                           ; BSR set to: 0
 28581  00C842  90D8               	bcf	status,0,c
 28582  00C844  3184               	rrcf	___fladd@bexp& (0+255),w,b
 28583  00C846  6F75               	movwf	(___fladd@b+3)& (0+255),b
 28584                           
 28585                           ; BSR set to: 0
 28586  00C848  BF82               	btfsc	___fladd@signs& (0+255),7,b
 28587                           
 28588                           ; BSR set to: 0
 28589  00C84A  8F75               	bsf	(___fladd@b+3)& (0+255),7,b
 28590                           
 28591                           ; BSR set to: 0
 28592                           
 28593                           ; BSR set to: 0
 28594  00C84C  C072  F072         	movff	___fladd@b,?___fladd
 28595  00C850  C073  F073         	movff	___fladd@b+1,?___fladd+1
 28596  00C854  C074  F074         	movff	___fladd@b+2,?___fladd+2
 28597  00C858  C075  F075         	movff	___fladd@b+3,?___fladd+3
 28598  00C85C  0012               	return	
 28599  00C85E                     __end_of___fladd:
 28600                           	opt stack 0
 28601                           tblptru	equ	0xFF8
 28602                           tblptrh	equ	0xFF7
 28603                           tblptrl	equ	0xFF6
 28604                           tablat	equ	0xFF5
 28605                           prodh	equ	0xFF4
 28606                           prodl	equ	0xFF3
 28607                           intcon	equ	0xFF2
 28608                           postinc0	equ	0xFEE
 28609                           wreg	equ	0xFE8
 28610                           indf1	equ	0xFE7
 28611                           postinc1	equ	0xFE6
 28612                           postdec1	equ	0xFE5
 28613                           plusw1	equ	0xFE3
 28614                           fsr1h	equ	0xFE2
 28615                           fsr1l	equ	0xFE1
 28616                           indf2	equ	0xFDF
 28617                           postinc2	equ	0xFDE
 28618                           postdec2	equ	0xFDD
 28619                           plusw2	equ	0xFDB
 28620                           fsr2h	equ	0xFDA
 28621                           fsr2l	equ	0xFD9
 28622                           status	equ	0xFD8
 28623                           
 28624 ;; *************** function _USBDeviceInit *****************
 28625 ;; Defined at:
 28626 ;;		line 277 in file "usb_device.c"
 28627 ;; Parameters:    Size  Location     Type
 28628 ;;		None
 28629 ;; Auto vars:     Size  Location     Type
 28630 ;;  i               1    8[BANK0 ] unsigned char 
 28631 ;; Return value:  Size  Location     Type
 28632 ;;                  1    wreg      void 
 28633 ;; Registers used:
 28634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28635 ;; Tracked objects:
 28636 ;;		On entry : 0/0
 28637 ;;		On exit  : 0/0
 28638 ;;		Unchanged: 0/0
 28639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 28640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28643 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28644 ;;Total ram usage:        1 bytes
 28645 ;; Hardware stack levels used:    1
 28646 ;; Hardware stack levels required when called:   11
 28647 ;; This function calls:
 28648 ;;		_memset
 28649 ;; This function is called by:
 28650 ;;		_main
 28651 ;; This function uses a non-reentrant model
 28652 ;;
 28653                           
 28654                           	psect	text105
 28655  00F33E                     __ptext105:
 28656                           	opt stack 0
 28657  00F33E                     _USBDeviceInit:
 28658                           	opt stack 19
 28659                           
 28660                           ;usb_device.c: 279: uint8_t i;;usb_device.c: 281: {PIE2bits.USBIE = 0;};
 28661                           
 28662                           ; BSR set to: 0
 28663                           ;incstack = 0
 28664  00F33E  98A0               	bcf	4000,4,c	;volatile
 28665                           
 28666                           ;usb_device.c: 285: ;;usb_device.c: 288: {UEIR = 0;};
 28667  00F340  0E00               	movlw	0
 28668  00F342  6E63               	movwf	3939,c	;volatile
 28669                           
 28670                           ;usb_device.c: 291: {UIR = 0;};
 28671  00F344  0E00               	movlw	0
 28672  00F346  6E62               	movwf	3938,c	;volatile
 28673                           
 28674                           ;usb_device.c: 294: UEP0 = 0;
 28675  00F348  0E00               	movlw	0
 28676  00F34A  010F               	movlb	15	; () banked
 28677  00F34C  6F26               	movwf	38,b	;volatile
 28678                           
 28679                           ; BSR set to: 15
 28680                           ;usb_device.c: 296: memset((void*)&UEP1,0x00,(2));;
 28681  00F34E  0E27               	movlw	39
 28682  00F350  0100               	movlb	0	; () banked
 28683  00F352  6F60               	movwf	memset@p1& (0+255),b
 28684  00F354  0E0F               	movlw	15
 28685  00F356  6F61               	movwf	(memset@p1+1)& (0+255),b
 28686  00F358  0E00               	movlw	0
 28687  00F35A  6F63               	movwf	(memset@c+1)& (0+255),b
 28688  00F35C  0E00               	movlw	0
 28689  00F35E  6F62               	movwf	memset@c& (0+255),b
 28690  00F360  0E00               	movlw	0
 28691  00F362  6F65               	movwf	(memset@n+1)& (0+255),b
 28692  00F364  0E02               	movlw	2
 28693  00F366  6F64               	movwf	memset@n& (0+255),b
 28694  00F368  EC76  F09F         	call	_memset	;wreg free
 28695                           
 28696                           ;usb_device.c: 298: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
 28697  00F36C  0E16               	movlw	22
 28698  00F36E  010F               	movlb	15	; () banked
 28699  00F370  6F39               	movwf	57,b	;volatile
 28700                           
 28701                           ; BSR set to: 15
 28702  00F372  0E9F               	movlw	159
 28703  00F374  6F37               	movwf	55,b	;volatile
 28704                           
 28705                           ; BSR set to: 15
 28706  00F376  0E7B               	movlw	123
 28707  00F378  6F36               	movwf	54,b	;volatile
 28708                           
 28709                           ; BSR set to: 15
 28710                           ;usb_device.c: 301: ;;usb_device.c: 304: ;;usb_device.c: 307: for(i = 0; i < (sizeof(BDT
      +                          )/sizeof(BDT_ENTRY)); i++)
 28711  00F37A  0E00               	movlw	0
 28712  00F37C  0100               	movlb	0	; () banked
 28713  00F37E  6F68               	movwf	USBDeviceInit@i& (0+255),b
 28714  00F380                     l22384:
 28715                           
 28716                           ; BSR set to: 0
 28717  00F380  0E0B               	movlw	11
 28718  00F382  6568               	cpfsgt	USBDeviceInit@i& (0+255),b
 28719  00F384  D001               	goto	l145
 28720  00F386  D00E               	goto	u22390
 28721  00F388                     l145:
 28722                           
 28723                           ; BSR set to: 0
 28724                           ;usb_device.c: 308: {;usb_device.c: 309: BDT[i].Val = 0x00;
 28725                           
 28726                           ; BSR set to: 0
 28727  00F388  5168               	movf	USBDeviceInit@i& (0+255),w,b
 28728  00F38A  0D04               	mullw	4
 28729  00F38C  0E00               	movlw	0
 28730  00F38E  24F3               	addwf	prodl,w,c
 28731  00F390  6ED9               	movwf	fsr2l,c
 28732  00F392  0E0D               	movlw	13
 28733  00F394  20F4               	addwfc	prodh,w,c
 28734  00F396  6EDA               	movwf	fsr2h,c
 28735  00F398  6ADE               	clrf	postinc2,c
 28736  00F39A  6ADE               	clrf	postinc2,c
 28737  00F39C  6ADE               	clrf	postinc2,c
 28738  00F39E  6ADD               	clrf	postdec2,c
 28739                           
 28740                           ; BSR set to: 0
 28741  00F3A0  2B68               	incf	USBDeviceInit@i& (0+255),f,b
 28742  00F3A2  D7EE               	goto	l22384
 28743  00F3A4                     u22390:
 28744                           
 28745                           ; BSR set to: 0
 28746                           ;usb_device.c: 310: };usb_device.c: 313: UCONbits.PPBRST = 1;
 28747  00F3A4  8C65               	bsf	3941,6,c	;volatile
 28748                           
 28749                           ; BSR set to: 0
 28750                           ;usb_device.c: 316: UADDR = 0x00;
 28751  00F3A6  0E00               	movlw	0
 28752  00F3A8  010F               	movlb	15	; () banked
 28753  00F3AA  6F38               	movwf	56,b	;volatile
 28754                           
 28755                           ; BSR set to: 15
 28756                           ;usb_device.c: 319: UCONbits.PKTDIS = 0;
 28757  00F3AC  9865               	bcf	3941,4,c	;volatile
 28758                           
 28759                           ; BSR set to: 15
 28760                           ;usb_device.c: 322: UCONbits.PPBRST = 0;
 28761  00F3AE  9C65               	bcf	3941,6,c	;volatile
 28762  00F3B0                     
 28763                           ;usb_device.c: 326: {;usb_device.c: 327: (UIR &= 0xF7);
 28764                           
 28765                           ; BSR set to: 15
 28766  00F3B0  9662               	bcf	3938,3,c	;volatile
 28767                           
 28768                           ;usb_device.c: 329: inPipes[0].info.Val = 0;
 28769  00F3B2  0E00               	movlw	0
 28770  00F3B4  6E0D               	movwf	_inPipes+3,c	;volatile
 28771                           
 28772                           ;usb_device.c: 330: outPipes[0].info.Val = 0;
 28773  00F3B6  0E00               	movlw	0
 28774  00F3B8  6E04               	movwf	_outPipes+3,c	;volatile
 28775                           
 28776                           ;usb_device.c: 331: outPipes[0].wCount.Val = 0;
 28777  00F3BA  0E00               	movlw	0
 28778  00F3BC  6E06               	movwf	_outPipes+5,c	;volatile
 28779  00F3BE  0E00               	movlw	0
 28780  00F3C0  6E05               	movwf	_outPipes+4,c	;volatile
 28781                           
 28782                           ;usb_device.c: 332: }while(UIRbits.TRNIF == 1);
 28783  00F3C2  B662               	btfsc	3938,3,c	;volatile
 28784  00F3C4  D7F5               	goto	l147
 28785                           
 28786                           ;usb_device.c: 336: USBStatusStageEnabledFlag1 = 1;
 28787  00F3C6  0E01               	movlw	1
 28788  00F3C8  6E22               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 28789                           
 28790                           ;usb_device.c: 337: USBStatusStageEnabledFlag2 = 1;
 28791  00F3CA  0E01               	movlw	1
 28792  00F3CC  0100               	movlb	0	; () banked
 28793  00F3CE  6FFE               	movwf	_USBStatusStageEnabledFlag2& (0+255),b	;volatile
 28794                           
 28795                           ;usb_device.c: 339: USBDeferINDataStagePackets = 0;
 28796  00F3D0  0E00               	movlw	0
 28797  00F3D2  6FFD               	movwf	_USBDeferINDataStagePackets& (0+255),b	;volatile
 28798                           
 28799                           ;usb_device.c: 340: USBDeferOUTDataStagePackets = 0;
 28800  00F3D4  0E00               	movlw	0
 28801  00F3D6  6FFC               	movwf	_USBDeferOUTDataStagePackets& (0+255),b	;volatile
 28802                           
 28803                           ;usb_device.c: 341: USBBusIsSuspended = 0;
 28804  00F3D8  0E00               	movlw	0
 28805  00F3DA  6E27               	movwf	_USBBusIsSuspended,c	;volatile
 28806                           
 28807                           ;usb_device.c: 345: for(i = 0; i < (uint8_t)(2+1u); i++)
 28808  00F3DC  0E00               	movlw	0
 28809  00F3DE  6F68               	movwf	USBDeviceInit@i& (0+255),b
 28810  00F3E0                     l22412:
 28811                           
 28812                           ; BSR set to: 0
 28813  00F3E0  0E02               	movlw	2
 28814  00F3E2  6568               	cpfsgt	USBDeviceInit@i& (0+255),b
 28815  00F3E4  D001               	goto	l149
 28816  00F3E6  D02E               	goto	u22420
 28817  00F3E8                     l149:
 28818                           
 28819                           ; BSR set to: 0
 28820                           ;usb_device.c: 346: {;usb_device.c: 347: pBDTEntryIn[i] = 0u;
 28821                           
 28822                           ; BSR set to: 0
 28823  00F3E8  5168               	movf	USBDeviceInit@i& (0+255),w,b
 28824  00F3EA  0D02               	mullw	2
 28825  00F3EC  0E10               	movlw	low _pBDTEntryIn
 28826  00F3EE  24F3               	addwf	prodl,w,c
 28827  00F3F0  6ED9               	movwf	fsr2l,c
 28828  00F3F2  0E00               	movlw	high _pBDTEntryIn
 28829  00F3F4  20F4               	addwfc	prodh,w,c
 28830  00F3F6  6EDA               	movwf	fsr2h,c
 28831  00F3F8  0E00               	movlw	0
 28832  00F3FA  6EDE               	movwf	postinc2,c
 28833  00F3FC  0E00               	movlw	0
 28834  00F3FE  6EDD               	movwf	postdec2,c
 28835                           
 28836                           ;usb_device.c: 348: pBDTEntryOut[i] = 0u;
 28837  00F400  5168               	movf	USBDeviceInit@i& (0+255),w,b
 28838  00F402  0D02               	mullw	2
 28839  00F404  0E38               	movlw	low _pBDTEntryOut
 28840  00F406  24F3               	addwf	prodl,w,c
 28841  00F408  6ED9               	movwf	fsr2l,c
 28842  00F40A  0E01               	movlw	high _pBDTEntryOut
 28843  00F40C  20F4               	addwfc	prodh,w,c
 28844  00F40E  6EDA               	movwf	fsr2h,c
 28845  00F410  0E00               	movlw	0
 28846  00F412  6EDE               	movwf	postinc2,c
 28847  00F414  0E00               	movlw	0
 28848  00F416  6EDD               	movwf	postdec2,c
 28849                           
 28850                           ;usb_device.c: 349: ep_data_in[i].Val = 0u;
 28851  00F418  5168               	movf	USBDeviceInit@i& (0+255),w,b
 28852  00F41A  0D01               	mullw	1
 28853  00F41C  0E5F               	movlw	low _ep_data_in
 28854  00F41E  24F3               	addwf	prodl,w,c
 28855  00F420  6ED9               	movwf	fsr2l,c
 28856  00F422  0E01               	movlw	high _ep_data_in
 28857  00F424  20F4               	addwfc	prodh,w,c
 28858  00F426  6EDA               	movwf	fsr2h,c
 28859  00F428  0E00               	movlw	0
 28860  00F42A  6EDF               	movwf	indf2,c
 28861                           
 28862                           ;usb_device.c: 350: ep_data_out[i].Val = 0u;
 28863  00F42C  5168               	movf	USBDeviceInit@i& (0+255),w,b
 28864  00F42E  0D01               	mullw	1
 28865  00F430  0E5C               	movlw	low _ep_data_out
 28866  00F432  24F3               	addwf	prodl,w,c
 28867  00F434  6ED9               	movwf	fsr2l,c
 28868  00F436  0E01               	movlw	high _ep_data_out
 28869  00F438  20F4               	addwfc	prodh,w,c
 28870  00F43A  6EDA               	movwf	fsr2h,c
 28871  00F43C  0E00               	movlw	0
 28872  00F43E  6EDF               	movwf	indf2,c
 28873                           
 28874                           ; BSR set to: 0
 28875  00F440  2B68               	incf	USBDeviceInit@i& (0+255),f,b
 28876  00F442  D7CE               	goto	l22412
 28877  00F444                     u22420:
 28878                           
 28879                           ; BSR set to: 0
 28880                           ;usb_device.c: 351: };usb_device.c: 354: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 28881                           
 28882                           ; BSR set to: 0
 28883  00F444  0E08               	movlw	8
 28884  00F446  6E10               	movwf	_pBDTEntryIn,c
 28885  00F448  0E0D               	movlw	13
 28886  00F44A  6E11               	movwf	_pBDTEntryIn+1,c
 28887                           
 28888                           ; BSR set to: 0
 28889                           ;usb_device.c: 356: UEP0 = 0x06|0x10;
 28890  00F44C  0E16               	movlw	22
 28891  00F44E  010F               	movlb	15	; () banked
 28892  00F450  6F26               	movwf	38,b	;volatile
 28893                           
 28894                           ; BSR set to: 15
 28895                           ;usb_device.c: 358: BDT[0].ADR = ((uint16_t)(&SetupPkt));
 28896  00F452  0E0D               	movlw	13
 28897  00F454  010D               	movlb	13	; () banked
 28898  00F456  6F03               	movwf	3,b	;volatile
 28899  00F458  0E30               	movlw	48
 28900  00F45A  6F02               	movwf	2,b	;volatile
 28901                           
 28902                           ; BSR set to: 13
 28903                           ;usb_device.c: 359: BDT[0].CNT = 8;
 28904  00F45C  0E08               	movlw	8
 28905  00F45E  6F01               	movwf	1,b	;volatile
 28906                           
 28907                           ; BSR set to: 13
 28908                           ;usb_device.c: 360: BDT[0].STAT.Val = 0x00|0x04;
 28909  00F460  0E04               	movlw	4
 28910  00F462  6F00               	movwf	0,b	;volatile
 28911                           
 28912                           ; BSR set to: 13
 28913                           ;usb_device.c: 361: BDT[0].STAT.Val |= 0x80;
 28914  00F464  8F00               	bsf	0,7,b	;volatile
 28915                           
 28916                           ; BSR set to: 13
 28917                           ;usb_device.c: 364: USBActiveConfiguration = 0;
 28918  00F466  0E00               	movlw	0
 28919  00F468  6E2D               	movwf	_USBActiveConfiguration,c	;volatile
 28920                           
 28921                           ; BSR set to: 13
 28922                           ;usb_device.c: 366: USB1msTickCount = 0;
 28923  00F46A  0E00               	movlw	0
 28924  00F46C  0101               	movlb	1	; () banked
 28925  00F46E  6F52               	movwf	_USB1msTickCount& (0+255),b	;volatile
 28926  00F470  0E00               	movlw	0
 28927  00F472  6F53               	movwf	(_USB1msTickCount+1)& (0+255),b	;volatile
 28928  00F474  0E00               	movlw	0
 28929  00F476  6F54               	movwf	(_USB1msTickCount+2)& (0+255),b	;volatile
 28930  00F478  0E00               	movlw	0
 28931  00F47A  6F55               	movwf	(_USB1msTickCount+3)& (0+255),b	;volatile
 28932                           
 28933                           ; BSR set to: 1
 28934                           ;usb_device.c: 367: USBTicksSinceSuspendEnd = 0;
 28935  00F47C  0E00               	movlw	0
 28936  00F47E  0100               	movlb	0	; () banked
 28937  00F480  6FFB               	movwf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 28938                           
 28939                           ; BSR set to: 0
 28940                           ;usb_device.c: 370: USBDeviceState = DETACHED_STATE;
 28941  00F482  0E00               	movlw	0
 28942  00F484  6E2B               	movwf	_USBDeviceState,c	;volatile
 28943                           
 28944                           ; BSR set to: 0
 28945  00F486  0012               	return		;funcret
 28946  00F488                     __end_of_USBDeviceInit:
 28947                           	opt stack 0
 28948                           tblptru	equ	0xFF8
 28949                           tblptrh	equ	0xFF7
 28950                           tblptrl	equ	0xFF6
 28951                           tablat	equ	0xFF5
 28952                           prodh	equ	0xFF4
 28953                           prodl	equ	0xFF3
 28954                           intcon	equ	0xFF2
 28955                           postinc0	equ	0xFEE
 28956                           wreg	equ	0xFE8
 28957                           indf1	equ	0xFE7
 28958                           postinc1	equ	0xFE6
 28959                           postdec1	equ	0xFE5
 28960                           plusw1	equ	0xFE3
 28961                           fsr1h	equ	0xFE2
 28962                           fsr1l	equ	0xFE1
 28963                           indf2	equ	0xFDF
 28964                           postinc2	equ	0xFDE
 28965                           postdec2	equ	0xFDD
 28966                           plusw2	equ	0xFDB
 28967                           fsr2h	equ	0xFDA
 28968                           fsr2l	equ	0xFD9
 28969                           status	equ	0xFD8
 28970                           
 28971 ;; *************** function _memset *****************
 28972 ;; Defined at:
 28973 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 28974 ;; Parameters:    Size  Location     Type
 28975 ;;  p1              2    0[BANK0 ] PTR void 
 28976 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
 28977 ;;  c               2    2[BANK0 ] int 
 28978 ;;  n               2    4[BANK0 ] unsigned int 
 28979 ;; Auto vars:     Size  Location     Type
 28980 ;;  p               2    6[BANK0 ] PTR unsigned char 
 28981 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
 28982 ;; Return value:  Size  Location     Type
 28983 ;;                  2    0[BANK0 ] PTR void 
 28984 ;; Registers used:
 28985 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28986 ;; Tracked objects:
 28987 ;;		On entry : 0/0
 28988 ;;		On exit  : 0/0
 28989 ;;		Unchanged: 0/0
 28990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 28991 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28992 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28994 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 28995 ;;Total ram usage:        8 bytes
 28996 ;; Hardware stack levels used:    1
 28997 ;; Hardware stack levels required when called:   10
 28998 ;; This function calls:
 28999 ;;		Nothing
 29000 ;; This function is called by:
 29001 ;;		_USBDeviceInit
 29002 ;; This function uses a non-reentrant model
 29003 ;;
 29004                           
 29005                           	psect	text106
 29006  013EEC                     __ptext106:
 29007                           	opt stack 0
 29008  013EEC                     _memset:
 29009                           	opt stack 19
 29010                           
 29011                           ; BSR set to: 0
 29012                           ;incstack = 0
 29013  013EEC  C060  F066         	movff	memset@p1,memset@p
 29014  013EF0  C061  F067         	movff	memset@p1+1,memset@p+1
 29015  013EF4  D009               	goto	l3484
 29016  013EF6                     l21742:
 29017  013EF6  C066  FFD9         	movff	memset@p,fsr2l
 29018  013EFA  C067  FFDA         	movff	memset@p+1,fsr2h
 29019  013EFE  C062  FFDF         	movff	memset@c,indf2
 29020  013F02  0100               	movlb	0	; () banked
 29021  013F04  4B66               	infsnz	memset@p& (0+255),f,b
 29022  013F06  2B67               	incf	(memset@p+1)& (0+255),f,b
 29023  013F08                     l3484:
 29024                           
 29025                           ; BSR set to: 0
 29026  013F08  0100               	movlb	0	; () banked
 29027  013F0A  0764               	decf	memset@n& (0+255),f,b
 29028  013F0C  A0D8               	btfss	status,0,c
 29029  013F0E  0765               	decf	(memset@n+1)& (0+255),f,b
 29030  013F10  2964               	incf	memset@n& (0+255),w,b
 29031  013F12  E1F1               	bnz	l21742
 29032  013F14  2965               	incf	(memset@n+1)& (0+255),w,b
 29033  013F16  B4D8               	btfsc	status,2,c
 29034  013F18  0012               	return	
 29035  013F1A  D7ED               	goto	l3485
 29036  013F1C                     __end_of_memset:
 29037                           	opt stack 0
 29038                           tblptru	equ	0xFF8
 29039                           tblptrh	equ	0xFF7
 29040                           tblptrl	equ	0xFF6
 29041                           tablat	equ	0xFF5
 29042                           prodh	equ	0xFF4
 29043                           prodl	equ	0xFF3
 29044                           intcon	equ	0xFF2
 29045                           postinc0	equ	0xFEE
 29046                           wreg	equ	0xFE8
 29047                           indf1	equ	0xFE7
 29048                           postinc1	equ	0xFE6
 29049                           postdec1	equ	0xFE5
 29050                           plusw1	equ	0xFE3
 29051                           fsr1h	equ	0xFE2
 29052                           fsr1l	equ	0xFE1
 29053                           indf2	equ	0xFDF
 29054                           postinc2	equ	0xFDE
 29055                           postdec2	equ	0xFDD
 29056                           plusw2	equ	0xFDB
 29057                           fsr2h	equ	0xFDA
 29058                           fsr2l	equ	0xFD9
 29059                           status	equ	0xFD8
 29060                           
 29061 ;; *************** function _USBDeviceAttach *****************
 29062 ;; Defined at:
 29063 ;;		line 1354 in file "usb_device.c"
 29064 ;; Parameters:    Size  Location     Type
 29065 ;;		None
 29066 ;; Auto vars:     Size  Location     Type
 29067 ;;		None
 29068 ;; Return value:  Size  Location     Type
 29069 ;;                  1    wreg      void 
 29070 ;; Registers used:
 29071 ;;		wreg, status,2
 29072 ;; Tracked objects:
 29073 ;;		On entry : 0/0
 29074 ;;		On exit  : 0/0
 29075 ;;		Unchanged: 0/0
 29076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 29077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29081 ;;Total ram usage:        0 bytes
 29082 ;; Hardware stack levels used:    1
 29083 ;; Hardware stack levels required when called:   10
 29084 ;; This function calls:
 29085 ;;		Nothing
 29086 ;; This function is called by:
 29087 ;;		_main
 29088 ;; This function uses a non-reentrant model
 29089 ;;
 29090                           
 29091                           	psect	text107
 29092  013E5A                     __ptext107:
 29093                           	opt stack 0
 29094  013E5A                     _USBDeviceAttach:
 29095                           	opt stack 20
 29096                           
 29097                           ;usb_device.c: 1358: {;usb_device.c: 1359: if(1 == 1)
 29098                           
 29099                           ; BSR set to: 0
 29100                           ;incstack = 0
 29101  013E5A  502B               	movf	_USBDeviceState,w,c	;volatile
 29102  013E5C  A4D8               	btfss	status,2,c
 29103  013E5E  0012               	return	
 29104                           
 29105                           ;usb_device.c: 1360: {;usb_device.c: 1362: UCON = 0;
 29106  013E60  0E00               	movlw	0
 29107  013E62  6E65               	movwf	3941,c	;volatile
 29108                           
 29109                           ;usb_device.c: 1365: UIE = 0;
 29110  013E64  0E00               	movlw	0
 29111  013E66  010F               	movlb	15	; () banked
 29112  013E68  6F36               	movwf	54,b	;volatile
 29113                           
 29114                           ;usb_device.c: 1369: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 
      +                          | 0x02; };
 29115  013E6A  0E16               	movlw	22
 29116  013E6C  6F39               	movwf	57,b	;volatile
 29117  013E6E  0E9F               	movlw	159
 29118  013E70  6F37               	movwf	55,b	;volatile
 29119  013E72  0E7B               	movlw	123
 29120  013E74  6F36               	movwf	54,b	;volatile
 29121                           
 29122                           ; BSR set to: 15
 29123                           ;usb_device.c: 1371: {RCONbits.IPEN = 1;IPR2bits.USBIP = 1;PIE2bits.USBIE = 1;INTCONbits
      +                          .GIEH = 1;};
 29124  013E76  8ED0               	bsf	4048,7,c	;volatile
 29125                           
 29126                           ; BSR set to: 15
 29127  013E78  88A2               	bsf	4002,4,c	;volatile
 29128                           
 29129                           ; BSR set to: 15
 29130  013E7A  88A0               	bsf	4000,4,c	;volatile
 29131                           
 29132                           ; BSR set to: 15
 29133  013E7C  8EF2               	bsf	intcon,7,c	;volatile
 29134                           
 29135                           ;usb_device.c: 1374: while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
 29136  013E7E  D001               	goto	l206
 29137  013E80                     l207:
 29138  013E80  8665               	bsf	3941,3,c	;volatile
 29139  013E82                     l206:
 29140  013E82  A665               	btfss	3941,3,c	;volatile
 29141  013E84  D7FD               	goto	l207
 29142                           
 29143                           ;usb_device.c: 1377: USBDeviceState = ATTACHED_STATE;
 29144  013E86  0E01               	movlw	1
 29145  013E88  6E2B               	movwf	_USBDeviceState,c	;volatile
 29146  013E8A  0012               	return	
 29147  013E8C                     __end_of_USBDeviceAttach:
 29148                           	opt stack 0
 29149                           tblptru	equ	0xFF8
 29150                           tblptrh	equ	0xFF7
 29151                           tblptrl	equ	0xFF6
 29152                           tablat	equ	0xFF5
 29153                           prodh	equ	0xFF4
 29154                           prodl	equ	0xFF3
 29155                           intcon	equ	0xFF2
 29156                           postinc0	equ	0xFEE
 29157                           wreg	equ	0xFE8
 29158                           indf1	equ	0xFE7
 29159                           postinc1	equ	0xFE6
 29160                           postdec1	equ	0xFE5
 29161                           plusw1	equ	0xFE3
 29162                           fsr1h	equ	0xFE2
 29163                           fsr1l	equ	0xFE1
 29164                           indf2	equ	0xFDF
 29165                           postinc2	equ	0xFDE
 29166                           postdec2	equ	0xFDD
 29167                           plusw2	equ	0xFDB
 29168                           fsr2h	equ	0xFDA
 29169                           fsr2l	equ	0xFD9
 29170                           status	equ	0xFD8
 29171                           
 29172 ;; *************** function _SYSTEM_Initialize *****************
 29173 ;; Defined at:
 29174 ;;		line 39 in file "system.c"
 29175 ;; Parameters:    Size  Location     Type
 29176 ;;  state           1    wreg     enum E6623
 29177 ;; Auto vars:     Size  Location     Type
 29178 ;;  state           1    0[BANK0 ] enum E6623
 29179 ;;  pll_startup_    2    3[BANK0 ] unsigned int 
 29180 ;;  pll_startup_    2    1[BANK0 ] unsigned int 
 29181 ;; Return value:  Size  Location     Type
 29182 ;;                  1    wreg      void 
 29183 ;; Registers used:
 29184 ;;		wreg, status,2, status,0
 29185 ;; Tracked objects:
 29186 ;;		On entry : 0/0
 29187 ;;		On exit  : 0/0
 29188 ;;		Unchanged: 0/0
 29189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 29190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29191 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29193 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29194 ;;Total ram usage:        5 bytes
 29195 ;; Hardware stack levels used:    1
 29196 ;; Hardware stack levels required when called:   10
 29197 ;; This function calls:
 29198 ;;		Nothing
 29199 ;; This function is called by:
 29200 ;;		_main
 29201 ;; This function uses a non-reentrant model
 29202 ;;
 29203                           
 29204                           	psect	text108
 29205  013248                     __ptext108:
 29206                           	opt stack 0
 29207  013248                     _SYSTEM_Initialize:
 29208                           	opt stack 20
 29209                           
 29210                           ;incstack = 0
 29211                           ;SYSTEM_Initialize@state stored from wreg
 29212  013248  0100               	movlb	0	; () banked
 29213  01324A  6F60               	movwf	SYSTEM_Initialize@state& (0+255),b
 29214                           
 29215                           ;system.c: 41: switch(state)
 29216  01324C  D01E               	goto	l892
 29217  01324E                     
 29218                           ;system.c: 50: {;system.c: 51: unsigned int pll_startup_counter = 600;
 29219  01324E  0E02               	movlw	2
 29220  013250  0100               	movlb	0	; () banked
 29221  013252  6F62               	movwf	(SYSTEM_Initialize@pll_startup_counter+1)& (0+255),b
 29222  013254  0E58               	movlw	88
 29223  013256  6F61               	movwf	SYSTEM_Initialize@pll_startup_counter& (0+255),b
 29224                           
 29225                           ; BSR set to: 0
 29226                           ;system.c: 52: OSCTUNEbits.PLLEN = 1;
 29227  013258  8C9B               	bsf	3995,6,c	;volatile
 29228  01325A                     l22564:
 29229                           
 29230                           ; BSR set to: 0
 29231  01325A  0761               	decf	SYSTEM_Initialize@pll_startup_counter& (0+255),f,b
 29232  01325C  A0D8               	btfss	status,0,c
 29233  01325E  0762               	decf	(SYSTEM_Initialize@pll_startup_counter+1)& (0+255),f,b
 29234  013260  2961               	incf	SYSTEM_Initialize@pll_startup_counter& (0+255),w,b
 29235  013262  E1FB               	bnz	l22564
 29236  013264  2962               	incf	(SYSTEM_Initialize@pll_startup_counter+1)& (0+255),w,b
 29237  013266  B4D8               	btfsc	status,2,c
 29238  013268  0012               	return	
 29239  01326A  D7F7               	goto	l895
 29240  01326C                     
 29241                           ; BSR set to: 0
 29242                           ;system.c: 78: OSCCON = 0x70;
 29243                           
 29244                           ; BSR set to: 0
 29245  01326C  0E70               	movlw	112
 29246  01326E  6ED3               	movwf	4051,c	;volatile
 29247                           
 29248                           ;system.c: 84: {;system.c: 85: unsigned int pll_startup_counter = 800;
 29249  013270  0E03               	movlw	3
 29250  013272  6F64               	movwf	(SYSTEM_Initialize@pll_startup_counter_3117+1)& (0+255),b
 29251  013274  0E20               	movlw	32
 29252  013276  6F63               	movwf	SYSTEM_Initialize@pll_startup_counter_3117& (0+255),b
 29253  013278                     l22568:
 29254                           
 29255                           ; BSR set to: 0
 29256  013278  0763               	decf	SYSTEM_Initialize@pll_startup_counter_3117& (0+255),f,b
 29257  01327A  A0D8               	btfss	status,0,c
 29258  01327C  0764               	decf	(SYSTEM_Initialize@pll_startup_counter_3117+1)& (0+255),f,b
 29259  01327E  2963               	incf	SYSTEM_Initialize@pll_startup_counter_3117& (0+255),w,b
 29260  013280  E1FB               	bnz	l22568
 29261  013282  2964               	incf	(SYSTEM_Initialize@pll_startup_counter_3117+1)& (0+255),w,b
 29262  013284  B4D8               	btfsc	status,2,c
 29263  013286  0012               	return	
 29264  013288  D7F7               	goto	l901
 29265  01328A                     l892:
 29266                           
 29267                           ; BSR set to: 0
 29268  01328A  0100               	movlb	0	; () banked
 29269  01328C  5160               	movf	SYSTEM_Initialize@state& (0+255),w,b
 29270                           
 29271                           ; Switch size 1, requested type "space"
 29272                           ; Number of cases is 3, Range of values is 0 to 2
 29273                           ; switch strategies available:
 29274                           ; Name         Instructions Cycles
 29275                           ; simple_byte           10     6 (average)
 29276                           ;	Chosen strategy is simple_byte
 29277  01328E  0A00               	xorlw	0	; case 0
 29278  013290  B4D8               	btfsc	status,2,c
 29279  013292  D7DD               	goto	l893
 29280  013294  0A01               	xorlw	1	; case 1
 29281  013296  B4D8               	btfsc	status,2,c
 29282  013298  0012               	return	
 29283  01329A  0A03               	xorlw	3	; case 2
 29284  01329C  A4D8               	btfss	status,2,c
 29285  01329E  0012               	return	
 29286  0132A0  D7E5               	goto	l899
 29287  0132A2                     __end_of_SYSTEM_Initialize:
 29288                           	opt stack 0
 29289                           tblptru	equ	0xFF8
 29290                           tblptrh	equ	0xFF7
 29291                           tblptrl	equ	0xFF6
 29292                           tablat	equ	0xFF5
 29293                           prodh	equ	0xFF4
 29294                           prodl	equ	0xFF3
 29295                           intcon	equ	0xFF2
 29296                           postinc0	equ	0xFEE
 29297                           wreg	equ	0xFE8
 29298                           indf1	equ	0xFE7
 29299                           postinc1	equ	0xFE6
 29300                           postdec1	equ	0xFE5
 29301                           plusw1	equ	0xFE3
 29302                           fsr1h	equ	0xFE2
 29303                           fsr1l	equ	0xFE1
 29304                           indf2	equ	0xFDF
 29305                           postinc2	equ	0xFDE
 29306                           postdec2	equ	0xFDD
 29307                           plusw2	equ	0xFDB
 29308                           fsr2h	equ	0xFDA
 29309                           fsr2l	equ	0xFD9
 29310                           status	equ	0xFD8
 29311                           
 29312 ;; *************** function _APP_DeviceMSDTasks *****************
 29313 ;; Defined at:
 29314 ;;		line 110 in file "app_device_msd.c"
 29315 ;; Parameters:    Size  Location     Type
 29316 ;;		None
 29317 ;; Auto vars:     Size  Location     Type
 29318 ;;		None
 29319 ;; Return value:  Size  Location     Type
 29320 ;;                  1    wreg      void 
 29321 ;; Registers used:
 29322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 29323 ;; Tracked objects:
 29324 ;;		On entry : 0/0
 29325 ;;		On exit  : 0/0
 29326 ;;		Unchanged: 0/0
 29327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 29328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29332 ;;Total ram usage:        0 bytes
 29333 ;; Hardware stack levels used:    1
 29334 ;; Hardware stack levels required when called:   21
 29335 ;; This function calls:
 29336 ;;		_MSDTasks
 29337 ;; This function is called by:
 29338 ;;		_main
 29339 ;; This function uses a non-reentrant model
 29340 ;;
 29341                           
 29342                           	psect	text109
 29343  0142A2                     __ptext109:
 29344                           	opt stack 0
 29345  0142A2                     _APP_DeviceMSDTasks:
 29346                           	opt stack 9
 29347                           
 29348                           ;app_device_msd.c: 115: if( USBDeviceState < CONFIGURED_STATE )
 29349                           
 29350                           ; BSR set to: 0
 29351                           ;incstack = 0
 29352  0142A2  0E20               	movlw	32
 29353  0142A4  602B               	cpfslt	_USBDeviceState,c	;volatile
 29354  0142A6  D001               	goto	l981
 29355  0142A8  0012               	return	
 29356  0142AA                     l981:
 29357                           
 29358                           ;app_device_msd.c: 118: };app_device_msd.c: 124: if( UCONbits.SUSPND== 1 )
 29359  0142AA  B265               	btfsc	3941,1,c	;volatile
 29360  0142AC  0012               	return	
 29361                           
 29362                           ;app_device_msd.c: 127: };app_device_msd.c: 129: MSDTasks();
 29363                           
 29364                           ;app_device_msd.c: 125: {;app_device_msd.c: 126: return;
 29365  0142AE  ECD0  F06D         	call	_MSDTasks	;wreg free
 29366  0142B2  0012               	return		;funcret
 29367  0142B4                     __end_of_APP_DeviceMSDTasks:
 29368                           	opt stack 0
 29369                           tblptru	equ	0xFF8
 29370                           tblptrh	equ	0xFF7
 29371                           tblptrl	equ	0xFF6
 29372                           tablat	equ	0xFF5
 29373                           prodh	equ	0xFF4
 29374                           prodl	equ	0xFF3
 29375                           intcon	equ	0xFF2
 29376                           postinc0	equ	0xFEE
 29377                           wreg	equ	0xFE8
 29378                           indf1	equ	0xFE7
 29379                           postinc1	equ	0xFE6
 29380                           postdec1	equ	0xFE5
 29381                           plusw1	equ	0xFE3
 29382                           fsr1h	equ	0xFE2
 29383                           fsr1l	equ	0xFE1
 29384                           indf2	equ	0xFDF
 29385                           postinc2	equ	0xFDE
 29386                           postdec2	equ	0xFDD
 29387                           plusw2	equ	0xFDB
 29388                           fsr2h	equ	0xFDA
 29389                           fsr2l	equ	0xFD9
 29390                           status	equ	0xFD8
 29391                           
 29392 ;; *************** function _MSDTasks *****************
 29393 ;; Defined at:
 29394 ;;		line 335 in file "usb_device_msd.c"
 29395 ;; Parameters:    Size  Location     Type
 29396 ;;		None
 29397 ;; Auto vars:     Size  Location     Type
 29398 ;;  i               1   81[BANK0 ] unsigned char 
 29399 ;; Return value:  Size  Location     Type
 29400 ;;                  1    wreg      unsigned char 
 29401 ;; Registers used:
 29402 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 29403 ;; Tracked objects:
 29404 ;;		On entry : 0/0
 29405 ;;		On exit  : 0/0
 29406 ;;		Unchanged: 0/0
 29407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 29408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29409 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29411 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29412 ;;Total ram usage:        6 bytes
 29413 ;; Hardware stack levels used:    1
 29414 ;; Hardware stack levels required when called:   20
 29415 ;; This function calls:
 29416 ;;		_MSDProcessCommand
 29417 ;;		_USBStallEndpoint
 29418 ;;		_USBTransferOnePacket
 29419 ;; This function is called by:
 29420 ;;		_APP_DeviceMSDTasks
 29421 ;; This function uses a non-reentrant model
 29422 ;;
 29423                           
 29424                           	psect	text110
 29425  00DBA0                     __ptext110:
 29426                           	opt stack 0
 29427  00DBA0                     _MSDTasks:
 29428                           	opt stack 9
 29429                           
 29430                           ;usb_device_msd.c: 337: uint8_t i;;usb_device_msd.c: 342: if(USBDeviceState != CONFIGURE
      +                          D_STATE)
 29431                           
 29432                           ;incstack = 0
 29433  00DBA0  0E20               	movlw	32
 29434  00DBA2  182B               	xorwf	_USBDeviceState,w,c	;volatile
 29435  00DBA4  A4D8               	btfss	status,2,c
 29436  00DBA6  0012               	return	
 29437                           
 29438                           ;usb_device_msd.c: 345: };usb_device_msd.c: 353: {PIE2bits.USBIE = 0;};
 29439                           
 29440                           ;usb_device_msd.c: 343: {;usb_device_msd.c: 344: return 0x00;;	Return value of _MSDTasks
      +                           is never used
 29441  00DBA8  98A0               	bcf	4000,4,c	;volatile
 29442                           
 29443                           ;usb_device_msd.c: 357: switch(MSD_State)
 29444  00DBAA  D116               	goto	l570
 29445  00DBAC                     
 29446                           ;usb_device_msd.c: 360: {;usb_device_msd.c: 362: if(!((USBMSDOutHandle != 0x0000) && ((*
      +                          (volatile uint8_t*)USBMSDOutHandle & 0x80) != 0x00)))
 29447  00DBAC  0100               	movlb	0	; () banked
 29448  00DBAE  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 29449  00DBB0  11F0               	iorwf	(_USBMSDOutHandle+1)& (0+255),w,b
 29450  00DBB2  B4D8               	btfsc	status,2,c
 29451  00DBB4  D006               	goto	u21890
 29452                           
 29453                           ; BSR set to: 0
 29454  00DBB6  C0EF  FFD9         	movff	_USBMSDOutHandle,fsr2l
 29455  00DBBA  C0F0  FFDA         	movff	_USBMSDOutHandle+1,fsr2h
 29456  00DBBE  BEDF               	btfsc	indf2,7,c
 29457  00DBC0  D11A               	goto	l586
 29458  00DBC2                     u21890:
 29459                           
 29460                           ; BSR set to: 0
 29461                           ;usb_device_msd.c: 363: {;usb_device_msd.c: 371: for(i = 0; i < 0x1f; i++)
 29462                           
 29463                           ; BSR set to: 0
 29464  00DBC2  0E00               	movlw	0
 29465  00DBC4  6FB1               	movwf	MSDTasks@i& (0+255),b
 29466  00DBC6                     l21806:
 29467                           
 29468                           ; BSR set to: 0
 29469  00DBC6  0E1E               	movlw	30
 29470  00DBC8  65B1               	cpfsgt	MSDTasks@i& (0+255),b
 29471  00DBCA  D001               	goto	l575
 29472  00DBCC  D014               	goto	u21910
 29473  00DBCE                     l575:
 29474                           
 29475                           ; BSR set to: 0
 29476                           ;usb_device_msd.c: 372: {;usb_device_msd.c: 373: *((uint8_t*)&gblCBW.dCBWSignature + i) 
      +                          = *((uint8_t*)&msd_cbw.dCBWSignature + i);
 29477                           
 29478                           ; BSR set to: 0
 29479  00DBCE  51B1               	movf	MSDTasks@i& (0+255),w,b
 29480  00DBD0  0D01               	mullw	1
 29481  00DBD2  0E40               	movlw	64
 29482  00DBD4  24F3               	addwf	prodl,w,c
 29483  00DBD6  6ED9               	movwf	fsr2l,c
 29484  00DBD8  0E0D               	movlw	13
 29485  00DBDA  20F4               	addwfc	prodh,w,c
 29486  00DBDC  6EDA               	movwf	fsr2h,c
 29487  00DBDE  51B1               	movf	MSDTasks@i& (0+255),w,b
 29488  00DBE0  0D01               	mullw	1
 29489  00DBE2  0E00               	movlw	low _gblCBW
 29490  00DBE4  24F3               	addwf	prodl,w,c
 29491  00DBE6  6EE1               	movwf	fsr1l,c
 29492  00DBE8  0E01               	movlw	high _gblCBW
 29493  00DBEA  20F4               	addwfc	prodh,w,c
 29494  00DBEC  6EE2               	movwf	fsr1h,c
 29495  00DBEE  CFDF FFE7          	movff	indf2,indf1
 29496                           
 29497                           ; BSR set to: 0
 29498  00DBF2  2BB1               	incf	MSDTasks@i& (0+255),f,b
 29499  00DBF4  D7E8               	goto	l21806
 29500  00DBF6                     u21910:
 29501                           
 29502                           ; BSR set to: 0
 29503                           ;usb_device_msd.c: 374: };usb_device_msd.c: 377: if(((((volatile BDT_ENTRY*)USBMSDOutHan
      +                          dle)->CNT) == 0x1f) && (gblCBW.dCBWSignature == (uint32_t)0x43425355))
 29504                           
 29505                           ; BSR set to: 0
 29506  00DBF6  EE20 F001          	lfsr	2,1
 29507  00DBFA  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 29508  00DBFC  26D9               	addwf	fsr2l,f,c
 29509  00DBFE  51F0               	movf	(_USBMSDOutHandle+1)& (0+255),w,b
 29510  00DC00  22DA               	addwfc	fsr2h,f,c
 29511  00DC02  0E1F               	movlw	31
 29512  00DC04  18DE               	xorwf	postinc2,w,c
 29513  00DC06  A4D8               	btfss	status,2,c
 29514  00DC08  D073               	goto	l577
 29515                           
 29516                           ; BSR set to: 0
 29517  00DC0A  0E55               	movlw	85
 29518  00DC0C  0101               	movlb	1	; () banked
 29519  00DC0E  1900               	xorwf	_gblCBW& (0+255),w,b
 29520  00DC10  E16F               	bnz	l577
 29521  00DC12  0E53               	movlw	83
 29522  00DC14  1901               	xorwf	(_gblCBW+1)& (0+255),w,b
 29523  00DC16  E16C               	bnz	l577
 29524  00DC18  0E42               	movlw	66
 29525  00DC1A  1902               	xorwf	(_gblCBW+2)& (0+255),w,b
 29526  00DC1C  E169               	bnz	l577
 29527  00DC1E  0E43               	movlw	67
 29528  00DC20  1903               	xorwf	(_gblCBW+3)& (0+255),w,b
 29529  00DC22  A4D8               	btfss	status,2,c
 29530  00DC24  D065               	goto	l577
 29531                           
 29532                           ; BSR set to: 1
 29533                           ;usb_device_msd.c: 378: {;usb_device_msd.c: 381: MSDCBWValid = 1;
 29534  00DC26  0E01               	movlw	1
 29535  00DC28  6F71               	movwf	_MSDCBWValid& (0+255),b
 29536                           
 29537                           ;usb_device_msd.c: 384: if((gblCBW.bCBWLUN <= 0u);usb_device_msd.c: 385: &&(gblCBW.bCBWC
      +                          BLength <= 0x10);usb_device_msd.c: 386: &&(gblCBW.bCBWCBLength >= 0x01);usb_device_msd.c
      +                          : 387: &&((gblCBW.bCBWFlags & 0x3F) == 0x00))
 29538  00DC2A  510D               	movf	(_gblCBW+13)& (0+255),w,b
 29539  00DC2C  A4D8               	btfss	status,2,c
 29540  00DC2E  D053               	goto	l578
 29541                           
 29542                           ; BSR set to: 1
 29543  00DC30  0E11               	movlw	17
 29544  00DC32  610E               	cpfslt	(_gblCBW+14)& (0+255),b
 29545  00DC34  D050               	goto	l578
 29546                           
 29547                           ; BSR set to: 1
 29548  00DC36  510E               	movf	(_gblCBW+14)& (0+255),w,b
 29549  00DC38  B4D8               	btfsc	status,2,c
 29550  00DC3A  D04D               	goto	l578
 29551                           
 29552                           ; BSR set to: 1
 29553  00DC3C  C10C  F0AC         	movff	_gblCBW+12,??_MSDTasks
 29554  00DC40  0E3F               	movlw	63
 29555  00DC42  0100               	movlb	0	; () banked
 29556  00DC44  17AC               	andwf	??_MSDTasks& (0+255),f,b
 29557  00DC46  A4D8               	btfss	status,2,c
 29558  00DC48  D046               	goto	l578
 29559                           
 29560                           ; BSR set to: 0
 29561                           ;usb_device_msd.c: 388: {;usb_device_msd.c: 395: msd_csw.dCSWSignature = (uint32_t)0x534
      +                          25355;
 29562  00DC4A  0E55               	movlw	85
 29563  00DC4C  010D               	movlb	13	; () banked
 29564  00DC4E  6F80               	movwf	128,b	;volatile
 29565  00DC50  0E53               	movlw	83
 29566  00DC52  6F81               	movwf	129,b	;volatile
 29567  00DC54  0E42               	movlw	66
 29568  00DC56  6F82               	movwf	130,b	;volatile
 29569  00DC58  0E53               	movlw	83
 29570  00DC5A  6F83               	movwf	131,b	;volatile
 29571                           
 29572                           ; BSR set to: 13
 29573                           ;usb_device_msd.c: 396: msd_csw.dCSWTag = gblCBW.dCBWTag;
 29574  00DC5C  C104  FD84         	movff	_gblCBW+4,3460	;volatile
 29575  00DC60  C105  FD85         	movff	_gblCBW+5,3461	;volatile
 29576  00DC64  C106  FD86         	movff	_gblCBW+6,3462	;volatile
 29577  00DC68  C107  FD87         	movff	_gblCBW+7,3463	;volatile
 29578                           
 29579                           ;usb_device_msd.c: 397: msd_csw.dCSWDataResidue = 0x0;
 29580  00DC6C  0E00               	movlw	0
 29581  00DC6E  6F88               	movwf	136,b	;volatile
 29582  00DC70  0E00               	movlw	0
 29583  00DC72  6F89               	movwf	137,b	;volatile
 29584  00DC74  0E00               	movlw	0
 29585  00DC76  6F8A               	movwf	138,b	;volatile
 29586  00DC78  0E00               	movlw	0
 29587  00DC7A  6F8B               	movwf	139,b	;volatile
 29588                           
 29589                           ;usb_device_msd.c: 398: msd_csw.bCSWStatus = 0x00;
 29590  00DC7C  0E00               	movlw	0
 29591  00DC7E  6F8C               	movwf	140,b	;volatile
 29592                           
 29593                           ; BSR set to: 13
 29594                           ;usb_device_msd.c: 405: MSDCommandState = 0xFF;
 29595  00DC80  0100               	movlb	0	; () banked
 29596  00DC82  69F9               	setf	_MSDCommandState& (0+255),b
 29597                           
 29598                           ;usb_device_msd.c: 406: MSDReadState = 0x00;
 29599  00DC84  0E00               	movlw	0
 29600  00DC86  6FF8               	movwf	_MSDReadState& (0+255),b
 29601                           
 29602                           ;usb_device_msd.c: 407: MSDWriteState = 0x00;
 29603  00DC88  0E00               	movlw	0
 29604  00DC8A  6E21               	movwf	_MSDWriteState,c
 29605                           
 29606                           ;usb_device_msd.c: 411: MSDRetryAttempt = 0;
 29607  00DC8C  0E00               	movlw	0
 29608  00DC8E  6FF7               	movwf	_MSDRetryAttempt& (0+255),b
 29609                           
 29610                           ; BSR set to: 0
 29611                           ;usb_device_msd.c: 420: if(gblCBW.CBWCB[0] != 0x03)
 29612  00DC90  0E03               	movlw	3
 29613  00DC92  0101               	movlb	1	; () banked
 29614  00DC94  190F               	xorwf	(_gblCBW+15)& (0+255),w,b
 29615  00DC96  B4D8               	btfsc	status,2,c
 29616  00DC98  D008               	goto	l579
 29617                           
 29618                           ; BSR set to: 1
 29619                           ;usb_device_msd.c: 421: {;usb_device_msd.c: 422: gblSenseData[0].SenseKey=0x0;
 29620  00DC9A  9121               	bcf	(_gblSenseData+2)& (0+255),0,b
 29621  00DC9C  9321               	bcf	(_gblSenseData+2)& (0+255),1,b
 29622  00DC9E  9521               	bcf	(_gblSenseData+2)& (0+255),2,b
 29623  00DCA0  9721               	bcf	(_gblSenseData+2)& (0+255),3,b
 29624                           
 29625                           ; BSR set to: 1
 29626                           ;usb_device_msd.c: 423: gblSenseData[0].ASC=0x00;
 29627  00DCA2  0E00               	movlw	0
 29628  00DCA4  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 29629                           
 29630                           ;usb_device_msd.c: 424: gblSenseData[0].ASCQ=0x00;
 29631  00DCA6  0E00               	movlw	0
 29632  00DCA8  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 29633  00DCAA                     l579:
 29634                           
 29635                           ; BSR set to: 1
 29636                           ;usb_device_msd.c: 425: };usb_device_msd.c: 431: if (gblCBW.bCBWFlags & 0x80)
 29637                           
 29638                           ; BSR set to: 1
 29639  00DCAA  AF0C               	btfss	(_gblCBW+12)& (0+255),7,b
 29640  00DCAC  D002               	goto	l580
 29641                           
 29642                           ; BSR set to: 1
 29643                           ;usb_device_msd.c: 432: {;usb_device_msd.c: 433: MSD_State = 0x01;
 29644  00DCAE  0E01               	movlw	1
 29645  00DCB0  D001               	goto	L47
 29646  00DCB2                     l580:
 29647                           
 29648                           ;usb_device_msd.c: 435: else;usb_device_msd.c: 436: {;usb_device_msd.c: 437: MSD_State =
      +                           0x02;
 29649                           
 29650                           ; BSR set to: 0
 29651  00DCB2  0E02               	movlw	2
 29652  00DCB4                     L47:
 29653  00DCB4  0100               	movlb	0	; () banked
 29654  00DCB6  6FFA               	movwf	_MSD_State& (0+255),b
 29655                           
 29656                           ; BSR set to: 0
 29657                           ;usb_device_msd.c: 438: };usb_device_msd.c: 442: if(gblCBW.dCBWDataTransferLength != 0)
 29658                           
 29659                           ; BSR set to: 0
 29660  00DCB8  0101               	movlb	1	; () banked
 29661  00DCBA  5108               	movf	(_gblCBW+8)& (0+255),w,b
 29662  00DCBC  1109               	iorwf	(_gblCBW+9)& (0+255),w,b
 29663  00DCBE  110A               	iorwf	(_gblCBW+10)& (0+255),w,b
 29664  00DCC0  110B               	iorwf	(_gblCBW+11)& (0+255),w,b
 29665  00DCC2  B4D8               	btfsc	status,2,c
 29666  00DCC4  D002               	goto	l582
 29667                           
 29668                           ; BSR set to: 1
 29669                           ;usb_device_msd.c: 443: {;usb_device_msd.c: 444: MSDHostNoData = 0;
 29670  00DCC6  0E00               	movlw	0
 29671  00DCC8  D001               	goto	L48
 29672  00DCCA                     l582:
 29673                           
 29674                           ;usb_device_msd.c: 446: else;usb_device_msd.c: 447: {;usb_device_msd.c: 448: MSDHostNoDa
      +                          ta = 1;
 29675                           
 29676                           ; BSR set to: 0
 29677  00DCCA  0E01               	movlw	1
 29678  00DCCC                     L48:
 29679  00DCCC  0100               	movlb	0	; () banked
 29680  00DCCE  6FF5               	movwf	_MSDHostNoData& (0+255),b
 29681                           
 29682                           ; BSR set to: 0
 29683                           ;usb_device_msd.c: 449: };usb_device_msd.c: 453: MSDCommandState = gblCBW.CBWCB[0];
 29684                           
 29685                           ; BSR set to: 0
 29686  00DCD0  C10F  F0F9         	movff	_gblCBW+15,_MSDCommandState
 29687                           
 29688                           ;usb_device_msd.c: 454: }
 29689  00DCD4  D090               	goto	l586
 29690  00DCD6                     l578:
 29691                           
 29692                           ;usb_device_msd.c: 455: else;usb_device_msd.c: 456: {;usb_device_msd.c: 460: USBStallEnd
      +                          point(2u, 1);
 29693                           
 29694                           ; BSR set to: 0
 29695  00DCD6  0E01               	movlw	1
 29696  00DCD8  0100               	movlb	0	; () banked
 29697  00DCDA  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 29698  00DCDC  0E02               	movlw	2
 29699  00DCDE  EC65  F081         	call	_USBStallEndpoint
 29700                           
 29701                           ;usb_device_msd.c: 461: USBStallEndpoint(2u, 0);
 29702  00DCE2  0E00               	movlw	0
 29703  00DCE4  0100               	movlb	0	; () banked
 29704  00DCE6  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 29705  00DCE8  0E02               	movlw	2
 29706  00DCEA  EC65  F081         	call	_USBStallEndpoint
 29707                           
 29708                           ;usb_device_msd.c: 462: };usb_device_msd.c: 463: }
 29709  00DCEE  D083               	goto	l586
 29710  00DCF0                     l577:
 29711                           
 29712                           ;usb_device_msd.c: 464: else;usb_device_msd.c: 465: {;usb_device_msd.c: 469: USBStallEnd
      +                          point(2u, 1);
 29713  00DCF0  0E01               	movlw	1
 29714  00DCF2  0100               	movlb	0	; () banked
 29715  00DCF4  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 29716  00DCF6  0E02               	movlw	2
 29717  00DCF8  EC65  F081         	call	_USBStallEndpoint
 29718                           
 29719                           ;usb_device_msd.c: 470: USBStallEndpoint(2u, 0);
 29720  00DCFC  0E00               	movlw	0
 29721  00DCFE  0100               	movlb	0	; () banked
 29722  00DD00  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 29723  00DD02  0E02               	movlw	2
 29724  00DD04  EC65  F081         	call	_USBStallEndpoint
 29725                           
 29726                           ;usb_device_msd.c: 471: MSDCBWValid = 0;
 29727  00DD08  0E00               	movlw	0
 29728  00DD0A  0101               	movlb	1	; () banked
 29729  00DD0C  6F71               	movwf	_MSDCBWValid& (0+255),b
 29730                           
 29731                           ; BSR set to: 1
 29732                           ;usb_device_msd.c: 474: };usb_device_msd.c: 475: };usb_device_msd.c: 476: break;
 29733                           
 29734                           ; BSR set to: 1
 29735  00DD0E  D073               	goto	l586
 29736  00DD10                     
 29737                           ;usb_device_msd.c: 479: if(MSDProcessCommand() == 0xFF)
 29738                           
 29739                           ; BSR set to: 1
 29740  00DD10  EC07  F07E         	call	_MSDProcessCommand	;wreg free
 29741  00DD14  0AFF               	xorlw	255
 29742  00DD16  A4D8               	btfss	status,2,c
 29743  00DD18  D06E               	goto	l586
 29744  00DD1A  D011               	goto	l591
 29745  00DD1C                     
 29746                           ; BSR set to: 0
 29747                           ;usb_device_msd.c: 486: if(MSDProcessCommand() == 0xFF)
 29748                           
 29749                           ; BSR set to: 0
 29750  00DD1C  EC07  F07E         	call	_MSDProcessCommand	;wreg free
 29751  00DD20  0AFF               	xorlw	255
 29752  00DD22  A4D8               	btfss	status,2,c
 29753  00DD24  D068               	goto	l586
 29754                           
 29755                           ;usb_device_msd.c: 487: {;usb_device_msd.c: 489: if ((msd_csw.bCSWStatus == 0x00)&&(msd_
      +                          csw.dCSWDataResidue!=0))
 29756  00DD26  010D               	movlb	13	; () banked
 29757  00DD28  518C               	movf	140,w,b	;volatile
 29758  00DD2A  A4D8               	btfss	status,2,c
 29759  00DD2C  D008               	goto	l591
 29760                           
 29761                           ; BSR set to: 13
 29762  00DD2E  5188               	movf	136,w,b	;volatile
 29763  00DD30  1189               	iorwf	137,w,b	;volatile
 29764  00DD32  118A               	iorwf	138,w,b	;volatile
 29765  00DD34  118B               	iorwf	139,w,b	;volatile
 29766  00DD36  B4D8               	btfsc	status,2,c
 29767  00DD38  D002               	goto	l591
 29768                           
 29769                           ; BSR set to: 13
 29770                           ;usb_device_msd.c: 490: {;usb_device_msd.c: 491: msd_csw.bCSWStatus = 0x02;
 29771  00DD3A  0E02               	movlw	2
 29772  00DD3C  6F8C               	movwf	140,b	;volatile
 29773  00DD3E                     l591:
 29774                           
 29775                           ; BSR set to: 13
 29776                           ;usb_device_msd.c: 492: };usb_device_msd.c: 493: MSD_State = 0x03;
 29777  00DD3E  0E03               	movlw	3
 29778  00DD40  D03C               	goto	L46
 29779  00DD42                     
 29780                           ; BSR set to: 0
 29781                           
 29782                           ; BSR set to: 0
 29783  00DD42  C014  F0AD         	movff	_pBDTEntryIn+4,_MSDTasks$2588
 29784  00DD46  C015  F0AE         	movff	_pBDTEntryIn+5,_MSDTasks$2588+1
 29785                           
 29786                           ; BSR set to: 0
 29787                           
 29788                           ; BSR set to: 0
 29789                           
 29790                           ; BSR set to: 0
 29791  00DD4A  51AD               	movf	_MSDTasks$2588& (0+255),w,b
 29792  00DD4C  11AE               	iorwf	(_MSDTasks$2588+1)& (0+255),w,b
 29793  00DD4E  B4D8               	btfsc	status,2,c
 29794  00DD50  D00A               	goto	l593
 29795                           
 29796                           ; BSR set to: 0
 29797  00DD52  C014  F0AF         	movff	_pBDTEntryIn+4,_MSDTasks$2589
 29798  00DD56  C015  F0B0         	movff	_pBDTEntryIn+5,_MSDTasks$2589+1
 29799                           
 29800                           ; BSR set to: 0
 29801                           
 29802                           ; BSR set to: 0
 29803                           
 29804                           ; BSR set to: 0
 29805                           
 29806                           ; BSR set to: 0
 29807  00DD5A  C0AF  FFD9         	movff	_MSDTasks$2589,fsr2l
 29808  00DD5E  C0B0  FFDA         	movff	_MSDTasks$2589+1,fsr2h
 29809  00DD62  BEDF               	btfsc	indf2,7,c
 29810  00DD64  D048               	goto	l586
 29811  00DD66                     l593:
 29812                           
 29813                           ; BSR set to: 0
 29814                           ;usb_device_msd.c: 502: };usb_device_msd.c: 505: USBMSDInHandle = USBTransferOnePacket(2
      +                          u,1,(uint8_t*)&msd_csw,0x0d);
 29815                           
 29816                           ; BSR set to: 0
 29817  00DD66  0E01               	movlw	1
 29818  00DD68  6F60               	movwf	USBTransferOnePacket@dir& (0+255),b
 29819  00DD6A  0E80               	movlw	128
 29820  00DD6C  6F61               	movwf	USBTransferOnePacket@data& (0+255),b
 29821  00DD6E  0E0D               	movlw	13
 29822  00DD70  6F62               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
 29823  00DD72  0E0D               	movlw	13
 29824  00DD74  6F63               	movwf	USBTransferOnePacket@len& (0+255),b
 29825  00DD76  0E02               	movlw	2
 29826  00DD78  EC6F  F082         	call	_USBTransferOnePacket
 29827  00DD7C  C060  F0ED         	movff	?_USBTransferOnePacket,_USBMSDInHandle
 29828  00DD80  C061  F0EE         	movff	?_USBTransferOnePacket+1,_USBMSDInHandle+1
 29829                           
 29830                           ;usb_device_msd.c: 508: if(!((USBMSDOutHandle != 0x0000) && ((*(volatile uint8_t*)USBMSD
      +                          OutHandle & 0x80) != 0x00)))
 29831  00DD84  0100               	movlb	0	; () banked
 29832  00DD86  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 29833  00DD88  11F0               	iorwf	(_USBMSDOutHandle+1)& (0+255),w,b
 29834  00DD8A  B4D8               	btfsc	status,2,c
 29835  00DD8C  D006               	goto	u22080
 29836                           
 29837                           ; BSR set to: 0
 29838  00DD8E  C0EF  FFD9         	movff	_USBMSDOutHandle,fsr2l
 29839  00DD92  C0F0  FFDA         	movff	_USBMSDOutHandle+1,fsr2h
 29840  00DD96  BEDF               	btfsc	indf2,7,c
 29841  00DD98  D00F               	goto	l602
 29842  00DD9A                     u22080:
 29843                           
 29844                           ; BSR set to: 0
 29845                           ;usb_device_msd.c: 509: {;usb_device_msd.c: 510: USBMSDOutHandle = USBTransferOnePacket(
      +                          2u,0,(uint8_t*)&msd_cbw,64u);
 29846                           
 29847                           ; BSR set to: 0
 29848  00DD9A  0E00               	movlw	0
 29849  00DD9C  6F60               	movwf	USBTransferOnePacket@dir& (0+255),b
 29850  00DD9E  0E40               	movlw	64
 29851  00DDA0  6F61               	movwf	USBTransferOnePacket@data& (0+255),b
 29852  00DDA2  0E0D               	movlw	13
 29853  00DDA4  6F62               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
 29854  00DDA6  0E40               	movlw	64
 29855  00DDA8  6F63               	movwf	USBTransferOnePacket@len& (0+255),b
 29856  00DDAA  0E02               	movlw	2
 29857  00DDAC  EC6F  F082         	call	_USBTransferOnePacket
 29858  00DDB0  C060  F0EF         	movff	?_USBTransferOnePacket,_USBMSDOutHandle
 29859  00DDB4  C061  F0F0         	movff	?_USBTransferOnePacket+1,_USBMSDOutHandle+1
 29860  00DDB8                     l602:
 29861                           
 29862                           ;usb_device_msd.c: 511: };usb_device_msd.c: 512: MSD_State=0x00;
 29863  00DDB8  0E00               	movlw	0
 29864  00DDBA                     L46:
 29865  00DDBA  0100               	movlb	0	; () banked
 29866  00DDBC  6FFA               	movwf	_MSD_State& (0+255),b
 29867                           
 29868                           ;usb_device_msd.c: 513: break;
 29869  00DDBE  D01B               	goto	l586
 29870  00DDC0                     
 29871                           ; BSR set to: 0
 29872                           ;usb_device_msd.c: 518: MSD_State=0x00;
 29873                           
 29874                           ; BSR set to: 0
 29875  00DDC0  0E00               	movlw	0
 29876  00DDC2  6FFA               	movwf	_MSD_State& (0+255),b
 29877                           
 29878                           ;usb_device_msd.c: 519: msd_csw.bCSWStatus = 0x02;
 29879  00DDC4  0E02               	movlw	2
 29880  00DDC6  010D               	movlb	13	; () banked
 29881  00DDC8  6F8C               	movwf	140,b	;volatile
 29882                           
 29883                           ; BSR set to: 13
 29884                           ;usb_device_msd.c: 520: USBStallEndpoint(2u, 0);
 29885  00DDCA  0E00               	movlw	0
 29886  00DDCC  0100               	movlb	0	; () banked
 29887  00DDCE  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 29888  00DDD0  0E02               	movlw	2
 29889  00DDD2  EC65  F081         	call	_USBStallEndpoint
 29890                           
 29891                           ;usb_device_msd.c: 521: }
 29892  00DDD6  D00F               	goto	l586
 29893  00DDD8                     l570:
 29894  00DDD8  0100               	movlb	0	; () banked
 29895  00DDDA  51FA               	movf	_MSD_State& (0+255),w,b
 29896                           
 29897                           ; Switch size 1, requested type "space"
 29898                           ; Number of cases is 4, Range of values is 0 to 3
 29899                           ; switch strategies available:
 29900                           ; Name         Instructions Cycles
 29901                           ; simple_byte           13     7 (average)
 29902                           ;	Chosen strategy is simple_byte
 29903  00DDDC  0A00               	xorlw	0	; case 0
 29904  00DDDE  B4D8               	btfsc	status,2,c
 29905  00DDE0  D6E5               	goto	l571
 29906  00DDE2  0A01               	xorlw	1	; case 1
 29907  00DDE4  B4D8               	btfsc	status,2,c
 29908  00DDE6  D794               	goto	l587
 29909  00DDE8  0A03               	xorlw	3	; case 2
 29910  00DDEA  B4D8               	btfsc	status,2,c
 29911  00DDEC  D797               	goto	l589
 29912  00DDEE  0A01               	xorlw	1	; case 3
 29913  00DDF0  B4D8               	btfsc	status,2,c
 29914  00DDF2  D7A7               	goto	l592
 29915  00DDF4  D7E5               	goto	l605
 29916  00DDF6                     l586:
 29917                           
 29918                           ;usb_device_msd.c: 524: {PIE2bits.USBIE = 1;};
 29919  00DDF6  88A0               	bsf	4000,4,c	;volatile
 29920                           
 29921                           ;usb_device_msd.c: 526: return MSD_State;;	Return value of _MSDTasks is never used
 29922  00DDF8  0012               	return		;funcret
 29923  00DDFA                     __end_of_MSDTasks:
 29924                           	opt stack 0
 29925                           tblptru	equ	0xFF8
 29926                           tblptrh	equ	0xFF7
 29927                           tblptrl	equ	0xFF6
 29928                           tablat	equ	0xFF5
 29929                           prodh	equ	0xFF4
 29930                           prodl	equ	0xFF3
 29931                           intcon	equ	0xFF2
 29932                           postinc0	equ	0xFEE
 29933                           wreg	equ	0xFE8
 29934                           indf1	equ	0xFE7
 29935                           postinc1	equ	0xFE6
 29936                           postdec1	equ	0xFE5
 29937                           plusw1	equ	0xFE3
 29938                           fsr1h	equ	0xFE2
 29939                           fsr1l	equ	0xFE1
 29940                           indf2	equ	0xFDF
 29941                           postinc2	equ	0xFDE
 29942                           postdec2	equ	0xFDD
 29943                           plusw2	equ	0xFDB
 29944                           fsr2h	equ	0xFDA
 29945                           fsr2l	equ	0xFD9
 29946                           status	equ	0xFD8
 29947                           
 29948 ;; *************** function _MSDProcessCommand *****************
 29949 ;; Defined at:
 29950 ;;		line 553 in file "usb_device_msd.c"
 29951 ;; Parameters:    Size  Location     Type
 29952 ;;		None
 29953 ;; Auto vars:     Size  Location     Type
 29954 ;;		None
 29955 ;; Return value:  Size  Location     Type
 29956 ;;                  1    wreg      unsigned char 
 29957 ;; Registers used:
 29958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 29959 ;; Tracked objects:
 29960 ;;		On entry : 0/0
 29961 ;;		On exit  : 0/0
 29962 ;;		Unchanged: 0/0
 29963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 29964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29966 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29967 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 29968 ;;Total ram usage:        5 bytes
 29969 ;; Hardware stack levels used:    1
 29970 ;; Hardware stack levels required when called:   19
 29971 ;; This function calls:
 29972 ;;		_ExternalFlash_MediaDetect
 29973 ;;		_ExternalFlash_MediaInitialize
 29974 ;;		_MSDProcessCommandMediaAbsent
 29975 ;;		_MSDProcessCommandMediaPresent
 29976 ;; This function is called by:
 29977 ;;		_MSDTasks
 29978 ;; This function uses a non-reentrant model
 29979 ;;
 29980                           
 29981                           	psect	text111
 29982  00FC0E                     __ptext111:
 29983                           	opt stack 0
 29984  00FC0E                     _MSDProcessCommand:
 29985                           	opt stack 9
 29986                           
 29987                           ;usb_device_msd.c: 557: if((LUN[0].MediaDetect(LUN[0].mediaParameters) == 0) || (SoftDet
      +                          ach[gblCBW.bCBWLUN] == 1))
 29988                           
 29989                           ;incstack = 0
 29990  00FC0E  C1D6  F060         	movff	_LUN+21,ExternalFlash_MediaDetect@config
 29991  00FC12  C1D7  F061         	movff	_LUN+22,ExternalFlash_MediaDetect@config+1
 29992  00FC16  EE21  F0CA         	lfsr	2,_LUN+9
 29993  00FC1A  D801               	call	u20528
 29994  00FC1C  D00A               	goto	u20529
 29995  00FC1E                     u20528:
 29996  00FC1E  0005               	push	
 29997  00FC20  6EFA               	movwf	pclath,c
 29998  00FC22  50DE               	movf	postinc2,w,c
 29999  00FC24  6EFD               	movwf	tosl,c
 30000  00FC26  50DE               	movf	postinc2,w,c
 30001  00FC28  6EFE               	movwf	tosh,c
 30002  00FC2A  50DE               	movf	postinc2,w,c
 30003  00FC2C  6EFF               	movwf	tosu,c
 30004  00FC2E  50FA               	movf	pclath,w,c
 30005  00FC30  0012               	return		;indir
 30006  00FC32                     u20529:
 30007  00FC32  0900               	iorlw	0
 30008  00FC34  B4D8               	btfsc	status,2,c
 30009  00FC36  D00C               	goto	u20540
 30010  00FC38  0101               	movlb	1	; () banked
 30011  00FC3A  510D               	movf	(_gblCBW+13)& (0+255),w,b
 30012  00FC3C  0D01               	mullw	1
 30013  00FC3E  0EF6               	movlw	low _SoftDetach
 30014  00FC40  24F3               	addwf	prodl,w,c
 30015  00FC42  6ED9               	movwf	fsr2l,c
 30016  00FC44  0E00               	movlw	high _SoftDetach
 30017  00FC46  20F4               	addwfc	prodh,w,c
 30018  00FC48  6EDA               	movwf	fsr2h,c
 30019  00FC4A  04DE               	decf	postinc2,w,c
 30020  00FC4C  A4D8               	btfss	status,2,c
 30021  00FC4E  D01D               	goto	l608
 30022  00FC50                     u20540:
 30023                           
 30024                           ;usb_device_msd.c: 558: {;usb_device_msd.c: 561: gblMediaPresent &= ~((uint16_t)1<<gblCB
      +                          W.bCBWLUN);
 30025                           
 30026                           ; BSR set to: 1
 30027  00FC50  C10D  F0A7         	movff	_gblCBW+13,??_MSDProcessCommand
 30028  00FC54  0E01               	movlw	1
 30029  00FC56  0100               	movlb	0	; () banked
 30030  00FC58  6FA8               	movwf	(??_MSDProcessCommand+1)& (0+255),b
 30031  00FC5A  0E00               	movlw	0
 30032  00FC5C  6FA9               	movwf	(??_MSDProcessCommand+2)& (0+255),b
 30033  00FC5E  2BA7               	incf	??_MSDProcessCommand& (0+255),f,b
 30034  00FC60  D003               	goto	u20554
 30035  00FC62                     u20555:
 30036  00FC62  90D8               	bcf	status,0,c
 30037  00FC64  37A8               	rlcf	(??_MSDProcessCommand+1)& (0+255),f,b
 30038  00FC66  37A9               	rlcf	(??_MSDProcessCommand+2)& (0+255),f,b
 30039  00FC68                     u20554:
 30040  00FC68  2FA7               	decfsz	??_MSDProcessCommand& (0+255),f,b
 30041  00FC6A  D7FB               	goto	u20555
 30042  00FC6C  0100               	movlb	0	; () banked
 30043  00FC6E  1DA8               	comf	(??_MSDProcessCommand+1)& (0+255),w,b
 30044  00FC70  6FAA               	movwf	(??_MSDProcessCommand+3)& (0+255),b
 30045  00FC72  1DA9               	comf	(??_MSDProcessCommand+2)& (0+255),w,b
 30046  00FC74  6FAB               	movwf	(??_MSDProcessCommand+4)& (0+255),b
 30047  00FC76  51AA               	movf	(??_MSDProcessCommand+3)& (0+255),w,b
 30048  00FC78  0101               	movlb	1	; () banked
 30049  00FC7A  1768               	andwf	_gblMediaPresent& (0+255),f,b
 30050  00FC7C  0100               	movlb	0	; () banked
 30051  00FC7E  51AB               	movf	(??_MSDProcessCommand+4)& (0+255),w,b
 30052  00FC80  0101               	movlb	1	; () banked
 30053  00FC82  1769               	andwf	(_gblMediaPresent+1)& (0+255),f,b
 30054                           
 30055                           ; BSR set to: 1
 30056                           ;usb_device_msd.c: 562: MSDProcessCommandMediaAbsent();
 30057  00FC84  ECA9  F097         	call	_MSDProcessCommandMediaAbsent	;wreg free
 30058                           
 30059                           ;usb_device_msd.c: 563: }
 30060  00FC88  D058               	goto	l615
 30061  00FC8A                     l608:
 30062                           
 30063                           ;usb_device_msd.c: 564: else;usb_device_msd.c: 565: {;usb_device_msd.c: 567: if((gblMedi
      +                          aPresent & ((uint16_t)1<<gblCBW.bCBWLUN)) == 0)
 30064  00FC8A  C10D  F0A7         	movff	_gblCBW+13,??_MSDProcessCommand
 30065  00FC8E  0E01               	movlw	1
 30066  00FC90  0100               	movlb	0	; () banked
 30067  00FC92  6FA8               	movwf	(??_MSDProcessCommand+1)& (0+255),b
 30068  00FC94  0E00               	movlw	0
 30069  00FC96  6FA9               	movwf	(??_MSDProcessCommand+2)& (0+255),b
 30070  00FC98  2BA7               	incf	??_MSDProcessCommand& (0+255),f,b
 30071  00FC9A  D003               	goto	u20564
 30072  00FC9C                     u20565:
 30073  00FC9C  90D8               	bcf	status,0,c
 30074  00FC9E  37A8               	rlcf	(??_MSDProcessCommand+1)& (0+255),f,b
 30075  00FCA0  37A9               	rlcf	(??_MSDProcessCommand+2)& (0+255),f,b
 30076  00FCA2                     u20564:
 30077  00FCA2  2FA7               	decfsz	??_MSDProcessCommand& (0+255),f,b
 30078  00FCA4  D7FB               	goto	u20565
 30079  00FCA6  0101               	movlb	1	; () banked
 30080  00FCA8  5168               	movf	_gblMediaPresent& (0+255),w,b
 30081  00FCAA  0100               	movlb	0	; () banked
 30082  00FCAC  17A8               	andwf	(??_MSDProcessCommand+1)& (0+255),f,b
 30083  00FCAE  0101               	movlb	1	; () banked
 30084  00FCB0  5169               	movf	(_gblMediaPresent+1)& (0+255),w,b
 30085  00FCB2  0100               	movlb	0	; () banked
 30086  00FCB4  17A9               	andwf	(??_MSDProcessCommand+2)& (0+255),f,b
 30087  00FCB6  51A8               	movf	(??_MSDProcessCommand+1)& (0+255),w,b
 30088  00FCB8  11A9               	iorwf	(??_MSDProcessCommand+2)& (0+255),w,b
 30089  00FCBA  A4D8               	btfss	status,2,c
 30090  00FCBC  D03C               	goto	l612
 30091                           
 30092                           ; BSR set to: 0
 30093                           ;usb_device_msd.c: 568: {;usb_device_msd.c: 570: if(LUN[0].MediaInitialize(LUN[0].mediaP
      +                          arameters))
 30094  00FCBE  C1D6  F060         	movff	_LUN+21,ExternalFlash_MediaInitialize@config
 30095  00FCC2  C1D7  F061         	movff	_LUN+22,ExternalFlash_MediaInitialize@config+1
 30096  00FCC6  D801               	call	u20588
 30097  00FCC8  D00B               	goto	u20589
 30098  00FCCA                     u20588:
 30099  00FCCA  0005               	push	
 30100  00FCCC  6EFA               	movwf	pclath,c
 30101  00FCCE  0101               	movlb	1	; () banked
 30102  00FCD0  51C1               	movf	_LUN& (0+255),w,b
 30103  00FCD2  6EFD               	movwf	tosl,c
 30104  00FCD4  51C2               	movf	(_LUN+1)& (0+255),w,b
 30105  00FCD6  6EFE               	movwf	tosh,c
 30106  00FCD8  51C3               	movf	(_LUN+2)& (0+255),w,b
 30107  00FCDA  6EFF               	movwf	tosu,c
 30108  00FCDC  50FA               	movf	pclath,w,c
 30109  00FCDE  0012               	return		;indir
 30110  00FCE0                     u20589:
 30111  00FCE0  0100               	movlb	0	; () banked
 30112  00FCE2  5160               	movf	?_ExternalFlash_MediaInitialize& (0+255),w,b
 30113  00FCE4  1161               	iorwf	(?_ExternalFlash_MediaInitialize+1)& (0+255),w,b
 30114  00FCE6  B4D8               	btfsc	status,2,c
 30115  00FCE8  D023               	goto	l613
 30116                           
 30117                           ; BSR set to: 0
 30118                           ;usb_device_msd.c: 571: {;usb_device_msd.c: 575: gblMediaPresent |= ((uint16_t)1<<gblCBW
      +                          .bCBWLUN);
 30119  00FCEA  C10D  F0A7         	movff	_gblCBW+13,??_MSDProcessCommand
 30120  00FCEE  0E01               	movlw	1
 30121  00FCF0  6FA8               	movwf	(??_MSDProcessCommand+1)& (0+255),b
 30122  00FCF2  0E00               	movlw	0
 30123  00FCF4  6FA9               	movwf	(??_MSDProcessCommand+2)& (0+255),b
 30124  00FCF6  2BA7               	incf	??_MSDProcessCommand& (0+255),f,b
 30125  00FCF8  D003               	goto	u20604
 30126  00FCFA                     u20605:
 30127  00FCFA  90D8               	bcf	status,0,c
 30128  00FCFC  37A8               	rlcf	(??_MSDProcessCommand+1)& (0+255),f,b
 30129  00FCFE  37A9               	rlcf	(??_MSDProcessCommand+2)& (0+255),f,b
 30130  00FD00                     u20604:
 30131  00FD00  2FA7               	decfsz	??_MSDProcessCommand& (0+255),f,b
 30132  00FD02  D7FB               	goto	u20605
 30133  00FD04  0100               	movlb	0	; () banked
 30134  00FD06  51A8               	movf	(??_MSDProcessCommand+1)& (0+255),w,b
 30135  00FD08  0101               	movlb	1	; () banked
 30136  00FD0A  1368               	iorwf	_gblMediaPresent& (0+255),f,b
 30137  00FD0C  0100               	movlb	0	; () banked
 30138  00FD0E  51A9               	movf	(??_MSDProcessCommand+2)& (0+255),w,b
 30139  00FD10  0101               	movlb	1	; () banked
 30140  00FD12  1369               	iorwf	(_gblMediaPresent+1)& (0+255),f,b
 30141                           
 30142                           ; BSR set to: 1
 30143                           ;usb_device_msd.c: 581: gblSenseData[0].SenseKey = 0x6;
 30144  00FD14  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 30145  00FD16  0BF0               	andlw	-16
 30146  00FD18  0906               	iorlw	6
 30147  00FD1A  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 30148                           
 30149                           ; BSR set to: 1
 30150                           ;usb_device_msd.c: 582: gblSenseData[0].ASC = 0x28;
 30151  00FD1C  0E28               	movlw	40
 30152  00FD1E  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 30153                           
 30154                           ; BSR set to: 1
 30155                           ;usb_device_msd.c: 583: gblSenseData[0].ASCQ = 0x00;
 30156  00FD20  0E00               	movlw	0
 30157  00FD22  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 30158                           
 30159                           ; BSR set to: 1
 30160                           ;usb_device_msd.c: 586: msd_csw.bCSWStatus = 0x01;
 30161  00FD24  0E01               	movlw	1
 30162  00FD26  010D               	movlb	13	; () banked
 30163  00FD28  6F8C               	movwf	140,b	;volatile
 30164                           
 30165                           ; BSR set to: 13
 30166                           ;usb_device_msd.c: 588: MSDProcessCommandMediaPresent();
 30167  00FD2A  EC03  F05F         	call	_MSDProcessCommandMediaPresent	;wreg free
 30168                           
 30169                           ;usb_device_msd.c: 589: }
 30170  00FD2E  D005               	goto	l615
 30171  00FD30                     l613:
 30172                           
 30173                           ;usb_device_msd.c: 590: else;usb_device_msd.c: 591: {;usb_device_msd.c: 593: MSDProcessC
      +                          ommandMediaAbsent();
 30174  00FD30  ECA9  F097         	call	_MSDProcessCommandMediaAbsent	;wreg free
 30175                           
 30176                           ;usb_device_msd.c: 594: };usb_device_msd.c: 595: }
 30177  00FD34  D002               	goto	l615
 30178  00FD36                     l612:
 30179                           
 30180                           ;usb_device_msd.c: 596: else;usb_device_msd.c: 597: {;usb_device_msd.c: 600: MSDProcessC
      +                          ommandMediaPresent();
 30181  00FD36  EC03  F05F         	call	_MSDProcessCommandMediaPresent	;wreg free
 30182  00FD3A                     l615:
 30183                           
 30184                           ;usb_device_msd.c: 601: };usb_device_msd.c: 602: };usb_device_msd.c: 604: return MSDComm
      +                          andState;
 30185  00FD3A  0100               	movlb	0	; () banked
 30186  00FD3C  51F9               	movf	_MSDCommandState& (0+255),w,b
 30187  00FD3E  0012               	return	
 30188  00FD40                     __end_of_MSDProcessCommand:
 30189                           	opt stack 0
 30190                           tosu	equ	0xFFF
 30191                           tosh	equ	0xFFE
 30192                           tosl	equ	0xFFD
 30193                           pclath	equ	0xFFA
 30194                           tblptru	equ	0xFF8
 30195                           tblptrh	equ	0xFF7
 30196                           tblptrl	equ	0xFF6
 30197                           tablat	equ	0xFF5
 30198                           prodh	equ	0xFF4
 30199                           prodl	equ	0xFF3
 30200                           intcon	equ	0xFF2
 30201                           postinc0	equ	0xFEE
 30202                           wreg	equ	0xFE8
 30203                           indf1	equ	0xFE7
 30204                           postinc1	equ	0xFE6
 30205                           postdec1	equ	0xFE5
 30206                           plusw1	equ	0xFE3
 30207                           fsr1h	equ	0xFE2
 30208                           fsr1l	equ	0xFE1
 30209                           indf2	equ	0xFDF
 30210                           postinc2	equ	0xFDE
 30211                           postdec2	equ	0xFDD
 30212                           plusw2	equ	0xFDB
 30213                           fsr2h	equ	0xFDA
 30214                           fsr2l	equ	0xFD9
 30215                           status	equ	0xFD8
 30216                           
 30217 ;; *************** function _MSDProcessCommandMediaAbsent *****************
 30218 ;; Defined at:
 30219 ;;		line 635 in file "usb_device_msd.c"
 30220 ;; Parameters:    Size  Location     Type
 30221 ;;		None
 30222 ;; Auto vars:     Size  Location     Type
 30223 ;;		None
 30224 ;; Return value:  Size  Location     Type
 30225 ;;                  1    wreg      void 
 30226 ;; Registers used:
 30227 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 30228 ;; Tracked objects:
 30229 ;;		On entry : 0/0
 30230 ;;		On exit  : 0/0
 30231 ;;		Unchanged: 0/0
 30232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 30233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30237 ;;Total ram usage:        0 bytes
 30238 ;; Hardware stack levels used:    1
 30239 ;; Hardware stack levels required when called:   18
 30240 ;; This function calls:
 30241 ;;		_MSDErrorHandler
 30242 ;;		_MSDProcessCommandMediaPresent
 30243 ;;		_ResetSenseData
 30244 ;; This function is called by:
 30245 ;;		_MSDProcessCommand
 30246 ;; This function uses a non-reentrant model
 30247 ;;
 30248                           
 30249                           	psect	text112
 30250  012F52                     __ptext112:
 30251                           	opt stack 0
 30252  012F52                     _MSDProcessCommandMediaAbsent:
 30253                           	opt stack 9
 30254                           
 30255                           ;usb_device_msd.c: 638: switch(MSDCommandState)
 30256                           
 30257                           ; BSR set to: 0
 30258                           ;incstack = 0
 30259  012F52  D01E               	goto	l619
 30260  012F54                     
 30261                           ;usb_device_msd.c: 646: ResetSenseData();
 30262  012F54  ECDA  F097         	call	_ResetSenseData	;wreg free
 30263                           
 30264                           ;usb_device_msd.c: 647: gblSenseData[0].SenseKey=0x2;
 30265  012F58  0101               	movlb	1	; () banked
 30266  012F5A  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 30267  012F5C  0BF0               	andlw	-16
 30268  012F5E  0902               	iorlw	2
 30269  012F60  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 30270                           
 30271                           ; BSR set to: 1
 30272                           ;usb_device_msd.c: 648: gblSenseData[0].ASC=0x3a;
 30273  012F62  0E3A               	movlw	58
 30274  012F64  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 30275                           
 30276                           ; BSR set to: 1
 30277                           ;usb_device_msd.c: 649: gblSenseData[0].ASCQ=0x00;
 30278  012F66  0E00               	movlw	0
 30279  012F68  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 30280                           
 30281                           ; BSR set to: 1
 30282                           ;usb_device_msd.c: 654: MSDProcessCommandMediaPresent();
 30283  012F6A  EC03  F05F         	call	_MSDProcessCommandMediaPresent	;wreg free
 30284                           
 30285                           ;usb_device_msd.c: 655: break;
 30286  012F6E  0012               	return	
 30287  012F70                     
 30288                           ;usb_device_msd.c: 658: case 0x00:;usb_device_msd.c: 663: msd_csw.bCSWStatus = 0x01;
 30289  012F70  0E01               	movlw	1
 30290  012F72  010D               	movlb	13	; () banked
 30291  012F74  6F8C               	movwf	140,b	;volatile
 30292                           
 30293                           ; BSR set to: 13
 30294                           ;usb_device_msd.c: 664: MSDCommandState = 0xFF;
 30295  012F76  0100               	movlb	0	; () banked
 30296  012F78  69F9               	setf	_MSDCommandState& (0+255),b
 30297                           
 30298                           ;usb_device_msd.c: 665: break;
 30299  012F7A  0012               	return	
 30300  012F7C                     
 30301                           ; BSR set to: 0
 30302                           ;usb_device_msd.c: 670: MSDProcessCommandMediaPresent();
 30303                           
 30304                           ; BSR set to: 0
 30305  012F7C  EC03  F05F         	call	_MSDProcessCommandMediaPresent	;wreg free
 30306                           
 30307                           ;usb_device_msd.c: 671: break;
 30308  012F80  0012               	return	
 30309  012F82                     
 30310                           ;usb_device_msd.c: 676: MSDProcessCommandMediaPresent();
 30311  012F82  EC03  F05F         	call	_MSDProcessCommandMediaPresent	;wreg free
 30312                           
 30313                           ;usb_device_msd.c: 677: break;
 30314  012F86  0012               	return	
 30315  012F88                     
 30316                           ;usb_device_msd.c: 683: MSDErrorHandler(0x7F);
 30317  012F88  0E7F               	movlw	127
 30318  012F8A  ECCB  F07F         	call	_MSDErrorHandler
 30319                           
 30320                           ;usb_device_msd.c: 685: }
 30321                           
 30322                           ;usb_device_msd.c: 684: break;
 30323  012F8E  0012               	return	
 30324  012F90                     l619:
 30325  012F90  0100               	movlb	0	; () banked
 30326  012F92  51F9               	movf	_MSDCommandState& (0+255),w,b
 30327                           
 30328                           ; Switch size 1, requested type "space"
 30329                           ; Number of cases is 5, Range of values is 0 to 253
 30330                           ; switch strategies available:
 30331                           ; Name         Instructions Cycles
 30332                           ; simple_byte           16     9 (average)
 30333                           ;	Chosen strategy is simple_byte
 30334  012F94  0A00               	xorlw	0	; case 0
 30335  012F96  B4D8               	btfsc	status,2,c
 30336  012F98  D7EB               	goto	l622
 30337  012F9A  0A03               	xorlw	3	; case 3
 30338  012F9C  B4D8               	btfsc	status,2,c
 30339  012F9E  D7DA               	goto	l620
 30340  012FA0  0A11               	xorlw	17	; case 18
 30341  012FA2  B4D8               	btfsc	status,2,c
 30342  012FA4  D7EB               	goto	l624
 30343  012FA6  0A0C               	xorlw	12	; case 30
 30344  012FA8  B4D8               	btfsc	status,2,c
 30345  012FAA  D7E2               	goto	l622
 30346  012FAC  0AE3               	xorlw	227	; case 253
 30347  012FAE  B4D8               	btfsc	status,2,c
 30348  012FB0  D7E8               	goto	l625
 30349  012FB2  D7EA               	goto	l626
 30350  012FB4                     __end_of_MSDProcessCommandMediaAbsent:
 30351                           	opt stack 0
 30352                           tosu	equ	0xFFF
 30353                           tosh	equ	0xFFE
 30354                           tosl	equ	0xFFD
 30355                           pclath	equ	0xFFA
 30356                           tblptru	equ	0xFF8
 30357                           tblptrh	equ	0xFF7
 30358                           tblptrl	equ	0xFF6
 30359                           tablat	equ	0xFF5
 30360                           prodh	equ	0xFF4
 30361                           prodl	equ	0xFF3
 30362                           intcon	equ	0xFF2
 30363                           postinc0	equ	0xFEE
 30364                           wreg	equ	0xFE8
 30365                           indf1	equ	0xFE7
 30366                           postinc1	equ	0xFE6
 30367                           postdec1	equ	0xFE5
 30368                           plusw1	equ	0xFE3
 30369                           fsr1h	equ	0xFE2
 30370                           fsr1l	equ	0xFE1
 30371                           indf2	equ	0xFDF
 30372                           postinc2	equ	0xFDE
 30373                           postdec2	equ	0xFDD
 30374                           plusw2	equ	0xFDB
 30375                           fsr2h	equ	0xFDA
 30376                           fsr2l	equ	0xFD9
 30377                           status	equ	0xFD8
 30378                           
 30379 ;; *************** function _MSDProcessCommandMediaPresent *****************
 30380 ;; Defined at:
 30381 ;;		line 712 in file "usb_device_msd.c"
 30382 ;; Parameters:    Size  Location     Type
 30383 ;;		None
 30384 ;; Auto vars:     Size  Location     Type
 30385 ;;  capacity        4   66[BANK0 ] struct .
 30386 ;;  sectorSize      4   62[BANK0 ] struct .
 30387 ;;  i               1   70[BANK0 ] unsigned char 
 30388 ;;  NumBytesInPa    1   61[BANK0 ] unsigned char 
 30389 ;; Return value:  Size  Location     Type
 30390 ;;                  1    wreg      void 
 30391 ;; Registers used:
 30392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 30393 ;; Tracked objects:
 30394 ;;		On entry : 0/0
 30395 ;;		On exit  : 0/0
 30396 ;;		Unchanged: 0/0
 30397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 30398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30399 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30400 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30401 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 30402 ;;Total ram usage:       14 bytes
 30403 ;; Hardware stack levels used:    1
 30404 ;; Hardware stack levels required when called:   17
 30405 ;; This function calls:
 30406 ;;		_ExternalFlash_CapacityRead
 30407 ;;		_ExternalFlash_SectorSizeRead
 30408 ;;		_ExternalFlash_WriteProtectStateGet
 30409 ;;		_MSDCheckForErrorCases
 30410 ;;		_MSDComputeDeviceInAndResidue
 30411 ;;		_MSDErrorHandler
 30412 ;;		_MSDReadHandler
 30413 ;;		_MSDWriteHandler
 30414 ;;		_ResetSenseData
 30415 ;;		_USBTransferOnePacket
 30416 ;;		_memcpy
 30417 ;; This function is called by:
 30418 ;;		_MSDProcessCommand
 30419 ;;		_MSDProcessCommandMediaAbsent
 30420 ;; This function uses a non-reentrant model
 30421 ;;
 30422                           
 30423                           	psect	text113
 30424  00BE06                     __ptext113:
 30425                           	opt stack 0
 30426  00BE06                     _MSDProcessCommandMediaPresent:
 30427                           	opt stack 10
 30428                           
 30429                           ;usb_device_msd.c: 714: uint8_t i;;usb_device_msd.c: 715: uint8_t NumBytesInPacket;;usb_
      +                          device_msd.c: 718: switch(MSDCommandState)
 30430                           
 30431                           ;incstack = 0
 30432  00BE06  D1BF               	goto	l630
 30433  00BE08                     
 30434                           ;usb_device_msd.c: 725: if(MSDReadHandler() == 0x00)
 30435  00BE08  EC29  F073         	call	_MSDReadHandler	;wreg free
 30436  00BE0C  0900               	iorlw	0
 30437  00BE0E  A4D8               	btfss	status,2,c
 30438  00BE10  0012               	return	
 30439                           
 30440                           ;usb_device_msd.c: 726: {;usb_device_msd.c: 727: MSDCommandState = 0xFF;
 30441  00BE12  0100               	movlb	0	; () banked
 30442  00BE14  69F9               	setf	_MSDCommandState& (0+255),b
 30443                           
 30444                           ; BSR set to: 0
 30445                           ;usb_device_msd.c: 728: };usb_device_msd.c: 729: break;
 30446  00BE16  0012               	return	
 30447  00BE18                     
 30448                           ; BSR set to: 0
 30449                           ;usb_device_msd.c: 736: if(MSDWriteHandler() == 0x00)
 30450                           
 30451                           ; BSR set to: 0
 30452  00BE18  EC24  F067         	call	_MSDWriteHandler	;wreg free
 30453  00BE1C  0900               	iorlw	0
 30454  00BE1E  A4D8               	btfss	status,2,c
 30455  00BE20  0012               	return	
 30456                           
 30457                           ;usb_device_msd.c: 737: {;usb_device_msd.c: 738: MSDCommandState = 0xFF;
 30458  00BE22  0100               	movlb	0	; () banked
 30459  00BE24  69F9               	setf	_MSDCommandState& (0+255),b
 30460                           
 30461                           ; BSR set to: 0
 30462                           ;usb_device_msd.c: 739: };usb_device_msd.c: 740: break;
 30463  00BE26  0012               	return	
 30464  00BE28                     
 30465                           ; BSR set to: 0
 30466                           ;usb_device_msd.c: 743: {;usb_device_msd.c: 748: if(MSDHostNoData == 1)
 30467                           
 30468                           ; BSR set to: 0
 30469  00BE28  05F5               	decf	_MSDHostNoData& (0+255),w,b
 30470  00BE2A  A4D8               	btfss	status,2,c
 30471  00BE2C  D002               	goto	l637
 30472                           
 30473                           ; BSR set to: 0
 30474                           ;usb_device_msd.c: 749: {;usb_device_msd.c: 750: MSDCommandState = 0xFF;
 30475  00BE2E  69F9               	setf	_MSDCommandState& (0+255),b
 30476                           
 30477                           ;usb_device_msd.c: 751: break;
 30478  00BE30  0012               	return	
 30479  00BE32                     l637:
 30480                           
 30481                           ; BSR set to: 0
 30482                           ;usb_device_msd.c: 752: };usb_device_msd.c: 756: TransferLength.byte.HB = gblCBW.CBWCB[3
      +                          ];
 30483  00BE32  C112  F0EC         	movff	_gblCBW+18,_TransferLength+1
 30484                           
 30485                           ;usb_device_msd.c: 757: TransferLength.byte.LB = gblCBW.CBWCB[4];
 30486  00BE36  C113  F0EB         	movff	_gblCBW+19,_TransferLength
 30487                           
 30488                           ; BSR set to: 0
 30489                           ;usb_device_msd.c: 759: if(MSDCheckForErrorCases(TransferLength.Val) != 0x00)
 30490  00BE3A  C0EB  F06A         	movff	_TransferLength,MSDCheckForErrorCases@DeviceBytes
 30491  00BE3E  C0EC  F06B         	movff	_TransferLength+1,MSDCheckForErrorCases@DeviceBytes+1
 30492  00BE42  6B6C               	clrf	(MSDCheckForErrorCases@DeviceBytes+2)& (0+255),b
 30493  00BE44  6B6D               	clrf	(MSDCheckForErrorCases@DeviceBytes+3)& (0+255),b
 30494  00BE46  EC76  F085         	call	_MSDCheckForErrorCases	;wreg free
 30495  00BE4A  0900               	iorlw	0
 30496  00BE4C  A4D8               	btfss	status,2,c
 30497  00BE4E  0012               	return	
 30498                           
 30499                           ;usb_device_msd.c: 762: };usb_device_msd.c: 765: MSDComputeDeviceInAndResidue(sizeof(Inq
      +                          uiryResponse));
 30500                           
 30501                           ;usb_device_msd.c: 760: {;usb_device_msd.c: 761: break;
 30502  00BE50  0E00               	movlw	0
 30503  00BE52  0100               	movlb	0	; () banked
 30504  00BE54  6F61               	movwf	(MSDComputeDeviceInAndResidue@DiExpected+1)& (0+255),b
 30505  00BE56  0E24               	movlw	36
 30506  00BE58  6F60               	movwf	MSDComputeDeviceInAndResidue@DiExpected& (0+255),b
 30507  00BE5A  ECC7  F08E         	call	_MSDComputeDeviceInAndResidue	;wreg free
 30508                           
 30509                           ;usb_device_msd.c: 771: memcpy((void *)&msd_buffer[0], (const void*)&inq_resp, sizeof(In
      +                          quiryResponse));
 30510  00BE5E  0E00               	movlw	0
 30511  00BE60  0100               	movlb	0	; () banked
 30512  00BE62  6F60               	movwf	memcpy@d1& (0+255),b
 30513  00BE64  0E06               	movlw	6
 30514  00BE66  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 30515  00BE68  0E60               	movlw	low _inq_resp
 30516  00BE6A  6F62               	movwf	memcpy@s1& (0+255),b
 30517  00BE6C  0EA1               	movlw	high _inq_resp
 30518  00BE6E  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 30519  00BE70  0E00               	movlw	0
 30520  00BE72  6F65               	movwf	(memcpy@n+1)& (0+255),b
 30521  00BE74  0E24               	movlw	36
 30522  00BE76  6F64               	movwf	memcpy@n& (0+255),b
 30523  00BE78  EC3C  F098         	call	_memcpy	;wreg free
 30524                           
 30525                           ;usb_device_msd.c: 772: MSDCommandState = 0xFD;
 30526  00BE7C  0EFD               	movlw	253
 30527  00BE7E  0100               	movlb	0	; () banked
 30528  00BE80  6FF9               	movwf	_MSDCommandState& (0+255),b
 30529                           
 30530                           ;usb_device_msd.c: 773: break;
 30531  00BE82  0012               	return	
 30532  00BE84                     
 30533                           ; BSR set to: 0
 30534                           ;usb_device_msd.c: 776: {;usb_device_msd.c: 779: USB_MSD_SECTOR_SIZE sectorSize;;usb_dev
      +                          ice_msd.c: 780: USB_MSD_CAPACITY capacity;;usb_device_msd.c: 783: capacity.Val = LUN[0].
      +                          ReadCapacity(LUN[0].mediaParameters);
 30535                           
 30536                           ; BSR set to: 0
 30537  00BE84  C1D6  F060         	movff	_LUN+21,ExternalFlash_CapacityRead@config
 30538  00BE88  C1D7  F061         	movff	_LUN+22,ExternalFlash_CapacityRead@config+1
 30539  00BE8C  EE21  F0C4         	lfsr	2,_LUN+3
 30540  00BE90  D801               	call	u18938
 30541  00BE92  D00A               	goto	u18939
 30542  00BE94                     u18938:
 30543  00BE94  0005               	push	
 30544  00BE96  6EFA               	movwf	pclath,c
 30545  00BE98  50DE               	movf	postinc2,w,c
 30546  00BE9A  6EFD               	movwf	tosl,c
 30547  00BE9C  50DE               	movf	postinc2,w,c
 30548  00BE9E  6EFE               	movwf	tosh,c
 30549  00BEA0  50DE               	movf	postinc2,w,c
 30550  00BEA2  6EFF               	movwf	tosu,c
 30551  00BEA4  50FA               	movf	pclath,w,c
 30552  00BEA6  0012               	return		;indir
 30553  00BEA8                     u18939:
 30554  00BEA8  C060  F0A2         	movff	?_ExternalFlash_CapacityRead,MSDProcessCommandMediaPresent@capacity
 30555  00BEAC  C061  F0A3         	movff	?_ExternalFlash_CapacityRead+1,MSDProcessCommandMediaPresent@capacity+1
 30556  00BEB0  C062  F0A4         	movff	?_ExternalFlash_CapacityRead+2,MSDProcessCommandMediaPresent@capacity+2
 30557  00BEB4  C063  F0A5         	movff	?_ExternalFlash_CapacityRead+3,MSDProcessCommandMediaPresent@capacity+3
 30558                           
 30559                           ;usb_device_msd.c: 784: sectorSize.Val = LUN[0].ReadSectorSize(LUN[0].mediaParameters);
 30560  00BEB8  C1D6  F060         	movff	_LUN+21,ExternalFlash_SectorSizeRead@config
 30561  00BEBC  C1D7  F061         	movff	_LUN+22,ExternalFlash_SectorSizeRead@config+1
 30562  00BEC0  EE21  F0C7         	lfsr	2,_LUN+6
 30563  00BEC4  D801               	call	u18948
 30564  00BEC6  D00A               	goto	u18949
 30565  00BEC8                     u18948:
 30566  00BEC8  0005               	push	
 30567  00BECA  6EFA               	movwf	pclath,c
 30568  00BECC  50DE               	movf	postinc2,w,c
 30569  00BECE  6EFD               	movwf	tosl,c
 30570  00BED0  50DE               	movf	postinc2,w,c
 30571  00BED2  6EFE               	movwf	tosh,c
 30572  00BED4  50DE               	movf	postinc2,w,c
 30573  00BED6  6EFF               	movwf	tosu,c
 30574  00BED8  50FA               	movf	pclath,w,c
 30575  00BEDA  0012               	return		;indir
 30576  00BEDC                     u18949:
 30577  00BEDC  0100               	movlb	0	; () banked
 30578  00BEDE  C060  F09E         	movff	?_ExternalFlash_SectorSizeRead,MSDProcessCommandMediaPresent@sectorSize
 30579  00BEE2  C061  F09F         	movff	?_ExternalFlash_SectorSizeRead+1,MSDProcessCommandMediaPresent@sectorSize+1
 30580  00BEE6  6BA0               	clrf	(MSDProcessCommandMediaPresent@sectorSize+2)& (0+255),b
 30581  00BEE8  6BA1               	clrf	(MSDProcessCommandMediaPresent@sectorSize+3)& (0+255),b
 30582                           
 30583                           ; BSR set to: 0
 30584                           ;usb_device_msd.c: 787: msd_buffer[0]=capacity.v[3];
 30585  00BEEA  EE26 F000          	lfsr	2,1536
 30586  00BEEE  C0A5  FFDF         	movff	MSDProcessCommandMediaPresent@capacity+3,indf2
 30587                           
 30588                           ; BSR set to: 0
 30589                           ;usb_device_msd.c: 788: msd_buffer[1]=capacity.v[2];
 30590  00BEF2  EE26 F001          	lfsr	2,1537	;volatile
 30591  00BEF6  C0A4  FFDF         	movff	MSDProcessCommandMediaPresent@capacity+2,indf2
 30592                           
 30593                           ; BSR set to: 0
 30594                           ;usb_device_msd.c: 789: msd_buffer[2]=capacity.v[1];
 30595  00BEFA  EE26 F002          	lfsr	2,1538	;volatile
 30596  00BEFE  C0A3  FFDF         	movff	MSDProcessCommandMediaPresent@capacity+1,indf2
 30597                           
 30598                           ; BSR set to: 0
 30599                           ;usb_device_msd.c: 790: msd_buffer[3]=capacity.v[0];
 30600  00BF02  EE26 F003          	lfsr	2,1539	;volatile
 30601  00BF06  C0A2  FFDF         	movff	MSDProcessCommandMediaPresent@capacity,indf2
 30602                           
 30603                           ; BSR set to: 0
 30604                           ;usb_device_msd.c: 792: msd_buffer[4]=sectorSize.v[3];
 30605  00BF0A  EE26 F004          	lfsr	2,1540	;volatile
 30606  00BF0E  C0A1  FFDF         	movff	MSDProcessCommandMediaPresent@sectorSize+3,indf2
 30607                           
 30608                           ; BSR set to: 0
 30609                           ;usb_device_msd.c: 793: msd_buffer[5]=sectorSize.v[2];
 30610  00BF12  EE26 F005          	lfsr	2,1541	;volatile
 30611  00BF16  C0A0  FFDF         	movff	MSDProcessCommandMediaPresent@sectorSize+2,indf2
 30612                           
 30613                           ; BSR set to: 0
 30614                           ;usb_device_msd.c: 794: msd_buffer[6]=sectorSize.v[1];
 30615  00BF1A  EE26 F006          	lfsr	2,1542	;volatile
 30616  00BF1E  C09F  FFDF         	movff	MSDProcessCommandMediaPresent@sectorSize+1,indf2
 30617                           
 30618                           ; BSR set to: 0
 30619                           ;usb_device_msd.c: 795: msd_buffer[7]=sectorSize.v[0];
 30620  00BF22  EE26 F007          	lfsr	2,1543	;volatile
 30621  00BF26  C09E  FFDF         	movff	MSDProcessCommandMediaPresent@sectorSize,indf2
 30622                           
 30623                           ; BSR set to: 0
 30624                           ;usb_device_msd.c: 798: TransferLength.Val = 0x08;
 30625  00BF2A  0E00               	movlw	0
 30626  00BF2C  6FEC               	movwf	(_TransferLength+1)& (0+255),b
 30627  00BF2E  0E08               	movlw	8
 30628  00BF30  6FEB               	movwf	_TransferLength& (0+255),b
 30629                           
 30630                           ; BSR set to: 0
 30631                           ;usb_device_msd.c: 799: MSDComputeDeviceInAndResidue(0x08);
 30632  00BF32  0E00               	movlw	0
 30633  00BF34  6F61               	movwf	(MSDComputeDeviceInAndResidue@DiExpected+1)& (0+255),b
 30634  00BF36  0E08               	movlw	8
 30635  00BF38  6F60               	movwf	MSDComputeDeviceInAndResidue@DiExpected& (0+255),b
 30636  00BF3A  ECC7  F08E         	call	_MSDComputeDeviceInAndResidue	;wreg free
 30637                           
 30638                           ;usb_device_msd.c: 801: MSDCommandState = 0xFD;
 30639  00BF3E  0EFD               	movlw	253
 30640  00BF40  0100               	movlb	0	; () banked
 30641  00BF42  6FF9               	movwf	_MSDCommandState& (0+255),b
 30642                           
 30643                           ;usb_device_msd.c: 802: break;
 30644  00BF44  0012               	return	
 30645  00BF46                     
 30646                           ; BSR set to: 0
 30647                           ;usb_device_msd.c: 811: if(MSDHostNoData == 1)
 30648                           
 30649                           ; BSR set to: 0
 30650  00BF46  05F5               	decf	_MSDHostNoData& (0+255),w,b
 30651  00BF48  A4D8               	btfss	status,2,c
 30652  00BF4A  D002               	goto	l641
 30653                           
 30654                           ; BSR set to: 0
 30655                           ;usb_device_msd.c: 812: {;usb_device_msd.c: 813: MSDCommandState = 0xFF;
 30656  00BF4C  69F9               	setf	_MSDCommandState& (0+255),b
 30657                           
 30658                           ;usb_device_msd.c: 814: break;
 30659  00BF4E  0012               	return	
 30660  00BF50                     l641:
 30661                           
 30662                           ; BSR set to: 0
 30663                           ;usb_device_msd.c: 815: };usb_device_msd.c: 818: TransferLength.Val = sizeof(RequestSens
      +                          eResponse);
 30664                           
 30665                           ; BSR set to: 0
 30666  00BF50  0E00               	movlw	0
 30667  00BF52  6FEC               	movwf	(_TransferLength+1)& (0+255),b
 30668  00BF54  0E12               	movlw	18
 30669  00BF56  6FEB               	movwf	_TransferLength& (0+255),b
 30670                           
 30671                           ; BSR set to: 0
 30672                           ;usb_device_msd.c: 819: MSDComputeDeviceInAndResidue(sizeof(RequestSenseResponse));
 30673  00BF58  0E00               	movlw	0
 30674  00BF5A  6F61               	movwf	(MSDComputeDeviceInAndResidue@DiExpected+1)& (0+255),b
 30675  00BF5C  0E12               	movlw	18
 30676  00BF5E  6F60               	movwf	MSDComputeDeviceInAndResidue@DiExpected& (0+255),b
 30677  00BF60  ECC7  F08E         	call	_MSDComputeDeviceInAndResidue	;wreg free
 30678                           
 30679                           ;usb_device_msd.c: 822: for(i=0;i<sizeof(RequestSenseResponse);i++)
 30680  00BF64  0E00               	movlw	0
 30681  00BF66  0100               	movlb	0	; () banked
 30682  00BF68  6FA6               	movwf	MSDProcessCommandMediaPresent@i& (0+255),b
 30683  00BF6A                     l19132:
 30684                           
 30685                           ; BSR set to: 0
 30686  00BF6A  0E11               	movlw	17
 30687  00BF6C  65A6               	cpfsgt	MSDProcessCommandMediaPresent@i& (0+255),b
 30688  00BF6E  D001               	goto	l642
 30689  00BF70  D014               	goto	u18970
 30690  00BF72                     l642:
 30691                           
 30692                           ; BSR set to: 0
 30693                           ;usb_device_msd.c: 823: {;usb_device_msd.c: 824: msd_buffer[i]=gblSenseData[0]._byte[i];
 30694                           
 30695                           ; BSR set to: 0
 30696  00BF72  51A6               	movf	MSDProcessCommandMediaPresent@i& (0+255),w,b
 30697  00BF74  0D01               	mullw	1
 30698  00BF76  0E1F               	movlw	low _gblSenseData
 30699  00BF78  24F3               	addwf	prodl,w,c
 30700  00BF7A  6ED9               	movwf	fsr2l,c
 30701  00BF7C  0E01               	movlw	high _gblSenseData
 30702  00BF7E  20F4               	addwfc	prodh,w,c
 30703  00BF80  6EDA               	movwf	fsr2h,c
 30704  00BF82  51A6               	movf	MSDProcessCommandMediaPresent@i& (0+255),w,b
 30705  00BF84  0D01               	mullw	1
 30706  00BF86  0E00               	movlw	0
 30707  00BF88  24F3               	addwf	prodl,w,c
 30708  00BF8A  6EE1               	movwf	fsr1l,c
 30709  00BF8C  0E06               	movlw	6
 30710  00BF8E  20F4               	addwfc	prodh,w,c
 30711  00BF90  6EE2               	movwf	fsr1h,c
 30712  00BF92  CFDF FFE7          	movff	indf2,indf1
 30713                           
 30714                           ; BSR set to: 0
 30715  00BF96  2BA6               	incf	MSDProcessCommandMediaPresent@i& (0+255),f,b
 30716  00BF98  D7E8               	goto	l19132
 30717  00BF9A                     u18970:
 30718                           
 30719                           ; BSR set to: 0
 30720                           ;usb_device_msd.c: 825: };usb_device_msd.c: 826: MSDCommandState = 0xFD;
 30721                           
 30722                           ; BSR set to: 0
 30723  00BF9A  0EFD               	movlw	253
 30724  00BF9C  6FF9               	movwf	_MSDCommandState& (0+255),b
 30725                           
 30726                           ;usb_device_msd.c: 827: break;
 30727  00BF9E  0012               	return	
 30728  00BFA0                     l644:
 30729                           
 30730                           ; BSR set to: 0
 30731                           ;usb_device_msd.c: 830: msd_buffer[0]=0x03;
 30732  00BFA0  0E03               	movlw	3
 30733  00BFA2  CFE8 F600          	movff	wreg,1536
 30734                           
 30735                           ;usb_device_msd.c: 831: msd_buffer[1]=0x00;
 30736  00BFA6  0E00               	movlw	0
 30737  00BFA8  CFE8 F601          	movff	wreg,1537	;volatile
 30738                           
 30739                           ; BSR set to: 0
 30740                           ;usb_device_msd.c: 832: msd_buffer[2]=(LUN[0].WriteProtectState(LUN[0].mediaParameters))
      +                           ? 0x80 : 0x00;
 30741  00BFAC  C1D6  F060         	movff	_LUN+21,ExternalFlash_WriteProtectStateGet@config
 30742  00BFB0  C1D7  F061         	movff	_LUN+22,ExternalFlash_WriteProtectStateGet@config+1
 30743  00BFB4  EE21  F0D0         	lfsr	2,_LUN+15
 30744  00BFB8  D801               	call	u18988
 30745  00BFBA  D00A               	goto	u18989
 30746  00BFBC                     u18988:
 30747  00BFBC  0005               	push	
 30748  00BFBE  6EFA               	movwf	pclath,c
 30749  00BFC0  50DE               	movf	postinc2,w,c
 30750  00BFC2  6EFD               	movwf	tosl,c
 30751  00BFC4  50DE               	movf	postinc2,w,c
 30752  00BFC6  6EFE               	movwf	tosh,c
 30753  00BFC8  50DE               	movf	postinc2,w,c
 30754  00BFCA  6EFF               	movwf	tosu,c
 30755  00BFCC  50FA               	movf	pclath,w,c
 30756  00BFCE  0012               	return		;indir
 30757  00BFD0                     u18989:
 30758  00BFD0  0900               	iorlw	0
 30759  00BFD2  A4D8               	btfss	status,2,c
 30760  00BFD4  D005               	goto	l646
 30761  00BFD6  0E00               	movlw	0
 30762  00BFD8  0100               	movlb	0	; () banked
 30763  00BFDA  6F9C               	movwf	(_MSDProcessCommandMediaPresent$2606+1)& (0+255),b
 30764  00BFDC  0E00               	movlw	0
 30765  00BFDE  D004               	goto	L49
 30766  00BFE0                     l646:
 30767                           
 30768                           ; BSR set to: 0
 30769  00BFE0  0E00               	movlw	0
 30770  00BFE2  0100               	movlb	0	; () banked
 30771  00BFE4  6F9C               	movwf	(_MSDProcessCommandMediaPresent$2606+1)& (0+255),b
 30772  00BFE6  0E80               	movlw	128
 30773  00BFE8                     L49:
 30774  00BFE8  6F9B               	movwf	_MSDProcessCommandMediaPresent$2606& (0+255),b
 30775                           
 30776                           ; BSR set to: 0
 30777                           
 30778                           ; BSR set to: 0
 30779  00BFEA  EE26 F002          	lfsr	2,1538	;volatile
 30780  00BFEE  C09B  FFDF         	movff	_MSDProcessCommandMediaPresent$2606,indf2
 30781                           
 30782                           ; BSR set to: 0
 30783                           ;usb_device_msd.c: 833: msd_buffer[3]= 0x00;
 30784  00BFF2  0E00               	movlw	0
 30785  00BFF4  CFE8 F603          	movff	wreg,1539	;volatile
 30786                           
 30787                           ; BSR set to: 0
 30788                           ;usb_device_msd.c: 836: TransferLength.Val = 0x04;
 30789  00BFF8  0E00               	movlw	0
 30790  00BFFA  6FEC               	movwf	(_TransferLength+1)& (0+255),b
 30791  00BFFC  0E04               	movlw	4
 30792  00BFFE  6FEB               	movwf	_TransferLength& (0+255),b
 30793                           
 30794                           ; BSR set to: 0
 30795                           ;usb_device_msd.c: 837: MSDComputeDeviceInAndResidue(0x04);
 30796  00C000  0E00               	movlw	0
 30797  00C002  6F61               	movwf	(MSDComputeDeviceInAndResidue@DiExpected+1)& (0+255),b
 30798  00C004  0E04               	movlw	4
 30799  00C006  6F60               	movwf	MSDComputeDeviceInAndResidue@DiExpected& (0+255),b
 30800  00C008  ECC7  F08E         	call	_MSDComputeDeviceInAndResidue	;wreg free
 30801                           
 30802                           ;usb_device_msd.c: 838: MSDCommandState = 0xFD;
 30803  00C00C  0EFD               	movlw	253
 30804  00C00E  0100               	movlb	0	; () banked
 30805  00C010  6FF9               	movwf	_MSDCommandState& (0+255),b
 30806                           
 30807                           ;usb_device_msd.c: 839: break;
 30808  00C012  0012               	return	
 30809  00C014                     
 30810                           ; BSR set to: 0
 30811                           ;usb_device_msd.c: 842: gblSenseData[0].SenseKey=0x5;
 30812                           
 30813                           ; BSR set to: 0
 30814  00C014  0101               	movlb	1	; () banked
 30815  00C016  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 30816  00C018  0BF0               	andlw	-16
 30817  00C01A  0905               	iorlw	5
 30818  00C01C  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 30819                           
 30820                           ;usb_device_msd.c: 843: gblSenseData[0].ASC=0x20;
 30821  00C01E  0E20               	movlw	32
 30822  00C020  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 30823                           
 30824                           ;usb_device_msd.c: 844: gblSenseData[0].ASCQ=0x00;
 30825  00C022  0E00               	movlw	0
 30826  00C024  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 30827                           
 30828                           ;usb_device_msd.c: 845: msd_csw.bCSWStatus = 0x01;
 30829  00C026  0E01               	movlw	1
 30830  00C028  010D               	movlb	13	; () banked
 30831  00C02A  6F8C               	movwf	140,b	;volatile
 30832                           
 30833                           ;usb_device_msd.c: 846: msd_csw.dCSWDataResidue = 0x00;
 30834  00C02C  0E00               	movlw	0
 30835  00C02E  6F88               	movwf	136,b	;volatile
 30836  00C030  0E00               	movlw	0
 30837  00C032  6F89               	movwf	137,b	;volatile
 30838  00C034  0E00               	movlw	0
 30839  00C036  6F8A               	movwf	138,b	;volatile
 30840  00C038  0E00               	movlw	0
 30841  00C03A  6F8B               	movwf	139,b	;volatile
 30842                           
 30843                           ; BSR set to: 13
 30844                           ;usb_device_msd.c: 847: MSDCommandState = 0xFF;
 30845  00C03C  0100               	movlb	0	; () banked
 30846  00C03E  69F9               	setf	_MSDCommandState& (0+255),b
 30847                           
 30848                           ;usb_device_msd.c: 848: break;
 30849  00C040  0012               	return	
 30850  00C042                     
 30851                           ; BSR set to: 0
 30852                           ;usb_device_msd.c: 858: if(MSDCheckForErrorCases(0) != 0x00)
 30853                           
 30854                           ; BSR set to: 0
 30855  00C042  0E00               	movlw	0
 30856  00C044  6F6A               	movwf	MSDCheckForErrorCases@DeviceBytes& (0+255),b
 30857  00C046  0E00               	movlw	0
 30858  00C048  6F6B               	movwf	(MSDCheckForErrorCases@DeviceBytes+1)& (0+255),b
 30859  00C04A  0E00               	movlw	0
 30860  00C04C  6F6C               	movwf	(MSDCheckForErrorCases@DeviceBytes+2)& (0+255),b
 30861  00C04E  0E00               	movlw	0
 30862  00C050  6F6D               	movwf	(MSDCheckForErrorCases@DeviceBytes+3)& (0+255),b
 30863  00C052  EC76  F085         	call	_MSDCheckForErrorCases	;wreg free
 30864  00C056  0900               	iorlw	0
 30865  00C058  A4D8               	btfss	status,2,c
 30866  00C05A  0012               	return	
 30867                           
 30868                           ;usb_device_msd.c: 861: };usb_device_msd.c: 867: if((gblSenseData[0].SenseKey==0x6) && (
      +                          msd_csw.bCSWStatus==0x01))
 30869                           
 30870                           ;usb_device_msd.c: 859: {;usb_device_msd.c: 860: break;
 30871  00C05C  0101               	movlb	1	; () banked
 30872  00C05E  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 30873  00C060  0B0F               	andlw	15
 30874  00C062  0A06               	xorlw	6
 30875  00C064  A4D8               	btfss	status,2,c
 30876  00C066  D007               	goto	l652
 30877                           
 30878                           ; BSR set to: 1
 30879  00C068  010D               	movlb	13	; () banked
 30880  00C06A  058C               	decf	140,w,b	;volatile
 30881  00C06C  A4D8               	btfss	status,2,c
 30882  00C06E  D003               	goto	l652
 30883                           
 30884                           ; BSR set to: 13
 30885                           ;usb_device_msd.c: 868: {;usb_device_msd.c: 869: MSDCommandState = 0xFF;
 30886  00C070  0100               	movlb	0	; () banked
 30887  00C072  69F9               	setf	_MSDCommandState& (0+255),b
 30888                           
 30889                           ;usb_device_msd.c: 870: }
 30890  00C074  0012               	return	
 30891  00C076                     l652:
 30892                           
 30893                           ;usb_device_msd.c: 871: else;usb_device_msd.c: 872: {;usb_device_msd.c: 873: ResetSenseD
      +                          ata();
 30894                           
 30895                           ; BSR set to: 0
 30896  00C076  ECDA  F097         	call	_ResetSenseData	;wreg free
 30897                           
 30898                           ;usb_device_msd.c: 874: msd_csw.dCSWDataResidue=0x00;
 30899  00C07A  0E00               	movlw	0
 30900  00C07C  010D               	movlb	13	; () banked
 30901  00C07E  6F88               	movwf	136,b	;volatile
 30902  00C080  0E00               	movlw	0
 30903  00C082  6F89               	movwf	137,b	;volatile
 30904  00C084  0E00               	movlw	0
 30905  00C086  6F8A               	movwf	138,b	;volatile
 30906  00C088  0E00               	movlw	0
 30907  00C08A  6F8B               	movwf	139,b	;volatile
 30908                           
 30909                           ; BSR set to: 13
 30910                           ;usb_device_msd.c: 875: MSDCommandState = 0xFF;
 30911  00C08C  0100               	movlb	0	; () banked
 30912  00C08E  69F9               	setf	_MSDCommandState& (0+255),b
 30913                           
 30914                           ; BSR set to: 0
 30915                           ;usb_device_msd.c: 876: };usb_device_msd.c: 877: break;
 30916  00C090  0012               	return	
 30917  00C092                     
 30918                           ; BSR set to: 0
 30919                           ;usb_device_msd.c: 882: case 0x1b:;usb_device_msd.c: 883: msd_csw.dCSWDataResidue=0x00;
 30920                           
 30921                           ; BSR set to: 0
 30922                           
 30923                           ; BSR set to: 0
 30924  00C092  0E00               	movlw	0
 30925  00C094  010D               	movlb	13	; () banked
 30926  00C096  6F88               	movwf	136,b	;volatile
 30927  00C098  0E00               	movlw	0
 30928  00C09A  6F89               	movwf	137,b	;volatile
 30929  00C09C  0E00               	movlw	0
 30930  00C09E  6F8A               	movwf	138,b	;volatile
 30931  00C0A0  0E00               	movlw	0
 30932  00C0A2  6F8B               	movwf	139,b	;volatile
 30933                           
 30934                           ; BSR set to: 13
 30935                           ;usb_device_msd.c: 884: MSDCommandState = 0xFF;
 30936  00C0A4  0100               	movlb	0	; () banked
 30937  00C0A6  69F9               	setf	_MSDCommandState& (0+255),b
 30938                           
 30939                           ;usb_device_msd.c: 885: break;
 30940  00C0A8  0012               	return	
 30941  00C0AA                     
 30942                           ; BSR set to: 0
 30943                           ;usb_device_msd.c: 892: if(((USBMSDInHandle != 0x0000) && ((*(volatile uint8_t*)USBMSDIn
      +                          Handle & 0x80) != 0x00)) == 0)
 30944                           
 30945                           ; BSR set to: 0
 30946  00C0AA  51ED               	movf	_USBMSDInHandle& (0+255),w,b
 30947  00C0AC  11EE               	iorwf	(_USBMSDInHandle+1)& (0+255),w,b
 30948  00C0AE  B4D8               	btfsc	status,2,c
 30949  00C0B0  D006               	goto	u19040
 30950                           
 30951                           ; BSR set to: 0
 30952  00C0B2  C0ED  FFD9         	movff	_USBMSDInHandle,fsr2l
 30953  00C0B6  C0EE  FFDA         	movff	_USBMSDInHandle+1,fsr2h
 30954  00C0BA  BEDF               	btfsc	indf2,7,c
 30955  00C0BC  0012               	return	
 30956  00C0BE                     u19040:
 30957                           
 30958                           ; BSR set to: 0
 30959                           ;usb_device_msd.c: 893: {;usb_device_msd.c: 896: if(gblCBW.dCBWDataTransferLength >= 64u
      +                          )
 30960                           
 30961                           ; BSR set to: 0
 30962  00C0BE  0101               	movlb	1	; () banked
 30963  00C0C0  510B               	movf	(_gblCBW+11)& (0+255),w,b
 30964  00C0C2  110A               	iorwf	(_gblCBW+10)& (0+255),w,b
 30965  00C0C4  1109               	iorwf	(_gblCBW+9)& (0+255),w,b
 30966  00C0C6  E104               	bnz	u19050
 30967  00C0C8  0E40               	movlw	64
 30968  00C0CA  5D08               	subwf	(_gblCBW+8)& (0+255),w,b
 30969  00C0CC  A0D8               	btfss	status,0,c
 30970  00C0CE  D00B               	goto	l660
 30971  00C0D0                     u19050:
 30972                           
 30973                           ; BSR set to: 1
 30974                           ;usb_device_msd.c: 897: {;usb_device_msd.c: 898: NumBytesInPacket = 64u;
 30975  00C0D0  0E40               	movlw	64
 30976  00C0D2  0100               	movlb	0	; () banked
 30977  00C0D4  6F9D               	movwf	MSDProcessCommandMediaPresent@NumBytesInPacket& (0+255),b
 30978                           
 30979                           ; BSR set to: 0
 30980                           ;usb_device_msd.c: 899: gblCBW.dCBWDataTransferLength -= 64u;
 30981  00C0D6  0E40               	movlw	64
 30982  00C0D8  0101               	movlb	1	; () banked
 30983  00C0DA  5F08               	subwf	(_gblCBW+8)& (0+255),f,b
 30984  00C0DC  0E00               	movlw	0
 30985  00C0DE  5B09               	subwfb	(_gblCBW+9)& (0+255),f,b
 30986  00C0E0  5B0A               	subwfb	(_gblCBW+10)& (0+255),f,b
 30987  00C0E2  5B0B               	subwfb	(_gblCBW+11)& (0+255),f,b
 30988                           
 30989                           ;usb_device_msd.c: 900: }
 30990  00C0E4  D00A               	goto	l661
 30991  00C0E6                     l660:
 30992                           
 30993                           ; BSR set to: 1
 30994                           ;usb_device_msd.c: 901: else;usb_device_msd.c: 902: {;usb_device_msd.c: 905: NumBytesInP
      +                          acket = gblCBW.dCBWDataTransferLength;
 30995  00C0E6  C108  F09D         	movff	_gblCBW+8,MSDProcessCommandMediaPresent@NumBytesInPacket
 30996                           
 30997                           ; BSR set to: 1
 30998                           ;usb_device_msd.c: 906: gblCBW.dCBWDataTransferLength = 0;
 30999  00C0EA  0E00               	movlw	0
 31000  00C0EC  6F08               	movwf	(_gblCBW+8)& (0+255),b
 31001  00C0EE  0E00               	movlw	0
 31002  00C0F0  6F09               	movwf	(_gblCBW+9)& (0+255),b
 31003  00C0F2  0E00               	movlw	0
 31004  00C0F4  6F0A               	movwf	(_gblCBW+10)& (0+255),b
 31005  00C0F6  0E00               	movlw	0
 31006  00C0F8  6F0B               	movwf	(_gblCBW+11)& (0+255),b
 31007  00C0FA                     l661:
 31008                           
 31009                           ; BSR set to: 1
 31010                           ;usb_device_msd.c: 907: };usb_device_msd.c: 914: if(TransferLength.Val >= NumBytesInPack
      +                          et)
 31011                           
 31012                           ; BSR set to: 1
 31013  00C0FA  0100               	movlb	0	; () banked
 31014  00C0FC  519D               	movf	MSDProcessCommandMediaPresent@NumBytesInPacket& (0+255),w,b
 31015  00C0FE  6F99               	movwf	??_MSDProcessCommandMediaPresent& (0+255),b
 31016  00C100  6B9A               	clrf	(??_MSDProcessCommandMediaPresent+1)& (0+255),b
 31017  00C102  5199               	movf	??_MSDProcessCommandMediaPresent& (0+255),w,b
 31018  00C104  5DEB               	subwf	_TransferLength& (0+255),w,b
 31019  00C106  519A               	movf	(??_MSDProcessCommandMediaPresent+1)& (0+255),w,b
 31020  00C108  59EC               	subwfb	(_TransferLength+1)& (0+255),w,b
 31021  00C10A  A0D8               	btfss	status,0,c
 31022  00C10C  D005               	goto	l662
 31023                           
 31024                           ; BSR set to: 0
 31025                           ;usb_device_msd.c: 915: {;usb_device_msd.c: 917: TransferLength.Val -= NumBytesInPacket;
 31026  00C10E  519D               	movf	MSDProcessCommandMediaPresent@NumBytesInPacket& (0+255),w,b
 31027  00C110  5FEB               	subwf	_TransferLength& (0+255),f,b
 31028  00C112  0E00               	movlw	0
 31029  00C114  5BEC               	subwfb	(_TransferLength+1)& (0+255),f,b
 31030                           
 31031                           ;usb_device_msd.c: 918: }
 31032  00C116  D01A               	goto	u19080
 31033  00C118                     l662:
 31034                           
 31035                           ; BSR set to: 0
 31036                           ;usb_device_msd.c: 919: else;usb_device_msd.c: 920: {;usb_device_msd.c: 927: for(i = 0; 
      +                          i < NumBytesInPacket; i++)
 31037                           
 31038                           ; BSR set to: 0
 31039  00C118  0E00               	movlw	0
 31040  00C11A  6FA6               	movwf	MSDProcessCommandMediaPresent@i& (0+255),b
 31041  00C11C  D013               	goto	l664
 31042  00C11E                     
 31043                           ; BSR set to: 0
 31044                           ;usb_device_msd.c: 928: {;usb_device_msd.c: 929: if(TransferLength.Val != 0)
 31045                           
 31046                           ; BSR set to: 0
 31047  00C11E  51EB               	movf	_TransferLength& (0+255),w,b
 31048  00C120  11EC               	iorwf	(_TransferLength+1)& (0+255),w,b
 31049  00C122  B4D8               	btfsc	status,2,c
 31050  00C124  D004               	goto	l666
 31051                           
 31052                           ; BSR set to: 0
 31053                           ;usb_device_msd.c: 930: {;usb_device_msd.c: 931: TransferLength.Val--;
 31054  00C126  07EB               	decf	_TransferLength& (0+255),f,b
 31055  00C128  A0D8               	btfss	status,0,c
 31056  00C12A  07EC               	decf	(_TransferLength+1)& (0+255),f,b
 31057                           
 31058                           ;usb_device_msd.c: 932: }
 31059  00C12C  D00A               	goto	l667
 31060  00C12E                     l666:
 31061                           
 31062                           ; BSR set to: 0
 31063                           ;usb_device_msd.c: 933: else;usb_device_msd.c: 934: {;usb_device_msd.c: 935: msd_buffer[
      +                          i] = 0x00;
 31064                           
 31065                           ; BSR set to: 0
 31066  00C12E  51A6               	movf	MSDProcessCommandMediaPresent@i& (0+255),w,b
 31067  00C130  0D01               	mullw	1
 31068  00C132  0E00               	movlw	0
 31069  00C134  24F3               	addwf	prodl,w,c
 31070  00C136  6ED9               	movwf	fsr2l,c
 31071  00C138  0E06               	movlw	6
 31072  00C13A  20F4               	addwfc	prodh,w,c
 31073  00C13C  6EDA               	movwf	fsr2h,c
 31074  00C13E  0E00               	movlw	0
 31075  00C140  6EDF               	movwf	indf2,c
 31076  00C142                     l667:
 31077                           
 31078                           ; BSR set to: 0
 31079                           
 31080                           ; BSR set to: 0
 31081  00C142  2BA6               	incf	MSDProcessCommandMediaPresent@i& (0+255),f,b
 31082  00C144                     l664:
 31083                           
 31084                           ; BSR set to: 0
 31085                           
 31086                           ; BSR set to: 0
 31087  00C144  519D               	movf	MSDProcessCommandMediaPresent@NumBytesInPacket& (0+255),w,b
 31088  00C146  5DA6               	subwf	MSDProcessCommandMediaPresent@i& (0+255),w,b
 31089  00C148  A0D8               	btfss	status,0,c
 31090  00C14A  D7E9               	goto	l665
 31091  00C14C                     u19080:
 31092                           
 31093                           ; BSR set to: 0
 31094                           ;usb_device_msd.c: 936: };usb_device_msd.c: 937: };usb_device_msd.c: 938: };usb_device_m
      +                          sd.c: 941: USBMSDInHandle = USBTransferOnePacket(2u,1,(uint8_t*)&msd_buffer[0],NumBytesI
      +                          nPacket);
 31095                           
 31096                           ; BSR set to: 0
 31097                           
 31098                           ; BSR set to: 0
 31099  00C14C  0E01               	movlw	1
 31100  00C14E  6F60               	movwf	USBTransferOnePacket@dir& (0+255),b
 31101  00C150  0E00               	movlw	0
 31102  00C152  6F61               	movwf	USBTransferOnePacket@data& (0+255),b
 31103  00C154  0E06               	movlw	6
 31104  00C156  6F62               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
 31105  00C158  C09D  F063         	movff	MSDProcessCommandMediaPresent@NumBytesInPacket,USBTransferOnePacket@len
 31106  00C15C  0E02               	movlw	2
 31107  00C15E  EC6F  F082         	call	_USBTransferOnePacket
 31108  00C162  C060  F0ED         	movff	?_USBTransferOnePacket,_USBMSDInHandle
 31109  00C166  C061  F0EE         	movff	?_USBTransferOnePacket+1,_USBMSDInHandle+1
 31110                           
 31111                           ;usb_device_msd.c: 944: if(gblCBW.dCBWDataTransferLength == 0)
 31112  00C16A  0101               	movlb	1	; () banked
 31113  00C16C  5108               	movf	(_gblCBW+8)& (0+255),w,b
 31114  00C16E  1109               	iorwf	(_gblCBW+9)& (0+255),w,b
 31115  00C170  110A               	iorwf	(_gblCBW+10)& (0+255),w,b
 31116  00C172  110B               	iorwf	(_gblCBW+11)& (0+255),w,b
 31117  00C174  A4D8               	btfss	status,2,c
 31118  00C176  0012               	return	
 31119                           
 31120                           ; BSR set to: 1
 31121                           ;usb_device_msd.c: 945: {;usb_device_msd.c: 948: MSDCommandState = 0xFF;
 31122  00C178  0100               	movlb	0	; () banked
 31123  00C17A  69F9               	setf	_MSDCommandState& (0+255),b
 31124                           
 31125                           ; BSR set to: 0
 31126                           ;usb_device_msd.c: 950: };usb_device_msd.c: 951: };usb_device_msd.c: 952: break;
 31127                           
 31128                           ; BSR set to: 0
 31129                           
 31130                           ;usb_device_msd.c: 949: break;
 31131  00C17C  0012               	return	
 31132  00C17E                     
 31133                           ; BSR set to: 0
 31134                           ;usb_device_msd.c: 958: MSDErrorHandler(0x7F);
 31135                           
 31136                           ; BSR set to: 0
 31137                           
 31138                           ;usb_device_msd.c: 954: default:
 31139                           
 31140                           ; BSR set to: 0
 31141  00C17E  0E7F               	movlw	127
 31142  00C180  ECCB  F07F         	call	_MSDErrorHandler
 31143                           
 31144                           ;usb_device_msd.c: 960: }
 31145                           
 31146                           ;usb_device_msd.c: 959: break;
 31147  00C184  0012               	return	
 31148  00C186                     l630:
 31149  00C186  0100               	movlb	0	; () banked
 31150  00C188  51F9               	movf	_MSDCommandState& (0+255),w,b
 31151                           
 31152                           ; Switch size 1, requested type "space"
 31153                           ; Number of cases is 12, Range of values is 0 to 254
 31154                           ; switch strategies available:
 31155                           ; Name         Instructions Cycles
 31156                           ; simple_byte           37    19 (average)
 31157                           ;	Chosen strategy is simple_byte
 31158  00C18A  0A00               	xorlw	0	; case 0
 31159  00C18C  B4D8               	btfsc	status,2,c
 31160  00C18E  D759               	goto	l650
 31161  00C190  0A03               	xorlw	3	; case 3
 31162  00C192  B4D8               	btfsc	status,2,c
 31163  00C194  D6D8               	goto	l640
 31164  00C196  0A11               	xorlw	17	; case 18
 31165  00C198  B4D8               	btfsc	status,2,c
 31166  00C19A  D646               	goto	l636
 31167  00C19C  0A08               	xorlw	8	; case 26
 31168  00C19E  B4D8               	btfsc	status,2,c
 31169  00C1A0  D6FF               	goto	l644
 31170  00C1A2  0A01               	xorlw	1	; case 27
 31171  00C1A4  B4D8               	btfsc	status,2,c
 31172  00C1A6  D775               	goto	l654
 31173  00C1A8  0A05               	xorlw	5	; case 30
 31174  00C1AA  B4D8               	btfsc	status,2,c
 31175  00C1AC  D733               	goto	l649
 31176  00C1AE  0A3B               	xorlw	59	; case 37
 31177  00C1B0  B4D8               	btfsc	status,2,c
 31178  00C1B2  D668               	goto	l639
 31179  00C1B4  0A0D               	xorlw	13	; case 40
 31180  00C1B6  B4D8               	btfsc	status,2,c
 31181  00C1B8  D627               	goto	l631
 31182  00C1BA  0A02               	xorlw	2	; case 42
 31183  00C1BC  B4D8               	btfsc	status,2,c
 31184  00C1BE  D62C               	goto	l634
 31185  00C1C0  0A05               	xorlw	5	; case 47
 31186  00C1C2  B4D8               	btfsc	status,2,c
 31187  00C1C4  D766               	goto	l654
 31188  00C1C6  0AD2               	xorlw	210	; case 253
 31189  00C1C8  B4D8               	btfsc	status,2,c
 31190  00C1CA  D76F               	goto	l656
 31191  00C1CC  0A03               	xorlw	3	; case 254
 31192  00C1CE  D7D7               	goto	l670
 31193  00C1D0                     __end_of_MSDProcessCommandMediaPresent:
 31194                           	opt stack 0
 31195                           tosu	equ	0xFFF
 31196                           tosh	equ	0xFFE
 31197                           tosl	equ	0xFFD
 31198                           pclath	equ	0xFFA
 31199                           tblptru	equ	0xFF8
 31200                           tblptrh	equ	0xFF7
 31201                           tblptrl	equ	0xFF6
 31202                           tablat	equ	0xFF5
 31203                           prodh	equ	0xFF4
 31204                           prodl	equ	0xFF3
 31205                           intcon	equ	0xFF2
 31206                           postinc0	equ	0xFEE
 31207                           wreg	equ	0xFE8
 31208                           indf1	equ	0xFE7
 31209                           postinc1	equ	0xFE6
 31210                           postdec1	equ	0xFE5
 31211                           plusw1	equ	0xFE3
 31212                           fsr1h	equ	0xFE2
 31213                           fsr1l	equ	0xFE1
 31214                           indf2	equ	0xFDF
 31215                           postinc2	equ	0xFDE
 31216                           postdec2	equ	0xFDD
 31217                           plusw2	equ	0xFDB
 31218                           fsr2h	equ	0xFDA
 31219                           fsr2l	equ	0xFD9
 31220                           status	equ	0xFD8
 31221                           
 31222 ;; *************** function _MSDWriteHandler *****************
 31223 ;; Defined at:
 31224 ;;		line 1188 in file "usb_device_msd.c"
 31225 ;; Parameters:    Size  Location     Type
 31226 ;;		None
 31227 ;; Auto vars:     Size  Location     Type
 31228 ;;		None
 31229 ;; Return value:  Size  Location     Type
 31230 ;;                  1    wreg      unsigned char 
 31231 ;; Registers used:
 31232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 31233 ;; Tracked objects:
 31234 ;;		On entry : 0/0
 31235 ;;		On exit  : 0/0
 31236 ;;		Unchanged: 0/0
 31237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 31238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31240 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31241 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31242 ;;Total ram usage:        5 bytes
 31243 ;; Hardware stack levels used:    1
 31244 ;; Hardware stack levels required when called:   16
 31245 ;; This function calls:
 31246 ;;		_ExternalFlash_SectorWrite
 31247 ;;		_ExternalFlash_WriteProtectStateGet
 31248 ;;		_MSDCheckForErrorCases
 31249 ;;		_USBStallEndpoint
 31250 ;;		_USBTransferOnePacket
 31251 ;; This function is called by:
 31252 ;;		_MSDProcessCommandMediaPresent
 31253 ;; This function uses a non-reentrant model
 31254 ;;
 31255                           
 31256                           	psect	text114
 31257  00CE48                     __ptext114:
 31258                           	opt stack 0
 31259  00CE48                     _MSDWriteHandler:
 31260                           	opt stack 10
 31261                           
 31262                           ;usb_device_msd.c: 1190: switch(MSDWriteState)
 31263                           
 31264                           ;incstack = 0
 31265  00CE48  D15A               	goto	l700
 31266  00CE4A                     l701:
 31267                           
 31268                           ;usb_device_msd.c: 1195: LBA.v[3]=gblCBW.CBWCB[2];
 31269  00CE4A  C111  F151         	movff	_gblCBW+17,_LBA+3
 31270                           
 31271                           ;usb_device_msd.c: 1196: LBA.v[2]=gblCBW.CBWCB[3];
 31272  00CE4E  C112  F150         	movff	_gblCBW+18,_LBA+2
 31273                           
 31274                           ;usb_device_msd.c: 1197: LBA.v[1]=gblCBW.CBWCB[4];
 31275  00CE52  C113  F14F         	movff	_gblCBW+19,_LBA+1
 31276                           
 31277                           ;usb_device_msd.c: 1198: LBA.v[0]=gblCBW.CBWCB[5];
 31278  00CE56  C114  F14E         	movff	_gblCBW+20,_LBA
 31279                           
 31280                           ;usb_device_msd.c: 1199: TransferLength.v[1]=gblCBW.CBWCB[7];
 31281  00CE5A  C116  F0EC         	movff	_gblCBW+22,_TransferLength+1
 31282                           
 31283                           ;usb_device_msd.c: 1200: TransferLength.v[0]=gblCBW.CBWCB[8];
 31284  00CE5E  C117  F0EB         	movff	_gblCBW+23,_TransferLength
 31285                           
 31286                           ;usb_device_msd.c: 1203: if(MSDCheckForErrorCases(TransferLength.Val * (uint32_t)512) !=
      +                           0x00)
 31287  00CE62  0100               	movlb	0	; () banked
 31288  00CE64  51EB               	movf	_TransferLength& (0+255),w,b
 31289  00CE66  6F8F               	movwf	??_MSDWriteHandler& (0+255),b
 31290  00CE68  51EC               	movf	(_TransferLength+1)& (0+255),w,b
 31291  00CE6A  6F90               	movwf	(??_MSDWriteHandler+1)& (0+255),b
 31292  00CE6C  6B91               	clrf	(??_MSDWriteHandler+2)& (0+255),b
 31293  00CE6E  6B92               	clrf	(??_MSDWriteHandler+3)& (0+255),b
 31294  00CE70  0E09               	movlw	9
 31295  00CE72                     u18115:
 31296  00CE72  90D8               	bcf	status,0,c
 31297  00CE74  378F               	rlcf	??_MSDWriteHandler& (0+255),f,b
 31298  00CE76  3790               	rlcf	(??_MSDWriteHandler+1)& (0+255),f,b
 31299  00CE78  3791               	rlcf	(??_MSDWriteHandler+2)& (0+255),f,b
 31300  00CE7A  3792               	rlcf	(??_MSDWriteHandler+3)& (0+255),f,b
 31301  00CE7C  2EE8               	decfsz	wreg,f,c
 31302  00CE7E  D7F9               	goto	u18115
 31303  00CE80  C08F  F06A         	movff	??_MSDWriteHandler,MSDCheckForErrorCases@DeviceBytes
 31304  00CE84  C090  F06B         	movff	??_MSDWriteHandler+1,MSDCheckForErrorCases@DeviceBytes+1
 31305  00CE88  C091  F06C         	movff	??_MSDWriteHandler+2,MSDCheckForErrorCases@DeviceBytes+2
 31306  00CE8C  C092  F06D         	movff	??_MSDWriteHandler+3,MSDCheckForErrorCases@DeviceBytes+3
 31307  00CE90  EC76  F085         	call	_MSDCheckForErrorCases	;wreg free
 31308  00CE94  0900               	iorlw	0
 31309  00CE96  A4D8               	btfss	status,2,c
 31310  00CE98  D143               	goto	l703
 31311                           
 31312                           ;usb_device_msd.c: 1208: };usb_device_msd.c: 1212: if(LUN[0].WriteProtectState(LUN[0].me
      +                          diaParameters))
 31313                           
 31314                           ;usb_device_msd.c: 1204: {;usb_device_msd.c: 1207: break;
 31315  00CE9A  C1D6  F060         	movff	_LUN+21,ExternalFlash_WriteProtectStateGet@config
 31316  00CE9E  C1D7  F061         	movff	_LUN+22,ExternalFlash_WriteProtectStateGet@config+1
 31317  00CEA2  EE21  F0D0         	lfsr	2,_LUN+15
 31318  00CEA6  D801               	call	u18138
 31319  00CEA8  D00A               	goto	u18139
 31320  00CEAA                     u18138:
 31321  00CEAA  0005               	push	
 31322  00CEAC  6EFA               	movwf	pclath,c
 31323  00CEAE  50DE               	movf	postinc2,w,c
 31324  00CEB0  6EFD               	movwf	tosl,c
 31325  00CEB2  50DE               	movf	postinc2,w,c
 31326  00CEB4  6EFE               	movwf	tosh,c
 31327  00CEB6  50DE               	movf	postinc2,w,c
 31328  00CEB8  6EFF               	movwf	tosu,c
 31329  00CEBA  50FA               	movf	pclath,w,c
 31330  00CEBC  0012               	return		;indir
 31331  00CEBE                     u18139:
 31332  00CEBE  0900               	iorlw	0
 31333  00CEC0  B4D8               	btfsc	status,2,c
 31334  00CEC2  D016               	goto	l704
 31335                           
 31336                           ;usb_device_msd.c: 1213: {;usb_device_msd.c: 1217: msd_csw.bCSWStatus = 0x01;
 31337  00CEC4  0E01               	movlw	1
 31338  00CEC6  010D               	movlb	13	; () banked
 31339  00CEC8  6F8C               	movwf	140,b	;volatile
 31340                           
 31341                           ;usb_device_msd.c: 1220: gblSenseData[0].SenseKey=0x7;
 31342  00CECA  0101               	movlb	1	; () banked
 31343  00CECC  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 31344  00CECE  0BF0               	andlw	-16
 31345  00CED0  0907               	iorlw	7
 31346  00CED2  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 31347                           
 31348                           ;usb_device_msd.c: 1221: gblSenseData[0].ASC=0x27;
 31349  00CED4  0E27               	movlw	39
 31350  00CED6  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 31351                           
 31352                           ;usb_device_msd.c: 1222: gblSenseData[0].ASCQ=0x00;
 31353  00CED8  0E00               	movlw	0
 31354  00CEDA  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 31355                           
 31356                           ; BSR set to: 1
 31357                           ;usb_device_msd.c: 1226: USBStallEndpoint(2u, 0);
 31358  00CEDC  0E00               	movlw	0
 31359  00CEDE  0100               	movlb	0	; () banked
 31360  00CEE0  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 31361  00CEE2  0E02               	movlw	2
 31362  00CEE4  EC65  F081         	call	_USBStallEndpoint
 31363                           
 31364                           ;usb_device_msd.c: 1227: MSDWriteState = 0x00;
 31365  00CEE8  0E00               	movlw	0
 31366  00CEEA  6E21               	movwf	_MSDWriteState,c
 31367                           
 31368                           ;usb_device_msd.c: 1228: return MSDWriteState;
 31369  00CEEC  5021               	movf	_MSDWriteState,w,c
 31370  00CEEE  0012               	return	
 31371  00CEF0                     l704:
 31372                           
 31373                           ;usb_device_msd.c: 1229: };usb_device_msd.c: 1231: MSD_State = 0x01;
 31374  00CEF0  0E01               	movlw	1
 31375  00CEF2  0100               	movlb	0	; () banked
 31376  00CEF4  6FFA               	movwf	_MSD_State& (0+255),b
 31377  00CEF6                     
 31378                           ;usb_device_msd.c: 1235: if(TransferLength.Val == 0)
 31379                           
 31380                           ; BSR set to: 0
 31381  00CEF6  0100               	movlb	0	; () banked
 31382  00CEF8  51EB               	movf	_TransferLength& (0+255),w,b
 31383  00CEFA  11EC               	iorwf	(_TransferLength+1)& (0+255),w,b
 31384  00CEFC  B4D8               	btfsc	status,2,c
 31385  00CEFE  D0FC               	goto	l18680
 31386                           
 31387                           ; BSR set to: 0
 31388                           ;usb_device_msd.c: 1239: };usb_device_msd.c: 1241: MSDWriteState = 0x03;
 31389                           
 31390                           ; BSR set to: 0
 31391                           
 31392                           ;usb_device_msd.c: 1238: break;
 31393                           
 31394                           ; BSR set to: 0
 31395                           ;usb_device_msd.c: 1236: {;usb_device_msd.c: 1237: MSDWriteState = 0x00;
 31396  00CF00  0E03               	movlw	3
 31397  00CF02  6E21               	movwf	_MSDWriteState,c
 31398                           
 31399                           ; BSR set to: 0
 31400                           ;usb_device_msd.c: 1242: ptrNextData=(uint8_t *)&msd_buffer[0];
 31401  00CF04  0E00               	movlw	0
 31402  00CF06  0101               	movlb	1	; () banked
 31403  00CF08  6F6C               	movwf	_ptrNextData& (0+255),b
 31404  00CF0A  0E06               	movlw	6
 31405  00CF0C  6F6D               	movwf	(_ptrNextData+1)& (0+255),b
 31406                           
 31407                           ; BSR set to: 1
 31408                           ;usb_device_msd.c: 1244: msd_csw.dCSWDataResidue=0x0200;
 31409  00CF0E  0E00               	movlw	0
 31410  00CF10  010D               	movlb	13	; () banked
 31411  00CF12  6F88               	movwf	136,b	;volatile
 31412  00CF14  0E02               	movlw	2
 31413  00CF16  6F89               	movwf	137,b	;volatile
 31414  00CF18  0E00               	movlw	0
 31415  00CF1A  6F8A               	movwf	138,b	;volatile
 31416  00CF1C  0E00               	movlw	0
 31417  00CF1E  6F8B               	movwf	139,b	;volatile
 31418  00CF20                     l708:
 31419                           
 31420                           ;usb_device_msd.c: 1248: {;usb_device_msd.c: 1250: if(msd_csw.dCSWDataResidue>0)
 31421  00CF20  010D               	movlb	13	; () banked
 31422  00CF22  5188               	movf	136,w,b	;volatile
 31423  00CF24  1189               	iorwf	137,w,b	;volatile
 31424  00CF26  118A               	iorwf	138,w,b	;volatile
 31425  00CF28  118B               	iorwf	139,w,b	;volatile
 31426  00CF2A  B4D8               	btfsc	status,2,c
 31427  00CF2C  D01D               	goto	l709
 31428                           
 31429                           ; BSR set to: 13
 31430                           ;usb_device_msd.c: 1251: {;usb_device_msd.c: 1252: if(((USBMSDOutHandle != 0x0000) && ((
      +                          *(volatile uint8_t*)USBMSDOutHandle & 0x80) != 0x00)) == 1)
 31431  00CF2E  0100               	movlb	0	; () banked
 31432  00CF30  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 31433  00CF32  11F0               	iorwf	(_USBMSDOutHandle+1)& (0+255),w,b
 31434  00CF34  B4D8               	btfsc	status,2,c
 31435  00CF36  D006               	goto	l710
 31436                           
 31437                           ; BSR set to: 0
 31438  00CF38  C0EF  FFD9         	movff	_USBMSDOutHandle,fsr2l
 31439  00CF3C  C0F0  FFDA         	movff	_USBMSDOutHandle+1,fsr2h
 31440  00CF40  BEDF               	btfsc	indf2,7,c
 31441  00CF42  D0EE               	goto	l703
 31442  00CF44                     l710:
 31443                           
 31444                           ; BSR set to: 0
 31445                           ;usb_device_msd.c: 1255: };usb_device_msd.c: 1257: USBMSDOutHandle = USBTransferOnePacke
      +                          t(2u,0,ptrNextData,64u);
 31446                           
 31447                           ; BSR set to: 0
 31448  00CF44  0E00               	movlw	0
 31449  00CF46  6F60               	movwf	USBTransferOnePacket@dir& (0+255),b
 31450  00CF48  C16C  F061         	movff	_ptrNextData,USBTransferOnePacket@data
 31451  00CF4C  C16D  F062         	movff	_ptrNextData+1,USBTransferOnePacket@data+1
 31452  00CF50  0E40               	movlw	64
 31453  00CF52  6F63               	movwf	USBTransferOnePacket@len& (0+255),b
 31454  00CF54  0E02               	movlw	2
 31455  00CF56  EC6F  F082         	call	_USBTransferOnePacket
 31456  00CF5A  C060  F0EF         	movff	?_USBTransferOnePacket,_USBMSDOutHandle
 31457  00CF5E  C061  F0F0         	movff	?_USBTransferOnePacket+1,_USBMSDOutHandle+1
 31458                           
 31459                           ;usb_device_msd.c: 1258: MSDWriteState = 0x04;
 31460  00CF62  0E04               	movlw	4
 31461  00CF64  6E21               	movwf	_MSDWriteState,c
 31462                           
 31463                           ;usb_device_msd.c: 1260: }
 31464  00CF66  D023               	goto	l711
 31465  00CF68                     l709:
 31466                           
 31467                           ;usb_device_msd.c: 1261: else;usb_device_msd.c: 1262: {;usb_device_msd.c: 1266: if(LUN[0
      +                          ].WriteProtectState(LUN[0].mediaParameters))
 31468  00CF68  C1D6  F060         	movff	_LUN+21,ExternalFlash_WriteProtectStateGet@config
 31469  00CF6C  C1D7  F061         	movff	_LUN+22,ExternalFlash_WriteProtectStateGet@config+1
 31470  00CF70  EE21  F0D0         	lfsr	2,_LUN+15
 31471  00CF74  D801               	call	u18198
 31472  00CF76  D00A               	goto	u18199
 31473  00CF78                     u18198:
 31474  00CF78  0005               	push	
 31475  00CF7A  6EFA               	movwf	pclath,c
 31476  00CF7C  50DE               	movf	postinc2,w,c
 31477  00CF7E  6EFD               	movwf	tosl,c
 31478  00CF80  50DE               	movf	postinc2,w,c
 31479  00CF82  6EFE               	movwf	tosh,c
 31480  00CF84  50DE               	movf	postinc2,w,c
 31481  00CF86  6EFF               	movwf	tosu,c
 31482  00CF88  50FA               	movf	pclath,w,c
 31483  00CF8A  0012               	return		;indir
 31484  00CF8C                     u18199:
 31485  00CF8C  0900               	iorlw	0
 31486  00CF8E  B4D8               	btfsc	status,2,c
 31487  00CF90  D00C               	goto	l712
 31488                           
 31489                           ;usb_device_msd.c: 1267: {;usb_device_msd.c: 1271: msd_csw.bCSWStatus=0x01;
 31490  00CF92  0E01               	movlw	1
 31491  00CF94  010D               	movlb	13	; () banked
 31492  00CF96  6F8C               	movwf	140,b	;volatile
 31493                           
 31494                           ;usb_device_msd.c: 1274: gblSenseData[0].SenseKey=0x2;
 31495  00CF98  0101               	movlb	1	; () banked
 31496  00CF9A  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 31497  00CF9C  0BF0               	andlw	-16
 31498  00CF9E  0902               	iorlw	2
 31499  00CFA0  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 31500                           
 31501                           ;usb_device_msd.c: 1275: gblSenseData[0].ASC=0x27;
 31502  00CFA2  0E27               	movlw	39
 31503  00CFA4  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 31504                           
 31505                           ;usb_device_msd.c: 1276: gblSenseData[0].ASCQ=0x00;
 31506  00CFA6  0E00               	movlw	0
 31507  00CFA8  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 31508  00CFAA                     l712:
 31509                           
 31510                           ;usb_device_msd.c: 1277: };usb_device_msd.c: 1279: MSDWriteState = 0x02;
 31511  00CFAA  0E02               	movlw	2
 31512  00CFAC  D0A6               	goto	L53
 31513  00CFAE                     l711:
 31514                           
 31515                           ;usb_device_msd.c: 1285: if(((USBMSDOutHandle != 0x0000) && ((*(volatile uint8_t*)USBMSD
      +                          OutHandle & 0x80) != 0x00)) == 1)
 31516                           
 31517                           ;usb_device_msd.c: 1281: };usb_device_msd.c: 1282: };usb_device_msd.c: 1284: case 0x04:
 31518  00CFAE  0100               	movlb	0	; () banked
 31519  00CFB0  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 31520  00CFB2  11F0               	iorwf	(_USBMSDOutHandle+1)& (0+255),w,b
 31521  00CFB4  B4D8               	btfsc	status,2,c
 31522  00CFB6  D006               	goto	l714
 31523                           
 31524                           ; BSR set to: 0
 31525  00CFB8  C0EF  FFD9         	movff	_USBMSDOutHandle,fsr2l
 31526  00CFBC  C0F0  FFDA         	movff	_USBMSDOutHandle+1,fsr2h
 31527  00CFC0  BEDF               	btfsc	indf2,7,c
 31528  00CFC2  D0AE               	goto	l703
 31529  00CFC4                     l714:
 31530                           
 31531                           ; BSR set to: 0
 31532                           ;usb_device_msd.c: 1288: };usb_device_msd.c: 1290: gblCBW.dCBWDataTransferLength-=(((vol
      +                          atile BDT_ENTRY*)USBMSDOutHandle)->CNT);
 31533                           
 31534                           ; BSR set to: 0
 31535  00CFC4  EE20 F001          	lfsr	2,1
 31536  00CFC8  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 31537  00CFCA  26D9               	addwf	fsr2l,f,c
 31538  00CFCC  51F0               	movf	(_USBMSDOutHandle+1)& (0+255),w,b
 31539  00CFCE  22DA               	addwfc	fsr2h,f,c
 31540  00CFD0  50DF               	movf	indf2,w,c
 31541  00CFD2  6F8F               	movwf	??_MSDWriteHandler& (0+255),b
 31542  00CFD4  C08F  F090         	movff	??_MSDWriteHandler,??_MSDWriteHandler+1
 31543  00CFD8  6B91               	clrf	(??_MSDWriteHandler+2)& (0+255),b
 31544  00CFDA  6B92               	clrf	(??_MSDWriteHandler+3)& (0+255),b
 31545  00CFDC  6B93               	clrf	(??_MSDWriteHandler+4)& (0+255),b
 31546  00CFDE  5190               	movf	(??_MSDWriteHandler+1)& (0+255),w,b
 31547  00CFE0  0101               	movlb	1	; () banked
 31548  00CFE2  5F08               	subwf	(_gblCBW+8)& (0+255),f,b
 31549  00CFE4  0100               	movlb	0	; () banked
 31550  00CFE6  5191               	movf	(??_MSDWriteHandler+2)& (0+255),w,b
 31551  00CFE8  0101               	movlb	1	; () banked
 31552  00CFEA  5B09               	subwfb	(_gblCBW+9)& (0+255),f,b
 31553  00CFEC  0100               	movlb	0	; () banked
 31554  00CFEE  5192               	movf	(??_MSDWriteHandler+3)& (0+255),w,b
 31555  00CFF0  0101               	movlb	1	; () banked
 31556  00CFF2  5B0A               	subwfb	(_gblCBW+10)& (0+255),f,b
 31557  00CFF4  0100               	movlb	0	; () banked
 31558  00CFF6  5193               	movf	(??_MSDWriteHandler+4)& (0+255),w,b
 31559  00CFF8  0101               	movlb	1	; () banked
 31560  00CFFA  5B0B               	subwfb	(_gblCBW+11)& (0+255),f,b
 31561                           
 31562                           ;usb_device_msd.c: 1291: msd_csw.dCSWDataResidue-=(((volatile BDT_ENTRY*)USBMSDOutHandle
      +                          )->CNT);
 31563  00CFFC  0100               	movlb	0	; () banked
 31564  00CFFE  EE20 F001          	lfsr	2,1
 31565  00D002  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 31566  00D004  26D9               	addwf	fsr2l,f,c
 31567  00D006  51F0               	movf	(_USBMSDOutHandle+1)& (0+255),w,b
 31568  00D008  22DA               	addwfc	fsr2h,f,c
 31569  00D00A  50DF               	movf	indf2,w,c
 31570  00D00C  6F8F               	movwf	??_MSDWriteHandler& (0+255),b
 31571  00D00E  C08F  F090         	movff	??_MSDWriteHandler,??_MSDWriteHandler+1
 31572  00D012  6B91               	clrf	(??_MSDWriteHandler+2)& (0+255),b
 31573  00D014  6B92               	clrf	(??_MSDWriteHandler+3)& (0+255),b
 31574  00D016  6B93               	clrf	(??_MSDWriteHandler+4)& (0+255),b
 31575  00D018  5190               	movf	(??_MSDWriteHandler+1)& (0+255),w,b
 31576  00D01A  010D               	movlb	13	; () banked
 31577  00D01C  5F88               	subwf	136,f,b	;volatile
 31578  00D01E  0100               	movlb	0	; () banked
 31579  00D020  5191               	movf	(??_MSDWriteHandler+2)& (0+255),w,b
 31580  00D022  010D               	movlb	13	; () banked
 31581  00D024  5B89               	subwfb	137,f,b	;volatile
 31582  00D026  0100               	movlb	0	; () banked
 31583  00D028  5192               	movf	(??_MSDWriteHandler+3)& (0+255),w,b
 31584  00D02A  010D               	movlb	13	; () banked
 31585  00D02C  5B8A               	subwfb	138,f,b	;volatile
 31586  00D02E  0100               	movlb	0	; () banked
 31587  00D030  5193               	movf	(??_MSDWriteHandler+4)& (0+255),w,b
 31588  00D032  010D               	movlb	13	; () banked
 31589  00D034  5B8B               	subwfb	139,f,b	;volatile
 31590                           
 31591                           ; BSR set to: 13
 31592                           ;usb_device_msd.c: 1292: ptrNextData += 64u;
 31593  00D036  0E40               	movlw	64
 31594  00D038  0101               	movlb	1	; () banked
 31595  00D03A  276C               	addwf	_ptrNextData& (0+255),f,b
 31596  00D03C  0E00               	movlw	0
 31597  00D03E  236D               	addwfc	(_ptrNextData+1)& (0+255),f,b
 31598                           
 31599                           ; BSR set to: 1
 31600                           ;usb_device_msd.c: 1294: MSDWriteState = 0x03;
 31601  00D040  0E03               	movlw	3
 31602  00D042  D05B               	goto	L53
 31603  00D044                     
 31604                           ;usb_device_msd.c: 1298: {;usb_device_msd.c: 1305: if(msd_csw.bCSWStatus == 0x00)
 31605                           
 31606                           ; BSR set to: 1
 31607  00D044  010D               	movlb	13	; () banked
 31608  00D046  518C               	movf	140,w,b	;volatile
 31609  00D048  A4D8               	btfss	status,2,c
 31610  00D04A  D040               	goto	l719
 31611                           
 31612                           ; BSR set to: 13
 31613                           ;usb_device_msd.c: 1306: {;usb_device_msd.c: 1307: if(LUN[0].SectorWrite(LUN[0].mediaPar
      +                          ameters, LBA.Val, (uint8_t*)&msd_buffer[0], (LBA.Val==0)?1:0) != 1)
 31614  00D04C  C1D6  F084         	movff	_LUN+21,ExternalFlash_SectorWrite@config
 31615  00D050  C1D7  F085         	movff	_LUN+22,ExternalFlash_SectorWrite@config+1
 31616  00D054  C14E  F086         	movff	_LBA,ExternalFlash_SectorWrite@sector_addr
 31617  00D058  C14F  F087         	movff	_LBA+1,ExternalFlash_SectorWrite@sector_addr+1
 31618  00D05C  C150  F088         	movff	_LBA+2,ExternalFlash_SectorWrite@sector_addr+2
 31619  00D060  C151  F089         	movff	_LBA+3,ExternalFlash_SectorWrite@sector_addr+3
 31620  00D064  0E00               	movlw	0
 31621  00D066  0100               	movlb	0	; () banked
 31622  00D068  6F8A               	movwf	ExternalFlash_SectorWrite@buffer& (0+255),b
 31623  00D06A  0E06               	movlw	6
 31624  00D06C  6F8B               	movwf	(ExternalFlash_SectorWrite@buffer+1)& (0+255),b
 31625  00D06E  0101               	movlb	1	; () banked
 31626  00D070  514E               	movf	_LBA& (0+255),w,b
 31627  00D072  114F               	iorwf	(_LBA+1)& (0+255),w,b
 31628  00D074  1150               	iorwf	(_LBA+2)& (0+255),w,b
 31629  00D076  1151               	iorwf	(_LBA+3)& (0+255),w,b
 31630  00D078  A4D8               	btfss	status,2,c
 31631  00D07A  D002               	goto	u18240
 31632  00D07C  0E01               	movlw	1
 31633  00D07E  D001               	goto	u18250
 31634  00D080                     u18240:
 31635  00D080  0E00               	movlw	0
 31636  00D082                     u18250:
 31637  00D082  0100               	movlb	0	; () banked
 31638  00D084  6F8C               	movwf	ExternalFlash_SectorWrite@allowWriteToZero& (0+255),b
 31639  00D086  EE21  F0D3         	lfsr	2,_LUN+18
 31640  00D08A  D801               	call	u18268
 31641  00D08C  D00A               	goto	u18269
 31642  00D08E                     u18268:
 31643  00D08E  0005               	push	
 31644  00D090  6EFA               	movwf	pclath,c
 31645  00D092  50DE               	movf	postinc2,w,c
 31646  00D094  6EFD               	movwf	tosl,c
 31647  00D096  50DE               	movf	postinc2,w,c
 31648  00D098  6EFE               	movwf	tosh,c
 31649  00D09A  50DE               	movf	postinc2,w,c
 31650  00D09C  6EFF               	movwf	tosu,c
 31651  00D09E  50FA               	movf	pclath,w,c
 31652  00D0A0  0012               	return		;indir
 31653  00D0A2                     u18269:
 31654  00D0A2  06E8               	decf	wreg,f,c
 31655  00D0A4  B4D8               	btfsc	status,2,c
 31656  00D0A6  D012               	goto	l719
 31657                           
 31658                           ;usb_device_msd.c: 1308: {;usb_device_msd.c: 1311: if(MSDRetryAttempt < (uint8_t)100u)
 31659  00D0A8  0E64               	movlw	100
 31660  00D0AA  0100               	movlb	0	; () banked
 31661  00D0AC  61F7               	cpfslt	_MSDRetryAttempt& (0+255),b
 31662  00D0AE  D002               	goto	l718
 31663                           
 31664                           ; BSR set to: 0
 31665                           ;usb_device_msd.c: 1312: {;usb_device_msd.c: 1313: MSDRetryAttempt++;
 31666  00D0B0  2BF7               	incf	_MSDRetryAttempt& (0+255),f,b
 31667                           
 31668                           ;usb_device_msd.c: 1314: break;
 31669  00D0B2  D036               	goto	l703
 31670  00D0B4                     l718:
 31671                           
 31672                           ; BSR set to: 0
 31673                           ;usb_device_msd.c: 1316: else;usb_device_msd.c: 1317: {;usb_device_msd.c: 1320: msd_csw.
      +                          bCSWStatus = 0x01;
 31674                           
 31675                           ; BSR set to: 0
 31676  00D0B4  0E01               	movlw	1
 31677  00D0B6  010D               	movlb	13	; () banked
 31678  00D0B8  6F8C               	movwf	140,b	;volatile
 31679                           
 31680                           ;usb_device_msd.c: 1323: gblSenseData[0].SenseKey=0x3;
 31681  00D0BA  0101               	movlb	1	; () banked
 31682  00D0BC  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 31683  00D0BE  0BF0               	andlw	-16
 31684  00D0C0  0903               	iorlw	3
 31685  00D0C2  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 31686                           
 31687                           ;usb_device_msd.c: 1324: gblSenseData[0].ASC=0x00;
 31688  00D0C4  0E00               	movlw	0
 31689  00D0C6  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 31690                           
 31691                           ;usb_device_msd.c: 1325: gblSenseData[0].ASCQ=0x00;
 31692  00D0C8  0E00               	movlw	0
 31693  00D0CA  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 31694  00D0CC                     l719:
 31695                           
 31696                           ;usb_device_msd.c: 1326: };usb_device_msd.c: 1327: };usb_device_msd.c: 1328: };usb_devic
      +                          e_msd.c: 1332: LBA.Val++;
 31697                           
 31698                           ; BSR set to: 1
 31699                           
 31700                           ; BSR set to: 1
 31701                           
 31702                           ; BSR set to: 1
 31703  00D0CC  0E01               	movlw	1
 31704  00D0CE  0101               	movlb	1	; () banked
 31705  00D0D0  274E               	addwf	_LBA& (0+255),f,b
 31706  00D0D2  0E00               	movlw	0
 31707  00D0D4  234F               	addwfc	(_LBA+1)& (0+255),f,b
 31708  00D0D6  2350               	addwfc	(_LBA+2)& (0+255),f,b
 31709  00D0D8  2351               	addwfc	(_LBA+3)& (0+255),f,b
 31710                           
 31711                           ; BSR set to: 1
 31712                           ;usb_device_msd.c: 1333: TransferLength.Val--;
 31713  00D0DA  0100               	movlb	0	; () banked
 31714  00D0DC  07EB               	decf	_TransferLength& (0+255),f,b
 31715  00D0DE  A0D8               	btfss	status,0,c
 31716  00D0E0  07EC               	decf	(_TransferLength+1)& (0+255),f,b
 31717                           
 31718                           ; BSR set to: 0
 31719                           ;usb_device_msd.c: 1334: MSDWriteState = 0x01;
 31720  00D0E2  0E01               	movlw	1
 31721  00D0E4  D00A               	goto	L53
 31722  00D0E6                     
 31723                           ;usb_device_msd.c: 1341: msd_csw.bCSWStatus=0x02;
 31724                           
 31725                           ; BSR set to: 0
 31726  00D0E6  0E02               	movlw	2
 31727  00D0E8  010D               	movlb	13	; () banked
 31728  00D0EA  6F8C               	movwf	140,b	;volatile
 31729                           
 31730                           ; BSR set to: 13
 31731                           ;usb_device_msd.c: 1342: USBStallEndpoint(2u, 0);
 31732  00D0EC  0E00               	movlw	0
 31733  00D0EE  0100               	movlb	0	; () banked
 31734  00D0F0  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 31735  00D0F2  0E02               	movlw	2
 31736  00D0F4  EC65  F081         	call	_USBStallEndpoint
 31737  00D0F8                     l18680:
 31738                           
 31739                           ;usb_device_msd.c: 1343: MSDWriteState = 0x00;
 31740  00D0F8  0E00               	movlw	0
 31741  00D0FA                     L53:
 31742  00D0FA  6E21               	movwf	_MSDWriteState,c
 31743                           
 31744                           ;usb_device_msd.c: 1345: }
 31745                           
 31746                           ;usb_device_msd.c: 1344: break;
 31747  00D0FC  D011               	goto	l703
 31748  00D0FE                     l700:
 31749  00D0FE  5021               	movf	_MSDWriteState,w,c
 31750                           
 31751                           ; Switch size 1, requested type "space"
 31752                           ; Number of cases is 5, Range of values is 0 to 4
 31753                           ; switch strategies available:
 31754                           ; Name         Instructions Cycles
 31755                           ; simple_byte           16     9 (average)
 31756                           ;	Chosen strategy is simple_byte
 31757  00D100  0A00               	xorlw	0	; case 0
 31758  00D102  B4D8               	btfsc	status,2,c
 31759  00D104  D6A2               	goto	l701
 31760  00D106  0A01               	xorlw	1	; case 1
 31761  00D108  B4D8               	btfsc	status,2,c
 31762  00D10A  D6F5               	goto	l706
 31763  00D10C  0A03               	xorlw	3	; case 2
 31764  00D10E  B4D8               	btfsc	status,2,c
 31765  00D110  D799               	goto	l715
 31766  00D112  0A01               	xorlw	1	; case 3
 31767  00D114  B4D8               	btfsc	status,2,c
 31768  00D116  D704               	goto	l708
 31769  00D118  0A07               	xorlw	7	; case 4
 31770  00D11A  B4D8               	btfsc	status,2,c
 31771  00D11C  D748               	goto	l711
 31772  00D11E  D7E3               	goto	l720
 31773  00D120                     l703:
 31774                           
 31775                           ;usb_device_msd.c: 1347: return MSDWriteState;
 31776  00D120  5021               	movf	_MSDWriteState,w,c
 31777  00D122  0012               	return	
 31778  00D124                     __end_of_MSDWriteHandler:
 31779                           	opt stack 0
 31780                           tosu	equ	0xFFF
 31781                           tosh	equ	0xFFE
 31782                           tosl	equ	0xFFD
 31783                           pclath	equ	0xFFA
 31784                           tblptru	equ	0xFF8
 31785                           tblptrh	equ	0xFF7
 31786                           tblptrl	equ	0xFF6
 31787                           tablat	equ	0xFF5
 31788                           prodh	equ	0xFF4
 31789                           prodl	equ	0xFF3
 31790                           intcon	equ	0xFF2
 31791                           postinc0	equ	0xFEE
 31792                           wreg	equ	0xFE8
 31793                           indf1	equ	0xFE7
 31794                           postinc1	equ	0xFE6
 31795                           postdec1	equ	0xFE5
 31796                           plusw1	equ	0xFE3
 31797                           fsr1h	equ	0xFE2
 31798                           fsr1l	equ	0xFE1
 31799                           indf2	equ	0xFDF
 31800                           postinc2	equ	0xFDE
 31801                           postdec2	equ	0xFDD
 31802                           plusw2	equ	0xFDB
 31803                           fsr2h	equ	0xFDA
 31804                           fsr2l	equ	0xFD9
 31805                           status	equ	0xFD8
 31806                           
 31807 ;; *************** function _ExternalFlash_WriteProtectStateGet *****************
 31808 ;; Defined at:
 31809 ;;		line 34 in file "external_flash.c"
 31810 ;; Parameters:    Size  Location     Type
 31811 ;;  config          2    0[BANK0 ] PTR void 
 31812 ;;		 -> NULL(0), 
 31813 ;; Auto vars:     Size  Location     Type
 31814 ;;		None
 31815 ;; Return value:  Size  Location     Type
 31816 ;;                  1    wreg      unsigned char 
 31817 ;; Registers used:
 31818 ;;		wreg
 31819 ;; Tracked objects:
 31820 ;;		On entry : 0/0
 31821 ;;		On exit  : 0/0
 31822 ;;		Unchanged: 0/0
 31823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 31824 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31828 ;;Total ram usage:        2 bytes
 31829 ;; Hardware stack levels used:    1
 31830 ;; Hardware stack levels required when called:   10
 31831 ;; This function calls:
 31832 ;;		Nothing
 31833 ;; This function is called by:
 31834 ;;		_MSDWriteHandler
 31835 ;;		_MSDProcessCommandMediaPresent
 31836 ;; This function uses a non-reentrant model
 31837 ;;
 31838                           
 31839                           	psect	text115
 31840  014354                     __ptext115:
 31841                           	opt stack 0
 31842  014354                     _ExternalFlash_WriteProtectStateGet:
 31843                           	opt stack 15
 31844                           
 31845                           ;external_flash.c: 37: return 0;
 31846                           
 31847                           ;incstack = 0
 31848  014354  0E00               	movlw	0
 31849  014356  0012               	return	
 31850  014358                     __end_of_ExternalFlash_WriteProtectStateGet:
 31851                           	opt stack 0
 31852                           tosu	equ	0xFFF
 31853                           tosh	equ	0xFFE
 31854                           tosl	equ	0xFFD
 31855                           pclath	equ	0xFFA
 31856                           tblptru	equ	0xFF8
 31857                           tblptrh	equ	0xFF7
 31858                           tblptrl	equ	0xFF6
 31859                           tablat	equ	0xFF5
 31860                           prodh	equ	0xFF4
 31861                           prodl	equ	0xFF3
 31862                           intcon	equ	0xFF2
 31863                           postinc0	equ	0xFEE
 31864                           wreg	equ	0xFE8
 31865                           indf1	equ	0xFE7
 31866                           postinc1	equ	0xFE6
 31867                           postdec1	equ	0xFE5
 31868                           plusw1	equ	0xFE3
 31869                           fsr1h	equ	0xFE2
 31870                           fsr1l	equ	0xFE1
 31871                           indf2	equ	0xFDF
 31872                           postinc2	equ	0xFDE
 31873                           postdec2	equ	0xFDD
 31874                           plusw2	equ	0xFDB
 31875                           fsr2h	equ	0xFDA
 31876                           fsr2l	equ	0xFD9
 31877                           status	equ	0xFD8
 31878                           
 31879 ;; *************** function _ExternalFlash_SectorWrite *****************
 31880 ;; Defined at:
 31881 ;;		line 56 in file "external_flash.c"
 31882 ;; Parameters:    Size  Location     Type
 31883 ;;  config          2   36[BANK0 ] PTR void 
 31884 ;;		 -> NULL(0), 
 31885 ;;  sector_addr     4   38[BANK0 ] unsigned long 
 31886 ;;  buffer          2   42[BANK0 ] PTR unsigned char 
 31887 ;;		 -> msd_buffer(512), 
 31888 ;;  allowWriteTo    1   44[BANK0 ] unsigned char 
 31889 ;; Auto vars:     Size  Location     Type
 31890 ;;  page            2   45[BANK0 ] unsigned int 
 31891 ;; Return value:  Size  Location     Type
 31892 ;;                  1    wreg      unsigned char 
 31893 ;; Registers used:
 31894 ;;		wreg, status,2, status,0, cstack
 31895 ;; Tracked objects:
 31896 ;;		On entry : 0/0
 31897 ;;		On exit  : 0/0
 31898 ;;		Unchanged: 0/0
 31899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 31900 ;;      Params:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31901 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31903 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 31904 ;;Total ram usage:       11 bytes
 31905 ;; Hardware stack levels used:    1
 31906 ;; Hardware stack levels required when called:   15
 31907 ;; This function calls:
 31908 ;;		_flash_sector_write
 31909 ;; This function is called by:
 31910 ;;		_MSDWriteHandler
 31911 ;; This function uses a non-reentrant model
 31912 ;;
 31913                           
 31914                           	psect	text116
 31915  013D8A                     __ptext116:
 31916                           	opt stack 0
 31917  013D8A                     _ExternalFlash_SectorWrite:
 31918                           	opt stack 10
 31919                           
 31920                           ;external_flash.c: 58: uint16_t page = (uint16_t) sector_addr;
 31921                           
 31922                           ;incstack = 0
 31923  013D8A  C086  F08D         	movff	ExternalFlash_SectorWrite@sector_addr,ExternalFlash_SectorWrite@page
 31924  013D8E  C087  F08E         	movff	ExternalFlash_SectorWrite@sector_addr+1,ExternalFlash_SectorWrite@page+1
 31925                           
 31926                           ;external_flash.c: 61: if(sector_addr >= 8192)
 31927  013D92  0100               	movlb	0	; () banked
 31928  013D94  5189               	movf	(ExternalFlash_SectorWrite@sector_addr+3)& (0+255),w,b
 31929  013D96  1188               	iorwf	(ExternalFlash_SectorWrite@sector_addr+2)& (0+255),w,b
 31930  013D98  E104               	bnz	u17970
 31931  013D9A  0E20               	movlw	32
 31932  013D9C  5D87               	subwf	(ExternalFlash_SectorWrite@sector_addr+1)& (0+255),w,b
 31933  013D9E  A0D8               	btfss	status,0,c
 31934  013DA0  D002               	goto	l1633
 31935  013DA2                     u17970:
 31936                           
 31937                           ; BSR set to: 0
 31938                           ;external_flash.c: 62: {;external_flash.c: 63: return 0;
 31939  013DA2  0E00               	movlw	0
 31940                           
 31941                           ; BSR set to: 0
 31942  013DA4  0012               	return	
 31943  013DA6                     l1633:
 31944                           
 31945                           ; BSR set to: 0
 31946                           ;external_flash.c: 64: };external_flash.c: 67: flash_sector_write(page, buffer);
 31947                           
 31948                           ; BSR set to: 0
 31949  013DA6  C08D  F07F         	movff	ExternalFlash_SectorWrite@page,flash_sector_write@page
 31950  013DAA  C08E  F080         	movff	ExternalFlash_SectorWrite@page+1,flash_sector_write@page+1
 31951  013DAE  C08A  F081         	movff	ExternalFlash_SectorWrite@buffer,flash_sector_write@data
 31952  013DB2  C08B  F082         	movff	ExternalFlash_SectorWrite@buffer+1,flash_sector_write@data+1
 31953  013DB6  ECFE  F09B         	call	_flash_sector_write	;wreg free
 31954                           
 31955                           ;external_flash.c: 69: return 1;
 31956  013DBA  0E01               	movlw	1
 31957  013DBC  0012               	return	
 31958  013DBE                     __end_of_ExternalFlash_SectorWrite:
 31959                           	opt stack 0
 31960                           tosu	equ	0xFFF
 31961                           tosh	equ	0xFFE
 31962                           tosl	equ	0xFFD
 31963                           pclath	equ	0xFFA
 31964                           tblptru	equ	0xFF8
 31965                           tblptrh	equ	0xFF7
 31966                           tblptrl	equ	0xFF6
 31967                           tablat	equ	0xFF5
 31968                           prodh	equ	0xFF4
 31969                           prodl	equ	0xFF3
 31970                           intcon	equ	0xFF2
 31971                           postinc0	equ	0xFEE
 31972                           wreg	equ	0xFE8
 31973                           indf1	equ	0xFE7
 31974                           postinc1	equ	0xFE6
 31975                           postdec1	equ	0xFE5
 31976                           plusw1	equ	0xFE3
 31977                           fsr1h	equ	0xFE2
 31978                           fsr1l	equ	0xFE1
 31979                           indf2	equ	0xFDF
 31980                           postinc2	equ	0xFDE
 31981                           postdec2	equ	0xFDD
 31982                           plusw2	equ	0xFDB
 31983                           fsr2h	equ	0xFDA
 31984                           fsr2l	equ	0xFD9
 31985                           status	equ	0xFD8
 31986                           
 31987 ;; *************** function _flash_sector_write *****************
 31988 ;; Defined at:
 31989 ;;		line 434 in file "flash.c"
 31990 ;; Parameters:    Size  Location     Type
 31991 ;;  page            2   31[BANK0 ] unsigned int 
 31992 ;;  data            2   33[BANK0 ] PTR unsigned char 
 31993 ;;		 -> buffer(512), msd_buffer(512), 
 31994 ;; Auto vars:     Size  Location     Type
 31995 ;;  match           1   35[BANK0 ] enum E6978
 31996 ;; Return value:  Size  Location     Type
 31997 ;;                  1    wreg      void 
 31998 ;; Registers used:
 31999 ;;		wreg, status,2, status,0, cstack
 32000 ;; Tracked objects:
 32001 ;;		On entry : 0/0
 32002 ;;		On exit  : 0/0
 32003 ;;		Unchanged: 0/0
 32004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 32005 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32008 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32009 ;;Total ram usage:        5 bytes
 32010 ;; Hardware stack levels used:    1
 32011 ;; Hardware stack levels required when called:   14
 32012 ;; This function calls:
 32013 ;;		__flash_compare_page_to_buffer
 32014 ;;		__flash_write_page_from_buffer
 32015 ;;		__flash_write_to_buffer
 32016 ;; This function is called by:
 32017 ;;		_ExternalFlash_SectorWrite
 32018 ;;		__make_cluster_chain
 32019 ;;		_fat_format
 32020 ;; This function uses a non-reentrant model
 32021 ;;
 32022                           
 32023                           	psect	text117
 32024  0137FC                     __ptext117:
 32025                           	opt stack 0
 32026  0137FC                     _flash_sector_write:
 32027                           	opt stack 13
 32028                           
 32029                           ;flash.c: 436: flashMatchResult_t match;;flash.c: 439: _flash_write_to_buffer(0, data, 5
      +                          12, FLASH_BUFFER_1);
 32030                           
 32031                           ;incstack = 0
 32032  0137FC  0E00               	movlw	0
 32033  0137FE  0100               	movlb	0	; () banked
 32034  013800  6F74               	movwf	(__flash_write_to_buffer@start+1)& (0+255),b
 32035  013802  0E00               	movlw	0
 32036  013804  6F73               	movwf	__flash_write_to_buffer@start& (0+255),b
 32037  013806  C081  F075         	movff	flash_sector_write@data,__flash_write_to_buffer@data
 32038  01380A  C082  F076         	movff	flash_sector_write@data+1,__flash_write_to_buffer@data+1
 32039  01380E  0E02               	movlw	2
 32040  013810  6F78               	movwf	(__flash_write_to_buffer@data_length+1)& (0+255),b
 32041  013812  0E00               	movlw	0
 32042  013814  6F77               	movwf	__flash_write_to_buffer@data_length& (0+255),b
 32043  013816  0E00               	movlw	0
 32044  013818  6F79               	movwf	__flash_write_to_buffer@buffer& (0+255),b
 32045  01381A  EC85  F09B         	call	__flash_write_to_buffer	;wreg free
 32046                           
 32047                           ;flash.c: 442: match = _flash_compare_page_to_buffer(page, FLASH_BUFFER_1);
 32048  01381E  C07F  F073         	movff	flash_sector_write@page,__flash_compare_page_to_buffer@page
 32049  013822  C080  F074         	movff	flash_sector_write@page+1,__flash_compare_page_to_buffer@page+1
 32050  013826  0E00               	movlw	0
 32051  013828  0100               	movlb	0	; () banked
 32052  01382A  6F75               	movwf	__flash_compare_page_to_buffer@buffer& (0+255),b
 32053  01382C  ECD0  F094         	call	__flash_compare_page_to_buffer	;wreg free
 32054  013830  0100               	movlb	0	; () banked
 32055  013832  6F83               	movwf	flash_sector_write@match& (0+255),b
 32056                           
 32057                           ; BSR set to: 0
 32058                           ;flash.c: 445: if(match==DATA_DOES_NOT_MATCH)
 32059  013834  0583               	decf	flash_sector_write@match& (0+255),w,b
 32060  013836  A4D8               	btfss	status,2,c
 32061  013838  0012               	return	
 32062                           
 32063                           ; BSR set to: 0
 32064                           ;flash.c: 446: {;flash.c: 447: _flash_write_page_from_buffer(page, FLASH_BUFFER_1);
 32065  01383A  C07F  F073         	movff	flash_sector_write@page,__flash_write_page_from_buffer@page
 32066  01383E  C080  F074         	movff	flash_sector_write@page+1,__flash_write_page_from_buffer@page+1
 32067  013842  0E00               	movlw	0
 32068  013844  6F75               	movwf	__flash_write_page_from_buffer@buffer& (0+255),b
 32069  013846  EC51  F099         	call	__flash_write_page_from_buffer	;wreg free
 32070  01384A  0012               	return	
 32071  01384C                     __end_of_flash_sector_write:
 32072                           	opt stack 0
 32073                           tosu	equ	0xFFF
 32074                           tosh	equ	0xFFE
 32075                           tosl	equ	0xFFD
 32076                           pclath	equ	0xFFA
 32077                           tblptru	equ	0xFF8
 32078                           tblptrh	equ	0xFF7
 32079                           tblptrl	equ	0xFF6
 32080                           tablat	equ	0xFF5
 32081                           prodh	equ	0xFF4
 32082                           prodl	equ	0xFF3
 32083                           intcon	equ	0xFF2
 32084                           postinc0	equ	0xFEE
 32085                           wreg	equ	0xFE8
 32086                           indf1	equ	0xFE7
 32087                           postinc1	equ	0xFE6
 32088                           postdec1	equ	0xFE5
 32089                           plusw1	equ	0xFE3
 32090                           fsr1h	equ	0xFE2
 32091                           fsr1l	equ	0xFE1
 32092                           indf2	equ	0xFDF
 32093                           postinc2	equ	0xFDE
 32094                           postdec2	equ	0xFDD
 32095                           plusw2	equ	0xFDB
 32096                           fsr2h	equ	0xFDA
 32097                           fsr2l	equ	0xFD9
 32098                           status	equ	0xFD8
 32099                           
 32100 ;; *************** function __flash_write_to_buffer *****************
 32101 ;; Defined at:
 32102 ;;		line 236 in file "flash.c"
 32103 ;; Parameters:    Size  Location     Type
 32104 ;;  start           2   19[BANK0 ] unsigned int 
 32105 ;;  data            2   21[BANK0 ] PTR unsigned char 
 32106 ;;		 -> ConfigFile_buffer(512), fat_resize_file@root(32), fat_rename_file@root(32), fat_create_file@root_entry(32), 
 32107 ;;		 -> _delete_root@deleted_value(1), buffer(512), msd_buffer(512), 
 32108 ;;  data_length     2   23[BANK0 ] unsigned int 
 32109 ;;  buffer          1   25[BANK0 ] enum E6974
 32110 ;; Auto vars:     Size  Location     Type
 32111 ;;  command         4   26[BANK0 ] unsigned char [4]
 32112 ;; Return value:  Size  Location     Type
 32113 ;;                  1    wreg      void 
 32114 ;; Registers used:
 32115 ;;		wreg, status,2, status,0, cstack
 32116 ;; Tracked objects:
 32117 ;;		On entry : 0/0
 32118 ;;		On exit  : 0/0
 32119 ;;		Unchanged: 0/0
 32120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 32121 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32122 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32124 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32125 ;;Total ram usage:       11 bytes
 32126 ;; Hardware stack levels used:    1
 32127 ;; Hardware stack levels required when called:   13
 32128 ;; This function calls:
 32129 ;;		__flash_is_busy
 32130 ;;		_spi_tx_tx
 32131 ;; This function is called by:
 32132 ;;		_flash_sector_write
 32133 ;;		_flash_partial_write
 32134 ;;		_flash_write_to_buffer
 32135 ;; This function uses a non-reentrant model
 32136 ;;
 32137                           
 32138                           	psect	text118
 32139  01370A                     __ptext118:
 32140                           	opt stack 0
 32141  01370A                     __flash_write_to_buffer:
 32142                           	opt stack 13
 32143                           
 32144                           ;flash.c: 238: uint8_t command[4];;flash.c: 241: while(_flash_is_busy());
 32145                           
 32146                           ;incstack = 0
 32147  01370A  ECB3  F0A0         	call	__flash_is_busy	;wreg free
 32148  01370E  0900               	iorlw	0
 32149  013710  A4D8               	btfss	status,2,c
 32150  013712  D7FB               	goto	__flash_write_to_buffer
 32151                           
 32152                           ;flash.c: 244: if(buffer==FLASH_BUFFER_1)
 32153  013714  0100               	movlb	0	; () banked
 32154  013716  5179               	movf	__flash_write_to_buffer@buffer& (0+255),w,b
 32155  013718  A4D8               	btfss	status,2,c
 32156  01371A  D002               	goto	l1519
 32157                           
 32158                           ; BSR set to: 0
 32159                           ;flash.c: 245: command[0] = 0x84;
 32160  01371C  0E84               	movlw	132
 32161  01371E  6F7A               	movwf	__flash_write_to_buffer@command& (0+255),b
 32162  013720                     l1519:
 32163                           
 32164                           ; BSR set to: 0
 32165                           ;flash.c: 246: if(buffer==FLASH_BUFFER_2)
 32166                           
 32167                           ; BSR set to: 0
 32168  013720  0579               	decf	__flash_write_to_buffer@buffer& (0+255),w,b
 32169  013722  A4D8               	btfss	status,2,c
 32170  013724  D002               	goto	l1520
 32171                           
 32172                           ; BSR set to: 0
 32173                           ;flash.c: 247: command[0] = 0x87;
 32174  013726  0E87               	movlw	135
 32175  013728  6F7A               	movwf	__flash_write_to_buffer@command& (0+255),b
 32176  01372A                     l1520:
 32177                           
 32178                           ; BSR set to: 0
 32179                           ;flash.c: 249: command[1] = 0x00;
 32180  01372A  0E00               	movlw	0
 32181  01372C  6F7B               	movwf	(__flash_write_to_buffer@command+1)& (0+255),b
 32182                           
 32183                           ;flash.c: 250: command[2] = ((unsigned char)(((start)>>8)&0xFF));
 32184  01372E  5174               	movf	(__flash_write_to_buffer@start+1)& (0+255),w,b
 32185  013730  6F7C               	movwf	(__flash_write_to_buffer@command+2)& (0+255),b
 32186                           
 32187                           ; BSR set to: 0
 32188                           ;flash.c: 251: command[3] = ((unsigned char)((start)&0xFF));
 32189  013732  C073  F07D         	movff	__flash_write_to_buffer@start,__flash_write_to_buffer@command+3
 32190                           
 32191                           ; BSR set to: 0
 32192                           ;flash.c: 254: spi_tx_tx(command, 4, data, data_length);
 32193  013736  0E7A               	movlw	low __flash_write_to_buffer@command
 32194  013738  6F60               	movwf	spi_tx_tx@command& (0+255),b
 32195  01373A  0E00               	movlw	high __flash_write_to_buffer@command
 32196  01373C  6F61               	movwf	(spi_tx_tx@command+1)& (0+255),b
 32197  01373E  0E00               	movlw	0
 32198  013740  6F63               	movwf	(spi_tx_tx@command_length+1)& (0+255),b
 32199  013742  0E04               	movlw	4
 32200  013744  6F62               	movwf	spi_tx_tx@command_length& (0+255),b
 32201  013746  C075  F064         	movff	__flash_write_to_buffer@data,spi_tx_tx@data
 32202  01374A  C076  F065         	movff	__flash_write_to_buffer@data+1,spi_tx_tx@data+1
 32203  01374E  C077  F066         	movff	__flash_write_to_buffer@data_length,spi_tx_tx@data_length
 32204  013752  C078  F067         	movff	__flash_write_to_buffer@data_length+1,spi_tx_tx@data_length+1
 32205  013756  EC3D  F093         	call	_spi_tx_tx	;wreg free
 32206  01375A  0012               	return		;funcret
 32207  01375C                     __end_of__flash_write_to_buffer:
 32208                           	opt stack 0
 32209                           tosu	equ	0xFFF
 32210                           tosh	equ	0xFFE
 32211                           tosl	equ	0xFFD
 32212                           pclath	equ	0xFFA
 32213                           tblptru	equ	0xFF8
 32214                           tblptrh	equ	0xFF7
 32215                           tblptrl	equ	0xFF6
 32216                           tablat	equ	0xFF5
 32217                           prodh	equ	0xFF4
 32218                           prodl	equ	0xFF3
 32219                           intcon	equ	0xFF2
 32220                           postinc0	equ	0xFEE
 32221                           wreg	equ	0xFE8
 32222                           indf1	equ	0xFE7
 32223                           postinc1	equ	0xFE6
 32224                           postdec1	equ	0xFE5
 32225                           plusw1	equ	0xFE3
 32226                           fsr1h	equ	0xFE2
 32227                           fsr1l	equ	0xFE1
 32228                           indf2	equ	0xFDF
 32229                           postinc2	equ	0xFDE
 32230                           postdec2	equ	0xFDD
 32231                           plusw2	equ	0xFDB
 32232                           fsr2h	equ	0xFDA
 32233                           fsr2l	equ	0xFD9
 32234                           status	equ	0xFD8
 32235                           
 32236 ;; *************** function _spi_tx_tx *****************
 32237 ;; Defined at:
 32238 ;;		line 146 in file "spi.c"
 32239 ;; Parameters:    Size  Location     Type
 32240 ;;  command         2    0[BANK0 ] PTR unsigned char 
 32241 ;;		 -> _flash_write_to_buffer@command(4), 
 32242 ;;  command_leng    2    2[BANK0 ] unsigned int 
 32243 ;;  data            2    4[BANK0 ] PTR unsigned char 
 32244 ;;		 -> ConfigFile_buffer(512), fat_resize_file@root(32), fat_rename_file@root(32), fat_create_file@root_entry(32), 
 32245 ;;		 -> _delete_root@deleted_value(1), buffer(512), msd_buffer(512), 
 32246 ;;  data_length     2    6[BANK0 ] unsigned int 
 32247 ;; Auto vars:     Size  Location     Type
 32248 ;;		None
 32249 ;; Return value:  Size  Location     Type
 32250 ;;                  1    wreg      void 
 32251 ;; Registers used:
 32252 ;;		wreg, status,2, status,0
 32253 ;; Tracked objects:
 32254 ;;		On entry : 0/0
 32255 ;;		On exit  : 0/0
 32256 ;;		Unchanged: 0/0
 32257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 32258 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32260 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32261 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32262 ;;Total ram usage:       12 bytes
 32263 ;; Hardware stack levels used:    1
 32264 ;; Hardware stack levels required when called:   10
 32265 ;; This function calls:
 32266 ;;		Nothing
 32267 ;; This function is called by:
 32268 ;;		__flash_write_to_buffer
 32269 ;; This function uses a non-reentrant model
 32270 ;;
 32271                           
 32272                           	psect	text119
 32273  01267A                     __ptext119:
 32274                           	opt stack 0
 32275  01267A                     _spi_tx_tx:
 32276                           	opt stack 15
 32277                           
 32278                           ;spi.c: 149: DMACON1bits.SSCON1 = 0;
 32279                           
 32280                           ;incstack = 0
 32281  01267A  9E88               	bcf	3976,7,c	;volatile
 32282                           
 32283                           ;spi.c: 150: DMACON1bits.SSCON0 = 0;
 32284  01267C  9C88               	bcf	3976,6,c	;volatile
 32285                           
 32286                           ;spi.c: 152: DMACON1bits.TXINC = 1;
 32287  01267E  8A88               	bsf	3976,5,c	;volatile
 32288                           
 32289                           ;spi.c: 154: DMACON1bits.RXINC = 0;
 32290  012680  9888               	bcf	3976,4,c	;volatile
 32291                           
 32292                           ;spi.c: 156: DMACON1bits.DUPLEX1 = 0;
 32293  012682  9688               	bcf	3976,3,c	;volatile
 32294                           
 32295                           ;spi.c: 157: DMACON1bits.DUPLEX0 = 1;
 32296  012684  8488               	bsf	3976,2,c	;volatile
 32297                           
 32298                           ;spi.c: 159: DMACON1bits.DLYINTEN = 0;
 32299  012686  9288               	bcf	3976,1,c	;volatile
 32300                           
 32301                           ;spi.c: 161: DMACON2bits.DLYCYC = 0b0000;
 32302  012688  9886               	bcf	3974,4,c	;volatile
 32303  01268A  9A86               	bcf	3974,5,c	;volatile
 32304  01268C  9C86               	bcf	3974,6,c	;volatile
 32305  01268E  9E86               	bcf	3974,7,c	;volatile
 32306                           
 32307                           ;spi.c: 163: DMACON2bits.INTLVL = 0b0000;
 32308  012690  9086               	bcf	3974,0,c	;volatile
 32309  012692  9286               	bcf	3974,1,c	;volatile
 32310  012694  9486               	bcf	3974,2,c	;volatile
 32311  012696  9686               	bcf	3974,3,c	;volatile
 32312                           
 32313                           ;spi.c: 166: TXADDRH = ((unsigned char)((((uint16_t) command)>>8)&0xFF));
 32314  012698  0100               	movlb	0	; () banked
 32315  01269A  5161               	movf	(spi_tx_tx@command+1)& (0+255),w,b
 32316  01269C  6E6A               	movwf	3946,c	;volatile
 32317                           
 32318                           ; BSR set to: 0
 32319                           ;spi.c: 167: TXADDRL = ((unsigned char)(((uint16_t) command)&0xFF));
 32320  01269E  C060  FF6B         	movff	spi_tx_tx@command,3947	;volatile
 32321                           
 32322                           ; BSR set to: 0
 32323                           ;spi.c: 170: DMABCH = ((unsigned char)((((uint16_t) (command_length-1))>>8)&0xFF));
 32324  0126A2  0EFF               	movlw	255
 32325  0126A4  6F68               	movwf	??_spi_tx_tx& (0+255),b
 32326  0126A6  0EFF               	movlw	255
 32327  0126A8  6F69               	movwf	(??_spi_tx_tx+1)& (0+255),b
 32328  0126AA  C062  F06A         	movff	spi_tx_tx@command_length,??_spi_tx_tx+2
 32329  0126AE  C063  F06B         	movff	spi_tx_tx@command_length+1,??_spi_tx_tx+3
 32330  0126B2  5168               	movf	??_spi_tx_tx& (0+255),w,b
 32331  0126B4  276A               	addwf	(??_spi_tx_tx+2)& (0+255),f,b
 32332  0126B6  5169               	movf	(??_spi_tx_tx+1)& (0+255),w,b
 32333  0126B8  236B               	addwfc	(??_spi_tx_tx+3)& (0+255),f,b
 32334  0126BA  C06B  F06A         	movff	??_spi_tx_tx+3,??_spi_tx_tx+2
 32335  0126BE  6B6B               	clrf	(??_spi_tx_tx+3)& (0+255),b
 32336  0126C0  516A               	movf	(??_spi_tx_tx+2)& (0+255),w,b
 32337  0126C2  6E66               	movwf	3942,c	;volatile
 32338                           
 32339                           ; BSR set to: 0
 32340                           ;spi.c: 171: DMABCL = ((unsigned char)(((uint16_t) (command_length-1))&0xFF));
 32341  0126C4  0562               	decf	spi_tx_tx@command_length& (0+255),w,b
 32342  0126C6  6E67               	movwf	3943,c	;volatile
 32343                           
 32344                           ; BSR set to: 0
 32345                           ;spi.c: 174: LATDbits.LD7 = 0;
 32346  0126C8  9E8C               	bcf	3980,7,c	;volatile
 32347                           
 32348                           ; BSR set to: 0
 32349                           ;spi.c: 177: DMACON1bits.DMAEN = 1;
 32350  0126CA  8088               	bsf	3976,0,c	;volatile
 32351  0126CC                     
 32352                           ; BSR set to: 0
 32353  0126CC  B088               	btfsc	3976,0,c	;volatile
 32354  0126CE  D7FE               	goto	l2130
 32355                           
 32356                           ;spi.c: 181: TXADDRH = ((unsigned char)((((uint16_t) data)>>8)&0xFF));
 32357  0126D0  0100               	movlb	0	; () banked
 32358  0126D2  5165               	movf	(spi_tx_tx@data+1)& (0+255),w,b
 32359  0126D4  6E6A               	movwf	3946,c	;volatile
 32360                           
 32361                           ; BSR set to: 0
 32362                           ;spi.c: 182: TXADDRL = ((unsigned char)(((uint16_t) data)&0xFF));
 32363  0126D6  C064  FF6B         	movff	spi_tx_tx@data,3947	;volatile
 32364                           
 32365                           ; BSR set to: 0
 32366                           ;spi.c: 185: DMABCH = ((unsigned char)((((uint16_t) (data_length-1))>>8)&0xFF));
 32367  0126DA  0EFF               	movlw	255
 32368  0126DC  6F68               	movwf	??_spi_tx_tx& (0+255),b
 32369  0126DE  0EFF               	movlw	255
 32370  0126E0  6F69               	movwf	(??_spi_tx_tx+1)& (0+255),b
 32371  0126E2  C066  F06A         	movff	spi_tx_tx@data_length,??_spi_tx_tx+2
 32372  0126E6  C067  F06B         	movff	spi_tx_tx@data_length+1,??_spi_tx_tx+3
 32373  0126EA  5168               	movf	??_spi_tx_tx& (0+255),w,b
 32374  0126EC  276A               	addwf	(??_spi_tx_tx+2)& (0+255),f,b
 32375  0126EE  5169               	movf	(??_spi_tx_tx+1)& (0+255),w,b
 32376  0126F0  236B               	addwfc	(??_spi_tx_tx+3)& (0+255),f,b
 32377  0126F2  C06B  F06A         	movff	??_spi_tx_tx+3,??_spi_tx_tx+2
 32378  0126F6  6B6B               	clrf	(??_spi_tx_tx+3)& (0+255),b
 32379  0126F8  516A               	movf	(??_spi_tx_tx+2)& (0+255),w,b
 32380  0126FA  6E66               	movwf	3942,c	;volatile
 32381                           
 32382                           ; BSR set to: 0
 32383                           ;spi.c: 186: DMABCL = ((unsigned char)(((uint16_t) (data_length-1))&0xFF));
 32384  0126FC  0566               	decf	spi_tx_tx@data_length& (0+255),w,b
 32385  0126FE  6E67               	movwf	3943,c	;volatile
 32386                           
 32387                           ; BSR set to: 0
 32388                           ;spi.c: 189: DMACON1bits.DMAEN = 1;
 32389  012700  8088               	bsf	3976,0,c	;volatile
 32390  012702                     
 32391                           ; BSR set to: 0
 32392  012702  B088               	btfsc	3976,0,c	;volatile
 32393  012704  D7FE               	goto	l2133
 32394                           
 32395                           ;spi.c: 193: LATDbits.LD7 = 1;
 32396  012706  8E8C               	bsf	3980,7,c	;volatile
 32397  012708  0012               	return		;funcret
 32398  01270A                     __end_of_spi_tx_tx:
 32399                           	opt stack 0
 32400                           tosu	equ	0xFFF
 32401                           tosh	equ	0xFFE
 32402                           tosl	equ	0xFFD
 32403                           pclath	equ	0xFFA
 32404                           tblptru	equ	0xFF8
 32405                           tblptrh	equ	0xFF7
 32406                           tblptrl	equ	0xFF6
 32407                           tablat	equ	0xFF5
 32408                           prodh	equ	0xFF4
 32409                           prodl	equ	0xFF3
 32410                           intcon	equ	0xFF2
 32411                           postinc0	equ	0xFEE
 32412                           wreg	equ	0xFE8
 32413                           indf1	equ	0xFE7
 32414                           postinc1	equ	0xFE6
 32415                           postdec1	equ	0xFE5
 32416                           plusw1	equ	0xFE3
 32417                           fsr1h	equ	0xFE2
 32418                           fsr1l	equ	0xFE1
 32419                           indf2	equ	0xFDF
 32420                           postinc2	equ	0xFDE
 32421                           postdec2	equ	0xFDD
 32422                           plusw2	equ	0xFDB
 32423                           fsr2h	equ	0xFDA
 32424                           fsr2l	equ	0xFD9
 32425                           status	equ	0xFD8
 32426                           
 32427 ;; *************** function __flash_write_page_from_buffer *****************
 32428 ;; Defined at:
 32429 ;;		line 258 in file "flash.c"
 32430 ;; Parameters:    Size  Location     Type
 32431 ;;  page            2   19[BANK0 ] unsigned int 
 32432 ;;  buffer          1   21[BANK0 ] enum E6974
 32433 ;; Auto vars:     Size  Location     Type
 32434 ;;  command         4   25[BANK0 ] unsigned char [4]
 32435 ;; Return value:  Size  Location     Type
 32436 ;;                  1    wreg      void 
 32437 ;; Registers used:
 32438 ;;		wreg, status,2, status,0, cstack
 32439 ;; Tracked objects:
 32440 ;;		On entry : 0/0
 32441 ;;		On exit  : 0/0
 32442 ;;		Unchanged: 0/0
 32443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 32444 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32446 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32447 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32448 ;;Total ram usage:       10 bytes
 32449 ;; Hardware stack levels used:    1
 32450 ;; Hardware stack levels required when called:   13
 32451 ;; This function calls:
 32452 ;;		__flash_is_busy
 32453 ;;		_spi_tx
 32454 ;; This function is called by:
 32455 ;;		_flash_sector_write
 32456 ;;		_flash_partial_write
 32457 ;;		_flash_write_page_from_buffer
 32458 ;; This function uses a non-reentrant model
 32459 ;;
 32460                           
 32461                           	psect	text120
 32462  0132A2                     __ptext120:
 32463                           	opt stack 0
 32464  0132A2                     __flash_write_page_from_buffer:
 32465                           	opt stack 13
 32466                           
 32467                           ;flash.c: 260: uint8_t command[4];;flash.c: 263: while(_flash_is_busy());
 32468                           
 32469                           ;incstack = 0
 32470  0132A2  ECB3  F0A0         	call	__flash_is_busy	;wreg free
 32471  0132A6  0900               	iorlw	0
 32472  0132A8  A4D8               	btfss	status,2,c
 32473  0132AA  D7FB               	goto	__flash_write_page_from_buffer
 32474                           
 32475                           ;flash.c: 266: if(buffer==FLASH_BUFFER_1)
 32476  0132AC  0100               	movlb	0	; () banked
 32477  0132AE  5175               	movf	__flash_write_page_from_buffer@buffer& (0+255),w,b
 32478  0132B0  A4D8               	btfss	status,2,c
 32479  0132B2  D002               	goto	l1527
 32480                           
 32481                           ; BSR set to: 0
 32482                           ;flash.c: 267: command[0] = 0x83;
 32483  0132B4  0E83               	movlw	131
 32484  0132B6  6F79               	movwf	__flash_write_page_from_buffer@command& (0+255),b
 32485  0132B8                     l1527:
 32486                           
 32487                           ; BSR set to: 0
 32488                           ;flash.c: 268: if(buffer==FLASH_BUFFER_2)
 32489                           
 32490                           ; BSR set to: 0
 32491  0132B8  0575               	decf	__flash_write_page_from_buffer@buffer& (0+255),w,b
 32492  0132BA  A4D8               	btfss	status,2,c
 32493  0132BC  D002               	goto	l1528
 32494                           
 32495                           ; BSR set to: 0
 32496                           ;flash.c: 269: command[0] = 0x86;
 32497  0132BE  0E86               	movlw	134
 32498  0132C0  6F79               	movwf	__flash_write_page_from_buffer@command& (0+255),b
 32499  0132C2                     l1528:
 32500                           
 32501                           ; BSR set to: 0
 32502                           ;flash.c: 271: command[1] = ((unsigned char)(((page<<1)>>8)&0xFF));
 32503                           
 32504                           ; BSR set to: 0
 32505  0132C2  C073  F076         	movff	__flash_write_page_from_buffer@page,??__flash_write_page_from_buffer
 32506  0132C6  C074  F077         	movff	__flash_write_page_from_buffer@page+1,??__flash_write_page_from_buffer+1
 32507  0132CA  0E07               	movlw	7
 32508  0132CC  6F78               	movwf	(??__flash_write_page_from_buffer+2)& (0+255),b
 32509  0132CE                     u17595:
 32510  0132CE  90D8               	bcf	status,0,c
 32511  0132D0  3377               	rrcf	(??__flash_write_page_from_buffer+1)& (0+255),f,b
 32512  0132D2  3376               	rrcf	??__flash_write_page_from_buffer& (0+255),f,b
 32513  0132D4  2F78               	decfsz	(??__flash_write_page_from_buffer+2)& (0+255),f,b
 32514  0132D6  D7FB               	goto	u17595
 32515  0132D8  5176               	movf	??__flash_write_page_from_buffer& (0+255),w,b
 32516  0132DA  6F7A               	movwf	(__flash_write_page_from_buffer@command+1)& (0+255),b
 32517                           
 32518                           ; BSR set to: 0
 32519                           ;flash.c: 272: command[2] = ((unsigned char)((page<<1)&0xFF));
 32520  0132DC  5173               	movf	__flash_write_page_from_buffer@page& (0+255),w,b
 32521  0132DE  2573               	addwf	__flash_write_page_from_buffer@page& (0+255),w,b
 32522  0132E0  6F7B               	movwf	(__flash_write_page_from_buffer@command+2)& (0+255),b
 32523                           
 32524                           ;flash.c: 273: command[3] = 0x00;
 32525  0132E2  0E00               	movlw	0
 32526  0132E4  6F7C               	movwf	(__flash_write_page_from_buffer@command+3)& (0+255),b
 32527                           
 32528                           ; BSR set to: 0
 32529                           ;flash.c: 276: spi_tx(command, 4);
 32530  0132E6  0E79               	movlw	low __flash_write_page_from_buffer@command
 32531  0132E8  6F60               	movwf	spi_tx@data& (0+255),b
 32532  0132EA  0E00               	movlw	high __flash_write_page_from_buffer@command
 32533  0132EC  6F61               	movwf	(spi_tx@data+1)& (0+255),b
 32534  0132EE  0E00               	movlw	0
 32535  0132F0  6F63               	movwf	(spi_tx@length+1)& (0+255),b
 32536  0132F2  0E04               	movlw	4
 32537  0132F4  6F62               	movwf	spi_tx@length& (0+255),b
 32538  0132F6  EC7E  F099         	call	_spi_tx	;wreg free
 32539  0132FA  0012               	return		;funcret
 32540  0132FC                     __end_of__flash_write_page_from_buffer:
 32541                           	opt stack 0
 32542                           tosu	equ	0xFFF
 32543                           tosh	equ	0xFFE
 32544                           tosl	equ	0xFFD
 32545                           pclath	equ	0xFFA
 32546                           tblptru	equ	0xFF8
 32547                           tblptrh	equ	0xFF7
 32548                           tblptrl	equ	0xFF6
 32549                           tablat	equ	0xFF5
 32550                           prodh	equ	0xFF4
 32551                           prodl	equ	0xFF3
 32552                           intcon	equ	0xFF2
 32553                           postinc0	equ	0xFEE
 32554                           wreg	equ	0xFE8
 32555                           indf1	equ	0xFE7
 32556                           postinc1	equ	0xFE6
 32557                           postdec1	equ	0xFE5
 32558                           plusw1	equ	0xFE3
 32559                           fsr1h	equ	0xFE2
 32560                           fsr1l	equ	0xFE1
 32561                           indf2	equ	0xFDF
 32562                           postinc2	equ	0xFDE
 32563                           postdec2	equ	0xFDD
 32564                           plusw2	equ	0xFDB
 32565                           fsr2h	equ	0xFDA
 32566                           fsr2l	equ	0xFD9
 32567                           status	equ	0xFD8
 32568                           
 32569 ;; *************** function __flash_compare_page_to_buffer *****************
 32570 ;; Defined at:
 32571 ;;		line 176 in file "flash.c"
 32572 ;; Parameters:    Size  Location     Type
 32573 ;;  page            2   19[BANK0 ] unsigned int 
 32574 ;;  buffer          1   21[BANK0 ] enum E6974
 32575 ;; Auto vars:     Size  Location     Type
 32576 ;;  command         4   27[BANK0 ] unsigned char [4]
 32577 ;;  status          2   25[BANK0 ] unsigned int 
 32578 ;; Return value:  Size  Location     Type
 32579 ;;                  1    wreg      enum E6978
 32580 ;; Registers used:
 32581 ;;		wreg, status,2, status,0, cstack
 32582 ;; Tracked objects:
 32583 ;;		On entry : 0/0
 32584 ;;		On exit  : 0/0
 32585 ;;		Unchanged: 0/0
 32586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 32587 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32588 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32589 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32590 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32591 ;;Total ram usage:       12 bytes
 32592 ;; Hardware stack levels used:    1
 32593 ;; Hardware stack levels required when called:   13
 32594 ;; This function calls:
 32595 ;;		__flash_get_status
 32596 ;;		__flash_is_busy
 32597 ;;		_spi_tx
 32598 ;; This function is called by:
 32599 ;;		_flash_sector_write
 32600 ;;		_flash_partial_write
 32601 ;; This function uses a non-reentrant model
 32602 ;;
 32603                           
 32604                           	psect	text121
 32605  0129A0                     __ptext121:
 32606                           	opt stack 0
 32607  0129A0                     __flash_compare_page_to_buffer:
 32608                           	opt stack 13
 32609                           
 32610                           ;flash.c: 178: uint8_t command[4];;flash.c: 179: uint16_t status;;flash.c: 182: while(_f
      +                          lash_is_busy());
 32611                           
 32612                           ;incstack = 0
 32613  0129A0  ECB3  F0A0         	call	__flash_is_busy	;wreg free
 32614  0129A4  0900               	iorlw	0
 32615  0129A6  A4D8               	btfss	status,2,c
 32616  0129A8  D7FB               	goto	__flash_compare_page_to_buffer
 32617                           
 32618                           ;flash.c: 185: if(buffer==FLASH_BUFFER_1)
 32619  0129AA  0100               	movlb	0	; () banked
 32620  0129AC  5175               	movf	__flash_compare_page_to_buffer@buffer& (0+255),w,b
 32621  0129AE  A4D8               	btfss	status,2,c
 32622  0129B0  D002               	goto	l1500
 32623                           
 32624                           ; BSR set to: 0
 32625                           ;flash.c: 186: command[0] = 0x60;
 32626  0129B2  0E60               	movlw	96
 32627  0129B4  6F7B               	movwf	__flash_compare_page_to_buffer@command& (0+255),b
 32628  0129B6                     l1500:
 32629                           
 32630                           ; BSR set to: 0
 32631                           ;flash.c: 187: if(buffer==FLASH_BUFFER_2)
 32632                           
 32633                           ; BSR set to: 0
 32634  0129B6  0575               	decf	__flash_compare_page_to_buffer@buffer& (0+255),w,b
 32635  0129B8  A4D8               	btfss	status,2,c
 32636  0129BA  D002               	goto	l1501
 32637                           
 32638                           ; BSR set to: 0
 32639                           ;flash.c: 188: command[0] = 0x60;
 32640  0129BC  0E60               	movlw	96
 32641  0129BE  6F7B               	movwf	__flash_compare_page_to_buffer@command& (0+255),b
 32642  0129C0                     l1501:
 32643                           
 32644                           ; BSR set to: 0
 32645                           ;flash.c: 190: command[1] = ((unsigned char)(((page<<1)>>8)&0xFF));
 32646                           
 32647                           ; BSR set to: 0
 32648  0129C0  C073  F076         	movff	__flash_compare_page_to_buffer@page,??__flash_compare_page_to_buffer
 32649  0129C4  C074  F077         	movff	__flash_compare_page_to_buffer@page+1,??__flash_compare_page_to_buffer+1
 32650  0129C8  0E07               	movlw	7
 32651  0129CA  6F78               	movwf	(??__flash_compare_page_to_buffer+2)& (0+255),b
 32652  0129CC                     u17505:
 32653  0129CC  90D8               	bcf	status,0,c
 32654  0129CE  3377               	rrcf	(??__flash_compare_page_to_buffer+1)& (0+255),f,b
 32655  0129D0  3376               	rrcf	??__flash_compare_page_to_buffer& (0+255),f,b
 32656  0129D2  2F78               	decfsz	(??__flash_compare_page_to_buffer+2)& (0+255),f,b
 32657  0129D4  D7FB               	goto	u17505
 32658  0129D6  5176               	movf	??__flash_compare_page_to_buffer& (0+255),w,b
 32659  0129D8  6F7C               	movwf	(__flash_compare_page_to_buffer@command+1)& (0+255),b
 32660                           
 32661                           ; BSR set to: 0
 32662                           ;flash.c: 191: command[2] = ((unsigned char)((page<<1)&0xFF));
 32663  0129DA  5173               	movf	__flash_compare_page_to_buffer@page& (0+255),w,b
 32664  0129DC  2573               	addwf	__flash_compare_page_to_buffer@page& (0+255),w,b
 32665  0129DE  6F7D               	movwf	(__flash_compare_page_to_buffer@command+2)& (0+255),b
 32666                           
 32667                           ;flash.c: 192: command[3] = 0x00;
 32668  0129E0  0E00               	movlw	0
 32669  0129E2  6F7E               	movwf	(__flash_compare_page_to_buffer@command+3)& (0+255),b
 32670                           
 32671                           ; BSR set to: 0
 32672                           ;flash.c: 195: spi_tx(command, 4);
 32673  0129E4  0E7B               	movlw	low __flash_compare_page_to_buffer@command
 32674  0129E6  6F60               	movwf	spi_tx@data& (0+255),b
 32675  0129E8  0E00               	movlw	high __flash_compare_page_to_buffer@command
 32676  0129EA  6F61               	movwf	(spi_tx@data+1)& (0+255),b
 32677  0129EC  0E00               	movlw	0
 32678  0129EE  6F63               	movwf	(spi_tx@length+1)& (0+255),b
 32679  0129F0  0E04               	movlw	4
 32680  0129F2  6F62               	movwf	spi_tx@length& (0+255),b
 32681  0129F4  EC7E  F099         	call	_spi_tx	;wreg free
 32682  0129F8  ECB3  F0A0         	call	__flash_is_busy	;wreg free
 32683  0129FC  0900               	iorlw	0
 32684  0129FE  A4D8               	btfss	status,2,c
 32685  012A00  D7FB               	goto	l1503
 32686                           
 32687                           ;flash.c: 201: status = _flash_get_status();
 32688  012A02  ECF9  F09E         	call	__flash_get_status	;wreg free
 32689  012A06  C06C  F079         	movff	?__flash_get_status,__flash_compare_page_to_buffer@status
 32690  012A0A  C06D  F07A         	movff	?__flash_get_status+1,__flash_compare_page_to_buffer@status+1
 32691                           
 32692                           ;flash.c: 204: if(status & 0b0000000001000000)
 32693  012A0E  0100               	movlb	0	; () banked
 32694  012A10  AD79               	btfss	__flash_compare_page_to_buffer@status& (0+255),6,b
 32695  012A12  D002               	goto	l1505
 32696                           
 32697                           ; BSR set to: 0
 32698                           ;flash.c: 205: {;flash.c: 207: return DATA_DOES_NOT_MATCH;
 32699  012A14  0E01               	movlw	1
 32700                           
 32701                           ; BSR set to: 0
 32702                           ;flash.c: 208: }
 32703                           
 32704                           ; BSR set to: 0
 32705  012A16  0012               	return	
 32706  012A18                     l1505:
 32707                           
 32708                           ; BSR set to: 0
 32709                           ;flash.c: 209: else;flash.c: 210: {;flash.c: 212: return DATA_DOES_MATCH;
 32710                           
 32711                           ; BSR set to: 0
 32712  012A18  0E00               	movlw	0
 32713                           
 32714                           ; BSR set to: 0
 32715  012A1A  0012               	return	
 32716  012A1C                     __end_of__flash_compare_page_to_buffer:
 32717                           	opt stack 0
 32718                           tosu	equ	0xFFF
 32719                           tosh	equ	0xFFE
 32720                           tosl	equ	0xFFD
 32721                           pclath	equ	0xFFA
 32722                           tblptru	equ	0xFF8
 32723                           tblptrh	equ	0xFF7
 32724                           tblptrl	equ	0xFF6
 32725                           tablat	equ	0xFF5
 32726                           prodh	equ	0xFF4
 32727                           prodl	equ	0xFF3
 32728                           intcon	equ	0xFF2
 32729                           postinc0	equ	0xFEE
 32730                           wreg	equ	0xFE8
 32731                           indf1	equ	0xFE7
 32732                           postinc1	equ	0xFE6
 32733                           postdec1	equ	0xFE5
 32734                           plusw1	equ	0xFE3
 32735                           fsr1h	equ	0xFE2
 32736                           fsr1l	equ	0xFE1
 32737                           indf2	equ	0xFDF
 32738                           postinc2	equ	0xFDE
 32739                           postdec2	equ	0xFDD
 32740                           plusw2	equ	0xFDB
 32741                           fsr2h	equ	0xFDA
 32742                           fsr2l	equ	0xFD9
 32743                           status	equ	0xFD8
 32744                           
 32745 ;; *************** function _MSDReadHandler *****************
 32746 ;; Defined at:
 32747 ;;		line 1038 in file "usb_device_msd.c"
 32748 ;; Parameters:    Size  Location     Type
 32749 ;;		None
 32750 ;; Auto vars:     Size  Location     Type
 32751 ;;		None
 32752 ;; Return value:  Size  Location     Type
 32753 ;;                  1    wreg      unsigned char 
 32754 ;; Registers used:
 32755 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 32756 ;; Tracked objects:
 32757 ;;		On entry : 0/0
 32758 ;;		On exit  : 0/0
 32759 ;;		Unchanged: 0/0
 32760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 32761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32763 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32764 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 32765 ;;Total ram usage:        4 bytes
 32766 ;; Hardware stack levels used:    1
 32767 ;; Hardware stack levels required when called:   16
 32768 ;; This function calls:
 32769 ;;		_ExternalFlash_SectorRead
 32770 ;;		_MSDCheckForErrorCases
 32771 ;;		_USBStallEndpoint
 32772 ;;		_USBTransferOnePacket
 32773 ;; This function is called by:
 32774 ;;		_MSDProcessCommandMediaPresent
 32775 ;; This function uses a non-reentrant model
 32776 ;;
 32777                           
 32778                           	psect	text122
 32779  00E652                     __ptext122:
 32780                           	opt stack 0
 32781  00E652                     _MSDReadHandler:
 32782                           	opt stack 10
 32783                           
 32784                           ;usb_device_msd.c: 1040: switch(MSDReadState)
 32785                           
 32786                           ; BSR set to: 0
 32787                           ;incstack = 0
 32788  00E652  D0DB               	goto	l681
 32789  00E654                     l682:
 32790                           
 32791                           ; BSR set to: 0
 32792                           ;usb_device_msd.c: 1046: LBA.v[3]=gblCBW.CBWCB[2];
 32793  00E654  C111  F151         	movff	_gblCBW+17,_LBA+3
 32794                           
 32795                           ;usb_device_msd.c: 1047: LBA.v[2]=gblCBW.CBWCB[3];
 32796  00E658  C112  F150         	movff	_gblCBW+18,_LBA+2
 32797                           
 32798                           ;usb_device_msd.c: 1048: LBA.v[1]=gblCBW.CBWCB[4];
 32799  00E65C  C113  F14F         	movff	_gblCBW+19,_LBA+1
 32800                           
 32801                           ;usb_device_msd.c: 1049: LBA.v[0]=gblCBW.CBWCB[5];
 32802  00E660  C114  F14E         	movff	_gblCBW+20,_LBA
 32803                           
 32804                           ;usb_device_msd.c: 1051: TransferLength.byte.HB = gblCBW.CBWCB[7];
 32805  00E664  C116  F0EC         	movff	_gblCBW+22,_TransferLength+1
 32806                           
 32807                           ;usb_device_msd.c: 1052: TransferLength.byte.LB = gblCBW.CBWCB[8];
 32808  00E668  C117  F0EB         	movff	_gblCBW+23,_TransferLength
 32809                           
 32810                           ; BSR set to: 0
 32811                           ;usb_device_msd.c: 1055: if(MSDCheckForErrorCases(TransferLength.Val * (uint32_t)512) !=
      +                           0x00)
 32812  00E66C  51EB               	movf	_TransferLength& (0+255),w,b
 32813  00E66E  6F95               	movwf	??_MSDReadHandler& (0+255),b
 32814  00E670  51EC               	movf	(_TransferLength+1)& (0+255),w,b
 32815  00E672  6F96               	movwf	(??_MSDReadHandler+1)& (0+255),b
 32816  00E674  6B97               	clrf	(??_MSDReadHandler+2)& (0+255),b
 32817  00E676  6B98               	clrf	(??_MSDReadHandler+3)& (0+255),b
 32818  00E678  0E09               	movlw	9
 32819  00E67A                     u18005:
 32820  00E67A  90D8               	bcf	status,0,c
 32821  00E67C  3795               	rlcf	??_MSDReadHandler& (0+255),f,b
 32822  00E67E  3796               	rlcf	(??_MSDReadHandler+1)& (0+255),f,b
 32823  00E680  3797               	rlcf	(??_MSDReadHandler+2)& (0+255),f,b
 32824  00E682  3798               	rlcf	(??_MSDReadHandler+3)& (0+255),f,b
 32825  00E684  2EE8               	decfsz	wreg,f,c
 32826  00E686  D7F9               	goto	u18005
 32827  00E688  C095  F06A         	movff	??_MSDReadHandler,MSDCheckForErrorCases@DeviceBytes
 32828  00E68C  C096  F06B         	movff	??_MSDReadHandler+1,MSDCheckForErrorCases@DeviceBytes+1
 32829  00E690  C097  F06C         	movff	??_MSDReadHandler+2,MSDCheckForErrorCases@DeviceBytes+2
 32830  00E694  C098  F06D         	movff	??_MSDReadHandler+3,MSDCheckForErrorCases@DeviceBytes+3
 32831  00E698  EC76  F085         	call	_MSDCheckForErrorCases	;wreg free
 32832  00E69C  0900               	iorlw	0
 32833  00E69E  A4D8               	btfss	status,2,c
 32834  00E6A0  D0C6               	goto	l684
 32835                           
 32836                           ;usb_device_msd.c: 1058: };usb_device_msd.c: 1060: MSDReadState = 0x01;
 32837                           
 32838                           ;usb_device_msd.c: 1056: {;usb_device_msd.c: 1057: break;
 32839  00E6A2  0E01               	movlw	1
 32840  00E6A4  0100               	movlb	0	; () banked
 32841  00E6A6  6FF8               	movwf	_MSDReadState& (0+255),b
 32842  00E6A8                     
 32843                           ; BSR set to: 0
 32844                           ;usb_device_msd.c: 1064: if(TransferLength.Val == 0)
 32845                           
 32846                           ; BSR set to: 0
 32847  00E6A8  51EB               	movf	_TransferLength& (0+255),w,b
 32848  00E6AA  11EC               	iorwf	(_TransferLength+1)& (0+255),w,b
 32849  00E6AC  A4D8               	btfss	status,2,c
 32850  00E6AE  D002               	goto	l686
 32851                           
 32852                           ; BSR set to: 0
 32853                           ;usb_device_msd.c: 1065: {;usb_device_msd.c: 1066: MSDReadState = 0x00;
 32854  00E6B0  0E00               	movlw	0
 32855  00E6B2  D049               	goto	L54
 32856  00E6B4                     l686:
 32857                           
 32858                           ; BSR set to: 0
 32859                           ;usb_device_msd.c: 1068: };usb_device_msd.c: 1070: TransferLength.Val--;
 32860                           
 32861                           ; BSR set to: 0
 32862  00E6B4  07EB               	decf	_TransferLength& (0+255),f,b
 32863  00E6B6  A0D8               	btfss	status,0,c
 32864  00E6B8  07EC               	decf	(_TransferLength+1)& (0+255),f,b
 32865                           
 32866                           ; BSR set to: 0
 32867                           ;usb_device_msd.c: 1071: MSDReadState = 0x02;
 32868  00E6BA  0E02               	movlw	2
 32869  00E6BC  6FF8               	movwf	_MSDReadState& (0+255),b
 32870  00E6BE                     
 32871                           ; BSR set to: 0
 32872                           ;usb_device_msd.c: 1076: if(((USBMSDInHandle != 0x0000) && ((*(volatile uint8_t*)USBMSDI
      +                          nHandle & 0x80) != 0x00)) != 0)
 32873                           
 32874                           ; BSR set to: 0
 32875  00E6BE  51ED               	movf	_USBMSDInHandle& (0+255),w,b
 32876  00E6C0  11EE               	iorwf	(_USBMSDInHandle+1)& (0+255),w,b
 32877  00E6C2  B4D8               	btfsc	status,2,c
 32878  00E6C4  D006               	goto	l688
 32879                           
 32880                           ; BSR set to: 0
 32881  00E6C6  C0ED  FFD9         	movff	_USBMSDInHandle,fsr2l
 32882  00E6CA  C0EE  FFDA         	movff	_USBMSDInHandle+1,fsr2h
 32883  00E6CE  BEDF               	btfsc	indf2,7,c
 32884  00E6D0  D0AE               	goto	l684
 32885  00E6D2                     l688:
 32886                           
 32887                           ; BSR set to: 0
 32888                           ;usb_device_msd.c: 1079: };usb_device_msd.c: 1083: if(LUN[0].SectorRead(LUN[0].mediaPara
      +                          meters, LBA.Val, (uint8_t*)&msd_buffer[0]) != 1)
 32889                           
 32890                           ; BSR set to: 0
 32891  00E6D2  C1D6  F08B         	movff	_LUN+21,ExternalFlash_SectorRead@config
 32892  00E6D6  C1D7  F08C         	movff	_LUN+22,ExternalFlash_SectorRead@config+1
 32893  00E6DA  C14E  F08D         	movff	_LBA,ExternalFlash_SectorRead@sector_addr
 32894  00E6DE  C14F  F08E         	movff	_LBA+1,ExternalFlash_SectorRead@sector_addr+1
 32895  00E6E2  C150  F08F         	movff	_LBA+2,ExternalFlash_SectorRead@sector_addr+2
 32896  00E6E6  C151  F090         	movff	_LBA+3,ExternalFlash_SectorRead@sector_addr+3
 32897  00E6EA  0E00               	movlw	0
 32898  00E6EC  6F91               	movwf	ExternalFlash_SectorRead@buffer& (0+255),b
 32899  00E6EE  0E06               	movlw	6
 32900  00E6F0  6F92               	movwf	(ExternalFlash_SectorRead@buffer+1)& (0+255),b
 32901  00E6F2  EE21  F0CD         	lfsr	2,_LUN+12
 32902  00E6F6  D801               	call	u18058
 32903  00E6F8  D00A               	goto	u18059
 32904  00E6FA                     u18058:
 32905  00E6FA  0005               	push	
 32906  00E6FC  6EFA               	movwf	pclath,c
 32907  00E6FE  50DE               	movf	postinc2,w,c
 32908  00E700  6EFD               	movwf	tosl,c
 32909  00E702  50DE               	movf	postinc2,w,c
 32910  00E704  6EFE               	movwf	tosh,c
 32911  00E706  50DE               	movf	postinc2,w,c
 32912  00E708  6EFF               	movwf	tosu,c
 32913  00E70A  50FA               	movf	pclath,w,c
 32914  00E70C  0012               	return		;indir
 32915  00E70E                     u18059:
 32916  00E70E  06E8               	decf	wreg,f,c
 32917  00E710  B4D8               	btfsc	status,2,c
 32918  00E712  D01B               	goto	l691
 32919                           
 32920                           ;usb_device_msd.c: 1084: {;usb_device_msd.c: 1085: if(MSDRetryAttempt < (uint8_t)100u)
 32921  00E714  0E64               	movlw	100
 32922  00E716  0100               	movlb	0	; () banked
 32923  00E718  61F7               	cpfslt	_MSDRetryAttempt& (0+255),b
 32924  00E71A  D002               	goto	l690
 32925                           
 32926                           ; BSR set to: 0
 32927                           ;usb_device_msd.c: 1086: {;usb_device_msd.c: 1087: MSDRetryAttempt++;
 32928  00E71C  2BF7               	incf	_MSDRetryAttempt& (0+255),f,b
 32929                           
 32930                           ;usb_device_msd.c: 1088: break;
 32931  00E71E  D087               	goto	l684
 32932  00E720                     l690:
 32933                           
 32934                           ; BSR set to: 0
 32935                           ;usb_device_msd.c: 1090: else;usb_device_msd.c: 1091: {;usb_device_msd.c: 1100: msd_csw.
      +                          bCSWStatus=0x02;
 32936                           
 32937                           ; BSR set to: 0
 32938  00E720  0E02               	movlw	2
 32939  00E722  010D               	movlb	13	; () banked
 32940  00E724  6F8C               	movwf	140,b	;volatile
 32941                           
 32942                           ;usb_device_msd.c: 1104: gblSenseData[0].SenseKey=0x3;
 32943  00E726  0101               	movlb	1	; () banked
 32944  00E728  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 32945  00E72A  0BF0               	andlw	-16
 32946  00E72C  0903               	iorlw	3
 32947  00E72E  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 32948                           
 32949                           ;usb_device_msd.c: 1105: gblSenseData[0].ASC=0x00;
 32950  00E730  0E00               	movlw	0
 32951  00E732  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 32952                           
 32953                           ;usb_device_msd.c: 1106: gblSenseData[0].ASCQ=0x00;
 32954  00E734  0E00               	movlw	0
 32955  00E736  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 32956                           
 32957                           ; BSR set to: 1
 32958                           ;usb_device_msd.c: 1107: USBStallEndpoint(2u, 1);
 32959  00E738  0E01               	movlw	1
 32960  00E73A  0100               	movlb	0	; () banked
 32961  00E73C  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 32962  00E73E  0E02               	movlw	2
 32963  00E740  EC65  F081         	call	_USBStallEndpoint
 32964  00E744  D05F               	goto	l18592
 32965  00E746                     L54:
 32966  00E746  6FF8               	movwf	_MSDReadState& (0+255),b
 32967                           
 32968                           ;usb_device_msd.c: 1109: break;
 32969  00E748  D072               	goto	l684
 32970  00E74A                     l691:
 32971                           
 32972                           ;usb_device_msd.c: 1110: };usb_device_msd.c: 1111: };usb_device_msd.c: 1113: LBA.Val++;
 32973                           
 32974                           ; BSR set to: 0
 32975                           
 32976                           ; BSR set to: 0
 32977  00E74A  0E01               	movlw	1
 32978  00E74C  0101               	movlb	1	; () banked
 32979  00E74E  274E               	addwf	_LBA& (0+255),f,b
 32980  00E750  0E00               	movlw	0
 32981  00E752  234F               	addwfc	(_LBA+1)& (0+255),f,b
 32982  00E754  2350               	addwfc	(_LBA+2)& (0+255),f,b
 32983  00E756  2351               	addwfc	(_LBA+3)& (0+255),f,b
 32984                           
 32985                           ; BSR set to: 1
 32986                           ;usb_device_msd.c: 1114: msd_csw.dCSWDataResidue=0x0200;
 32987  00E758  0E00               	movlw	0
 32988  00E75A  010D               	movlb	13	; () banked
 32989  00E75C  6F88               	movwf	136,b	;volatile
 32990  00E75E  0E02               	movlw	2
 32991  00E760  6F89               	movwf	137,b	;volatile
 32992  00E762  0E00               	movlw	0
 32993  00E764  6F8A               	movwf	138,b	;volatile
 32994  00E766  0E00               	movlw	0
 32995  00E768  6F8B               	movwf	139,b	;volatile
 32996                           
 32997                           ; BSR set to: 13
 32998                           ;usb_device_msd.c: 1117: ptrNextData=(uint8_t *)&msd_buffer[0];
 32999  00E76A  0E00               	movlw	0
 33000  00E76C  0101               	movlb	1	; () banked
 33001  00E76E  6F6C               	movwf	_ptrNextData& (0+255),b
 33002  00E770  0E06               	movlw	6
 33003  00E772  6F6D               	movwf	(_ptrNextData+1)& (0+255),b
 33004                           
 33005                           ;usb_device_msd.c: 1119: MSDReadState = 0x03;
 33006  00E774  0E03               	movlw	3
 33007  00E776  0100               	movlb	0	; () banked
 33008  00E778  6FF8               	movwf	_MSDReadState& (0+255),b
 33009  00E77A                     
 33010                           ; BSR set to: 0
 33011                           ;usb_device_msd.c: 1123: if(msd_csw.dCSWDataResidue == 0)
 33012                           
 33013                           ; BSR set to: 0
 33014  00E77A  010D               	movlb	13	; () banked
 33015  00E77C  5188               	movf	136,w,b	;volatile
 33016  00E77E  1189               	iorwf	137,w,b	;volatile
 33017  00E780  118A               	iorwf	138,w,b	;volatile
 33018  00E782  118B               	iorwf	139,w,b	;volatile
 33019  00E784  A4D8               	btfss	status,2,c
 33020  00E786  D002               	goto	l693
 33021                           
 33022                           ; BSR set to: 13
 33023                           ;usb_device_msd.c: 1124: {;usb_device_msd.c: 1125: MSDReadState = 0x01;
 33024  00E788  0E01               	movlw	1
 33025  00E78A  D03D               	goto	L56
 33026  00E78C                     l693:
 33027                           
 33028                           ;usb_device_msd.c: 1127: };usb_device_msd.c: 1129: MSDReadState = 0x04;
 33029                           
 33030                           ; BSR set to: 0
 33031  00E78C  0E04               	movlw	4
 33032  00E78E  0100               	movlb	0	; () banked
 33033  00E790  6FF8               	movwf	_MSDReadState& (0+255),b
 33034  00E792                     
 33035                           ; BSR set to: 0
 33036                           ;usb_device_msd.c: 1136: if(((USBMSDInHandle != 0x0000) && ((*(volatile uint8_t*)USBMSDI
      +                          nHandle & 0x80) != 0x00)))
 33037                           
 33038                           ; BSR set to: 0
 33039  00E792  51ED               	movf	_USBMSDInHandle& (0+255),w,b
 33040  00E794  11EE               	iorwf	(_USBMSDInHandle+1)& (0+255),w,b
 33041  00E796  B4D8               	btfsc	status,2,c
 33042  00E798  D006               	goto	l695
 33043                           
 33044                           ; BSR set to: 0
 33045  00E79A  C0ED  FFD9         	movff	_USBMSDInHandle,fsr2l
 33046  00E79E  C0EE  FFDA         	movff	_USBMSDInHandle+1,fsr2h
 33047  00E7A2  BEDF               	btfsc	indf2,7,c
 33048  00E7A4  D044               	goto	l684
 33049  00E7A6                     l695:
 33050                           
 33051                           ; BSR set to: 0
 33052                           ;usb_device_msd.c: 1139: };usb_device_msd.c: 1142: USBMSDInHandle = USBTransferOnePacket
      +                          (2u,1,ptrNextData,64u);
 33053                           
 33054                           ; BSR set to: 0
 33055  00E7A6  0E01               	movlw	1
 33056  00E7A8  6F60               	movwf	USBTransferOnePacket@dir& (0+255),b
 33057  00E7AA  C16C  F061         	movff	_ptrNextData,USBTransferOnePacket@data
 33058  00E7AE  C16D  F062         	movff	_ptrNextData+1,USBTransferOnePacket@data+1
 33059  00E7B2  0E40               	movlw	64
 33060  00E7B4  6F63               	movwf	USBTransferOnePacket@len& (0+255),b
 33061  00E7B6  0E02               	movlw	2
 33062  00E7B8  EC6F  F082         	call	_USBTransferOnePacket
 33063  00E7BC  C060  F0ED         	movff	?_USBTransferOnePacket,_USBMSDInHandle
 33064  00E7C0  C061  F0EE         	movff	?_USBTransferOnePacket+1,_USBMSDInHandle+1
 33065                           
 33066                           ;usb_device_msd.c: 1144: MSDReadState = 0x03;
 33067  00E7C4  0E03               	movlw	3
 33068  00E7C6  0100               	movlb	0	; () banked
 33069  00E7C8  6FF8               	movwf	_MSDReadState& (0+255),b
 33070                           
 33071                           ; BSR set to: 0
 33072                           ;usb_device_msd.c: 1146: gblCBW.dCBWDataTransferLength-= 64u;
 33073  00E7CA  0E40               	movlw	64
 33074  00E7CC  0101               	movlb	1	; () banked
 33075  00E7CE  5F08               	subwf	(_gblCBW+8)& (0+255),f,b
 33076  00E7D0  0E00               	movlw	0
 33077  00E7D2  5B09               	subwfb	(_gblCBW+9)& (0+255),f,b
 33078  00E7D4  5B0A               	subwfb	(_gblCBW+10)& (0+255),f,b
 33079  00E7D6  5B0B               	subwfb	(_gblCBW+11)& (0+255),f,b
 33080                           
 33081                           ; BSR set to: 1
 33082                           ;usb_device_msd.c: 1147: msd_csw.dCSWDataResidue-=64u;
 33083  00E7D8  0E40               	movlw	64
 33084  00E7DA  010D               	movlb	13	; () banked
 33085  00E7DC  5F88               	subwf	136,f,b	;volatile
 33086  00E7DE  0E00               	movlw	0
 33087  00E7E0  5B89               	subwfb	137,f,b	;volatile
 33088  00E7E2  5B8A               	subwfb	138,f,b	;volatile
 33089  00E7E4  5B8B               	subwfb	139,f,b	;volatile
 33090                           
 33091                           ; BSR set to: 13
 33092                           ;usb_device_msd.c: 1148: ptrNextData+=64u;
 33093  00E7E6  0E40               	movlw	64
 33094  00E7E8  0101               	movlb	1	; () banked
 33095  00E7EA  276C               	addwf	_ptrNextData& (0+255),f,b
 33096  00E7EC  0E00               	movlw	0
 33097  00E7EE  236D               	addwfc	(_ptrNextData+1)& (0+255),f,b
 33098                           
 33099                           ;usb_device_msd.c: 1149: break;
 33100  00E7F0  D01E               	goto	l684
 33101  00E7F2                     
 33102                           ;usb_device_msd.c: 1154: msd_csw.bCSWStatus=0x02;
 33103                           
 33104                           ; BSR set to: 1
 33105  00E7F2  0E02               	movlw	2
 33106  00E7F4  010D               	movlb	13	; () banked
 33107  00E7F6  6F8C               	movwf	140,b	;volatile
 33108                           
 33109                           ; BSR set to: 13
 33110                           ;usb_device_msd.c: 1155: USBStallEndpoint(2u, 1);
 33111  00E7F8  0E01               	movlw	1
 33112  00E7FA  0100               	movlb	0	; () banked
 33113  00E7FC  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 33114  00E7FE  0E02               	movlw	2
 33115  00E800  EC65  F081         	call	_USBStallEndpoint
 33116  00E804                     l18592:
 33117                           
 33118                           ;usb_device_msd.c: 1157: MSDReadState = 0x00;
 33119  00E804  0E00               	movlw	0
 33120  00E806                     L56:
 33121  00E806  0100               	movlb	0	; () banked
 33122  00E808  D79E               	goto	L54
 33123  00E80A                     l681:
 33124                           
 33125                           ; BSR set to: 0
 33126  00E80A  0100               	movlb	0	; () banked
 33127  00E80C  51F8               	movf	_MSDReadState& (0+255),w,b
 33128                           
 33129                           ; Switch size 1, requested type "space"
 33130                           ; Number of cases is 5, Range of values is 0 to 4
 33131                           ; switch strategies available:
 33132                           ; Name         Instructions Cycles
 33133                           ; simple_byte           16     9 (average)
 33134                           ;	Chosen strategy is simple_byte
 33135  00E80E  0A00               	xorlw	0	; case 0
 33136  00E810  B4D8               	btfsc	status,2,c
 33137  00E812  D720               	goto	l682
 33138  00E814  0A01               	xorlw	1	; case 1
 33139  00E816  B4D8               	btfsc	status,2,c
 33140  00E818  D747               	goto	l685
 33141  00E81A  0A03               	xorlw	3	; case 2
 33142  00E81C  B4D8               	btfsc	status,2,c
 33143  00E81E  D74F               	goto	l687
 33144  00E820  0A01               	xorlw	1	; case 3
 33145  00E822  B4D8               	btfsc	status,2,c
 33146  00E824  D7AA               	goto	l692
 33147  00E826  0A07               	xorlw	7	; case 4
 33148  00E828  B4D8               	btfsc	status,2,c
 33149  00E82A  D7B3               	goto	l694
 33150  00E82C  D7E2               	goto	l696
 33151  00E82E                     l684:
 33152                           
 33153                           ;usb_device_msd.c: 1161: return MSDReadState;
 33154                           
 33155                           ; BSR set to: 0
 33156  00E82E  0100               	movlb	0	; () banked
 33157  00E830  51F8               	movf	_MSDReadState& (0+255),w,b
 33158  00E832  0012               	return	
 33159  00E834                     __end_of_MSDReadHandler:
 33160                           	opt stack 0
 33161                           tosu	equ	0xFFF
 33162                           tosh	equ	0xFFE
 33163                           tosl	equ	0xFFD
 33164                           pclath	equ	0xFFA
 33165                           tblptru	equ	0xFF8
 33166                           tblptrh	equ	0xFF7
 33167                           tblptrl	equ	0xFF6
 33168                           tablat	equ	0xFF5
 33169                           prodh	equ	0xFF4
 33170                           prodl	equ	0xFF3
 33171                           intcon	equ	0xFF2
 33172                           postinc0	equ	0xFEE
 33173                           wreg	equ	0xFE8
 33174                           indf1	equ	0xFE7
 33175                           postinc1	equ	0xFE6
 33176                           postdec1	equ	0xFE5
 33177                           plusw1	equ	0xFE3
 33178                           fsr1h	equ	0xFE2
 33179                           fsr1l	equ	0xFE1
 33180                           indf2	equ	0xFDF
 33181                           postinc2	equ	0xFDE
 33182                           postdec2	equ	0xFDD
 33183                           plusw2	equ	0xFDB
 33184                           fsr2h	equ	0xFDA
 33185                           fsr2l	equ	0xFD9
 33186                           status	equ	0xFD8
 33187                           
 33188 ;; *************** function _MSDCheckForErrorCases *****************
 33189 ;; Defined at:
 33190 ;;		line 1434 in file "usb_device_msd.c"
 33191 ;; Parameters:    Size  Location     Type
 33192 ;;  DeviceBytes     4   10[BANK0 ] unsigned long 
 33193 ;; Auto vars:     Size  Location     Type
 33194 ;;  MSDErrorCase    1   16[BANK0 ] unsigned char 
 33195 ;;  DeviceNoData    1   15[BANK0 ] unsigned char 
 33196 ;;  HostMoreData    1   14[BANK0 ] unsigned char 
 33197 ;; Return value:  Size  Location     Type
 33198 ;;                  1    wreg      unsigned char 
 33199 ;; Registers used:
 33200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33201 ;; Tracked objects:
 33202 ;;		On entry : 0/0
 33203 ;;		On exit  : 0/0
 33204 ;;		Unchanged: 0/0
 33205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 33206 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33207 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33209 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33210 ;;Total ram usage:        7 bytes
 33211 ;; Hardware stack levels used:    1
 33212 ;; Hardware stack levels required when called:   12
 33213 ;; This function calls:
 33214 ;;		_MSDErrorHandler
 33215 ;; This function is called by:
 33216 ;;		_MSDProcessCommandMediaPresent
 33217 ;;		_MSDReadHandler
 33218 ;;		_MSDWriteHandler
 33219 ;; This function uses a non-reentrant model
 33220 ;;
 33221                           
 33222                           	psect	text123
 33223  010AEC                     __ptext123:
 33224                           	opt stack 0
 33225  010AEC                     _MSDCheckForErrorCases:
 33226                           	opt stack 13
 33227                           
 33228                           ;usb_device_msd.c: 1436: uint8_t MSDErrorCase;;usb_device_msd.c: 1437: bool HostMoreData
      +                          ThanDevice;;usb_device_msd.c: 1438: bool DeviceNoData;;usb_device_msd.c: 1441: if(Device
      +                          Bytes == 0)
 33229                           
 33230                           ; BSR set to: 0
 33231                           ;incstack = 0
 33232  010AEC  0100               	movlb	0	; () banked
 33233  010AEE  516A               	movf	MSDCheckForErrorCases@DeviceBytes& (0+255),w,b
 33234  010AF0  116B               	iorwf	(MSDCheckForErrorCases@DeviceBytes+1)& (0+255),w,b
 33235  010AF2  116C               	iorwf	(MSDCheckForErrorCases@DeviceBytes+2)& (0+255),w,b
 33236  010AF4  116D               	iorwf	(MSDCheckForErrorCases@DeviceBytes+3)& (0+255),w,b
 33237  010AF6  A4D8               	btfss	status,2,c
 33238  010AF8  D002               	goto	l726
 33239                           
 33240                           ; BSR set to: 0
 33241                           ;usb_device_msd.c: 1442: {;usb_device_msd.c: 1443: DeviceNoData = 1;
 33242  010AFA  0E01               	movlw	1
 33243  010AFC  D001               	goto	L57
 33244  010AFE                     l726:
 33245                           
 33246                           ; BSR set to: 0
 33247                           ;usb_device_msd.c: 1445: else;usb_device_msd.c: 1446: {;usb_device_msd.c: 1447: DeviceNo
      +                          Data = 0;
 33248                           
 33249                           ; BSR set to: 0
 33250  010AFE  0E00               	movlw	0
 33251  010B00                     L57:
 33252  010B00  6F6F               	movwf	MSDCheckForErrorCases@DeviceNoData& (0+255),b
 33253                           
 33254                           ; BSR set to: 0
 33255                           ;usb_device_msd.c: 1448: };usb_device_msd.c: 1453: if((MSDHostNoData == 1) && (DeviceNoD
      +                          ata == 1))
 33256                           
 33257                           ; BSR set to: 0
 33258  010B02  05F5               	decf	_MSDHostNoData& (0+255),w,b
 33259  010B04  A4D8               	btfss	status,2,c
 33260  010B06  D005               	goto	l728
 33261                           
 33262                           ; BSR set to: 0
 33263  010B08  056F               	decf	MSDCheckForErrorCases@DeviceNoData& (0+255),w,b
 33264  010B0A  A4D8               	btfss	status,2,c
 33265  010B0C  D002               	goto	l728
 33266                           
 33267                           ; BSR set to: 0
 33268                           ;usb_device_msd.c: 1454: {;usb_device_msd.c: 1455: return 0x00;
 33269  010B0E  0E00               	movlw	0
 33270                           
 33271                           ; BSR set to: 0
 33272  010B10  0012               	return	
 33273  010B12                     l728:
 33274                           
 33275                           ; BSR set to: 0
 33276                           ;usb_device_msd.c: 1456: };usb_device_msd.c: 1459: if(gblCBW.dCBWDataTransferLength == D
      +                          eviceBytes)
 33277                           
 33278                           ; BSR set to: 0
 33279  010B12  516A               	movf	MSDCheckForErrorCases@DeviceBytes& (0+255),w,b
 33280  010B14  0101               	movlb	1	; () banked
 33281  010B16  1908               	xorwf	(_gblCBW+8)& (0+255),w,b
 33282  010B18  E120               	bnz	l18396
 33283  010B1A  0100               	movlb	0	; () banked
 33284  010B1C  516B               	movf	(MSDCheckForErrorCases@DeviceBytes+1)& (0+255),w,b
 33285  010B1E  0101               	movlb	1	; () banked
 33286  010B20  1909               	xorwf	(_gblCBW+9)& (0+255),w,b
 33287  010B22  E11B               	bnz	l18396
 33288  010B24  0100               	movlb	0	; () banked
 33289  010B26  516C               	movf	(MSDCheckForErrorCases@DeviceBytes+2)& (0+255),w,b
 33290  010B28  0101               	movlb	1	; () banked
 33291  010B2A  190A               	xorwf	(_gblCBW+10)& (0+255),w,b
 33292  010B2C  E116               	bnz	l18396
 33293  010B2E  0100               	movlb	0	; () banked
 33294  010B30  516D               	movf	(MSDCheckForErrorCases@DeviceBytes+3)& (0+255),w,b
 33295  010B32  0101               	movlb	1	; () banked
 33296  010B34  190B               	xorwf	(_gblCBW+11)& (0+255),w,b
 33297  010B36  A4D8               	btfss	status,2,c
 33298  010B38  D010               	goto	l734
 33299                           
 33300                           ; BSR set to: 1
 33301                           ;usb_device_msd.c: 1460: {;usb_device_msd.c: 1462: if(MSD_State == 0x01)
 33302  010B3A  0100               	movlb	0	; () banked
 33303  010B3C  05FA               	decf	_MSD_State& (0+255),w,b
 33304  010B3E  A4D8               	btfss	status,2,c
 33305  010B40  D006               	goto	l731
 33306                           
 33307                           ; BSR set to: 0
 33308                           ;usb_device_msd.c: 1463: {;usb_device_msd.c: 1465: if(MSDCommandState != 0x2a)
 33309  010B42  0E2A               	movlw	42
 33310  010B44  19F9               	xorwf	_MSDCommandState& (0+255),w,b
 33311  010B46  B4D8               	btfsc	status,2,c
 33312  010B48  D008               	goto	l734
 33313                           
 33314                           ; BSR set to: 0
 33315                           ;usb_device_msd.c: 1466: {;usb_device_msd.c: 1467: return 0x00;
 33316  010B4A  0E00               	movlw	0
 33317                           
 33318                           ; BSR set to: 0
 33319  010B4C  0012               	return	
 33320  010B4E                     l731:
 33321                           
 33322                           ; BSR set to: 0
 33323                           ;usb_device_msd.c: 1470: else;usb_device_msd.c: 1471: {;usb_device_msd.c: 1474: if(MSDCo
      +                          mmandState == 0x2a)
 33324                           
 33325                           ; BSR set to: 0
 33326  010B4E  0E2A               	movlw	42
 33327  010B50  19F9               	xorwf	_MSDCommandState& (0+255),w,b
 33328  010B52  A4D8               	btfss	status,2,c
 33329  010B54  D002               	goto	l734
 33330                           
 33331                           ; BSR set to: 0
 33332                           ;usb_device_msd.c: 1475: {;usb_device_msd.c: 1476: return 0x00;
 33333  010B56  0E00               	movlw	0
 33334                           
 33335                           ; BSR set to: 0
 33336  010B58  0012               	return	
 33337  010B5A                     l734:
 33338  010B5A                     l18396:
 33339                           
 33340                           ;usb_device_msd.c: 1477: };usb_device_msd.c: 1478: };usb_device_msd.c: 1479: };usb_devic
      +                          e_msd.c: 1485: if(gblCBW.dCBWDataTransferLength > DeviceBytes)
 33341  010B5A  0101               	movlb	1	; () banked
 33342  010B5C  5108               	movf	(_gblCBW+8)& (0+255),w,b
 33343  010B5E  0100               	movlb	0	; () banked
 33344  010B60  5D6A               	subwf	MSDCheckForErrorCases@DeviceBytes& (0+255),w,b
 33345  010B62  0101               	movlb	1	; () banked
 33346  010B64  5109               	movf	(_gblCBW+9)& (0+255),w,b
 33347  010B66  0100               	movlb	0	; () banked
 33348  010B68  596B               	subwfb	(MSDCheckForErrorCases@DeviceBytes+1)& (0+255),w,b
 33349  010B6A  0101               	movlb	1	; () banked
 33350  010B6C  510A               	movf	(_gblCBW+10)& (0+255),w,b
 33351  010B6E  0100               	movlb	0	; () banked
 33352  010B70  596C               	subwfb	(MSDCheckForErrorCases@DeviceBytes+2)& (0+255),w,b
 33353  010B72  0101               	movlb	1	; () banked
 33354  010B74  510B               	movf	(_gblCBW+11)& (0+255),w,b
 33355  010B76  0100               	movlb	0	; () banked
 33356  010B78  596D               	subwfb	(MSDCheckForErrorCases@DeviceBytes+3)& (0+255),w,b
 33357  010B7A  B0D8               	btfsc	status,0,c
 33358  010B7C  D002               	goto	l735
 33359                           
 33360                           ; BSR set to: 0
 33361                           ;usb_device_msd.c: 1486: {;usb_device_msd.c: 1487: HostMoreDataThanDevice = 1;
 33362  010B7E  0E01               	movlw	1
 33363  010B80  D001               	goto	L58
 33364  010B82                     l735:
 33365                           
 33366                           ; BSR set to: 0
 33367                           ;usb_device_msd.c: 1489: else;usb_device_msd.c: 1490: {;usb_device_msd.c: 1491: HostMore
      +                          DataThanDevice = 0;
 33368                           
 33369                           ; BSR set to: 0
 33370  010B82  0E00               	movlw	0
 33371  010B84                     L58:
 33372  010B84  6F6E               	movwf	MSDCheckForErrorCases@HostMoreDataThanDevice& (0+255),b
 33373                           
 33374                           ; BSR set to: 0
 33375                           ;usb_device_msd.c: 1492: };usb_device_msd.c: 1495: if(MSD_State == 0x02)
 33376                           
 33377                           ; BSR set to: 0
 33378  010B86  0E02               	movlw	2
 33379  010B88  19FA               	xorwf	_MSD_State& (0+255),w,b
 33380  010B8A  A4D8               	btfss	status,2,c
 33381  010B8C  D014               	goto	l737
 33382                           
 33383                           ; BSR set to: 0
 33384                           ;usb_device_msd.c: 1496: {;usb_device_msd.c: 1498: if((MSDCommandState != 0x2a) && (Devi
      +                          ceNoData == 0))
 33385  010B8E  0E2A               	movlw	42
 33386  010B90  19F9               	xorwf	_MSDCommandState& (0+255),w,b
 33387  010B92  B4D8               	btfsc	status,2,c
 33388  010B94  D005               	goto	l738
 33389                           
 33390                           ; BSR set to: 0
 33391  010B96  516F               	movf	MSDCheckForErrorCases@DeviceNoData& (0+255),w,b
 33392  010B98  A4D8               	btfss	status,2,c
 33393  010B9A  D002               	goto	l738
 33394  010B9C                     u17880:
 33395                           
 33396                           ; BSR set to: 0
 33397                           ;usb_device_msd.c: 1499: MSDErrorCase = 0x05;
 33398  010B9C  0E05               	movlw	5
 33399  010B9E  D01D               	goto	L61
 33400  010BA0                     l738:
 33401                           
 33402                           ; BSR set to: 0
 33403                           ;usb_device_msd.c: 1501: else if(MSDHostNoData == 1)
 33404                           
 33405                           ; BSR set to: 0
 33406  010BA0  05F5               	decf	_MSDHostNoData& (0+255),w,b
 33407  010BA2  B4D8               	btfsc	status,2,c
 33408  010BA4  D00F               	goto	u17930
 33409                           
 33410                           ; BSR set to: 0
 33411                           ;usb_device_msd.c: 1504: else if(DeviceNoData == 1)
 33412                           
 33413                           ; BSR set to: 0
 33414                           
 33415                           ; BSR set to: 0
 33416                           ;usb_device_msd.c: 1502: MSDErrorCase = 0x01;
 33417  010BA6  056F               	decf	MSDCheckForErrorCases@DeviceNoData& (0+255),w,b
 33418  010BA8  B4D8               	btfsc	status,2,c
 33419  010BAA  D003               	goto	u17910
 33420                           
 33421                           ; BSR set to: 0
 33422                           ;usb_device_msd.c: 1507: else if(HostMoreDataThanDevice == 1)
 33423                           
 33424                           ; BSR set to: 0
 33425                           
 33426                           ; BSR set to: 0
 33427                           ;usb_device_msd.c: 1505: MSDErrorCase = 0x04;
 33428  010BAC  056E               	decf	MSDCheckForErrorCases@HostMoreDataThanDevice& (0+255),w,b
 33429  010BAE  A4D8               	btfss	status,2,c
 33430  010BB0  D7F5               	goto	u17880
 33431  010BB2                     u17910:
 33432                           
 33433                           ; BSR set to: 0
 33434                           ;usb_device_msd.c: 1508: MSDErrorCase = 0x04;
 33435  010BB2  0E04               	movlw	4
 33436  010BB4  D012               	goto	L61
 33437  010BB6                     l737:
 33438                           
 33439                           ; BSR set to: 0
 33440                           ;usb_device_msd.c: 1513: else;usb_device_msd.c: 1514: {;usb_device_msd.c: 1516: if(MSDCo
      +                          mmandState == 0x2a)
 33441                           
 33442                           ; BSR set to: 0
 33443  010BB6  0E2A               	movlw	42
 33444  010BB8  19F9               	xorwf	_MSDCommandState& (0+255),w,b
 33445  010BBA  B4D8               	btfsc	status,2,c
 33446  010BBC  D00D               	goto	l753
 33447                           
 33448                           ; BSR set to: 0
 33449                           ;usb_device_msd.c: 1519: else if(MSDHostNoData == 1)
 33450                           
 33451                           ; BSR set to: 0
 33452                           
 33453                           ; BSR set to: 0
 33454                           ;usb_device_msd.c: 1517: MSDErrorCase = 0x03;
 33455  010BBE  05F5               	decf	_MSDHostNoData& (0+255),w,b
 33456  010BC0  A4D8               	btfss	status,2,c
 33457  010BC2  D002               	goto	l749
 33458  010BC4                     u17930:
 33459                           
 33460                           ; BSR set to: 0
 33461                           ;usb_device_msd.c: 1520: MSDErrorCase = 0x01;
 33462  010BC4  0E01               	movlw	1
 33463  010BC6  D009               	goto	L61
 33464  010BC8                     l749:
 33465                           
 33466                           ; BSR set to: 0
 33467                           ;usb_device_msd.c: 1522: else if(DeviceNoData == 1)
 33468                           
 33469                           ; BSR set to: 0
 33470  010BC8  056F               	decf	MSDCheckForErrorCases@DeviceNoData& (0+255),w,b
 33471  010BCA  B4D8               	btfsc	status,2,c
 33472  010BCC  D003               	goto	u17950
 33473                           
 33474                           ; BSR set to: 0
 33475                           ;usb_device_msd.c: 1525: else if(HostMoreDataThanDevice == 1)
 33476                           
 33477                           ; BSR set to: 0
 33478                           
 33479                           ; BSR set to: 0
 33480                           ;usb_device_msd.c: 1523: MSDErrorCase = 0x02;
 33481  010BCE  056E               	decf	MSDCheckForErrorCases@HostMoreDataThanDevice& (0+255),w,b
 33482  010BD0  A4D8               	btfss	status,2,c
 33483  010BD2  D002               	goto	l753
 33484  010BD4                     u17950:
 33485                           
 33486                           ; BSR set to: 0
 33487                           ;usb_device_msd.c: 1526: MSDErrorCase = 0x02;
 33488  010BD4  0E02               	movlw	2
 33489  010BD6  D001               	goto	L61
 33490  010BD8                     l753:
 33491                           
 33492                           ; BSR set to: 0
 33493                           ;usb_device_msd.c: 1528: else;usb_device_msd.c: 1529: MSDErrorCase = 0x03;
 33494                           
 33495                           ; BSR set to: 0
 33496  010BD8  0E03               	movlw	3
 33497  010BDA                     L61:
 33498  010BDA  6F70               	movwf	MSDCheckForErrorCases@MSDErrorCase& (0+255),b
 33499                           
 33500                           ; BSR set to: 0
 33501                           ;usb_device_msd.c: 1530: };usb_device_msd.c: 1532: MSDErrorHandler(MSDErrorCase);
 33502                           
 33503                           ; BSR set to: 0
 33504                           
 33505                           ; BSR set to: 0
 33506                           
 33507                           ; BSR set to: 0
 33508                           
 33509                           ; BSR set to: 0
 33510                           
 33511                           ; BSR set to: 0
 33512  010BDC  5170               	movf	MSDCheckForErrorCases@MSDErrorCase& (0+255),w,b
 33513  010BDE  ECCB  F07F         	call	_MSDErrorHandler
 33514                           
 33515                           ;usb_device_msd.c: 1533: return MSDErrorCase;
 33516  010BE2  0100               	movlb	0	; () banked
 33517  010BE4  5170               	movf	MSDCheckForErrorCases@MSDErrorCase& (0+255),w,b
 33518  010BE6  0012               	return	
 33519  010BE8                     __end_of_MSDCheckForErrorCases:
 33520                           	opt stack 0
 33521                           tosu	equ	0xFFF
 33522                           tosh	equ	0xFFE
 33523                           tosl	equ	0xFFD
 33524                           pclath	equ	0xFFA
 33525                           tblptru	equ	0xFF8
 33526                           tblptrh	equ	0xFF7
 33527                           tblptrl	equ	0xFF6
 33528                           tablat	equ	0xFF5
 33529                           prodh	equ	0xFF4
 33530                           prodl	equ	0xFF3
 33531                           intcon	equ	0xFF2
 33532                           postinc0	equ	0xFEE
 33533                           wreg	equ	0xFE8
 33534                           indf1	equ	0xFE7
 33535                           postinc1	equ	0xFE6
 33536                           postdec1	equ	0xFE5
 33537                           plusw1	equ	0xFE3
 33538                           fsr1h	equ	0xFE2
 33539                           fsr1l	equ	0xFE1
 33540                           indf2	equ	0xFDF
 33541                           postinc2	equ	0xFDE
 33542                           postdec2	equ	0xFDD
 33543                           plusw2	equ	0xFDB
 33544                           fsr2h	equ	0xFDA
 33545                           fsr2l	equ	0xFD9
 33546                           status	equ	0xFD8
 33547                           
 33548 ;; *************** function _MSDErrorHandler *****************
 33549 ;; Defined at:
 33550 ;;		line 1577 in file "usb_device_msd.c"
 33551 ;; Parameters:    Size  Location     Type
 33552 ;;  ErrorCase       1    wreg     unsigned char 
 33553 ;; Auto vars:     Size  Location     Type
 33554 ;;  ErrorCase       1    8[BANK0 ] unsigned char 
 33555 ;;  OldMSD_State    1    9[BANK0 ] unsigned char 
 33556 ;; Return value:  Size  Location     Type
 33557 ;;                  1    wreg      void 
 33558 ;; Registers used:
 33559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33560 ;; Tracked objects:
 33561 ;;		On entry : 0/0
 33562 ;;		On exit  : 0/0
 33563 ;;		Unchanged: 0/0
 33564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 33565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33569 ;;Total ram usage:        2 bytes
 33570 ;; Hardware stack levels used:    1
 33571 ;; Hardware stack levels required when called:   11
 33572 ;; This function calls:
 33573 ;;		_ResetSenseData
 33574 ;;		_USBStallEndpoint
 33575 ;; This function is called by:
 33576 ;;		_MSDProcessCommandMediaAbsent
 33577 ;;		_MSDProcessCommandMediaPresent
 33578 ;;		_MSDCheckForErrorCases
 33579 ;; This function uses a non-reentrant model
 33580 ;;
 33581                           
 33582                           	psect	text124
 33583  00FF96                     __ptext124:
 33584                           	opt stack 0
 33585  00FF96                     _MSDErrorHandler:
 33586                           	opt stack 13
 33587                           
 33588                           ; BSR set to: 0
 33589                           ;incstack = 0
 33590                           ;MSDErrorHandler@ErrorCase stored from wreg
 33591  00FF96  0100               	movlb	0	; () banked
 33592  00FF98  6F68               	movwf	MSDErrorHandler@ErrorCase& (0+255),b
 33593                           
 33594                           ;usb_device_msd.c: 1579: uint8_t OldMSD_State;;usb_device_msd.c: 1583: if((((USBMSDInHan
      +                          dle != 0x0000) && ((*(volatile uint8_t*)USBMSDInHandle & 0x80) != 0x00))) || (((USBMSDOu
      +                          tHandle != 0x0000) && ((*(volatile uint8_t*)USBMSDOutHandle & 0x80) != 0x00))))
 33595  00FF9A  0100               	movlb	0	; () banked
 33596  00FF9C  51ED               	movf	_USBMSDInHandle& (0+255),w,b
 33597  00FF9E  11EE               	iorwf	(_USBMSDInHandle+1)& (0+255),w,b
 33598  00FFA0  B4D8               	btfsc	status,2,c
 33599  00FFA2  D006               	goto	u17690
 33600                           
 33601                           ; BSR set to: 0
 33602  00FFA4  C0ED  FFD9         	movff	_USBMSDInHandle,fsr2l
 33603  00FFA8  C0EE  FFDA         	movff	_USBMSDInHandle+1,fsr2h
 33604  00FFAC  BEDF               	btfsc	indf2,7,c
 33605  00FFAE  0012               	return	
 33606  00FFB0                     u17690:
 33607                           
 33608                           ; BSR set to: 0
 33609                           
 33610                           ; BSR set to: 0
 33611  00FFB0  51EF               	movf	_USBMSDOutHandle& (0+255),w,b
 33612  00FFB2  11F0               	iorwf	(_USBMSDOutHandle+1)& (0+255),w,b
 33613  00FFB4  B4D8               	btfsc	status,2,c
 33614  00FFB6  D006               	goto	l757
 33615                           
 33616                           ; BSR set to: 0
 33617  00FFB8  C0EF  FFD9         	movff	_USBMSDOutHandle,fsr2l
 33618  00FFBC  C0F0  FFDA         	movff	_USBMSDOutHandle+1,fsr2h
 33619  00FFC0  BEDF               	btfsc	indf2,7,c
 33620  00FFC2  0012               	return	
 33621  00FFC4                     l757:
 33622                           
 33623                           ; BSR set to: 0
 33624                           ;usb_device_msd.c: 1586: };usb_device_msd.c: 1590: OldMSD_State = MSD_State;
 33625  00FFC4  C0FA  F069         	movff	_MSD_State,MSDErrorHandler@OldMSD_State
 33626                           
 33627                           ;usb_device_msd.c: 1593: MSDCommandState = 0xFF;
 33628  00FFC8  69F9               	setf	_MSDCommandState& (0+255),b
 33629                           
 33630                           ; BSR set to: 0
 33631                           ;usb_device_msd.c: 1594: MSDReadState = 0x00;
 33632  00FFCA  0E00               	movlw	0
 33633  00FFCC  6FF8               	movwf	_MSDReadState& (0+255),b
 33634                           
 33635                           ;usb_device_msd.c: 1595: MSDWriteState = 0x00;
 33636  00FFCE  0E00               	movlw	0
 33637  00FFD0  6E21               	movwf	_MSDWriteState,c
 33638                           
 33639                           ; BSR set to: 0
 33640                           ;usb_device_msd.c: 1597: msd_csw.dCSWDataResidue = gblCBW.dCBWDataTransferLength;
 33641  00FFD2  C108  FD88         	movff	_gblCBW+8,3464	;volatile
 33642  00FFD6  C109  FD89         	movff	_gblCBW+9,3465	;volatile
 33643  00FFDA  C10A  FD8A         	movff	_gblCBW+10,3466	;volatile
 33644  00FFDE  C10B  FD8B         	movff	_gblCBW+11,3467	;volatile
 33645                           
 33646                           ;usb_device_msd.c: 1598: msd_csw.bCSWStatus = 0x01;
 33647  00FFE2  0E01               	movlw	1
 33648  00FFE4  010D               	movlb	13	; () banked
 33649  00FFE6  6F8C               	movwf	140,b	;volatile
 33650                           
 33651                           ;usb_device_msd.c: 1599: MSD_State = 0x03;
 33652  00FFE8  0E03               	movlw	3
 33653  00FFEA  0100               	movlb	0	; () banked
 33654  00FFEC  6FFA               	movwf	_MSD_State& (0+255),b
 33655                           
 33656                           ;usb_device_msd.c: 1603: switch(ErrorCase)
 33657  00FFEE  D04B               	goto	l763
 33658  00FFF0                     
 33659                           ; BSR set to: 0
 33660                           ;usb_device_msd.c: 1606: msd_csw.bCSWStatus = 0x02;
 33661                           
 33662                           ; BSR set to: 0
 33663  00FFF0  0E02               	movlw	2
 33664  00FFF2  010D               	movlb	13	; () banked
 33665  00FFF4  6F8C               	movwf	140,b	;volatile
 33666                           
 33667                           ;usb_device_msd.c: 1607: break;
 33668  00FFF6  0012               	return	
 33669  00FFF8                     
 33670                           ;usb_device_msd.c: 1610: USBStallEndpoint(2u, 1);
 33671                           
 33672                           ; BSR set to: 13
 33673  00FFF8  0E01               	movlw	1
 33674  00FFFA  0100               	movlb	0	; () banked
 33675  00FFFC  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 33676  00FFFE  0E02               	movlw	2
 33677  010000  EC65  F081         	call	_USBStallEndpoint
 33678                           
 33679                           ;usb_device_msd.c: 1611: break;
 33680  010004  0012               	return	
 33681  010006                     
 33682                           ;usb_device_msd.c: 1614: msd_csw.bCSWStatus = 0x02;
 33683  010006  0E02               	movlw	2
 33684  010008  010D               	movlb	13	; () banked
 33685  01000A  6F8C               	movwf	140,b	;volatile
 33686                           
 33687                           ; BSR set to: 13
 33688                           ;usb_device_msd.c: 1615: USBStallEndpoint(2u, 1);
 33689  01000C  0E01               	movlw	1
 33690  01000E  0100               	movlb	0	; () banked
 33691  010010  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 33692  010012  0E02               	movlw	2
 33693  010014  EC65  F081         	call	_USBStallEndpoint
 33694                           
 33695                           ;usb_device_msd.c: 1616: break;
 33696  010018  0012               	return	
 33697  01001A                     
 33698                           ;usb_device_msd.c: 1619: USBStallEndpoint(2u, 0);
 33699  01001A  0E00               	movlw	0
 33700  01001C  0100               	movlb	0	; () banked
 33701  01001E  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 33702  010020  0E02               	movlw	2
 33703  010022  EC65  F081         	call	_USBStallEndpoint
 33704                           
 33705                           ;usb_device_msd.c: 1620: break;
 33706  010026  0012               	return	
 33707  010028                     
 33708                           ;usb_device_msd.c: 1623: msd_csw.bCSWStatus = 0x02;
 33709  010028  0E02               	movlw	2
 33710  01002A  010D               	movlb	13	; () banked
 33711  01002C  6F8C               	movwf	140,b	;volatile
 33712                           
 33713                           ; BSR set to: 13
 33714                           ;usb_device_msd.c: 1624: USBStallEndpoint(2u, 0);
 33715  01002E  0E00               	movlw	0
 33716  010030  0100               	movlb	0	; () banked
 33717  010032  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 33718  010034  0E02               	movlw	2
 33719  010036  EC65  F081         	call	_USBStallEndpoint
 33720                           
 33721                           ;usb_device_msd.c: 1625: break;
 33722  01003A  0012               	return	
 33723  01003C                     
 33724                           ;usb_device_msd.c: 1628: ResetSenseData();
 33725  01003C  ECDA  F097         	call	_ResetSenseData	;wreg free
 33726                           
 33727                           ;usb_device_msd.c: 1629: gblSenseData[0].SenseKey=0x5;
 33728  010040  0101               	movlb	1	; () banked
 33729  010042  5121               	movf	(_gblSenseData+2)& (0+255),w,b
 33730  010044  0BF0               	andlw	-16
 33731  010046  0905               	iorlw	5
 33732  010048  6F21               	movwf	(_gblSenseData+2)& (0+255),b
 33733                           
 33734                           ; BSR set to: 1
 33735                           ;usb_device_msd.c: 1630: gblSenseData[0].ASC=0x20;
 33736  01004A  0E20               	movlw	32
 33737  01004C  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 33738                           
 33739                           ; BSR set to: 1
 33740                           ;usb_device_msd.c: 1631: gblSenseData[0].ASCQ=0x00;
 33741  01004E  0E00               	movlw	0
 33742  010050  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 33743                           
 33744                           ; BSR set to: 1
 33745                           ;usb_device_msd.c: 1633: if((OldMSD_State == 0x02) && (gblCBW.dCBWDataTransferLength != 
      +                          0))
 33746  010052  0E02               	movlw	2
 33747  010054  0100               	movlb	0	; () banked
 33748  010056  1969               	xorwf	MSDErrorHandler@OldMSD_State& (0+255),w,b
 33749  010058  A4D8               	btfss	status,2,c
 33750  01005A  D00E               	goto	l771
 33751                           
 33752                           ; BSR set to: 0
 33753  01005C  0101               	movlb	1	; () banked
 33754  01005E  5108               	movf	(_gblCBW+8)& (0+255),w,b
 33755  010060  1109               	iorwf	(_gblCBW+9)& (0+255),w,b
 33756  010062  110A               	iorwf	(_gblCBW+10)& (0+255),w,b
 33757  010064  110B               	iorwf	(_gblCBW+11)& (0+255),w,b
 33758  010066  B4D8               	btfsc	status,2,c
 33759  010068  D007               	goto	l771
 33760                           
 33761                           ; BSR set to: 1
 33762                           ;usb_device_msd.c: 1634: {;usb_device_msd.c: 1635: USBStallEndpoint(2u, 0);
 33763  01006A  0E00               	movlw	0
 33764  01006C  0100               	movlb	0	; () banked
 33765  01006E  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 33766  010070  0E02               	movlw	2
 33767  010072  EC65  F081         	call	_USBStallEndpoint
 33768                           
 33769                           ;usb_device_msd.c: 1636: }
 33770  010076  0012               	return	
 33771  010078                     l771:
 33772                           
 33773                           ;usb_device_msd.c: 1637: else;usb_device_msd.c: 1638: {;usb_device_msd.c: 1639: USBStall
      +                          Endpoint(2u, 1);
 33774  010078  0E01               	movlw	1
 33775  01007A  0100               	movlb	0	; () banked
 33776  01007C  6F60               	movwf	USBStallEndpoint@dir& (0+255),b
 33777  01007E  0E02               	movlw	2
 33778  010080  EC65  F081         	call	_USBStallEndpoint
 33779                           
 33780                           ;usb_device_msd.c: 1644: }
 33781                           
 33782                           ;usb_device_msd.c: 1643: break;
 33783                           
 33784                           ;usb_device_msd.c: 1642: default:
 33785                           
 33786                           ;usb_device_msd.c: 1640: };usb_device_msd.c: 1641: break;
 33787  010084  0012               	return	
 33788  010086                     l763:
 33789  010086  0100               	movlb	0	; () banked
 33790  010088  5168               	movf	MSDErrorHandler@ErrorCase& (0+255),w,b
 33791                           
 33792                           ; Switch size 1, requested type "space"
 33793                           ; Number of cases is 6, Range of values is 1 to 127
 33794                           ; switch strategies available:
 33795                           ; Name         Instructions Cycles
 33796                           ; simple_byte           19    10 (average)
 33797                           ;	Chosen strategy is simple_byte
 33798  01008A  0A01               	xorlw	1	; case 1
 33799  01008C  B4D8               	btfsc	status,2,c
 33800  01008E  D7B0               	goto	l764
 33801  010090  0A03               	xorlw	3	; case 2
 33802  010092  B4D8               	btfsc	status,2,c
 33803  010094  D7B1               	goto	l766
 33804  010096  0A01               	xorlw	1	; case 3
 33805  010098  B4D8               	btfsc	status,2,c
 33806  01009A  D7B5               	goto	l767
 33807  01009C  0A07               	xorlw	7	; case 4
 33808  01009E  B4D8               	btfsc	status,2,c
 33809  0100A0  D7BC               	goto	l768
 33810  0100A2  0A01               	xorlw	1	; case 5
 33811  0100A4  B4D8               	btfsc	status,2,c
 33812  0100A6  D7C0               	goto	l769
 33813  0100A8  0A7A               	xorlw	122	; case 127
 33814  0100AA  A4D8               	btfss	status,2,c
 33815  0100AC  0012               	return	
 33816  0100AE  D7C6               	goto	l770
 33817  0100B0                     __end_of_MSDErrorHandler:
 33818                           	opt stack 0
 33819                           tosu	equ	0xFFF
 33820                           tosh	equ	0xFFE
 33821                           tosl	equ	0xFFD
 33822                           pclath	equ	0xFFA
 33823                           tblptru	equ	0xFF8
 33824                           tblptrh	equ	0xFF7
 33825                           tblptrl	equ	0xFF6
 33826                           tablat	equ	0xFF5
 33827                           prodh	equ	0xFF4
 33828                           prodl	equ	0xFF3
 33829                           intcon	equ	0xFF2
 33830                           postinc0	equ	0xFEE
 33831                           wreg	equ	0xFE8
 33832                           indf1	equ	0xFE7
 33833                           postinc1	equ	0xFE6
 33834                           postdec1	equ	0xFE5
 33835                           plusw1	equ	0xFE3
 33836                           fsr1h	equ	0xFE2
 33837                           fsr1l	equ	0xFE1
 33838                           indf2	equ	0xFDF
 33839                           postinc2	equ	0xFDE
 33840                           postdec2	equ	0xFDD
 33841                           plusw2	equ	0xFDB
 33842                           fsr2h	equ	0xFDA
 33843                           fsr2l	equ	0xFD9
 33844                           status	equ	0xFD8
 33845                           
 33846 ;; *************** function _USBStallEndpoint *****************
 33847 ;; Defined at:
 33848 ;;		line 1073 in file "usb_device.c"
 33849 ;; Parameters:    Size  Location     Type
 33850 ;;  ep              1    wreg     unsigned char 
 33851 ;;  dir             1    0[BANK0 ] unsigned char 
 33852 ;; Auto vars:     Size  Location     Type
 33853 ;;  ep              1    5[BANK0 ] unsigned char 
 33854 ;;  p               2    6[BANK0 ] PTR struct __BDT
 33855 ;;		 -> BDT(48), 
 33856 ;; Return value:  Size  Location     Type
 33857 ;;                  1    wreg      void 
 33858 ;; Registers used:
 33859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 33860 ;; Tracked objects:
 33861 ;;		On entry : 0/0
 33862 ;;		On exit  : 0/0
 33863 ;;		Unchanged: 0/0
 33864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 33865 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33866 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33867 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33868 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 33869 ;;Total ram usage:        8 bytes
 33870 ;; Hardware stack levels used:    1
 33871 ;; Hardware stack levels required when called:   10
 33872 ;; This function calls:
 33873 ;;		Nothing
 33874 ;; This function is called by:
 33875 ;;		_MSDTasks
 33876 ;;		_MSDReadHandler
 33877 ;;		_MSDWriteHandler
 33878 ;;		_MSDErrorHandler
 33879 ;; This function uses a non-reentrant model
 33880 ;;
 33881                           
 33882                           	psect	text125
 33883  0102CA                     __ptext125:
 33884                           	opt stack 0
 33885  0102CA                     _USBStallEndpoint:
 33886                           	opt stack 18
 33887                           
 33888                           ;incstack = 0
 33889                           ;USBStallEndpoint@ep stored from wreg
 33890  0102CA  0100               	movlb	0	; () banked
 33891  0102CC  6F65               	movwf	USBStallEndpoint@ep& (0+255),b
 33892                           
 33893                           ;usb_device.c: 1075: BDT_ENTRY *p;;usb_device.c: 1077: if(ep == 0)
 33894  0102CE  0100               	movlb	0	; () banked
 33895  0102D0  5165               	movf	USBStallEndpoint@ep& (0+255),w,b
 33896  0102D2  A4D8               	btfss	status,2,c
 33897  0102D4  D02B               	goto	l192
 33898                           
 33899                           ; BSR set to: 0
 33900                           ;usb_device.c: 1078: {;usb_device.c: 1082: pBDTEntryEP0OutNext->CNT = 8;
 33901  0102D6  EE20 F001          	lfsr	2,1
 33902  0102DA  501A               	movf	_pBDTEntryEP0OutNext,w,c
 33903  0102DC  26D9               	addwf	fsr2l,f,c
 33904  0102DE  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 33905  0102E0  22DA               	addwfc	fsr2h,f,c
 33906  0102E2  0E08               	movlw	8
 33907  0102E4  6EDF               	movwf	indf2,c
 33908                           
 33909                           ;usb_device.c: 1083: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 33910  0102E6  EE20 F002          	lfsr	2,2
 33911  0102EA  501A               	movf	_pBDTEntryEP0OutNext,w,c
 33912  0102EC  26D9               	addwf	fsr2l,f,c
 33913  0102EE  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 33914  0102F0  22DA               	addwfc	fsr2h,f,c
 33915  0102F2  0E30               	movlw	48
 33916  0102F4  6EDE               	movwf	postinc2,c
 33917  0102F6  0E0D               	movlw	13
 33918  0102F8  6EDD               	movwf	postdec2,c
 33919                           
 33920                           ; BSR set to: 0
 33921                           ;usb_device.c: 1084: pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 33922  0102FA  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 33923  0102FE  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 33924  010302  0E0C               	movlw	12
 33925  010304  6EDF               	movwf	indf2,c
 33926                           
 33927                           ; BSR set to: 0
 33928                           ;usb_device.c: 1085: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 33929  010306  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 33930  01030A  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 33931  01030E  0E00               	movlw	0
 33932  010310  8EDB               	bsf	plusw2,7,c
 33933                           
 33934                           ;usb_device.c: 1086: pBDTEntryIn[0]->STAT.Val = 0x04;
 33935  010312  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 33936  010316  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 33937  01031A  0E04               	movlw	4
 33938  01031C  6EDF               	movwf	indf2,c
 33939                           
 33940                           ; BSR set to: 0
 33941                           ;usb_device.c: 1087: pBDTEntryIn[0]->STAT.Val |= 0x80;
 33942  01031E  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 33943  010322  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 33944  010326  0E00               	movlw	0
 33945  010328  8EDB               	bsf	plusw2,7,c
 33946                           
 33947                           ;usb_device.c: 1089: }
 33948  01032A  0012               	return	
 33949  01032C                     l192:
 33950                           
 33951                           ; BSR set to: 0
 33952                           ;usb_device.c: 1090: else;usb_device.c: 1091: {;usb_device.c: 1092: p = (BDT_ENTRY*)(&BD
      +                          T[(4*ep+2*dir+0)]);
 33953                           
 33954                           ; BSR set to: 0
 33955  01032C  5160               	movf	USBStallEndpoint@dir& (0+255),w,b
 33956  01032E  6F61               	movwf	??_USBStallEndpoint& (0+255),b
 33957  010330  6B62               	clrf	(??_USBStallEndpoint+1)& (0+255),b
 33958  010332  90D8               	bcf	status,0,c
 33959  010334  3761               	rlcf	??_USBStallEndpoint& (0+255),f,b
 33960  010336  3762               	rlcf	(??_USBStallEndpoint+1)& (0+255),f,b
 33961  010338  5165               	movf	USBStallEndpoint@ep& (0+255),w,b
 33962  01033A  6F63               	movwf	(??_USBStallEndpoint+2)& (0+255),b
 33963  01033C  6B64               	clrf	(??_USBStallEndpoint+3)& (0+255),b
 33964  01033E  90D8               	bcf	status,0,c
 33965  010340  3763               	rlcf	(??_USBStallEndpoint+2)& (0+255),f,b
 33966  010342  3764               	rlcf	(??_USBStallEndpoint+3)& (0+255),f,b
 33967  010344  90D8               	bcf	status,0,c
 33968  010346  3763               	rlcf	(??_USBStallEndpoint+2)& (0+255),f,b
 33969  010348  3764               	rlcf	(??_USBStallEndpoint+3)& (0+255),f,b
 33970  01034A  5161               	movf	??_USBStallEndpoint& (0+255),w,b
 33971  01034C  2763               	addwf	(??_USBStallEndpoint+2)& (0+255),f,b
 33972  01034E  5162               	movf	(??_USBStallEndpoint+1)& (0+255),w,b
 33973  010350  2364               	addwfc	(??_USBStallEndpoint+3)& (0+255),f,b
 33974  010352  90D8               	bcf	status,0,c
 33975  010354  3763               	rlcf	(??_USBStallEndpoint+2)& (0+255),f,b
 33976  010356  3764               	rlcf	(??_USBStallEndpoint+3)& (0+255),f,b
 33977  010358  90D8               	bcf	status,0,c
 33978  01035A  3763               	rlcf	(??_USBStallEndpoint+2)& (0+255),f,b
 33979  01035C  3764               	rlcf	(??_USBStallEndpoint+3)& (0+255),f,b
 33980  01035E  0E00               	movlw	0
 33981  010360  2563               	addwf	(??_USBStallEndpoint+2)& (0+255),w,b
 33982  010362  6F66               	movwf	USBStallEndpoint@p& (0+255),b
 33983  010364  0E0D               	movlw	13
 33984  010366  2164               	addwfc	(??_USBStallEndpoint+3)& (0+255),w,b
 33985  010368  6F67               	movwf	(USBStallEndpoint@p+1)& (0+255),b
 33986                           
 33987                           ; BSR set to: 0
 33988                           ;usb_device.c: 1093: p->STAT.Val |= 0x04;
 33989  01036A  C066  FFD9         	movff	USBStallEndpoint@p,fsr2l
 33990  01036E  C067  FFDA         	movff	USBStallEndpoint@p+1,fsr2h
 33991  010372  0E00               	movlw	0
 33992  010374  84DB               	bsf	plusw2,2,c
 33993                           
 33994                           ; BSR set to: 0
 33995                           ;usb_device.c: 1094: p->STAT.Val |= 0x80;
 33996  010376  C066  FFD9         	movff	USBStallEndpoint@p,fsr2l
 33997  01037A  C067  FFDA         	movff	USBStallEndpoint@p+1,fsr2h
 33998  01037E  0E00               	movlw	0
 33999  010380  8EDB               	bsf	plusw2,7,c
 34000                           
 34001                           ; BSR set to: 0
 34002                           ;usb_device.c: 1099: p = (BDT_ENTRY*)(&BDT[(4*ep+2*dir+1)]);
 34003  010382  5165               	movf	USBStallEndpoint@ep& (0+255),w,b
 34004  010384  0D04               	mullw	4
 34005  010386  CFF3 F061          	movff	prodl,??_USBStallEndpoint
 34006  01038A  CFF4 F062          	movff	prodh,??_USBStallEndpoint+1
 34007  01038E  5160               	movf	USBStallEndpoint@dir& (0+255),w,b
 34008  010390  0D02               	mullw	2
 34009  010392  50F3               	movf	prodl,w,c
 34010  010394  2761               	addwf	??_USBStallEndpoint& (0+255),f,b
 34011  010396  50F4               	movf	prodh,w,c
 34012  010398  2362               	addwfc	(??_USBStallEndpoint+1)& (0+255),f,b
 34013  01039A  90D8               	bcf	status,0,c
 34014  01039C  3761               	rlcf	??_USBStallEndpoint& (0+255),f,b
 34015  01039E  3762               	rlcf	(??_USBStallEndpoint+1)& (0+255),f,b
 34016  0103A0  90D8               	bcf	status,0,c
 34017  0103A2  3761               	rlcf	??_USBStallEndpoint& (0+255),f,b
 34018  0103A4  3762               	rlcf	(??_USBStallEndpoint+1)& (0+255),f,b
 34019  0103A6  0E04               	movlw	4
 34020  0103A8  2761               	addwf	??_USBStallEndpoint& (0+255),f,b
 34021  0103AA  0E00               	movlw	0
 34022  0103AC  2362               	addwfc	(??_USBStallEndpoint+1)& (0+255),f,b
 34023  0103AE  0E00               	movlw	0
 34024  0103B0  2561               	addwf	??_USBStallEndpoint& (0+255),w,b
 34025  0103B2  6F66               	movwf	USBStallEndpoint@p& (0+255),b
 34026  0103B4  0E0D               	movlw	13
 34027  0103B6  2162               	addwfc	(??_USBStallEndpoint+1)& (0+255),w,b
 34028  0103B8  6F67               	movwf	(USBStallEndpoint@p+1)& (0+255),b
 34029                           
 34030                           ; BSR set to: 0
 34031                           ;usb_device.c: 1100: p->STAT.Val |= 0x04;
 34032  0103BA  C066  FFD9         	movff	USBStallEndpoint@p,fsr2l
 34033  0103BE  C067  FFDA         	movff	USBStallEndpoint@p+1,fsr2h
 34034  0103C2  0E00               	movlw	0
 34035  0103C4  84DB               	bsf	plusw2,2,c
 34036                           
 34037                           ; BSR set to: 0
 34038                           ;usb_device.c: 1101: p->STAT.Val |= 0x80;
 34039  0103C6  C066  FFD9         	movff	USBStallEndpoint@p,fsr2l
 34040  0103CA  C067  FFDA         	movff	USBStallEndpoint@p+1,fsr2h
 34041  0103CE  0E00               	movlw	0
 34042  0103D0  8EDB               	bsf	plusw2,7,c
 34043  0103D2  0012               	return	
 34044  0103D4                     __end_of_USBStallEndpoint:
 34045                           	opt stack 0
 34046                           tosu	equ	0xFFF
 34047                           tosh	equ	0xFFE
 34048                           tosl	equ	0xFFD
 34049                           pclath	equ	0xFFA
 34050                           tblptru	equ	0xFF8
 34051                           tblptrh	equ	0xFF7
 34052                           tblptrl	equ	0xFF6
 34053                           tablat	equ	0xFF5
 34054                           prodh	equ	0xFF4
 34055                           prodl	equ	0xFF3
 34056                           intcon	equ	0xFF2
 34057                           postinc0	equ	0xFEE
 34058                           wreg	equ	0xFE8
 34059                           indf1	equ	0xFE7
 34060                           postinc1	equ	0xFE6
 34061                           postdec1	equ	0xFE5
 34062                           plusw1	equ	0xFE3
 34063                           fsr1h	equ	0xFE2
 34064                           fsr1l	equ	0xFE1
 34065                           indf2	equ	0xFDF
 34066                           postinc2	equ	0xFDE
 34067                           postdec2	equ	0xFDD
 34068                           plusw2	equ	0xFDB
 34069                           fsr2h	equ	0xFDA
 34070                           fsr2l	equ	0xFD9
 34071                           status	equ	0xFD8
 34072                           
 34073 ;; *************** function _ResetSenseData *****************
 34074 ;; Defined at:
 34075 ;;		line 1373 in file "usb_device_msd.c"
 34076 ;; Parameters:    Size  Location     Type
 34077 ;;		None
 34078 ;; Auto vars:     Size  Location     Type
 34079 ;;		None
 34080 ;; Return value:  Size  Location     Type
 34081 ;;                  1    wreg      void 
 34082 ;; Registers used:
 34083 ;;		wreg, status,2
 34084 ;; Tracked objects:
 34085 ;;		On entry : 0/0
 34086 ;;		On exit  : 0/0
 34087 ;;		Unchanged: 0/0
 34088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 34089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34093 ;;Total ram usage:        0 bytes
 34094 ;; Hardware stack levels used:    1
 34095 ;; Hardware stack levels required when called:   10
 34096 ;; This function calls:
 34097 ;;		Nothing
 34098 ;; This function is called by:
 34099 ;;		_MSDProcessCommandMediaAbsent
 34100 ;;		_MSDProcessCommandMediaPresent
 34101 ;;		_MSDErrorHandler
 34102 ;; This function uses a non-reentrant model
 34103 ;;
 34104                           
 34105                           	psect	text126
 34106  012FB4                     __ptext126:
 34107                           	opt stack 0
 34108  012FB4                     _ResetSenseData:
 34109                           	opt stack 16
 34110                           
 34111                           ;usb_device_msd.c: 1375: gblSenseData[0].ResponseCode=0x70;
 34112                           
 34113                           ; BSR set to: 0
 34114                           ;incstack = 0
 34115  012FB4  0101               	movlb	1	; () banked
 34116  012FB6  911F               	bcf	_gblSenseData& (0+255),0,b
 34117  012FB8  931F               	bcf	_gblSenseData& (0+255),1,b
 34118  012FBA  951F               	bcf	_gblSenseData& (0+255),2,b
 34119  012FBC  971F               	bcf	_gblSenseData& (0+255),3,b
 34120  012FBE  891F               	bsf	_gblSenseData& (0+255),4,b
 34121  012FC0  8B1F               	bsf	_gblSenseData& (0+255),5,b
 34122  012FC2  8D1F               	bsf	_gblSenseData& (0+255),6,b
 34123                           
 34124                           ;usb_device_msd.c: 1376: gblSenseData[0].VALID=0;
 34125  012FC4  9F1F               	bcf	_gblSenseData& (0+255),7,b
 34126                           
 34127                           ; BSR set to: 1
 34128                           ;usb_device_msd.c: 1377: gblSenseData[0].Obsolete=0x0;
 34129  012FC6  0E00               	movlw	0
 34130  012FC8  6F20               	movwf	(_gblSenseData+1)& (0+255),b
 34131                           
 34132                           ; BSR set to: 1
 34133                           ;usb_device_msd.c: 1378: gblSenseData[0].SenseKey=0x0;
 34134  012FCA  9121               	bcf	(_gblSenseData+2)& (0+255),0,b
 34135  012FCC  9321               	bcf	(_gblSenseData+2)& (0+255),1,b
 34136  012FCE  9521               	bcf	(_gblSenseData+2)& (0+255),2,b
 34137  012FD0  9721               	bcf	(_gblSenseData+2)& (0+255),3,b
 34138                           
 34139                           ; BSR set to: 1
 34140                           ;usb_device_msd.c: 1380: gblSenseData[0].ILI=0;
 34141  012FD2  9B21               	bcf	(_gblSenseData+2)& (0+255),5,b
 34142                           
 34143                           ; BSR set to: 1
 34144                           ;usb_device_msd.c: 1381: gblSenseData[0].EOM=0;
 34145  012FD4  9D21               	bcf	(_gblSenseData+2)& (0+255),6,b
 34146                           
 34147                           ; BSR set to: 1
 34148                           ;usb_device_msd.c: 1382: gblSenseData[0].FILEMARK=0;
 34149  012FD6  9F21               	bcf	(_gblSenseData+2)& (0+255),7,b
 34150                           
 34151                           ;usb_device_msd.c: 1383: gblSenseData[0].InformationB0=0x00;
 34152  012FD8  0E00               	movlw	0
 34153  012FDA  6F22               	movwf	(_gblSenseData+3)& (0+255),b
 34154                           
 34155                           ;usb_device_msd.c: 1384: gblSenseData[0].InformationB1=0x00;
 34156  012FDC  0E00               	movlw	0
 34157  012FDE  6F23               	movwf	(_gblSenseData+4)& (0+255),b
 34158                           
 34159                           ;usb_device_msd.c: 1385: gblSenseData[0].InformationB2=0x00;
 34160  012FE0  0E00               	movlw	0
 34161  012FE2  6F24               	movwf	(_gblSenseData+5)& (0+255),b
 34162                           
 34163                           ;usb_device_msd.c: 1386: gblSenseData[0].InformationB3=0x00;
 34164  012FE4  0E00               	movlw	0
 34165  012FE6  6F25               	movwf	(_gblSenseData+6)& (0+255),b
 34166                           
 34167                           ;usb_device_msd.c: 1387: gblSenseData[0].AddSenseLen=0x0a;
 34168  012FE8  0E0A               	movlw	10
 34169  012FEA  6F26               	movwf	(_gblSenseData+7)& (0+255),b
 34170                           
 34171                           ;usb_device_msd.c: 1388: gblSenseData[0].CmdSpecificInfo.Val=0x0;
 34172  012FEC  0E00               	movlw	0
 34173  012FEE  6F27               	movwf	(_gblSenseData+8)& (0+255),b
 34174  012FF0  0E00               	movlw	0
 34175  012FF2  6F28               	movwf	(_gblSenseData+9)& (0+255),b
 34176  012FF4  0E00               	movlw	0
 34177  012FF6  6F29               	movwf	(_gblSenseData+10)& (0+255),b
 34178  012FF8  0E00               	movlw	0
 34179  012FFA  6F2A               	movwf	(_gblSenseData+11)& (0+255),b
 34180                           
 34181                           ;usb_device_msd.c: 1389: gblSenseData[0].ASC=0x0;
 34182  012FFC  0E00               	movlw	0
 34183  012FFE  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 34184                           
 34185                           ;usb_device_msd.c: 1390: gblSenseData[0].ASCQ=0x0;
 34186  013000  0E00               	movlw	0
 34187  013002  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 34188                           
 34189                           ;usb_device_msd.c: 1391: gblSenseData[0].FRUC=0x0;
 34190  013004  0E00               	movlw	0
 34191  013006  6F2D               	movwf	(_gblSenseData+14)& (0+255),b
 34192                           
 34193                           ;usb_device_msd.c: 1392: gblSenseData[0].SenseKeySpecific[0]=0x0;
 34194  013008  0E00               	movlw	0
 34195  01300A  6F2E               	movwf	(_gblSenseData+15)& (0+255),b
 34196                           
 34197                           ;usb_device_msd.c: 1393: gblSenseData[0].SenseKeySpecific[1]=0x0;
 34198  01300C  0E00               	movlw	0
 34199  01300E  6F2F               	movwf	(_gblSenseData+16)& (0+255),b
 34200                           
 34201                           ;usb_device_msd.c: 1394: gblSenseData[0].SenseKeySpecific[2]=0x0;
 34202  013010  0E00               	movlw	0
 34203  013012  6F30               	movwf	(_gblSenseData+17)& (0+255),b
 34204                           
 34205                           ; BSR set to: 1
 34206  013014  0012               	return		;funcret
 34207  013016                     __end_of_ResetSenseData:
 34208                           	opt stack 0
 34209                           tosu	equ	0xFFF
 34210                           tosh	equ	0xFFE
 34211                           tosl	equ	0xFFD
 34212                           pclath	equ	0xFFA
 34213                           tblptru	equ	0xFF8
 34214                           tblptrh	equ	0xFF7
 34215                           tblptrl	equ	0xFF6
 34216                           tablat	equ	0xFF5
 34217                           prodh	equ	0xFF4
 34218                           prodl	equ	0xFF3
 34219                           intcon	equ	0xFF2
 34220                           postinc0	equ	0xFEE
 34221                           wreg	equ	0xFE8
 34222                           indf1	equ	0xFE7
 34223                           postinc1	equ	0xFE6
 34224                           postdec1	equ	0xFE5
 34225                           plusw1	equ	0xFE3
 34226                           fsr1h	equ	0xFE2
 34227                           fsr1l	equ	0xFE1
 34228                           indf2	equ	0xFDF
 34229                           postinc2	equ	0xFDE
 34230                           postdec2	equ	0xFDD
 34231                           plusw2	equ	0xFDB
 34232                           fsr2h	equ	0xFDA
 34233                           fsr2l	equ	0xFD9
 34234                           status	equ	0xFD8
 34235                           
 34236 ;; *************** function _ExternalFlash_SectorRead *****************
 34237 ;; Defined at:
 34238 ;;		line 40 in file "external_flash.c"
 34239 ;; Parameters:    Size  Location     Type
 34240 ;;  config          2   43[BANK0 ] PTR void 
 34241 ;;		 -> NULL(0), 
 34242 ;;  sector_addr     4   45[BANK0 ] unsigned long 
 34243 ;;  buffer          2   49[BANK0 ] PTR unsigned char 
 34244 ;;		 -> msd_buffer(512), 
 34245 ;; Auto vars:     Size  Location     Type
 34246 ;;  page            2   51[BANK0 ] unsigned int 
 34247 ;; Return value:  Size  Location     Type
 34248 ;;                  1    wreg      unsigned char 
 34249 ;; Registers used:
 34250 ;;		wreg, status,2, status,0, cstack
 34251 ;; Tracked objects:
 34252 ;;		On entry : 0/0
 34253 ;;		On exit  : 0/0
 34254 ;;		Unchanged: 0/0
 34255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 34256 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34259 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34260 ;;Total ram usage:       10 bytes
 34261 ;; Hardware stack levels used:    1
 34262 ;; Hardware stack levels required when called:   15
 34263 ;; This function calls:
 34264 ;;		_flash_sector_read
 34265 ;; This function is called by:
 34266 ;;		_MSDReadHandler
 34267 ;; This function uses a non-reentrant model
 34268 ;;
 34269                           
 34270                           	psect	text127
 34271  013DBE                     __ptext127:
 34272                           	opt stack 0
 34273  013DBE                     _ExternalFlash_SectorRead:
 34274                           	opt stack 10
 34275                           
 34276                           ;external_flash.c: 42: uint16_t page = (uint16_t) sector_addr;
 34277                           
 34278                           ; BSR set to: 1
 34279                           ;incstack = 0
 34280  013DBE  C08D  F093         	movff	ExternalFlash_SectorRead@sector_addr,ExternalFlash_SectorRead@page
 34281  013DC2  C08E  F094         	movff	ExternalFlash_SectorRead@sector_addr+1,ExternalFlash_SectorRead@page+1
 34282                           
 34283                           ;external_flash.c: 45: if(sector_addr >= 8192)
 34284  013DC6  0100               	movlb	0	; () banked
 34285  013DC8  5190               	movf	(ExternalFlash_SectorRead@sector_addr+3)& (0+255),w,b
 34286  013DCA  118F               	iorwf	(ExternalFlash_SectorRead@sector_addr+2)& (0+255),w,b
 34287  013DCC  E104               	bnz	u17960
 34288  013DCE  0E20               	movlw	32
 34289  013DD0  5D8E               	subwf	(ExternalFlash_SectorRead@sector_addr+1)& (0+255),w,b
 34290  013DD2  A0D8               	btfss	status,0,c
 34291  013DD4  D002               	goto	l1629
 34292  013DD6                     u17960:
 34293                           
 34294                           ; BSR set to: 0
 34295                           ;external_flash.c: 46: {;external_flash.c: 47: return 0;
 34296  013DD6  0E00               	movlw	0
 34297                           
 34298                           ; BSR set to: 0
 34299  013DD8  0012               	return	
 34300  013DDA                     l1629:
 34301                           
 34302                           ; BSR set to: 0
 34303                           ;external_flash.c: 48: };external_flash.c: 51: flash_sector_read(page, buffer);
 34304                           
 34305                           ; BSR set to: 0
 34306  013DDA  C093  F087         	movff	ExternalFlash_SectorRead@page,flash_sector_read@page
 34307  013DDE  C094  F088         	movff	ExternalFlash_SectorRead@page+1,flash_sector_read@page+1
 34308  013DE2  C091  F089         	movff	ExternalFlash_SectorRead@buffer,flash_sector_read@data
 34309  013DE6  C092  F08A         	movff	ExternalFlash_SectorRead@buffer+1,flash_sector_read@data+1
 34310  013DEA  EC68  F0A0         	call	_flash_sector_read	;wreg free
 34311                           
 34312                           ;external_flash.c: 53: return 1;
 34313  013DEE  0E01               	movlw	1
 34314  013DF0  0012               	return	
 34315  013DF2                     __end_of_ExternalFlash_SectorRead:
 34316                           	opt stack 0
 34317                           tosu	equ	0xFFF
 34318                           tosh	equ	0xFFE
 34319                           tosl	equ	0xFFD
 34320                           pclath	equ	0xFFA
 34321                           tblptru	equ	0xFF8
 34322                           tblptrh	equ	0xFF7
 34323                           tblptrl	equ	0xFF6
 34324                           tablat	equ	0xFF5
 34325                           prodh	equ	0xFF4
 34326                           prodl	equ	0xFF3
 34327                           intcon	equ	0xFF2
 34328                           postinc0	equ	0xFEE
 34329                           wreg	equ	0xFE8
 34330                           indf1	equ	0xFE7
 34331                           postinc1	equ	0xFE6
 34332                           postdec1	equ	0xFE5
 34333                           plusw1	equ	0xFE3
 34334                           fsr1h	equ	0xFE2
 34335                           fsr1l	equ	0xFE1
 34336                           indf2	equ	0xFDF
 34337                           postinc2	equ	0xFDE
 34338                           postdec2	equ	0xFDD
 34339                           plusw2	equ	0xFDB
 34340                           fsr2h	equ	0xFDA
 34341                           fsr2l	equ	0xFD9
 34342                           status	equ	0xFD8
 34343                           
 34344 ;; *************** function _flash_sector_read *****************
 34345 ;; Defined at:
 34346 ;;		line 426 in file "flash.c"
 34347 ;; Parameters:    Size  Location     Type
 34348 ;;  page            2   39[BANK0 ] unsigned int 
 34349 ;;  data            2   41[BANK0 ] PTR unsigned char 
 34350 ;;		 -> buffer(512), msd_buffer(512), 
 34351 ;; Auto vars:     Size  Location     Type
 34352 ;;		None
 34353 ;; Return value:  Size  Location     Type
 34354 ;;                  1    wreg      void 
 34355 ;; Registers used:
 34356 ;;		wreg, status,2, status,0, cstack
 34357 ;; Tracked objects:
 34358 ;;		On entry : 0/0
 34359 ;;		On exit  : 0/0
 34360 ;;		Unchanged: 0/0
 34361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 34362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34365 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34366 ;;Total ram usage:        4 bytes
 34367 ;; Hardware stack levels used:    1
 34368 ;; Hardware stack levels required when called:   14
 34369 ;; This function calls:
 34370 ;;		__flash_partial_read
 34371 ;; This function is called by:
 34372 ;;		_ExternalFlash_SectorRead
 34373 ;;		__get_available_cluster
 34374 ;;		__find_nth_cluster
 34375 ;;		__make_cluster_chain
 34376 ;;		_fat_find_file
 34377 ;;		_fat_get_format_status
 34378 ;; This function uses a non-reentrant model
 34379 ;;
 34380                           
 34381                           	psect	text128
 34382  0140D0                     __ptext128:
 34383                           	opt stack 0
 34384  0140D0                     _flash_sector_read:
 34385                           	opt stack 13
 34386                           
 34387                           ;flash.c: 429: _flash_partial_read(page, 0, 512, data);
 34388                           
 34389                           ;incstack = 0
 34390  0140D0  C087  F073         	movff	flash_sector_read@page,__flash_partial_read@page
 34391  0140D4  C088  F074         	movff	flash_sector_read@page+1,__flash_partial_read@page+1
 34392  0140D8  0E00               	movlw	0
 34393  0140DA  0100               	movlb	0	; () banked
 34394  0140DC  6F76               	movwf	(__flash_partial_read@start+1)& (0+255),b
 34395  0140DE  0E00               	movlw	0
 34396  0140E0  6F75               	movwf	__flash_partial_read@start& (0+255),b
 34397  0140E2  0E02               	movlw	2
 34398  0140E4  6F78               	movwf	(__flash_partial_read@length+1)& (0+255),b
 34399  0140E6  0E00               	movlw	0
 34400  0140E8  6F77               	movwf	__flash_partial_read@length& (0+255),b
 34401  0140EA  C089  F079         	movff	flash_sector_read@data,__flash_partial_read@data
 34402  0140EE  C08A  F07A         	movff	flash_sector_read@data+1,__flash_partial_read@data+1
 34403  0140F2  EC4B  F095         	call	__flash_partial_read	;wreg free
 34404  0140F6  0012               	return		;funcret
 34405  0140F8                     __end_of_flash_sector_read:
 34406                           	opt stack 0
 34407                           tosu	equ	0xFFF
 34408                           tosh	equ	0xFFE
 34409                           tosl	equ	0xFFD
 34410                           pclath	equ	0xFFA
 34411                           tblptru	equ	0xFF8
 34412                           tblptrh	equ	0xFF7
 34413                           tblptrl	equ	0xFF6
 34414                           tablat	equ	0xFF5
 34415                           prodh	equ	0xFF4
 34416                           prodl	equ	0xFF3
 34417                           intcon	equ	0xFF2
 34418                           postinc0	equ	0xFEE
 34419                           wreg	equ	0xFE8
 34420                           indf1	equ	0xFE7
 34421                           postinc1	equ	0xFE6
 34422                           postdec1	equ	0xFE5
 34423                           plusw1	equ	0xFE3
 34424                           fsr1h	equ	0xFE2
 34425                           fsr1l	equ	0xFE1
 34426                           indf2	equ	0xFDF
 34427                           postinc2	equ	0xFDE
 34428                           postdec2	equ	0xFDD
 34429                           plusw2	equ	0xFDB
 34430                           fsr2h	equ	0xFDA
 34431                           fsr2l	equ	0xFD9
 34432                           status	equ	0xFD8
 34433                           
 34434 ;; *************** function __flash_partial_read *****************
 34435 ;; Defined at:
 34436 ;;		line 309 in file "flash.c"
 34437 ;; Parameters:    Size  Location     Type
 34438 ;;  page            2   19[BANK0 ] unsigned int 
 34439 ;;  start           2   21[BANK0 ] unsigned int 
 34440 ;;  length          2   23[BANK0 ] unsigned int 
 34441 ;;  data            2   25[BANK0 ] PTR unsigned char 
 34442 ;;		 -> fat_modify_file@root(32), fat_resize_file@root(32), fat_read_from_file@root(32), fat_rename_file@root(32), 
 34443 ;;		 -> fat_get_file_size@file_size(4), _get_first_cluster@first_cluster(2), _read_fat@value(2), _root_is_available@firs
      +t_byte(1), 
 34444 ;;		 -> buffer(512), msd_buffer(512), 
 34445 ;; Auto vars:     Size  Location     Type
 34446 ;;  command         4   31[BANK0 ] unsigned char [4]
 34447 ;;  address         4   35[BANK0 ] unsigned long 
 34448 ;; Return value:  Size  Location     Type
 34449 ;;                  1    wreg      void 
 34450 ;; Registers used:
 34451 ;;		wreg, status,2, status,0, cstack
 34452 ;; Tracked objects:
 34453 ;;		On entry : 0/0
 34454 ;;		On exit  : 0/0
 34455 ;;		Unchanged: 0/0
 34456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 34457 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34458 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34459 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34460 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34461 ;;Total ram usage:       20 bytes
 34462 ;; Hardware stack levels used:    1
 34463 ;; Hardware stack levels required when called:   13
 34464 ;; This function calls:
 34465 ;;		__flash_is_busy
 34466 ;;		_spi_tx_rx
 34467 ;; This function is called by:
 34468 ;;		_flash_sector_read
 34469 ;;		_flash_partial_read
 34470 ;; This function uses a non-reentrant model
 34471 ;;
 34472                           
 34473                           	psect	text129
 34474  012A96                     __ptext129:
 34475                           	opt stack 0
 34476  012A96                     __flash_partial_read:
 34477                           	opt stack 13
 34478                           
 34479                           ;flash.c: 311: uint32_t address;;flash.c: 312: uint8_t command[4];;flash.c: 315: while(_
      +                          flash_is_busy());
 34480                           
 34481                           ;incstack = 0
 34482  012A96  ECB3  F0A0         	call	__flash_is_busy	;wreg free
 34483  012A9A  0900               	iorlw	0
 34484  012A9C  A4D8               	btfss	status,2,c
 34485  012A9E  D7FB               	goto	__flash_partial_read
 34486                           
 34487                           ;flash.c: 318: address = page;
 34488  012AA0  C073  F083         	movff	__flash_partial_read@page,__flash_partial_read@address
 34489  012AA4  C074  F084         	movff	__flash_partial_read@page+1,__flash_partial_read@address+1
 34490  012AA8  0100               	movlb	0	; () banked
 34491  012AAA  6B85               	clrf	(__flash_partial_read@address+2)& (0+255),b
 34492  012AAC  6B86               	clrf	(__flash_partial_read@address+3)& (0+255),b
 34493                           
 34494                           ; BSR set to: 0
 34495                           ;flash.c: 319: address <<= 9;
 34496  012AAE  0E09               	movlw	9
 34497  012AB0                     u17615:
 34498  012AB0  90D8               	bcf	status,0,c
 34499  012AB2  3783               	rlcf	__flash_partial_read@address& (0+255),f,b
 34500  012AB4  3784               	rlcf	(__flash_partial_read@address+1)& (0+255),f,b
 34501  012AB6  3785               	rlcf	(__flash_partial_read@address+2)& (0+255),f,b
 34502  012AB8  3786               	rlcf	(__flash_partial_read@address+3)& (0+255),f,b
 34503  012ABA  2EE8               	decfsz	wreg,f,c
 34504  012ABC  D7F9               	goto	u17615
 34505                           
 34506                           ; BSR set to: 0
 34507                           ;flash.c: 320: address |= start;
 34508  012ABE  5175               	movf	__flash_partial_read@start& (0+255),w,b
 34509  012AC0  6F7B               	movwf	??__flash_partial_read& (0+255),b
 34510  012AC2  5176               	movf	(__flash_partial_read@start+1)& (0+255),w,b
 34511  012AC4  6F7C               	movwf	(??__flash_partial_read+1)& (0+255),b
 34512  012AC6  6B7D               	clrf	(??__flash_partial_read+2)& (0+255),b
 34513  012AC8  6B7E               	clrf	(??__flash_partial_read+3)& (0+255),b
 34514  012ACA  517B               	movf	??__flash_partial_read& (0+255),w,b
 34515  012ACC  1383               	iorwf	__flash_partial_read@address& (0+255),f,b
 34516  012ACE  517C               	movf	(??__flash_partial_read+1)& (0+255),w,b
 34517  012AD0  1384               	iorwf	(__flash_partial_read@address+1)& (0+255),f,b
 34518  012AD2  517D               	movf	(??__flash_partial_read+2)& (0+255),w,b
 34519  012AD4  1385               	iorwf	(__flash_partial_read@address+2)& (0+255),f,b
 34520  012AD6  517E               	movf	(??__flash_partial_read+3)& (0+255),w,b
 34521  012AD8  1386               	iorwf	(__flash_partial_read@address+3)& (0+255),f,b
 34522                           
 34523                           ; BSR set to: 0
 34524                           ;flash.c: 323: command[0] = 0x03;
 34525  012ADA  0E03               	movlw	3
 34526  012ADC  6F7F               	movwf	__flash_partial_read@command& (0+255),b
 34527                           
 34528                           ; BSR set to: 0
 34529                           ;flash.c: 324: command[1] = ((unsigned char)((((unsigned short)(((address)>>16)&0xFFFF))
      +                          )&0xFF));
 34530  012ADE  C085  F080         	movff	__flash_partial_read@address+2,__flash_partial_read@command+1
 34531                           
 34532                           ; BSR set to: 0
 34533                           ;flash.c: 325: command[2] = ((unsigned char)(((((unsigned short)((address)&0xFFFF)))>>8)
      +                          &0xFF));
 34534  012AE2  5184               	movf	(__flash_partial_read@address+1)& (0+255),w,b
 34535  012AE4  6F81               	movwf	(__flash_partial_read@command+2)& (0+255),b
 34536                           
 34537                           ; BSR set to: 0
 34538                           ;flash.c: 326: command[3] = ((unsigned char)((((unsigned short)((address)&0xFFFF)))&0xFF
      +                          ));
 34539  012AE6  C083  F082         	movff	__flash_partial_read@address,__flash_partial_read@command+3
 34540                           
 34541                           ; BSR set to: 0
 34542                           ;flash.c: 329: spi_tx_rx(command, 4, data, length);
 34543  012AEA  0E7F               	movlw	low __flash_partial_read@command
 34544  012AEC  6F60               	movwf	spi_tx_rx@command& (0+255),b
 34545  012AEE  0E00               	movlw	high __flash_partial_read@command
 34546  012AF0  6F61               	movwf	(spi_tx_rx@command+1)& (0+255),b
 34547  012AF2  0E00               	movlw	0
 34548  012AF4  6F63               	movwf	(spi_tx_rx@command_length+1)& (0+255),b
 34549  012AF6  0E04               	movlw	4
 34550  012AF8  6F62               	movwf	spi_tx_rx@command_length& (0+255),b
 34551  012AFA  C079  F064         	movff	__flash_partial_read@data,spi_tx_rx@data
 34552  012AFE  C07A  F065         	movff	__flash_partial_read@data+1,spi_tx_rx@data+1
 34553  012B02  C077  F066         	movff	__flash_partial_read@length,spi_tx_rx@data_length
 34554  012B06  C078  F067         	movff	__flash_partial_read@length+1,spi_tx_rx@data_length+1
 34555  012B0A  EC10  F092         	call	_spi_tx_rx	;wreg free
 34556  012B0E  0012               	return		;funcret
 34557  012B10                     __end_of__flash_partial_read:
 34558                           	opt stack 0
 34559                           tosu	equ	0xFFF
 34560                           tosh	equ	0xFFE
 34561                           tosl	equ	0xFFD
 34562                           pclath	equ	0xFFA
 34563                           tblptru	equ	0xFF8
 34564                           tblptrh	equ	0xFF7
 34565                           tblptrl	equ	0xFF6
 34566                           tablat	equ	0xFF5
 34567                           prodh	equ	0xFF4
 34568                           prodl	equ	0xFF3
 34569                           intcon	equ	0xFF2
 34570                           postinc0	equ	0xFEE
 34571                           wreg	equ	0xFE8
 34572                           indf1	equ	0xFE7
 34573                           postinc1	equ	0xFE6
 34574                           postdec1	equ	0xFE5
 34575                           plusw1	equ	0xFE3
 34576                           fsr1h	equ	0xFE2
 34577                           fsr1l	equ	0xFE1
 34578                           indf2	equ	0xFDF
 34579                           postinc2	equ	0xFDE
 34580                           postdec2	equ	0xFDD
 34581                           plusw2	equ	0xFDB
 34582                           fsr2h	equ	0xFDA
 34583                           fsr2l	equ	0xFD9
 34584                           status	equ	0xFD8
 34585                           
 34586 ;; *************** function __flash_is_busy *****************
 34587 ;; Defined at:
 34588 ;;		line 281 in file "flash.c"
 34589 ;; Parameters:    Size  Location     Type
 34590 ;;		None
 34591 ;; Auto vars:     Size  Location     Type
 34592 ;;  status          2   17[BANK0 ] unsigned int 
 34593 ;; Return value:  Size  Location     Type
 34594 ;;                  1    wreg      unsigned char 
 34595 ;; Registers used:
 34596 ;;		wreg, status,2, status,0, cstack
 34597 ;; Tracked objects:
 34598 ;;		On entry : 0/0
 34599 ;;		On exit  : 0/0
 34600 ;;		Unchanged: 0/0
 34601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 34602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34603 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34606 ;;Total ram usage:        2 bytes
 34607 ;; Hardware stack levels used:    1
 34608 ;; Hardware stack levels required when called:   12
 34609 ;; This function calls:
 34610 ;;		__flash_get_status
 34611 ;;		__flash_wakeup
 34612 ;; This function is called by:
 34613 ;;		__flash_set_page_size
 34614 ;;		__flash_copy_page_to_buffer
 34615 ;;		__flash_compare_page_to_buffer
 34616 ;;		__flash_write_to_buffer
 34617 ;;		__flash_write_page_from_buffer
 34618 ;;		__flash_partial_read
 34619 ;;		_flash_partial_write
 34620 ;;		__flash_erase_page
 34621 ;;		__flash_buffer_read
 34622 ;;		_flash_is_busy
 34623 ;;		_flash_set_power_state
 34624 ;; This function uses a non-reentrant model
 34625 ;;
 34626                           
 34627                           	psect	text130
 34628  014166                     __ptext130:
 34629                           	opt stack 0
 34630  014166                     __flash_is_busy:
 34631                           	opt stack 15
 34632                           
 34633                           ;flash.c: 283: uint16_t status;;flash.c: 286: if(power_state!=FLASH_POWER_STATE_NORMAL)
 34634                           
 34635                           ;incstack = 0
 34636  014166  0100               	movlb	0	; () banked
 34637  014168  51F4               	movf	_power_state& (0+255),w,b
 34638  01416A  A4D8               	btfss	status,2,c
 34639                           
 34640                           ; BSR set to: 0
 34641                           ;flash.c: 287: {;flash.c: 288: _flash_wakeup();
 34642  01416C  EC5B  F09A         	call	__flash_wakeup	;wreg free
 34643                           
 34644                           ;flash.c: 289: };flash.c: 292: status = _flash_get_status();
 34645  014170  ECF9  F09E         	call	__flash_get_status	;wreg free
 34646  014174  C06C  F071         	movff	?__flash_get_status,__flash_is_busy@status
 34647  014178  C06D  F072         	movff	?__flash_get_status+1,__flash_is_busy@status+1
 34648                           
 34649                           ;flash.c: 295: if(status & 0b0000000010000000)
 34650  01417C  0100               	movlb	0	; () banked
 34651  01417E  AF71               	btfss	__flash_is_busy@status& (0+255),7,b
 34652  014180  D002               	goto	l1533
 34653                           
 34654                           ; BSR set to: 0
 34655                           ;flash.c: 296: {;flash.c: 298: return 0;
 34656  014182  0E00               	movlw	0
 34657                           
 34658                           ; BSR set to: 0
 34659                           ;flash.c: 299: }
 34660                           
 34661                           ; BSR set to: 0
 34662  014184  0012               	return	
 34663  014186                     l1533:
 34664                           
 34665                           ; BSR set to: 0
 34666                           ;flash.c: 300: else;flash.c: 301: {;flash.c: 303: return 1;
 34667                           
 34668                           ; BSR set to: 0
 34669  014186  0E01               	movlw	1
 34670                           
 34671                           ; BSR set to: 0
 34672  014188  0012               	return	
 34673  01418A                     __end_of__flash_is_busy:
 34674                           	opt stack 0
 34675                           tosu	equ	0xFFF
 34676                           tosh	equ	0xFFE
 34677                           tosl	equ	0xFFD
 34678                           pclath	equ	0xFFA
 34679                           tblptru	equ	0xFF8
 34680                           tblptrh	equ	0xFF7
 34681                           tblptrl	equ	0xFF6
 34682                           tablat	equ	0xFF5
 34683                           prodh	equ	0xFF4
 34684                           prodl	equ	0xFF3
 34685                           intcon	equ	0xFF2
 34686                           postinc0	equ	0xFEE
 34687                           wreg	equ	0xFE8
 34688                           indf1	equ	0xFE7
 34689                           postinc1	equ	0xFE6
 34690                           postdec1	equ	0xFE5
 34691                           plusw1	equ	0xFE3
 34692                           fsr1h	equ	0xFE2
 34693                           fsr1l	equ	0xFE1
 34694                           indf2	equ	0xFDF
 34695                           postinc2	equ	0xFDE
 34696                           postdec2	equ	0xFDD
 34697                           plusw2	equ	0xFDB
 34698                           fsr2h	equ	0xFDA
 34699                           fsr2l	equ	0xFD9
 34700                           status	equ	0xFD8
 34701                           
 34702 ;; *************** function __flash_wakeup *****************
 34703 ;; Defined at:
 34704 ;;		line 128 in file "flash.c"
 34705 ;; Parameters:    Size  Location     Type
 34706 ;;		None
 34707 ;; Auto vars:     Size  Location     Type
 34708 ;;  command         1    8[BANK0 ] unsigned char 
 34709 ;; Return value:  Size  Location     Type
 34710 ;;                  1    wreg      void 
 34711 ;; Registers used:
 34712 ;;		wreg, status,2, status,0, cstack
 34713 ;; Tracked objects:
 34714 ;;		On entry : 0/0
 34715 ;;		On exit  : 0/0
 34716 ;;		Unchanged: 0/0
 34717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 34718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34722 ;;Total ram usage:        1 bytes
 34723 ;; Hardware stack levels used:    1
 34724 ;; Hardware stack levels required when called:   11
 34725 ;; This function calls:
 34726 ;;		_spi_tx
 34727 ;; This function is called by:
 34728 ;;		__flash_is_busy
 34729 ;;		_flash_set_power_state
 34730 ;; This function uses a non-reentrant model
 34731 ;;
 34732                           
 34733                           	psect	text131
 34734  0134B6                     __ptext131:
 34735                           	opt stack 0
 34736  0134B6                     __flash_wakeup:
 34737                           	opt stack 15
 34738                           
 34739                           ;flash.c: 130: uint8_t command;;flash.c: 132: switch(power_state)
 34740                           
 34741                           ; BSR set to: 0
 34742                           ;incstack = 0
 34743  0134B6  D022               	goto	l1482
 34744  0134B8                     
 34745                           ;flash.c: 135: command = 0xAB;
 34746  0134B8  0EAB               	movlw	171
 34747  0134BA  0100               	movlb	0	; () banked
 34748  0134BC  6F68               	movwf	__flash_wakeup@command& (0+255),b
 34749                           
 34750                           ; BSR set to: 0
 34751                           ;flash.c: 136: spi_tx(&command, 1);
 34752  0134BE  0E68               	movlw	low __flash_wakeup@command
 34753  0134C0  6F60               	movwf	spi_tx@data& (0+255),b
 34754  0134C2  0E00               	movlw	high __flash_wakeup@command
 34755  0134C4  6F61               	movwf	(spi_tx@data+1)& (0+255),b
 34756  0134C6  0E00               	movlw	0
 34757  0134C8  6F63               	movwf	(spi_tx@length+1)& (0+255),b
 34758  0134CA  0E01               	movlw	1
 34759  0134CC  6F62               	movwf	spi_tx@length& (0+255),b
 34760  0134CE  EC7E  F099         	call	_spi_tx	;wreg free
 34761                           
 34762                           ;flash.c: 137: _delay((unsigned long)((35)*(8000000/4000000.0)));
 34763  0134D2  0E17               	movlw	23
 34764  0134D4                     u24687:
 34765  0134D4  2EE8               	decfsz	wreg,f,c
 34766  0134D6  D7FE               	bra	u24687
 34767  0134D8  F000               	nop	
 34768                           
 34769                           ;flash.c: 138: power_state = FLASH_POWER_STATE_NORMAL;
 34770  0134DA  0E00               	movlw	0
 34771  0134DC  0100               	movlb	0	; () banked
 34772  0134DE  6FF4               	movwf	_power_state& (0+255),b
 34773                           
 34774                           ;flash.c: 139: break;
 34775  0134E0  0012               	return	
 34776  0134E2                     l1485:
 34777                           
 34778                           ; BSR set to: 0
 34779                           ;flash.c: 144: LATDbits.LD7 = 0;
 34780  0134E2  9E8C               	bcf	3980,7,c	;volatile
 34781                           
 34782                           ; BSR set to: 0
 34783                           ;flash.c: 145: _delay((unsigned long)((20)*(8000000/4000000.0)));
 34784  0134E4  0E0D               	movlw	13
 34785  0134E6                     u24697:
 34786  0134E6  2EE8               	decfsz	wreg,f,c
 34787  0134E8  D7FE               	bra	u24697
 34788  0134EA  F000               	nop	
 34789                           
 34790                           ;flash.c: 146: LATDbits.LD7 = 1;
 34791  0134EC  8E8C               	bsf	3980,7,c	;volatile
 34792                           
 34793                           ;flash.c: 147: _delay((unsigned long)((120)*(8000000/4000000.0)));
 34794  0134EE  0E50               	movlw	80
 34795  0134F0                     u24707:
 34796  0134F0  2EE8               	decfsz	wreg,f,c
 34797  0134F2  D7FE               	bra	u24707
 34798                           
 34799                           ;flash.c: 148: power_state = FLASH_POWER_STATE_NORMAL;
 34800  0134F4  0E00               	movlw	0
 34801  0134F6  0100               	movlb	0	; () banked
 34802  0134F8  6FF4               	movwf	_power_state& (0+255),b
 34803                           
 34804                           ; BSR set to: 0
 34805                           ;flash.c: 150: }
 34806                           
 34807                           ;flash.c: 149: break;
 34808  0134FA  0012               	return	
 34809  0134FC                     l1482:
 34810                           
 34811                           ; BSR set to: 0
 34812  0134FC  0100               	movlb	0	; () banked
 34813  0134FE  51F4               	movf	_power_state& (0+255),w,b
 34814                           
 34815                           ; Switch size 1, requested type "space"
 34816                           ; Number of cases is 2, Range of values is 1 to 2
 34817                           ; switch strategies available:
 34818                           ; Name         Instructions Cycles
 34819                           ; simple_byte            7     4 (average)
 34820                           ;	Chosen strategy is simple_byte
 34821  013500  0A01               	xorlw	1	; case 1
 34822  013502  B4D8               	btfsc	status,2,c
 34823  013504  D7D9               	goto	l1483
 34824  013506  0A03               	xorlw	3	; case 2
 34825  013508  A4D8               	btfss	status,2,c
 34826  01350A  0012               	return	
 34827  01350C  D7EA               	goto	l1485
 34828  01350E                     __end_of__flash_wakeup:
 34829                           	opt stack 0
 34830                           tosu	equ	0xFFF
 34831                           tosh	equ	0xFFE
 34832                           tosl	equ	0xFFD
 34833                           pclath	equ	0xFFA
 34834                           tblptru	equ	0xFF8
 34835                           tblptrh	equ	0xFF7
 34836                           tblptrl	equ	0xFF6
 34837                           tablat	equ	0xFF5
 34838                           prodh	equ	0xFF4
 34839                           prodl	equ	0xFF3
 34840                           intcon	equ	0xFF2
 34841                           postinc0	equ	0xFEE
 34842                           wreg	equ	0xFE8
 34843                           indf1	equ	0xFE7
 34844                           postinc1	equ	0xFE6
 34845                           postdec1	equ	0xFE5
 34846                           plusw1	equ	0xFE3
 34847                           fsr1h	equ	0xFE2
 34848                           fsr1l	equ	0xFE1
 34849                           indf2	equ	0xFDF
 34850                           postinc2	equ	0xFDE
 34851                           postdec2	equ	0xFDD
 34852                           plusw2	equ	0xFDB
 34853                           fsr2h	equ	0xFDA
 34854                           fsr2l	equ	0xFD9
 34855                           status	equ	0xFD8
 34856                           
 34857 ;; *************** function _spi_tx *****************
 34858 ;; Defined at:
 34859 ;;		line 108 in file "spi.c"
 34860 ;; Parameters:    Size  Location     Type
 34861 ;;  data            2    0[BANK0 ] PTR unsigned char 
 34862 ;;		 -> flash_set_power_state@command(1), _flash_write_page_from_buffer@command(4), _flash_erase_page@command(4), _flash
      +_compare_page_to_buffer@command(4), 
 34863 ;;		 -> _flash_copy_page_to_buffer@command(4), _flash_wakeup@command(1), _flash_set_page_size@command(4), 
 34864 ;;  length          2    2[BANK0 ] unsigned int 
 34865 ;; Auto vars:     Size  Location     Type
 34866 ;;		None
 34867 ;; Return value:  Size  Location     Type
 34868 ;;                  1    wreg      void 
 34869 ;; Registers used:
 34870 ;;		wreg, status,2, status,0
 34871 ;; Tracked objects:
 34872 ;;		On entry : 0/0
 34873 ;;		On exit  : 0/0
 34874 ;;		Unchanged: 0/0
 34875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 34876 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34878 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34879 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 34880 ;;Total ram usage:        8 bytes
 34881 ;; Hardware stack levels used:    1
 34882 ;; Hardware stack levels required when called:   10
 34883 ;; This function calls:
 34884 ;;		Nothing
 34885 ;; This function is called by:
 34886 ;;		__flash_set_page_size
 34887 ;;		__flash_wakeup
 34888 ;;		__flash_copy_page_to_buffer
 34889 ;;		__flash_compare_page_to_buffer
 34890 ;;		__flash_write_page_from_buffer
 34891 ;;		__flash_erase_page
 34892 ;;		_flash_set_power_state
 34893 ;; This function uses a non-reentrant model
 34894 ;;
 34895                           
 34896                           	psect	text132
 34897  0132FC                     __ptext132:
 34898                           	opt stack 0
 34899  0132FC                     _spi_tx:
 34900                           	opt stack 17
 34901                           
 34902                           ;spi.c: 111: DMACON1bits.SSCON1 = 0;
 34903                           
 34904                           ; BSR set to: 0
 34905                           ;incstack = 0
 34906  0132FC  9E88               	bcf	3976,7,c	;volatile
 34907                           
 34908                           ;spi.c: 112: DMACON1bits.SSCON0 = 0;
 34909  0132FE  9C88               	bcf	3976,6,c	;volatile
 34910                           
 34911                           ;spi.c: 114: DMACON1bits.TXINC = 1;
 34912  013300  8A88               	bsf	3976,5,c	;volatile
 34913                           
 34914                           ;spi.c: 116: DMACON1bits.RXINC = 0;
 34915  013302  9888               	bcf	3976,4,c	;volatile
 34916                           
 34917                           ;spi.c: 118: DMACON1bits.DUPLEX1 = 0;
 34918  013304  9688               	bcf	3976,3,c	;volatile
 34919                           
 34920                           ;spi.c: 119: DMACON1bits.DUPLEX0 = 1;
 34921  013306  8488               	bsf	3976,2,c	;volatile
 34922                           
 34923                           ;spi.c: 121: DMACON1bits.DLYINTEN = 0;
 34924  013308  9288               	bcf	3976,1,c	;volatile
 34925                           
 34926                           ;spi.c: 123: DMACON2bits.DLYCYC = 0b0000;
 34927  01330A  9886               	bcf	3974,4,c	;volatile
 34928  01330C  9A86               	bcf	3974,5,c	;volatile
 34929  01330E  9C86               	bcf	3974,6,c	;volatile
 34930  013310  9E86               	bcf	3974,7,c	;volatile
 34931                           
 34932                           ;spi.c: 125: DMACON2bits.INTLVL = 0b0000;
 34933  013312  9086               	bcf	3974,0,c	;volatile
 34934  013314  9286               	bcf	3974,1,c	;volatile
 34935  013316  9486               	bcf	3974,2,c	;volatile
 34936  013318  9686               	bcf	3974,3,c	;volatile
 34937                           
 34938                           ;spi.c: 128: TXADDRH = ((unsigned char)((((uint16_t) data)>>8)&0xFF));
 34939  01331A  0100               	movlb	0	; () banked
 34940  01331C  5161               	movf	(spi_tx@data+1)& (0+255),w,b
 34941  01331E  6E6A               	movwf	3946,c	;volatile
 34942                           
 34943                           ; BSR set to: 0
 34944                           ;spi.c: 129: TXADDRL = ((unsigned char)(((uint16_t) data)&0xFF));
 34945  013320  C060  FF6B         	movff	spi_tx@data,3947	;volatile
 34946                           
 34947                           ; BSR set to: 0
 34948                           ;spi.c: 132: DMABCH = ((unsigned char)((((uint16_t) (length-1))>>8)&0xFF));
 34949  013324  0EFF               	movlw	255
 34950  013326  6F64               	movwf	??_spi_tx& (0+255),b
 34951  013328  0EFF               	movlw	255
 34952  01332A  6F65               	movwf	(??_spi_tx+1)& (0+255),b
 34953  01332C  C062  F066         	movff	spi_tx@length,??_spi_tx+2
 34954  013330  C063  F067         	movff	spi_tx@length+1,??_spi_tx+3
 34955  013334  5164               	movf	??_spi_tx& (0+255),w,b
 34956  013336  2766               	addwf	(??_spi_tx+2)& (0+255),f,b
 34957  013338  5165               	movf	(??_spi_tx+1)& (0+255),w,b
 34958  01333A  2367               	addwfc	(??_spi_tx+3)& (0+255),f,b
 34959  01333C  C067  F066         	movff	??_spi_tx+3,??_spi_tx+2
 34960  013340  6B67               	clrf	(??_spi_tx+3)& (0+255),b
 34961  013342  5166               	movf	(??_spi_tx+2)& (0+255),w,b
 34962  013344  6E66               	movwf	3942,c	;volatile
 34963                           
 34964                           ; BSR set to: 0
 34965                           ;spi.c: 133: DMABCL = ((unsigned char)(((uint16_t) (length-1))&0xFF));
 34966  013346  0562               	decf	spi_tx@length& (0+255),w,b
 34967  013348  6E67               	movwf	3943,c	;volatile
 34968                           
 34969                           ; BSR set to: 0
 34970                           ;spi.c: 136: LATDbits.LD7 = 0;
 34971  01334A  9E8C               	bcf	3980,7,c	;volatile
 34972                           
 34973                           ; BSR set to: 0
 34974                           ;spi.c: 137: DMACON1bits.DMAEN = 1;
 34975  01334C  8088               	bsf	3976,0,c	;volatile
 34976  01334E                     
 34977                           ; BSR set to: 0
 34978  01334E  B088               	btfsc	3976,0,c	;volatile
 34979  013350  D7FE               	goto	l2124
 34980                           
 34981                           ;spi.c: 139: LATDbits.LD7 = 1;
 34982  013352  8E8C               	bsf	3980,7,c	;volatile
 34983  013354  0012               	return		;funcret
 34984  013356                     __end_of_spi_tx:
 34985                           	opt stack 0
 34986                           tosu	equ	0xFFF
 34987                           tosh	equ	0xFFE
 34988                           tosl	equ	0xFFD
 34989                           pclath	equ	0xFFA
 34990                           tblptru	equ	0xFF8
 34991                           tblptrh	equ	0xFF7
 34992                           tblptrl	equ	0xFF6
 34993                           tablat	equ	0xFF5
 34994                           prodh	equ	0xFF4
 34995                           prodl	equ	0xFF3
 34996                           intcon	equ	0xFF2
 34997                           postinc0	equ	0xFEE
 34998                           wreg	equ	0xFE8
 34999                           indf1	equ	0xFE7
 35000                           postinc1	equ	0xFE6
 35001                           postdec1	equ	0xFE5
 35002                           plusw1	equ	0xFE3
 35003                           fsr1h	equ	0xFE2
 35004                           fsr1l	equ	0xFE1
 35005                           indf2	equ	0xFDF
 35006                           postinc2	equ	0xFDE
 35007                           postdec2	equ	0xFDD
 35008                           plusw2	equ	0xFDB
 35009                           fsr2h	equ	0xFDA
 35010                           fsr2l	equ	0xFD9
 35011                           status	equ	0xFD8
 35012                           
 35013 ;; *************** function __flash_get_status *****************
 35014 ;; Defined at:
 35015 ;;		line 117 in file "flash.c"
 35016 ;; Parameters:    Size  Location     Type
 35017 ;;		None
 35018 ;; Auto vars:     Size  Location     Type
 35019 ;;  status          2   15[BANK0 ] unsigned int 
 35020 ;;  command         1   14[BANK0 ] unsigned char 
 35021 ;; Return value:  Size  Location     Type
 35022 ;;                  2   12[BANK0 ] unsigned int 
 35023 ;; Registers used:
 35024 ;;		wreg, status,2, status,0, cstack
 35025 ;; Tracked objects:
 35026 ;;		On entry : 0/0
 35027 ;;		On exit  : 0/0
 35028 ;;		Unchanged: 0/0
 35029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35030 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35031 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35033 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35034 ;;Total ram usage:        5 bytes
 35035 ;; Hardware stack levels used:    1
 35036 ;; Hardware stack levels required when called:   11
 35037 ;; This function calls:
 35038 ;;		_spi_tx_rx
 35039 ;; This function is called by:
 35040 ;;		__flash_compare_page_to_buffer
 35041 ;;		__flash_is_busy
 35042 ;; This function uses a non-reentrant model
 35043 ;;
 35044                           
 35045                           	psect	text133
 35046  013DF2                     __ptext133:
 35047                           	opt stack 0
 35048  013DF2                     __flash_get_status:
 35049                           	opt stack 15
 35050                           
 35051                           ;flash.c: 121: uint8_t command = 0xD7;
 35052                           
 35053                           ;incstack = 0
 35054  013DF2  0ED7               	movlw	215
 35055  013DF4  0100               	movlb	0	; () banked
 35056  013DF6  6F6E               	movwf	__flash_get_status@command& (0+255),b
 35057                           
 35058                           ; BSR set to: 0
 35059                           ;flash.c: 122: uint16_t status;;flash.c: 123: spi_tx_rx(&command, 1, (uint8_t*) &status,
      +                           2);
 35060  013DF8  0E6E               	movlw	low __flash_get_status@command
 35061  013DFA  6F60               	movwf	spi_tx_rx@command& (0+255),b
 35062  013DFC  0E00               	movlw	high __flash_get_status@command
 35063  013DFE  6F61               	movwf	(spi_tx_rx@command+1)& (0+255),b
 35064  013E00  0E00               	movlw	0
 35065  013E02  6F63               	movwf	(spi_tx_rx@command_length+1)& (0+255),b
 35066  013E04  0E01               	movlw	1
 35067  013E06  6F62               	movwf	spi_tx_rx@command_length& (0+255),b
 35068  013E08  0E6F               	movlw	low __flash_get_status@status
 35069  013E0A  6F64               	movwf	spi_tx_rx@data& (0+255),b
 35070  013E0C  0E00               	movlw	high __flash_get_status@status
 35071  013E0E  6F65               	movwf	(spi_tx_rx@data+1)& (0+255),b
 35072  013E10  0E00               	movlw	0
 35073  013E12  6F67               	movwf	(spi_tx_rx@data_length+1)& (0+255),b
 35074  013E14  0E02               	movlw	2
 35075  013E16  6F66               	movwf	spi_tx_rx@data_length& (0+255),b
 35076  013E18  EC10  F092         	call	_spi_tx_rx	;wreg free
 35077                           
 35078                           ;flash.c: 124: return status;
 35079  013E1C  C06F  F06C         	movff	__flash_get_status@status,?__flash_get_status
 35080  013E20  C070  F06D         	movff	__flash_get_status@status+1,?__flash_get_status+1
 35081  013E24  0012               	return	
 35082  013E26                     __end_of__flash_get_status:
 35083                           	opt stack 0
 35084                           tosu	equ	0xFFF
 35085                           tosh	equ	0xFFE
 35086                           tosl	equ	0xFFD
 35087                           pclath	equ	0xFFA
 35088                           tblptru	equ	0xFF8
 35089                           tblptrh	equ	0xFF7
 35090                           tblptrl	equ	0xFF6
 35091                           tablat	equ	0xFF5
 35092                           prodh	equ	0xFF4
 35093                           prodl	equ	0xFF3
 35094                           intcon	equ	0xFF2
 35095                           postinc0	equ	0xFEE
 35096                           wreg	equ	0xFE8
 35097                           indf1	equ	0xFE7
 35098                           postinc1	equ	0xFE6
 35099                           postdec1	equ	0xFE5
 35100                           plusw1	equ	0xFE3
 35101                           fsr1h	equ	0xFE2
 35102                           fsr1l	equ	0xFE1
 35103                           indf2	equ	0xFDF
 35104                           postinc2	equ	0xFDE
 35105                           postdec2	equ	0xFDD
 35106                           plusw2	equ	0xFDB
 35107                           fsr2h	equ	0xFDA
 35108                           fsr2l	equ	0xFD9
 35109                           status	equ	0xFD8
 35110                           
 35111 ;; *************** function _spi_tx_rx *****************
 35112 ;; Defined at:
 35113 ;;		line 199 in file "spi.c"
 35114 ;; Parameters:    Size  Location     Type
 35115 ;;  command         2    0[BANK0 ] PTR unsigned char 
 35116 ;;		 -> _flash_buffer_read@command(4), _flash_partial_read@command(4), _flash_get_status@command(1), 
 35117 ;;  command_leng    2    2[BANK0 ] unsigned int 
 35118 ;;  data            2    4[BANK0 ] PTR unsigned char 
 35119 ;;		 -> fat_modify_file@root(32), fat_resize_file@root(32), fat_read_from_file@root(32), fat_rename_file@root(32), 
 35120 ;;		 -> fat_get_file_size@file_size(4), _get_first_cluster@first_cluster(2), _read_fat@value(2), _root_is_available@firs
      +t_byte(1), 
 35121 ;;		 -> buffer(512), _flash_get_status@status(2), msd_buffer(512), 
 35122 ;;  data_length     2    6[BANK0 ] unsigned int 
 35123 ;; Auto vars:     Size  Location     Type
 35124 ;;		None
 35125 ;; Return value:  Size  Location     Type
 35126 ;;                  1    wreg      void 
 35127 ;; Registers used:
 35128 ;;		wreg, status,2, status,0
 35129 ;; Tracked objects:
 35130 ;;		On entry : 0/0
 35131 ;;		On exit  : 0/0
 35132 ;;		Unchanged: 0/0
 35133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35134 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35136 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35137 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35138 ;;Total ram usage:       12 bytes
 35139 ;; Hardware stack levels used:    1
 35140 ;; Hardware stack levels required when called:   10
 35141 ;; This function calls:
 35142 ;;		Nothing
 35143 ;; This function is called by:
 35144 ;;		__flash_get_status
 35145 ;;		__flash_partial_read
 35146 ;;		__flash_buffer_read
 35147 ;; This function uses a non-reentrant model
 35148 ;;
 35149                           
 35150                           	psect	text134
 35151  012420                     __ptext134:
 35152                           	opt stack 0
 35153  012420                     _spi_tx_rx:
 35154                           	opt stack 15
 35155                           
 35156                           ;spi.c: 202: DMACON1bits.SSCON1 = 0;
 35157                           
 35158                           ;incstack = 0
 35159  012420  9E88               	bcf	3976,7,c	;volatile
 35160                           
 35161                           ;spi.c: 203: DMACON1bits.SSCON0 = 0;
 35162  012422  9C88               	bcf	3976,6,c	;volatile
 35163                           
 35164                           ;spi.c: 205: DMACON1bits.TXINC = 1;
 35165  012424  8A88               	bsf	3976,5,c	;volatile
 35166                           
 35167                           ;spi.c: 207: DMACON1bits.RXINC = 0;
 35168  012426  9888               	bcf	3976,4,c	;volatile
 35169                           
 35170                           ;spi.c: 209: DMACON1bits.DUPLEX1 = 0;
 35171  012428  9688               	bcf	3976,3,c	;volatile
 35172                           
 35173                           ;spi.c: 210: DMACON1bits.DUPLEX0 = 1;
 35174  01242A  8488               	bsf	3976,2,c	;volatile
 35175                           
 35176                           ;spi.c: 212: DMACON1bits.DLYINTEN = 0;
 35177  01242C  9288               	bcf	3976,1,c	;volatile
 35178                           
 35179                           ;spi.c: 214: DMACON2bits.DLYCYC = 0b0000;
 35180  01242E  9886               	bcf	3974,4,c	;volatile
 35181  012430  9A86               	bcf	3974,5,c	;volatile
 35182  012432  9C86               	bcf	3974,6,c	;volatile
 35183  012434  9E86               	bcf	3974,7,c	;volatile
 35184                           
 35185                           ;spi.c: 216: DMACON2bits.INTLVL = 0b0000;
 35186  012436  9086               	bcf	3974,0,c	;volatile
 35187  012438  9286               	bcf	3974,1,c	;volatile
 35188  01243A  9486               	bcf	3974,2,c	;volatile
 35189  01243C  9686               	bcf	3974,3,c	;volatile
 35190                           
 35191                           ;spi.c: 219: TXADDRH = ((unsigned char)((((uint16_t) command)>>8)&0xFF));
 35192  01243E  0100               	movlb	0	; () banked
 35193  012440  5161               	movf	(spi_tx_rx@command+1)& (0+255),w,b
 35194  012442  6E6A               	movwf	3946,c	;volatile
 35195                           
 35196                           ; BSR set to: 0
 35197                           ;spi.c: 220: TXADDRL = ((unsigned char)(((uint16_t) command)&0xFF));
 35198  012444  C060  FF6B         	movff	spi_tx_rx@command,3947	;volatile
 35199                           
 35200                           ; BSR set to: 0
 35201                           ;spi.c: 223: DMABCH = ((unsigned char)((((uint16_t) (command_length-1))>>8)&0xFF));
 35202  012448  0EFF               	movlw	255
 35203  01244A  6F68               	movwf	??_spi_tx_rx& (0+255),b
 35204  01244C  0EFF               	movlw	255
 35205  01244E  6F69               	movwf	(??_spi_tx_rx+1)& (0+255),b
 35206  012450  C062  F06A         	movff	spi_tx_rx@command_length,??_spi_tx_rx+2
 35207  012454  C063  F06B         	movff	spi_tx_rx@command_length+1,??_spi_tx_rx+3
 35208  012458  5168               	movf	??_spi_tx_rx& (0+255),w,b
 35209  01245A  276A               	addwf	(??_spi_tx_rx+2)& (0+255),f,b
 35210  01245C  5169               	movf	(??_spi_tx_rx+1)& (0+255),w,b
 35211  01245E  236B               	addwfc	(??_spi_tx_rx+3)& (0+255),f,b
 35212  012460  C06B  F06A         	movff	??_spi_tx_rx+3,??_spi_tx_rx+2
 35213  012464  6B6B               	clrf	(??_spi_tx_rx+3)& (0+255),b
 35214  012466  516A               	movf	(??_spi_tx_rx+2)& (0+255),w,b
 35215  012468  6E66               	movwf	3942,c	;volatile
 35216                           
 35217                           ; BSR set to: 0
 35218                           ;spi.c: 224: DMABCL = ((unsigned char)(((uint16_t) (command_length-1))&0xFF));
 35219  01246A  0562               	decf	spi_tx_rx@command_length& (0+255),w,b
 35220  01246C  6E67               	movwf	3943,c	;volatile
 35221                           
 35222                           ; BSR set to: 0
 35223                           ;spi.c: 227: LATDbits.LD7 = 0;
 35224  01246E  9E8C               	bcf	3980,7,c	;volatile
 35225                           
 35226                           ; BSR set to: 0
 35227                           ;spi.c: 230: DMACON1bits.DMAEN = 1;
 35228  012470  8088               	bsf	3976,0,c	;volatile
 35229  012472                     
 35230                           ; BSR set to: 0
 35231  012472  B088               	btfsc	3976,0,c	;volatile
 35232  012474  D7FE               	goto	l2139
 35233                           
 35234                           ;spi.c: 234: DMACON1bits.TXINC = 0;
 35235  012476  9A88               	bcf	3976,5,c	;volatile
 35236                           
 35237                           ;spi.c: 236: DMACON1bits.RXINC = 1;
 35238  012478  8888               	bsf	3976,4,c	;volatile
 35239                           
 35240                           ;spi.c: 238: DMACON1bits.DUPLEX1 = 0;
 35241  01247A  9688               	bcf	3976,3,c	;volatile
 35242                           
 35243                           ;spi.c: 239: DMACON1bits.DUPLEX0 = 0;
 35244  01247C  9488               	bcf	3976,2,c	;volatile
 35245                           
 35246                           ;spi.c: 242: RXADDRH = ((unsigned char)((((uint16_t) data)>>8)&0xFF));
 35247  01247E  0100               	movlb	0	; () banked
 35248  012480  5165               	movf	(spi_tx_rx@data+1)& (0+255),w,b
 35249  012482  6E68               	movwf	3944,c	;volatile
 35250                           
 35251                           ; BSR set to: 0
 35252                           ;spi.c: 243: RXADDRL = ((unsigned char)(((uint16_t) data)&0xFF));
 35253  012484  C064  FF69         	movff	spi_tx_rx@data,3945	;volatile
 35254                           
 35255                           ; BSR set to: 0
 35256                           ;spi.c: 246: DMABCH = ((unsigned char)((((uint16_t) (data_length-1))>>8)&0xFF));
 35257  012488  0EFF               	movlw	255
 35258  01248A  6F68               	movwf	??_spi_tx_rx& (0+255),b
 35259  01248C  0EFF               	movlw	255
 35260  01248E  6F69               	movwf	(??_spi_tx_rx+1)& (0+255),b
 35261  012490  C066  F06A         	movff	spi_tx_rx@data_length,??_spi_tx_rx+2
 35262  012494  C067  F06B         	movff	spi_tx_rx@data_length+1,??_spi_tx_rx+3
 35263  012498  5168               	movf	??_spi_tx_rx& (0+255),w,b
 35264  01249A  276A               	addwf	(??_spi_tx_rx+2)& (0+255),f,b
 35265  01249C  5169               	movf	(??_spi_tx_rx+1)& (0+255),w,b
 35266  01249E  236B               	addwfc	(??_spi_tx_rx+3)& (0+255),f,b
 35267  0124A0  C06B  F06A         	movff	??_spi_tx_rx+3,??_spi_tx_rx+2
 35268  0124A4  6B6B               	clrf	(??_spi_tx_rx+3)& (0+255),b
 35269  0124A6  516A               	movf	(??_spi_tx_rx+2)& (0+255),w,b
 35270  0124A8  6E66               	movwf	3942,c	;volatile
 35271                           
 35272                           ; BSR set to: 0
 35273                           ;spi.c: 247: DMABCL = ((unsigned char)(((uint16_t) (data_length-1))&0xFF));
 35274  0124AA  0566               	decf	spi_tx_rx@data_length& (0+255),w,b
 35275  0124AC  6E67               	movwf	3943,c	;volatile
 35276                           
 35277                           ; BSR set to: 0
 35278                           ;spi.c: 250: DMACON1bits.DMAEN = 1;
 35279  0124AE  8088               	bsf	3976,0,c	;volatile
 35280  0124B0                     
 35281                           ; BSR set to: 0
 35282  0124B0  B088               	btfsc	3976,0,c	;volatile
 35283  0124B2  D7FE               	goto	l2142
 35284                           
 35285                           ;spi.c: 254: LATDbits.LD7 = 1;
 35286  0124B4  8E8C               	bsf	3980,7,c	;volatile
 35287  0124B6  0012               	return		;funcret
 35288  0124B8                     __end_of_spi_tx_rx:
 35289                           	opt stack 0
 35290                           tosu	equ	0xFFF
 35291                           tosh	equ	0xFFE
 35292                           tosl	equ	0xFFD
 35293                           pclath	equ	0xFFA
 35294                           tblptru	equ	0xFF8
 35295                           tblptrh	equ	0xFF7
 35296                           tblptrl	equ	0xFF6
 35297                           tablat	equ	0xFF5
 35298                           prodh	equ	0xFF4
 35299                           prodl	equ	0xFF3
 35300                           intcon	equ	0xFF2
 35301                           postinc0	equ	0xFEE
 35302                           wreg	equ	0xFE8
 35303                           indf1	equ	0xFE7
 35304                           postinc1	equ	0xFE6
 35305                           postdec1	equ	0xFE5
 35306                           plusw1	equ	0xFE3
 35307                           fsr1h	equ	0xFE2
 35308                           fsr1l	equ	0xFE1
 35309                           indf2	equ	0xFDF
 35310                           postinc2	equ	0xFDE
 35311                           postdec2	equ	0xFDD
 35312                           plusw2	equ	0xFDB
 35313                           fsr2h	equ	0xFDA
 35314                           fsr2l	equ	0xFD9
 35315                           status	equ	0xFD8
 35316                           
 35317 ;; *************** function _MSDComputeDeviceInAndResidue *****************
 35318 ;; Defined at:
 35319 ;;		line 993 in file "usb_device_msd.c"
 35320 ;; Parameters:    Size  Location     Type
 35321 ;;  DiExpected      2    0[BANK0 ] unsigned int 
 35322 ;; Auto vars:     Size  Location     Type
 35323 ;;		None
 35324 ;; Return value:  Size  Location     Type
 35325 ;;                  1    wreg      void 
 35326 ;; Registers used:
 35327 ;;		wreg, status,2, status,0
 35328 ;; Tracked objects:
 35329 ;;		On entry : 0/0
 35330 ;;		On exit  : 0/0
 35331 ;;		Unchanged: 0/0
 35332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35335 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35336 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35337 ;;Total ram usage:        6 bytes
 35338 ;; Hardware stack levels used:    1
 35339 ;; Hardware stack levels required when called:   10
 35340 ;; This function calls:
 35341 ;;		Nothing
 35342 ;; This function is called by:
 35343 ;;		_MSDProcessCommandMediaPresent
 35344 ;; This function uses a non-reentrant model
 35345 ;;
 35346                           
 35347                           	psect	text135
 35348  011D8E                     __ptext135:
 35349                           	opt stack 0
 35350  011D8E                     _MSDComputeDeviceInAndResidue:
 35351                           	opt stack 16
 35352                           
 35353                           ;usb_device_msd.c: 996: if(gblCBW.dCBWDataTransferLength < DiExpected)
 35354                           
 35355                           ;incstack = 0
 35356  011D8E  0100               	movlb	0	; () banked
 35357  011D90  5160               	movf	MSDComputeDeviceInAndResidue@DiExpected& (0+255),w,b
 35358  011D92  6F62               	movwf	??_MSDComputeDeviceInAndResidue& (0+255),b
 35359  011D94  5161               	movf	(MSDComputeDeviceInAndResidue@DiExpected+1)& (0+255),w,b
 35360  011D96  6F63               	movwf	(??_MSDComputeDeviceInAndResidue+1)& (0+255),b
 35361  011D98  6B64               	clrf	(??_MSDComputeDeviceInAndResidue+2)& (0+255),b
 35362  011D9A  6B65               	clrf	(??_MSDComputeDeviceInAndResidue+3)& (0+255),b
 35363  011D9C  5162               	movf	??_MSDComputeDeviceInAndResidue& (0+255),w,b
 35364  011D9E  0101               	movlb	1	; () banked
 35365  011DA0  5D08               	subwf	(_gblCBW+8)& (0+255),w,b
 35366  011DA2  0100               	movlb	0	; () banked
 35367  011DA4  5163               	movf	(??_MSDComputeDeviceInAndResidue+1)& (0+255),w,b
 35368  011DA6  0101               	movlb	1	; () banked
 35369  011DA8  5909               	subwfb	(_gblCBW+9)& (0+255),w,b
 35370  011DAA  0100               	movlb	0	; () banked
 35371  011DAC  5164               	movf	(??_MSDComputeDeviceInAndResidue+2)& (0+255),w,b
 35372  011DAE  0101               	movlb	1	; () banked
 35373  011DB0  590A               	subwfb	(_gblCBW+10)& (0+255),w,b
 35374  011DB2  0100               	movlb	0	; () banked
 35375  011DB4  5165               	movf	(??_MSDComputeDeviceInAndResidue+3)& (0+255),w,b
 35376  011DB6  0101               	movlb	1	; () banked
 35377  011DB8  590B               	subwfb	(_gblCBW+11)& (0+255),w,b
 35378  011DBA  B0D8               	btfsc	status,0,c
 35379  011DBC  D00E               	goto	l675
 35380                           
 35381                           ; BSR set to: 1
 35382                           ;usb_device_msd.c: 997: {;usb_device_msd.c: 1000: msd_csw.dCSWDataResidue = 0;
 35383  011DBE  0E00               	movlw	0
 35384  011DC0  010D               	movlb	13	; () banked
 35385  011DC2  6F88               	movwf	136,b	;volatile
 35386  011DC4  0E00               	movlw	0
 35387  011DC6  6F89               	movwf	137,b	;volatile
 35388  011DC8  0E00               	movlw	0
 35389  011DCA  6F8A               	movwf	138,b	;volatile
 35390  011DCC  0E00               	movlw	0
 35391  011DCE  6F8B               	movwf	139,b	;volatile
 35392                           
 35393                           ; BSR set to: 13
 35394                           ;usb_device_msd.c: 1001: TransferLength.Val = gblCBW.dCBWDataTransferLength;
 35395  011DD0  C108  F0EB         	movff	_gblCBW+8,_TransferLength
 35396  011DD4  C109  F0EC         	movff	_gblCBW+9,_TransferLength+1
 35397                           
 35398                           ;usb_device_msd.c: 1002: }
 35399  011DD8  0012               	return	
 35400  011DDA                     l675:
 35401                           
 35402                           ;usb_device_msd.c: 1003: else;usb_device_msd.c: 1004: {;usb_device_msd.c: 1006: if(DiExp
      +                          ected < TransferLength.Val)
 35403                           
 35404                           ; BSR set to: 13
 35405  011DDA  0100               	movlb	0	; () banked
 35406  011DDC  51EB               	movf	_TransferLength& (0+255),w,b
 35407  011DDE  5D60               	subwf	MSDComputeDeviceInAndResidue@DiExpected& (0+255),w,b
 35408  011DE0  51EC               	movf	(_TransferLength+1)& (0+255),w,b
 35409  011DE2  5961               	subwfb	(MSDComputeDeviceInAndResidue@DiExpected+1)& (0+255),w,b
 35410  011DE4  B0D8               	btfsc	status,0,c
 35411  011DE6  D004               	goto	l677
 35412                           
 35413                           ; BSR set to: 0
 35414                           ;usb_device_msd.c: 1007: {;usb_device_msd.c: 1008: TransferLength.Val = DiExpected;
 35415  011DE8  C060  F0EB         	movff	MSDComputeDeviceInAndResidue@DiExpected,_TransferLength
 35416  011DEC  C061  F0EC         	movff	MSDComputeDeviceInAndResidue@DiExpected+1,_TransferLength+1
 35417  011DF0                     l677:
 35418                           
 35419                           ; BSR set to: 0
 35420                           ;usb_device_msd.c: 1009: };usb_device_msd.c: 1010: msd_csw.dCSWDataResidue = gblCBW.dCBW
      +                          DataTransferLength - TransferLength.Val;
 35421                           
 35422                           ; BSR set to: 0
 35423  011DF0  51EB               	movf	_TransferLength& (0+255),w,b
 35424  011DF2  6F62               	movwf	??_MSDComputeDeviceInAndResidue& (0+255),b
 35425  011DF4  51EC               	movf	(_TransferLength+1)& (0+255),w,b
 35426  011DF6  6F63               	movwf	(??_MSDComputeDeviceInAndResidue+1)& (0+255),b
 35427  011DF8  6B64               	clrf	(??_MSDComputeDeviceInAndResidue+2)& (0+255),b
 35428  011DFA  6B65               	clrf	(??_MSDComputeDeviceInAndResidue+3)& (0+255),b
 35429  011DFC  1F62               	comf	??_MSDComputeDeviceInAndResidue& (0+255),f,b
 35430  011DFE  1F63               	comf	(??_MSDComputeDeviceInAndResidue+1)& (0+255),f,b
 35431  011E00  1F64               	comf	(??_MSDComputeDeviceInAndResidue+2)& (0+255),f,b
 35432  011E02  1F65               	comf	(??_MSDComputeDeviceInAndResidue+3)& (0+255),f,b
 35433  011E04  2B62               	incf	??_MSDComputeDeviceInAndResidue& (0+255),f,b
 35434  011E06  0E00               	movlw	0
 35435  011E08  2363               	addwfc	(??_MSDComputeDeviceInAndResidue+1)& (0+255),f,b
 35436  011E0A  2364               	addwfc	(??_MSDComputeDeviceInAndResidue+2)& (0+255),f,b
 35437  011E0C  2365               	addwfc	(??_MSDComputeDeviceInAndResidue+3)& (0+255),f,b
 35438  011E0E  0101               	movlb	1	; () banked
 35439  011E10  5108               	movf	(_gblCBW+8)& (0+255),w,b
 35440  011E12  0100               	movlb	0	; () banked
 35441  011E14  2562               	addwf	??_MSDComputeDeviceInAndResidue& (0+255),w,b
 35442  011E16  010D               	movlb	13	; () banked
 35443  011E18  6F88               	movwf	136,b	;volatile
 35444  011E1A  0101               	movlb	1	; () banked
 35445  011E1C  5109               	movf	(_gblCBW+9)& (0+255),w,b
 35446  011E1E  0100               	movlb	0	; () banked
 35447  011E20  2163               	addwfc	(??_MSDComputeDeviceInAndResidue+1)& (0+255),w,b
 35448  011E22  010D               	movlb	13	; () banked
 35449  011E24  6F89               	movwf	137,b	;volatile
 35450  011E26  0101               	movlb	1	; () banked
 35451  011E28  510A               	movf	(_gblCBW+10)& (0+255),w,b
 35452  011E2A  0100               	movlb	0	; () banked
 35453  011E2C  2164               	addwfc	(??_MSDComputeDeviceInAndResidue+2)& (0+255),w,b
 35454  011E2E  010D               	movlb	13	; () banked
 35455  011E30  6F8A               	movwf	138,b	;volatile
 35456  011E32  0101               	movlb	1	; () banked
 35457  011E34  510B               	movf	(_gblCBW+11)& (0+255),w,b
 35458  011E36  0100               	movlb	0	; () banked
 35459  011E38  2165               	addwfc	(??_MSDComputeDeviceInAndResidue+3)& (0+255),w,b
 35460  011E3A  010D               	movlb	13	; () banked
 35461  011E3C  6F8B               	movwf	139,b	;volatile
 35462  011E3E  0012               	return	
 35463  011E40                     __end_of_MSDComputeDeviceInAndResidue:
 35464                           	opt stack 0
 35465                           tosu	equ	0xFFF
 35466                           tosh	equ	0xFFE
 35467                           tosl	equ	0xFFD
 35468                           pclath	equ	0xFFA
 35469                           tblptru	equ	0xFF8
 35470                           tblptrh	equ	0xFF7
 35471                           tblptrl	equ	0xFF6
 35472                           tablat	equ	0xFF5
 35473                           prodh	equ	0xFF4
 35474                           prodl	equ	0xFF3
 35475                           intcon	equ	0xFF2
 35476                           postinc0	equ	0xFEE
 35477                           wreg	equ	0xFE8
 35478                           indf1	equ	0xFE7
 35479                           postinc1	equ	0xFE6
 35480                           postdec1	equ	0xFE5
 35481                           plusw1	equ	0xFE3
 35482                           fsr1h	equ	0xFE2
 35483                           fsr1l	equ	0xFE1
 35484                           indf2	equ	0xFDF
 35485                           postinc2	equ	0xFDE
 35486                           postdec2	equ	0xFDD
 35487                           plusw2	equ	0xFDB
 35488                           fsr2h	equ	0xFDA
 35489                           fsr2l	equ	0xFD9
 35490                           status	equ	0xFD8
 35491                           
 35492 ;; *************** function _ExternalFlash_SectorSizeRead *****************
 35493 ;; Defined at:
 35494 ;;		line 18 in file "external_flash.c"
 35495 ;; Parameters:    Size  Location     Type
 35496 ;;  config          2    0[BANK0 ] PTR void 
 35497 ;;		 -> NULL(0), 
 35498 ;; Auto vars:     Size  Location     Type
 35499 ;;		None
 35500 ;; Return value:  Size  Location     Type
 35501 ;;                  2    0[BANK0 ] unsigned int 
 35502 ;; Registers used:
 35503 ;;		wreg, status,2
 35504 ;; Tracked objects:
 35505 ;;		On entry : 0/0
 35506 ;;		On exit  : 0/0
 35507 ;;		Unchanged: 0/0
 35508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35509 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35512 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35513 ;;Total ram usage:        2 bytes
 35514 ;; Hardware stack levels used:    1
 35515 ;; Hardware stack levels required when called:   10
 35516 ;; This function calls:
 35517 ;;		Nothing
 35518 ;; This function is called by:
 35519 ;;		_MSDProcessCommandMediaPresent
 35520 ;; This function uses a non-reentrant model
 35521 ;;
 35522                           
 35523                           	psect	text136
 35524  01430A                     __ptext136:
 35525                           	opt stack 0
 35526  01430A                     _ExternalFlash_SectorSizeRead:
 35527                           	opt stack 16
 35528                           
 35529                           ;external_flash.c: 20: return 512;
 35530                           
 35531                           ; BSR set to: 13
 35532                           ;incstack = 0
 35533  01430A  0E02               	movlw	2
 35534  01430C  0100               	movlb	0	; () banked
 35535  01430E  6F61               	movwf	(?_ExternalFlash_SectorSizeRead+1)& (0+255),b
 35536  014310  0E00               	movlw	0
 35537  014312  6F60               	movwf	?_ExternalFlash_SectorSizeRead& (0+255),b
 35538  014314  0012               	return	
 35539  014316                     __end_of_ExternalFlash_SectorSizeRead:
 35540                           	opt stack 0
 35541                           tosu	equ	0xFFF
 35542                           tosh	equ	0xFFE
 35543                           tosl	equ	0xFFD
 35544                           pclath	equ	0xFFA
 35545                           tblptru	equ	0xFF8
 35546                           tblptrh	equ	0xFF7
 35547                           tblptrl	equ	0xFF6
 35548                           tablat	equ	0xFF5
 35549                           prodh	equ	0xFF4
 35550                           prodl	equ	0xFF3
 35551                           intcon	equ	0xFF2
 35552                           postinc0	equ	0xFEE
 35553                           wreg	equ	0xFE8
 35554                           indf1	equ	0xFE7
 35555                           postinc1	equ	0xFE6
 35556                           postdec1	equ	0xFE5
 35557                           plusw1	equ	0xFE3
 35558                           fsr1h	equ	0xFE2
 35559                           fsr1l	equ	0xFE1
 35560                           indf2	equ	0xFDF
 35561                           postinc2	equ	0xFDE
 35562                           postdec2	equ	0xFDD
 35563                           plusw2	equ	0xFDB
 35564                           fsr2h	equ	0xFDA
 35565                           fsr2l	equ	0xFD9
 35566                           status	equ	0xFD8
 35567                           
 35568 ;; *************** function _ExternalFlash_CapacityRead *****************
 35569 ;; Defined at:
 35570 ;;		line 23 in file "external_flash.c"
 35571 ;; Parameters:    Size  Location     Type
 35572 ;;  config          2    0[BANK0 ] PTR void 
 35573 ;;		 -> NULL(0), 
 35574 ;; Auto vars:     Size  Location     Type
 35575 ;;		None
 35576 ;; Return value:  Size  Location     Type
 35577 ;;                  4    0[BANK0 ] unsigned long 
 35578 ;; Registers used:
 35579 ;;		wreg, status,2
 35580 ;; Tracked objects:
 35581 ;;		On entry : 0/0
 35582 ;;		On exit  : 0/0
 35583 ;;		Unchanged: 0/0
 35584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35585 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35589 ;;Total ram usage:        4 bytes
 35590 ;; Hardware stack levels used:    1
 35591 ;; Hardware stack levels required when called:   10
 35592 ;; This function calls:
 35593 ;;		Nothing
 35594 ;; This function is called by:
 35595 ;;		_MSDProcessCommandMediaPresent
 35596 ;; This function uses a non-reentrant model
 35597 ;;
 35598                           
 35599                           	psect	text137
 35600  01428E                     __ptext137:
 35601                           	opt stack 0
 35602  01428E                     _ExternalFlash_CapacityRead:
 35603                           	opt stack 16
 35604                           
 35605                           ;external_flash.c: 26: return ((uint32_t) 8192 - 1);
 35606                           
 35607                           ; BSR set to: 0
 35608                           ;incstack = 0
 35609  01428E  0EFF               	movlw	255
 35610  014290  0100               	movlb	0	; () banked
 35611  014292  6F60               	movwf	?_ExternalFlash_CapacityRead& (0+255),b
 35612  014294  0E1F               	movlw	31
 35613  014296  6F61               	movwf	(?_ExternalFlash_CapacityRead+1)& (0+255),b
 35614  014298  0E00               	movlw	0
 35615  01429A  6F62               	movwf	(?_ExternalFlash_CapacityRead+2)& (0+255),b
 35616  01429C  0E00               	movlw	0
 35617  01429E  6F63               	movwf	(?_ExternalFlash_CapacityRead+3)& (0+255),b
 35618  0142A0  0012               	return	
 35619  0142A2                     __end_of_ExternalFlash_CapacityRead:
 35620                           	opt stack 0
 35621                           tosu	equ	0xFFF
 35622                           tosh	equ	0xFFE
 35623                           tosl	equ	0xFFD
 35624                           pclath	equ	0xFFA
 35625                           tblptru	equ	0xFF8
 35626                           tblptrh	equ	0xFF7
 35627                           tblptrl	equ	0xFF6
 35628                           tablat	equ	0xFF5
 35629                           prodh	equ	0xFF4
 35630                           prodl	equ	0xFF3
 35631                           intcon	equ	0xFF2
 35632                           postinc0	equ	0xFEE
 35633                           wreg	equ	0xFE8
 35634                           indf1	equ	0xFE7
 35635                           postinc1	equ	0xFE6
 35636                           postdec1	equ	0xFE5
 35637                           plusw1	equ	0xFE3
 35638                           fsr1h	equ	0xFE2
 35639                           fsr1l	equ	0xFE1
 35640                           indf2	equ	0xFDF
 35641                           postinc2	equ	0xFDE
 35642                           postdec2	equ	0xFDD
 35643                           plusw2	equ	0xFDB
 35644                           fsr2h	equ	0xFDA
 35645                           fsr2l	equ	0xFD9
 35646                           status	equ	0xFD8
 35647                           
 35648 ;; *************** function _ExternalFlash_MediaInitialize *****************
 35649 ;; Defined at:
 35650 ;;		line 10 in file "external_flash.c"
 35651 ;; Parameters:    Size  Location     Type
 35652 ;;  config          2    0[BANK0 ] PTR void 
 35653 ;;		 -> NULL(0), 
 35654 ;; Auto vars:     Size  Location     Type
 35655 ;;		None
 35656 ;; Return value:  Size  Location     Type
 35657 ;;                  2    0[BANK0 ] PTR struct .
 35658 ;; Registers used:
 35659 ;;		wreg, status,2, status,0
 35660 ;; Tracked objects:
 35661 ;;		On entry : 0/0
 35662 ;;		On exit  : 0/0
 35663 ;;		Unchanged: 0/0
 35664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35665 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35669 ;;Total ram usage:        2 bytes
 35670 ;; Hardware stack levels used:    1
 35671 ;; Hardware stack levels required when called:   10
 35672 ;; This function calls:
 35673 ;;		Nothing
 35674 ;; This function is called by:
 35675 ;;		_USBMSDInit
 35676 ;;		_MSDProcessCommand
 35677 ;; This function uses a non-reentrant model
 35678 ;;
 35679                           
 35680                           	psect	text138
 35681  0141AC                     __ptext138:
 35682                           	opt stack 0
 35683  0141AC                     _ExternalFlash_MediaInitialize:
 35684                           	opt stack 0
 35685                           
 35686                           ; BSR set to: 0
 35687                           ;Skip over the trampoline to the duplicate function for level 2
 35688  0141AC  B25B               	btfsc	btemp,1,c
 35689  0141AE  EF2F  F0A1         	goto	i2_ExternalFlash_MediaInitialize
 35690  0141B2                     _ExternalFlash_MediaInitialize$intlevel0:
 35691                           	opt stack 17
 35692                           
 35693                           ;external_flash.c: 12: mediaInformation.validityFlags.bits.sectorSize = 1;
 35694                           
 35695                           ;incstack = 0
 35696  0141B2  0101               	movlb	1	; () banked
 35697  0141B4  81BA               	bsf	(_mediaInformation+1)& (0+255),0,b
 35698                           
 35699                           ; BSR set to: 1
 35700                           ;external_flash.c: 13: mediaInformation.sectorSize = 512;
 35701  0141B6  0E02               	movlw	2
 35702  0141B8  6FBC               	movwf	(_mediaInformation+3)& (0+255),b
 35703  0141BA  0E00               	movlw	0
 35704  0141BC  6FBB               	movwf	(_mediaInformation+2)& (0+255),b
 35705                           
 35706                           ;external_flash.c: 14: mediaInformation.errorCode = MEDIA_NO_ERROR;
 35707  0141BE  0E00               	movlw	0
 35708  0141C0  6FB9               	movwf	_mediaInformation& (0+255),b
 35709                           
 35710                           ; BSR set to: 1
 35711                           ;external_flash.c: 15: return &mediaInformation;
 35712  0141C2  0EB9               	movlw	low _mediaInformation
 35713  0141C4  0100               	movlb	0	; () banked
 35714  0141C6  6F60               	movwf	?_ExternalFlash_MediaInitialize& (0+255),b
 35715  0141C8  0E01               	movlw	high _mediaInformation
 35716  0141CA  6F61               	movwf	(?_ExternalFlash_MediaInitialize+1)& (0+255),b
 35717  0141CC  0012               	return	
 35718  0141CE                     __end_of_ExternalFlash_MediaInitialize:
 35719                           	opt stack 0
 35720                           tosu	equ	0xFFF
 35721                           tosh	equ	0xFFE
 35722                           tosl	equ	0xFFD
 35723                           pclath	equ	0xFFA
 35724                           tblptru	equ	0xFF8
 35725                           tblptrh	equ	0xFF7
 35726                           tblptrl	equ	0xFF6
 35727                           tablat	equ	0xFF5
 35728                           prodh	equ	0xFF4
 35729                           prodl	equ	0xFF3
 35730                           intcon	equ	0xFF2
 35731                           postinc0	equ	0xFEE
 35732                           wreg	equ	0xFE8
 35733                           indf1	equ	0xFE7
 35734                           postinc1	equ	0xFE6
 35735                           postdec1	equ	0xFE5
 35736                           plusw1	equ	0xFE3
 35737                           fsr1h	equ	0xFE2
 35738                           fsr1l	equ	0xFE1
 35739                           indf2	equ	0xFDF
 35740                           postinc2	equ	0xFDE
 35741                           postdec2	equ	0xFDD
 35742                           plusw2	equ	0xFDB
 35743                           fsr2h	equ	0xFDA
 35744                           fsr2l	equ	0xFD9
 35745                           status	equ	0xFD8
 35746                           
 35747 ;; *************** function _ExternalFlash_MediaDetect *****************
 35748 ;; Defined at:
 35749 ;;		line 29 in file "external_flash.c"
 35750 ;; Parameters:    Size  Location     Type
 35751 ;;  config          2    0[BANK0 ] PTR void 
 35752 ;;		 -> NULL(0), 
 35753 ;; Auto vars:     Size  Location     Type
 35754 ;;		None
 35755 ;; Return value:  Size  Location     Type
 35756 ;;                  1    wreg      unsigned char 
 35757 ;; Registers used:
 35758 ;;		wreg
 35759 ;; Tracked objects:
 35760 ;;		On entry : 0/0
 35761 ;;		On exit  : 0/0
 35762 ;;		Unchanged: 0/0
 35763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35764 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35767 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35768 ;;Total ram usage:        2 bytes
 35769 ;; Hardware stack levels used:    1
 35770 ;; Hardware stack levels required when called:   10
 35771 ;; This function calls:
 35772 ;;		Nothing
 35773 ;; This function is called by:
 35774 ;;		_USBMSDInit
 35775 ;;		_MSDProcessCommand
 35776 ;; This function uses a non-reentrant model
 35777 ;;
 35778                           
 35779                           	psect	text139
 35780  014336                     __ptext139:
 35781                           	opt stack 0
 35782  014336                     _ExternalFlash_MediaDetect:
 35783                           	opt stack 0
 35784                           
 35785                           ; BSR set to: 0
 35786                           ;Skip over the trampoline to the duplicate function for level 2
 35787  014336  B25B               	btfsc	btemp,1,c
 35788  014338  EFAC  F0A1         	goto	i2_ExternalFlash_MediaDetect
 35789  01433C                     _ExternalFlash_MediaDetect$intlevel0:
 35790                           	opt stack 17
 35791                           
 35792                           ;external_flash.c: 31: return 1;
 35793                           
 35794                           ;incstack = 0
 35795  01433C  0E01               	movlw	1
 35796  01433E  0012               	return	
 35797  014340                     __end_of_ExternalFlash_MediaDetect:
 35798                           	opt stack 0
 35799                           tosu	equ	0xFFF
 35800                           tosh	equ	0xFFE
 35801                           tosl	equ	0xFFD
 35802                           pclath	equ	0xFFA
 35803                           tblptru	equ	0xFF8
 35804                           tblptrh	equ	0xFF7
 35805                           tblptrl	equ	0xFF6
 35806                           tablat	equ	0xFF5
 35807                           prodh	equ	0xFF4
 35808                           prodl	equ	0xFF3
 35809                           intcon	equ	0xFF2
 35810                           postinc0	equ	0xFEE
 35811                           wreg	equ	0xFE8
 35812                           indf1	equ	0xFE7
 35813                           postinc1	equ	0xFE6
 35814                           postdec1	equ	0xFE5
 35815                           plusw1	equ	0xFE3
 35816                           fsr1h	equ	0xFE2
 35817                           fsr1l	equ	0xFE1
 35818                           indf2	equ	0xFDF
 35819                           postinc2	equ	0xFDE
 35820                           postdec2	equ	0xFDD
 35821                           plusw2	equ	0xFDB
 35822                           fsr2h	equ	0xFDA
 35823                           fsr2l	equ	0xFD9
 35824                           status	equ	0xFD8
 35825                           
 35826 ;; *************** function _APP_DeviceCustomHIDTasks *****************
 35827 ;; Defined at:
 35828 ;;		line 73 in file "app_device_custom_hid.c"
 35829 ;; Parameters:    Size  Location     Type
 35830 ;;		None
 35831 ;; Auto vars:     Size  Location     Type
 35832 ;;  idx             1    0        unsigned char 
 35833 ;; Return value:  Size  Location     Type
 35834 ;;                  1    wreg      void 
 35835 ;; Registers used:
 35836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35837 ;; Tracked objects:
 35838 ;;		On entry : 0/0
 35839 ;;		On exit  : 0/0
 35840 ;;		Unchanged: 0/0
 35841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 35842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 35846 ;;Total ram usage:        0 bytes
 35847 ;; Hardware stack levels used:    1
 35848 ;; Hardware stack levels required when called:   15
 35849 ;; This function calls:
 35850 ;;		_USBTransferOnePacket
 35851 ;;		_api_parse
 35852 ;;		_api_prepare
 35853 ;; This function is called by:
 35854 ;;		_main
 35855 ;; This function uses a non-reentrant model
 35856 ;;
 35857                           
 35858                           	psect	text140
 35859  01219C                     __ptext140:
 35860                           	opt stack 0
 35861  01219C                     _APP_DeviceCustomHIDTasks:
 35862                           	opt stack 15
 35863                           
 35864                           ;app_device_custom_hid.c: 75: uint8_t idx;;app_device_custom_hid.c: 80: if( USBDeviceSta
      +                          te < CONFIGURED_STATE )
 35865                           
 35866                           ;incstack = 0
 35867  01219C  0E20               	movlw	32
 35868  01219E  602B               	cpfslt	_USBDeviceState,c	;volatile
 35869  0121A0  D001               	goto	l939
 35870  0121A2  0012               	return	
 35871  0121A4                     l939:
 35872                           
 35873                           ;app_device_custom_hid.c: 83: };app_device_custom_hid.c: 89: if( UCONbits.SUSPND== 1 )
 35874  0121A4  B265               	btfsc	3941,1,c	;volatile
 35875  0121A6  0012               	return	
 35876                           
 35877                           ;app_device_custom_hid.c: 92: };app_device_custom_hid.c: 95: if(((USBOutHandle != 0x0000
      +                          ) && ((*(volatile uint8_t*)USBOutHandle & 0x80) != 0x00)) == 0)
 35878                           
 35879                           ;app_device_custom_hid.c: 90: {;app_device_custom_hid.c: 91: return;
 35880  0121A8  0101               	movlb	1	; () banked
 35881  0121AA  5166               	movf	_USBOutHandle& (0+255),w,b
 35882  0121AC  1167               	iorwf	(_USBOutHandle+1)& (0+255),w,b
 35883  0121AE  B4D8               	btfsc	status,2,c
 35884  0121B0  D006               	goto	u22760
 35885                           
 35886                           ; BSR set to: 1
 35887  0121B2  C166  FFD9         	movff	_USBOutHandle,fsr2l
 35888  0121B6  C167  FFDA         	movff	_USBOutHandle+1,fsr2h
 35889  0121BA  BEDF               	btfsc	indf2,7,c
 35890  0121BC  0012               	return	
 35891  0121BE                     u22760:
 35892                           
 35893                           ; BSR set to: 1
 35894                           ;app_device_custom_hid.c: 96: {;app_device_custom_hid.c: 101: if(!((USBInHandle != 0x000
      +                          0) && ((*(volatile uint8_t*)USBInHandle & 0x80) != 0x00)))
 35895                           
 35896                           ; BSR set to: 1
 35897  0121BE  5164               	movf	_USBInHandle& (0+255),w,b
 35898  0121C0  1165               	iorwf	(_USBInHandle+1)& (0+255),w,b
 35899  0121C2  B4D8               	btfsc	status,2,c
 35900  0121C4  D006               	goto	u22780
 35901                           
 35902                           ; BSR set to: 1
 35903  0121C6  C164  FFD9         	movff	_USBInHandle,fsr2l
 35904  0121CA  C165  FFDA         	movff	_USBInHandle+1,fsr2h
 35905  0121CE  BEDF               	btfsc	indf2,7,c
 35906  0121D0  D01B               	goto	l945
 35907  0121D2                     u22780:
 35908                           
 35909                           ; BSR set to: 1
 35910                           ;app_device_custom_hid.c: 102: {;app_device_custom_hid.c: 104: api_prepare((uint8_t*) Re
      +                          ceivedDataBuffer, (uint8_t*) ToSendDataBuffer);
 35911                           
 35912                           ; BSR set to: 1
 35913  0121D2  0E38               	movlw	low _ReceivedDataBuffer
 35914  0121D4  0100               	movlb	0	; () banked
 35915  0121D6  6F70               	movwf	api_prepare@inBuffer& (0+255),b
 35916  0121D8  0E02               	movlw	high _ReceivedDataBuffer
 35917  0121DA  6F71               	movwf	(api_prepare@inBuffer+1)& (0+255),b
 35918  0121DC  0E00               	movlw	low _ToSendDataBuffer
 35919  0121DE  6F72               	movwf	api_prepare@outBuffer& (0+255),b
 35920  0121E0  0E03               	movlw	high _ToSendDataBuffer
 35921  0121E2  6F73               	movwf	(api_prepare@outBuffer+1)& (0+255),b
 35922  0121E4  EC97  F089         	call	_api_prepare	;wreg free
 35923                           
 35924                           ;app_device_custom_hid.c: 106: USBInHandle = USBTransferOnePacket(1,1,(uint8_t*)&ToSendD
      +                          ataBuffer[0],64);
 35925  0121E8  0E01               	movlw	1
 35926  0121EA  0100               	movlb	0	; () banked
 35927  0121EC  6F60               	movwf	USBTransferOnePacket@dir& (0+255),b
 35928  0121EE  0E00               	movlw	low _ToSendDataBuffer
 35929  0121F0  6F61               	movwf	USBTransferOnePacket@data& (0+255),b
 35930  0121F2  0E03               	movlw	high _ToSendDataBuffer
 35931  0121F4  6F62               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
 35932  0121F6  0E40               	movlw	64
 35933  0121F8  6F63               	movwf	USBTransferOnePacket@len& (0+255),b
 35934  0121FA  0E01               	movlw	1
 35935  0121FC  EC6F  F082         	call	_USBTransferOnePacket
 35936  012200  C060  F164         	movff	?_USBTransferOnePacket,_USBInHandle
 35937  012204  C061  F165         	movff	?_USBTransferOnePacket+1,_USBInHandle+1
 35938  012208                     l945:
 35939                           
 35940                           ;app_device_custom_hid.c: 107: };app_device_custom_hid.c: 110: api_parse(ReceivedDataBuf
      +                          fer, 64, ToSendDataBuffer);
 35941  012208  0E38               	movlw	low _ReceivedDataBuffer
 35942  01220A  0100               	movlb	0	; () banked
 35943  01220C  6FBB               	movwf	api_parse@inBuffer& (0+255),b
 35944  01220E  0E02               	movlw	high _ReceivedDataBuffer
 35945  012210  6FBC               	movwf	(api_parse@inBuffer+1)& (0+255),b
 35946  012212  0E40               	movlw	64
 35947  012214  6FBD               	movwf	api_parse@receivedDataLength& (0+255),b
 35948  012216  0E00               	movlw	low _ToSendDataBuffer
 35949  012218  6FBE               	movwf	api_parse@outBuffer& (0+255),b
 35950  01221A  0E03               	movlw	high _ToSendDataBuffer
 35951  01221C  6FBF               	movwf	(api_parse@outBuffer+1)& (0+255),b
 35952  01221E  EC36  F07F         	call	_api_parse	;wreg free
 35953                           
 35954                           ;app_device_custom_hid.c: 114: USBOutHandle = USBTransferOnePacket(1,0,(uint8_t*)&Receiv
      +                          edDataBuffer,64);
 35955  012222  0E00               	movlw	0
 35956  012224  0100               	movlb	0	; () banked
 35957  012226  6F60               	movwf	USBTransferOnePacket@dir& (0+255),b
 35958  012228  0E38               	movlw	low _ReceivedDataBuffer
 35959  01222A  6F61               	movwf	USBTransferOnePacket@data& (0+255),b
 35960  01222C  0E02               	movlw	high _ReceivedDataBuffer
 35961  01222E  6F62               	movwf	(USBTransferOnePacket@data+1)& (0+255),b
 35962  012230  0E40               	movlw	64
 35963  012232  6F63               	movwf	USBTransferOnePacket@len& (0+255),b
 35964  012234  0E01               	movlw	1
 35965  012236  EC6F  F082         	call	_USBTransferOnePacket
 35966  01223A  C060  F166         	movff	?_USBTransferOnePacket,_USBOutHandle
 35967  01223E  C061  F167         	movff	?_USBTransferOnePacket+1,_USBOutHandle+1
 35968  012242  0012               	return	
 35969  012244                     __end_of_APP_DeviceCustomHIDTasks:
 35970                           	opt stack 0
 35971                           tosu	equ	0xFFF
 35972                           tosh	equ	0xFFE
 35973                           tosl	equ	0xFFD
 35974                           pclath	equ	0xFFA
 35975                           tblptru	equ	0xFF8
 35976                           tblptrh	equ	0xFF7
 35977                           tblptrl	equ	0xFF6
 35978                           tablat	equ	0xFF5
 35979                           prodh	equ	0xFF4
 35980                           prodl	equ	0xFF3
 35981                           intcon	equ	0xFF2
 35982                           postinc0	equ	0xFEE
 35983                           wreg	equ	0xFE8
 35984                           indf1	equ	0xFE7
 35985                           postinc1	equ	0xFE6
 35986                           postdec1	equ	0xFE5
 35987                           plusw1	equ	0xFE3
 35988                           fsr1h	equ	0xFE2
 35989                           fsr1l	equ	0xFE1
 35990                           indf2	equ	0xFDF
 35991                           postinc2	equ	0xFDE
 35992                           postdec2	equ	0xFDD
 35993                           plusw2	equ	0xFDB
 35994                           fsr2h	equ	0xFDA
 35995                           fsr2l	equ	0xFD9
 35996                           status	equ	0xFD8
 35997                           
 35998 ;; *************** function _api_prepare *****************
 35999 ;; Defined at:
 36000 ;;		line 36 in file "api.c"
 36001 ;; Parameters:    Size  Location     Type
 36002 ;;  inBuffer        2   16[BANK0 ] PTR unsigned char 
 36003 ;;		 -> ReceivedDataBuffer(64), 
 36004 ;;  outBuffer       2   18[BANK0 ] PTR unsigned char 
 36005 ;;		 -> ToSendDataBuffer(64), 
 36006 ;; Auto vars:     Size  Location     Type
 36007 ;;  command         1   20[BANK0 ] enum E6715
 36008 ;; Return value:  Size  Location     Type
 36009 ;;                  1    wreg      void 
 36010 ;; Registers used:
 36011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 36012 ;; Tracked objects:
 36013 ;;		On entry : 0/0
 36014 ;;		On exit  : 0/0
 36015 ;;		Unchanged: 0/0
 36016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 36017 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36020 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36021 ;;Total ram usage:        5 bytes
 36022 ;; Hardware stack levels used:    1
 36023 ;; Hardware stack levels required when called:   12
 36024 ;; This function calls:
 36025 ;;		__fill_buffer_get_display
 36026 ;;		__fill_buffer_get_mode_details
 36027 ;;		__fill_buffer_get_status
 36028 ;;		_memcpy
 36029 ;; This function is called by:
 36030 ;;		_APP_DeviceCustomHIDTasks
 36031 ;; This function uses a non-reentrant model
 36032 ;;
 36033                           
 36034                           	psect	text141
 36035  01132E                     __ptext141:
 36036                           	opt stack 0
 36037  01132E                     _api_prepare:
 36038                           	opt stack 17
 36039                           
 36040                           ;api.c: 38: apiDataRequest_t command = (apiDataRequest_t) inBuffer[0];
 36041                           
 36042                           ;incstack = 0
 36043  01132E  C070  FFD9         	movff	api_prepare@inBuffer,fsr2l
 36044  011332  C071  FFDA         	movff	api_prepare@inBuffer+1,fsr2h
 36045  011336  50DF               	movf	indf2,w,c
 36046  011338  0100               	movlb	0	; () banked
 36047  01133A  6F74               	movwf	api_prepare@command& (0+255),b
 36048                           
 36049                           ; BSR set to: 0
 36050                           ;api.c: 40: if(command>0x7F)
 36051  01133C  0E7F               	movlw	127
 36052  01133E  6574               	cpfsgt	api_prepare@command& (0+255),b
 36053  011340  D051               	goto	l2176
 36054                           
 36055                           ; BSR set to: 0
 36056                           ;api.c: 47: outBuffer[0] = 0x99;
 36057                           
 36058                           ; BSR set to: 0
 36059                           
 36060                           ;api.c: 43: {;api.c: 46: default:
 36061                           
 36062                           ; BSR set to: 0
 36063                           ;api.c: 41: {;api.c: 42: switch(command)
 36064  011342  C072  FFD9         	movff	api_prepare@outBuffer,fsr2l
 36065  011346  C073  FFDA         	movff	api_prepare@outBuffer+1,fsr2h
 36066  01134A  0E99               	movlw	153
 36067  01134C  6EDF               	movwf	indf2,c
 36068                           
 36069                           ; BSR set to: 0
 36070                           ;api.c: 48: outBuffer[1] = 0x99;
 36071  01134E  EE20 F001          	lfsr	2,1
 36072  011352  5172               	movf	api_prepare@outBuffer& (0+255),w,b
 36073  011354  26D9               	addwf	fsr2l,f,c
 36074  011356  5173               	movf	(api_prepare@outBuffer+1)& (0+255),w,b
 36075  011358  22DA               	addwfc	fsr2h,f,c
 36076  01135A  0E99               	movlw	153
 36077  01135C  6EDF               	movwf	indf2,c
 36078                           
 36079                           ;api.c: 49: }
 36080  01135E  0012               	return	
 36081  011360                     
 36082                           ; BSR set to: 0
 36083                           ;api.c: 62: _fill_buffer_get_status(outBuffer);
 36084                           
 36085                           ; BSR set to: 0
 36086  011360  C072  F06B         	movff	api_prepare@outBuffer,__fill_buffer_get_status@outBuffer
 36087  011364  C073  F06C         	movff	api_prepare@outBuffer+1,__fill_buffer_get_status@outBuffer+1
 36088  011368  EC07  F075         	call	__fill_buffer_get_status	;wreg free
 36089                           
 36090                           ;api.c: 63: break;
 36091  01136C  0012               	return	
 36092  01136E                     
 36093                           ;api.c: 67: _fill_buffer_get_display(outBuffer, 0);
 36094  01136E  C072  F064         	movff	api_prepare@outBuffer,__fill_buffer_get_display@outBuffer
 36095  011372  C073  F065         	movff	api_prepare@outBuffer+1,__fill_buffer_get_display@outBuffer+1
 36096  011376  0E00               	movlw	0
 36097  011378  0100               	movlb	0	; () banked
 36098  01137A  6F66               	movwf	__fill_buffer_get_display@secondHalf& (0+255),b
 36099  01137C  EC6B  F08E         	call	__fill_buffer_get_display	;wreg free
 36100                           
 36101                           ;api.c: 68: break;
 36102  011380  0012               	return	
 36103  011382                     
 36104                           ;api.c: 72: _fill_buffer_get_display(outBuffer, 1);
 36105  011382  C072  F064         	movff	api_prepare@outBuffer,__fill_buffer_get_display@outBuffer
 36106  011386  C073  F065         	movff	api_prepare@outBuffer+1,__fill_buffer_get_display@outBuffer+1
 36107  01138A  0E01               	movlw	1
 36108  01138C  0100               	movlb	0	; () banked
 36109  01138E  6F66               	movwf	__fill_buffer_get_display@secondHalf& (0+255),b
 36110  011390  EC6B  F08E         	call	__fill_buffer_get_display	;wreg free
 36111                           
 36112                           ;api.c: 73: break;
 36113  011394  0012               	return	
 36114  011396                     
 36115                           ;api.c: 77: _fill_buffer_get_mode_details(outBuffer);
 36116  011396  C072  F060         	movff	api_prepare@outBuffer,__fill_buffer_get_mode_details@outBuffer
 36117  01139A  C073  F061         	movff	api_prepare@outBuffer+1,__fill_buffer_get_mode_details@outBuffer+1
 36118  01139E  ECED  F075         	call	__fill_buffer_get_mode_details	;wreg free
 36119                           
 36120                           ;api.c: 78: break;
 36121  0113A2  0012               	return	
 36122  0113A4                     
 36123                           ;api.c: 82: memcpy(outBuffer, inBuffer, 64);
 36124  0113A4  C072  F060         	movff	api_prepare@outBuffer,memcpy@d1
 36125  0113A8  C073  F061         	movff	api_prepare@outBuffer+1,memcpy@d1+1
 36126  0113AC  C070  F062         	movff	api_prepare@inBuffer,memcpy@s1
 36127  0113B0  C071  F063         	movff	api_prepare@inBuffer+1,memcpy@s1+1
 36128  0113B4  0E00               	movlw	0
 36129  0113B6  0100               	movlb	0	; () banked
 36130  0113B8  6F65               	movwf	(memcpy@n+1)& (0+255),b
 36131  0113BA  0E40               	movlw	64
 36132  0113BC  6F64               	movwf	memcpy@n& (0+255),b
 36133  0113BE  EC3C  F098         	call	_memcpy	;wreg free
 36134                           
 36135                           ;api.c: 83: break;
 36136  0113C2  0012               	return	
 36137  0113C4                     
 36138                           ;api.c: 86: outBuffer[0] = 0x99;
 36139  0113C4  C072  FFD9         	movff	api_prepare@outBuffer,fsr2l
 36140  0113C8  C073  FFDA         	movff	api_prepare@outBuffer+1,fsr2h
 36141  0113CC  0E99               	movlw	153
 36142  0113CE  6EDF               	movwf	indf2,c
 36143                           
 36144                           ;api.c: 87: outBuffer[1] = 0x99;
 36145  0113D0  0100               	movlb	0	; () banked
 36146  0113D2  EE20 F001          	lfsr	2,1
 36147  0113D6  5172               	movf	api_prepare@outBuffer& (0+255),w,b
 36148  0113D8  26D9               	addwf	fsr2l,f,c
 36149  0113DA  5173               	movf	(api_prepare@outBuffer+1)& (0+255),w,b
 36150  0113DC  22DA               	addwfc	fsr2h,f,c
 36151  0113DE  0E99               	movlw	153
 36152  0113E0  6EDF               	movwf	indf2,c
 36153                           
 36154                           ;api.c: 88: }
 36155  0113E2  0012               	return	
 36156  0113E4                     l2176:
 36157                           
 36158                           ; BSR set to: 0
 36159                           
 36160                           ; BSR set to: 0
 36161  0113E4  5174               	movf	api_prepare@command& (0+255),w,b
 36162                           
 36163                           ; Switch size 1, requested type "space"
 36164                           ; Number of cases is 6, Range of values is 0 to 32
 36165                           ; switch strategies available:
 36166                           ; Name         Instructions Cycles
 36167                           ; simple_byte           19    10 (average)
 36168                           ;	Chosen strategy is simple_byte
 36169  0113E6  0A00               	xorlw	0	; case 0
 36170  0113E8  B4D8               	btfsc	status,2,c
 36171  0113EA  0012               	return	
 36172  0113EC  0A10               	xorlw	16	; case 16
 36173  0113EE  B4D8               	btfsc	status,2,c
 36174  0113F0  D7B7               	goto	l2179
 36175  0113F2  0A01               	xorlw	1	; case 17
 36176  0113F4  B4D8               	btfsc	status,2,c
 36177  0113F6  D7BB               	goto	l2180
 36178  0113F8  0A03               	xorlw	3	; case 18
 36179  0113FA  B4D8               	btfsc	status,2,c
 36180  0113FC  D7C2               	goto	l2181
 36181  0113FE  0A01               	xorlw	1	; case 19
 36182  011400  B4D8               	btfsc	status,2,c
 36183  011402  D7C9               	goto	l2182
 36184  011404  0A33               	xorlw	51	; case 32
 36185  011406  B4D8               	btfsc	status,2,c
 36186  011408  D7CD               	goto	l2183
 36187  01140A  D7DC               	goto	l2184
 36188  01140C                     __end_of_api_prepare:
 36189                           	opt stack 0
 36190                           tosu	equ	0xFFF
 36191                           tosh	equ	0xFFE
 36192                           tosl	equ	0xFFD
 36193                           pclath	equ	0xFFA
 36194                           tblptru	equ	0xFF8
 36195                           tblptrh	equ	0xFF7
 36196                           tblptrl	equ	0xFF6
 36197                           tablat	equ	0xFF5
 36198                           prodh	equ	0xFF4
 36199                           prodl	equ	0xFF3
 36200                           intcon	equ	0xFF2
 36201                           postinc0	equ	0xFEE
 36202                           wreg	equ	0xFE8
 36203                           indf1	equ	0xFE7
 36204                           postinc1	equ	0xFE6
 36205                           postdec1	equ	0xFE5
 36206                           plusw1	equ	0xFE3
 36207                           fsr1h	equ	0xFE2
 36208                           fsr1l	equ	0xFE1
 36209                           indf2	equ	0xFDF
 36210                           postinc2	equ	0xFDE
 36211                           postdec2	equ	0xFDD
 36212                           plusw2	equ	0xFDB
 36213                           fsr2h	equ	0xFDA
 36214                           fsr2l	equ	0xFD9
 36215                           status	equ	0xFD8
 36216                           
 36217 ;; *************** function __fill_buffer_get_status *****************
 36218 ;; Defined at:
 36219 ;;		line 169 in file "api.c"
 36220 ;; Parameters:    Size  Location     Type
 36221 ;;  outBuffer       2   11[BANK0 ] PTR unsigned char 
 36222 ;;		 -> ToSendDataBuffer(64), 
 36223 ;; Auto vars:     Size  Location     Type
 36224 ;;		None
 36225 ;; Return value:  Size  Location     Type
 36226 ;;                  1    wreg      void 
 36227 ;; Registers used:
 36228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 36229 ;; Tracked objects:
 36230 ;;		On entry : 0/0
 36231 ;;		On exit  : 0/0
 36232 ;;		Unchanged: 0/0
 36233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 36234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36238 ;;Total ram usage:        2 bytes
 36239 ;; Hardware stack levels used:    1
 36240 ;; Hardware stack levels required when called:   11
 36241 ;; This function calls:
 36242 ;;		_memcpy
 36243 ;; This function is called by:
 36244 ;;		_api_prepare
 36245 ;; This function uses a non-reentrant model
 36246 ;;
 36247                           
 36248                           	psect	text142
 36249  00EA0E                     __ptext142:
 36250                           	opt stack 0
 36251  00EA0E                     __fill_buffer_get_status:
 36252                           	opt stack 17
 36253                           
 36254                           ;api.c: 172: outBuffer[0] = DATAREQUEST_GET_STATUS;
 36255                           
 36256                           ;incstack = 0
 36257  00EA0E  C06B  FFD9         	movff	__fill_buffer_get_status@outBuffer,fsr2l
 36258  00EA12  C06C  FFDA         	movff	__fill_buffer_get_status@outBuffer+1,fsr2h
 36259  00EA16  0E10               	movlw	16
 36260  00EA18  6EDF               	movwf	indf2,c
 36261                           
 36262                           ;api.c: 175: outBuffer[1] = ((unsigned char)((0x62A1)&0xFF));
 36263  00EA1A  0100               	movlb	0	; () banked
 36264  00EA1C  EE20 F001          	lfsr	2,1
 36265  00EA20  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36266  00EA22  26D9               	addwf	fsr2l,f,c
 36267  00EA24  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36268  00EA26  22DA               	addwfc	fsr2h,f,c
 36269  00EA28  0EA1               	movlw	161
 36270  00EA2A  6EDF               	movwf	indf2,c
 36271                           
 36272                           ; BSR set to: 0
 36273                           ;api.c: 176: outBuffer[2] = ((unsigned char)(((0x62A1)>>8)&0xFF));
 36274  00EA2C  EE20 F002          	lfsr	2,2
 36275  00EA30  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36276  00EA32  26D9               	addwf	fsr2l,f,c
 36277  00EA34  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36278  00EA36  22DA               	addwfc	fsr2h,f,c
 36279  00EA38  0E62               	movlw	98
 36280  00EA3A  6EDF               	movwf	indf2,c
 36281                           
 36282                           ; BSR set to: 0
 36283                           ;api.c: 179: outBuffer[3] = 0x00;
 36284  00EA3C  EE20 F003          	lfsr	2,3
 36285  00EA40  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36286  00EA42  26D9               	addwf	fsr2l,f,c
 36287  00EA44  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36288  00EA46  22DA               	addwfc	fsr2h,f,c
 36289  00EA48  0E00               	movlw	0
 36290  00EA4A  6EDF               	movwf	indf2,c
 36291                           
 36292                           ; BSR set to: 0
 36293                           ;api.c: 180: outBuffer[4] = 0x04;
 36294  00EA4C  EE20 F004          	lfsr	2,4
 36295  00EA50  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36296  00EA52  26D9               	addwf	fsr2l,f,c
 36297  00EA54  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36298  00EA56  22DA               	addwfc	fsr2h,f,c
 36299  00EA58  0E04               	movlw	4
 36300  00EA5A  6EDF               	movwf	indf2,c
 36301                           
 36302                           ; BSR set to: 0
 36303                           ;api.c: 181: outBuffer[5] = 0x00;
 36304  00EA5C  EE20 F005          	lfsr	2,5
 36305  00EA60  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36306  00EA62  26D9               	addwf	fsr2l,f,c
 36307  00EA64  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36308  00EA66  22DA               	addwfc	fsr2h,f,c
 36309  00EA68  0E00               	movlw	0
 36310  00EA6A  6EDF               	movwf	indf2,c
 36311                           
 36312                           ; BSR set to: 0
 36313                           ;api.c: 184: outBuffer[6] = os.subTimeSlot;
 36314  00EA6C  EE20 F006          	lfsr	2,6
 36315  00EA70  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36316  00EA72  26D9               	addwf	fsr2l,f,c
 36317  00EA74  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36318  00EA76  22DA               	addwfc	fsr2h,f,c
 36319  00EA78  C173  FFDF         	movff	_os,indf2	;volatile
 36320                           
 36321                           ; BSR set to: 0
 36322                           ;api.c: 185: outBuffer[7] = os.timeSlot;
 36323  00EA7C  EE20 F007          	lfsr	2,7
 36324  00EA80  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36325  00EA82  26D9               	addwf	fsr2l,f,c
 36326  00EA84  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36327  00EA86  22DA               	addwfc	fsr2h,f,c
 36328  00EA88  C174  FFDF         	movff	_os+1,indf2	;volatile
 36329                           
 36330                           ; BSR set to: 0
 36331                           ;api.c: 186: outBuffer[8] = os.done;
 36332  00EA8C  EE20 F008          	lfsr	2,8
 36333  00EA90  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36334  00EA92  26D9               	addwf	fsr2l,f,c
 36335  00EA94  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36336  00EA96  22DA               	addwfc	fsr2h,f,c
 36337  00EA98  C175  FFDF         	movff	_os+2,indf2	;volatile
 36338                           
 36339                           ; BSR set to: 0
 36340                           ;api.c: 187: outBuffer[9] = os.encoder1Count;
 36341  00EA9C  EE20 F009          	lfsr	2,9
 36342  00EAA0  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36343  00EAA2  26D9               	addwf	fsr2l,f,c
 36344  00EAA4  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36345  00EAA6  22DA               	addwfc	fsr2h,f,c
 36346  00EAA8  C176  FFDF         	movff	_os+3,indf2	;volatile
 36347                           
 36348                           ; BSR set to: 0
 36349                           ;api.c: 188: outBuffer[10] = os.button1;
 36350  00EAAC  EE20 F00A          	lfsr	2,10
 36351  00EAB0  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36352  00EAB2  26D9               	addwf	fsr2l,f,c
 36353  00EAB4  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36354  00EAB6  22DA               	addwfc	fsr2h,f,c
 36355  00EAB8  C177  FFDF         	movff	_os+4,indf2	;volatile
 36356                           
 36357                           ; BSR set to: 0
 36358                           ;api.c: 189: outBuffer[11] = os.encoder2Count;
 36359  00EABC  EE20 F00B          	lfsr	2,11
 36360  00EAC0  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36361  00EAC2  26D9               	addwf	fsr2l,f,c
 36362  00EAC4  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36363  00EAC6  22DA               	addwfc	fsr2h,f,c
 36364  00EAC8  C178  FFDF         	movff	_os+5,indf2	;volatile
 36365                           
 36366                           ; BSR set to: 0
 36367                           ;api.c: 190: outBuffer[12] = os.button2;
 36368  00EACC  EE20 F00C          	lfsr	2,12
 36369  00EAD0  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36370  00EAD2  26D9               	addwf	fsr2l,f,c
 36371  00EAD4  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36372  00EAD6  22DA               	addwfc	fsr2h,f,c
 36373  00EAD8  C179  FFDF         	movff	_os+6,indf2	;volatile
 36374                           
 36375                           ; BSR set to: 0
 36376                           ;api.c: 191: memcpy(&outBuffer[13], &os.current_position_in_steps, 4);
 36377  00EADC  0E0D               	movlw	13
 36378  00EADE  256B               	addwf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36379  00EAE0  6F60               	movwf	memcpy@d1& (0+255),b
 36380  00EAE2  0E00               	movlw	0
 36381  00EAE4  216C               	addwfc	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36382  00EAE6  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 36383  00EAE8  0E7A               	movlw	low (_os+7)
 36384  00EAEA  6F62               	movwf	memcpy@s1& (0+255),b
 36385  00EAEC  0E01               	movlw	high (_os+7)
 36386  00EAEE  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 36387  00EAF0  0E00               	movlw	0
 36388  00EAF2  6F65               	movwf	(memcpy@n+1)& (0+255),b
 36389  00EAF4  0E04               	movlw	4
 36390  00EAF6  6F64               	movwf	memcpy@n& (0+255),b
 36391  00EAF8  EC3C  F098         	call	_memcpy	;wreg free
 36392                           
 36393                           ;api.c: 196: memcpy(&outBuffer[17], &os.current_position_in_degrees, 4);
 36394  00EAFC  0E11               	movlw	17
 36395  00EAFE  0100               	movlb	0	; () banked
 36396  00EB00  256B               	addwf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36397  00EB02  6F60               	movwf	memcpy@d1& (0+255),b
 36398  00EB04  0E00               	movlw	0
 36399  00EB06  216C               	addwfc	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36400  00EB08  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 36401  00EB0A  0E7E               	movlw	low (_os+11)
 36402  00EB0C  6F62               	movwf	memcpy@s1& (0+255),b
 36403  00EB0E  0E01               	movlw	high (_os+11)
 36404  00EB10  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 36405  00EB12  0E00               	movlw	0
 36406  00EB14  6F65               	movwf	(memcpy@n+1)& (0+255),b
 36407  00EB16  0E04               	movlw	4
 36408  00EB18  6F64               	movwf	memcpy@n& (0+255),b
 36409  00EB1A  EC3C  F098         	call	_memcpy	;wreg free
 36410                           
 36411                           ;api.c: 201: outBuffer[21] = os.displayState;
 36412  00EB1E  0100               	movlb	0	; () banked
 36413  00EB20  EE20 F015          	lfsr	2,21
 36414  00EB24  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36415  00EB26  26D9               	addwf	fsr2l,f,c
 36416  00EB28  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36417  00EB2A  22DA               	addwfc	fsr2h,f,c
 36418  00EB2C  C180  FFDF         	movff	_os+13,indf2	;volatile
 36419                           
 36420                           ; BSR set to: 0
 36421                           ;api.c: 202: outBuffer[22] = os.beep_count;
 36422  00EB30  EE20 F016          	lfsr	2,22
 36423  00EB34  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36424  00EB36  26D9               	addwf	fsr2l,f,c
 36425  00EB38  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36426  00EB3A  22DA               	addwfc	fsr2h,f,c
 36427  00EB3C  C199  FFDF         	movff	_os+38,indf2	;volatile
 36428                           
 36429                           ; BSR set to: 0
 36430                           ;api.c: 203: outBuffer[23] = ((unsigned char)((os.temperature[TEMPERATURE_SOURCE_INTERNA
      +                          L])&0xFF));
 36431  00EB40  EE20 F017          	lfsr	2,23
 36432  00EB44  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36433  00EB46  26D9               	addwf	fsr2l,f,c
 36434  00EB48  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36435  00EB4A  22DA               	addwfc	fsr2h,f,c
 36436  00EB4C  C19A  FFDF         	movff	_os+39,indf2	;volatile
 36437                           
 36438                           ; BSR set to: 0
 36439                           ;api.c: 204: outBuffer[24] = ((unsigned char)(((os.temperature[TEMPERATURE_SOURCE_INTERN
      +                          AL])>>8)&0xFF));
 36440  00EB50  EE20 F018          	lfsr	2,24
 36441  00EB54  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36442  00EB56  26D9               	addwf	fsr2l,f,c
 36443  00EB58  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36444  00EB5A  22DA               	addwfc	fsr2h,f,c
 36445  00EB5C  0101               	movlb	1	; () banked
 36446  00EB5E  519B               	movf	(_os+40)& (0+255),w,b	;volatile
 36447  00EB60  6EDF               	movwf	indf2,c
 36448                           
 36449                           ; BSR set to: 1
 36450                           ;api.c: 205: outBuffer[25] = ((unsigned char)((os.temperature[TEMPERATURE_SOURCE_EXTERNA
      +                          L])&0xFF));
 36451  00EB62  0100               	movlb	0	; () banked
 36452  00EB64  EE20 F019          	lfsr	2,25
 36453  00EB68  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36454  00EB6A  26D9               	addwf	fsr2l,f,c
 36455  00EB6C  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36456  00EB6E  22DA               	addwfc	fsr2h,f,c
 36457  00EB70  C19C  FFDF         	movff	_os+41,indf2	;volatile
 36458                           
 36459                           ; BSR set to: 0
 36460                           ;api.c: 206: outBuffer[26] = ((unsigned char)(((os.temperature[TEMPERATURE_SOURCE_EXTERN
      +                          AL])>>8)&0xFF));
 36461  00EB74  EE20 F01A          	lfsr	2,26
 36462  00EB78  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36463  00EB7A  26D9               	addwf	fsr2l,f,c
 36464  00EB7C  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36465  00EB7E  22DA               	addwfc	fsr2h,f,c
 36466  00EB80  0101               	movlb	1	; () banked
 36467  00EB82  519D               	movf	(_os+42)& (0+255),w,b	;volatile
 36468  00EB84  6EDF               	movwf	indf2,c
 36469                           
 36470                           ; BSR set to: 1
 36471                           ;api.c: 207: outBuffer[27] = os.fan_on;
 36472  00EB86  0100               	movlb	0	; () banked
 36473  00EB88  EE20 F01B          	lfsr	2,27
 36474  00EB8C  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36475  00EB8E  26D9               	addwf	fsr2l,f,c
 36476  00EB90  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36477  00EB92  22DA               	addwfc	fsr2h,f,c
 36478  00EB94  C1A1  FFDF         	movff	_os+46,indf2	;volatile
 36479                           
 36480                           ; BSR set to: 0
 36481                           ;api.c: 208: outBuffer[28] = os.brake_on;
 36482  00EB98  EE20 F01C          	lfsr	2,28
 36483  00EB9C  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36484  00EB9E  26D9               	addwf	fsr2l,f,c
 36485  00EBA0  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36486  00EBA2  22DA               	addwfc	fsr2h,f,c
 36487  00EBA4  C1A2  FFDF         	movff	_os+47,indf2	;volatile
 36488                           
 36489                           ; BSR set to: 0
 36490                           ;api.c: 209: outBuffer[29] = os.busy;
 36491  00EBA8  EE20 F01D          	lfsr	2,29
 36492  00EBAC  516B               	movf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36493  00EBAE  26D9               	addwf	fsr2l,f,c
 36494  00EBB0  516C               	movf	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36495  00EBB2  22DA               	addwfc	fsr2h,f,c
 36496  00EBB4  C181  FFDF         	movff	_os+14,indf2	;volatile
 36497                           
 36498                           ; BSR set to: 0
 36499                           ;api.c: 223: memcpy(&outBuffer[42], &config, 22);
 36500  00EBB8  0E2A               	movlw	42
 36501  00EBBA  256B               	addwf	__fill_buffer_get_status@outBuffer& (0+255),w,b
 36502  00EBBC  6F60               	movwf	memcpy@d1& (0+255),b
 36503  00EBBE  0E00               	movlw	0
 36504  00EBC0  216C               	addwfc	(__fill_buffer_get_status@outBuffer+1)& (0+255),w,b
 36505  00EBC2  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 36506  00EBC4  0EA3               	movlw	low _config
 36507  00EBC6  6F62               	movwf	memcpy@s1& (0+255),b
 36508  00EBC8  0E01               	movlw	high _config
 36509  00EBCA  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 36510  00EBCC  0E00               	movlw	0
 36511  00EBCE  6F65               	movwf	(memcpy@n+1)& (0+255),b
 36512  00EBD0  0E16               	movlw	22
 36513  00EBD2  6F64               	movwf	memcpy@n& (0+255),b
 36514  00EBD4  EC3C  F098         	call	_memcpy	;wreg free
 36515  00EBD8  0012               	return		;funcret
 36516  00EBDA                     __end_of__fill_buffer_get_status:
 36517                           	opt stack 0
 36518                           tosu	equ	0xFFF
 36519                           tosh	equ	0xFFE
 36520                           tosl	equ	0xFFD
 36521                           pclath	equ	0xFFA
 36522                           tblptru	equ	0xFF8
 36523                           tblptrh	equ	0xFF7
 36524                           tblptrl	equ	0xFF6
 36525                           tablat	equ	0xFF5
 36526                           prodh	equ	0xFF4
 36527                           prodl	equ	0xFF3
 36528                           intcon	equ	0xFF2
 36529                           postinc0	equ	0xFEE
 36530                           wreg	equ	0xFE8
 36531                           indf1	equ	0xFE7
 36532                           postinc1	equ	0xFE6
 36533                           postdec1	equ	0xFE5
 36534                           plusw1	equ	0xFE3
 36535                           fsr1h	equ	0xFE2
 36536                           fsr1l	equ	0xFE1
 36537                           indf2	equ	0xFDF
 36538                           postinc2	equ	0xFDE
 36539                           postdec2	equ	0xFDD
 36540                           plusw2	equ	0xFDB
 36541                           fsr2h	equ	0xFDA
 36542                           fsr2l	equ	0xFD9
 36543                           status	equ	0xFD8
 36544                           
 36545 ;; *************** function _memcpy *****************
 36546 ;; Defined at:
 36547 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memcpy.c"
 36548 ;; Parameters:    Size  Location     Type
 36549 ;;  d1              2    0[BANK0 ] PTR void 
 36550 ;;		 -> fat_create_file@root_entry(32), _flash_set_page_size@command(4), display_content(80), ToSendDataBuffer(64), 
 36551 ;;		 -> msd_buffer(512), SetupPkt(8), 
 36552 ;;  s1              2    2[BANK0 ] PTR const void 
 36553 ;;		 -> configFile_extention(3), configFile_name(8), flash_command_pagesize_528(4), flash_command_pagesize_512(4), 
 36554 ;;		 -> STR_6(6), STR_5(9), STR_4(7), STR_3(9), 
 36555 ;;		 -> dc_manual(80), dc_zero(80), STR_2(7), STR_1(9), 
 36556 ;;		 -> dc_arc2(80), dc_arc1(80), dc_divide2(80), dc_divide1(80), 
 36557 ;;		 -> dc_setup2(80), dc_setup1(80), dc_main(80), ReceivedDataBuffer(64), 
 36558 ;;		 -> os.current_position_in_degrees(2), config(22), os.current_position_in_steps(4), os(48), 
 36559 ;;		 -> inq_resp(36), RAM(3759), 
 36560 ;;  n               2    4[BANK0 ] unsigned int 
 36561 ;; Auto vars:     Size  Location     Type
 36562 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 36563 ;;		 -> configFile_extention(3), configFile_name(8), flash_command_pagesize_528(4), flash_command_pagesize_512(4), 
 36564 ;;		 -> STR_6(6), STR_5(9), STR_4(7), STR_3(9), 
 36565 ;;		 -> dc_manual(80), dc_zero(80), STR_2(7), STR_1(9), 
 36566 ;;		 -> dc_arc2(80), dc_arc1(80), dc_divide2(80), dc_divide1(80), 
 36567 ;;		 -> dc_setup2(80), dc_setup1(80), dc_main(80), ReceivedDataBuffer(64), 
 36568 ;;		 -> os.current_position_in_degrees(2), config(22), os.current_position_in_steps(4), os(48), 
 36569 ;;		 -> inq_resp(36), RAM(3759), 
 36570 ;;  d               2    7[BANK0 ] PTR unsigned char 
 36571 ;;		 -> fat_create_file@root_entry(32), _flash_set_page_size@command(4), display_content(80), ToSendDataBuffer(64), 
 36572 ;;		 -> msd_buffer(512), SetupPkt(8), 
 36573 ;;  tmp             1    6[BANK0 ] unsigned char 
 36574 ;; Return value:  Size  Location     Type
 36575 ;;                  2    0[BANK0 ] PTR void 
 36576 ;; Registers used:
 36577 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 36578 ;; Tracked objects:
 36579 ;;		On entry : 0/0
 36580 ;;		On exit  : 0/0
 36581 ;;		Unchanged: 0/0
 36582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 36583 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36584 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36586 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36587 ;;Total ram usage:       11 bytes
 36588 ;; Hardware stack levels used:    1
 36589 ;; Hardware stack levels required when called:   10
 36590 ;; This function calls:
 36591 ;;		Nothing
 36592 ;; This function is called by:
 36593 ;;		_MSDProcessCommandMediaPresent
 36594 ;;		_display_prepare
 36595 ;;		__flash_set_page_size
 36596 ;;		_fat_create_file
 36597 ;;		_api_prepare
 36598 ;;		__fill_buffer_get_status
 36599 ;; This function uses a non-reentrant model
 36600 ;;
 36601                           
 36602                           	psect	text143
 36603  013078                     __ptext143:
 36604                           	opt stack 0
 36605  013078                     _memcpy:
 36606                           	opt stack 17
 36607                           
 36608                           ;incstack = 0
 36609  013078  C062  F069         	movff	memcpy@s1,memcpy@s
 36610  01307C  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 36611  013080  C060  F067         	movff	memcpy@d1,memcpy@d
 36612  013084  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 36613  013088  D01D               	goto	l3478
 36614  01308A                     l18514:
 36615  01308A  C069  FFF6         	movff	memcpy@s,tblptrl
 36616  01308E  C06A  FFF7         	movff	memcpy@s+1,tblptrh
 36617  013092  0E00               	movlw	low (__mediumconst shr (0+16))
 36618  013094  6EF8               	movwf	tblptru,c
 36619  013096  0E0E               	movlw	(high __ramtop+-1)
 36620  013098  64F7               	cpfsgt	tblptrh,c
 36621  01309A  D003               	bra	u17987
 36622  01309C  0008               	tblrd		*
 36623  01309E  50F5               	movf	tablat,w,c
 36624  0130A0  D005               	bra	u17980
 36625  0130A2                     u17987:
 36626  0130A2  CFF6 FFE9          	movff	tblptrl,fsr0l
 36627  0130A6  CFF7 FFEA          	movff	tblptrh,fsr0h
 36628  0130AA  50EF               	movf	indf0,w,c
 36629  0130AC                     u17980:
 36630  0130AC  0100               	movlb	0	; () banked
 36631  0130AE  6F66               	movwf	memcpy@tmp& (0+255),b
 36632                           
 36633                           ; BSR set to: 0
 36634  0130B0  4B69               	infsnz	memcpy@s& (0+255),f,b
 36635  0130B2  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 36636                           
 36637                           ; BSR set to: 0
 36638  0130B4  C067  FFD9         	movff	memcpy@d,fsr2l
 36639  0130B8  C068  FFDA         	movff	memcpy@d+1,fsr2h
 36640  0130BC  C066  FFDF         	movff	memcpy@tmp,indf2
 36641                           
 36642                           ; BSR set to: 0
 36643  0130C0  4B67               	infsnz	memcpy@d& (0+255),f,b
 36644  0130C2  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 36645  0130C4                     l3478:
 36646                           
 36647                           ; BSR set to: 0
 36648  0130C4  0100               	movlb	0	; () banked
 36649  0130C6  0764               	decf	memcpy@n& (0+255),f,b
 36650  0130C8  A0D8               	btfss	status,0,c
 36651  0130CA  0765               	decf	(memcpy@n+1)& (0+255),f,b
 36652  0130CC  2964               	incf	memcpy@n& (0+255),w,b
 36653  0130CE  E1DD               	bnz	l18514
 36654  0130D0  2965               	incf	(memcpy@n+1)& (0+255),w,b
 36655  0130D2  B4D8               	btfsc	status,2,c
 36656  0130D4  0012               	return	
 36657  0130D6  D7D9               	goto	l3479
 36658  0130D8                     __end_of_memcpy:
 36659                           	opt stack 0
 36660                           tosu	equ	0xFFF
 36661                           tosh	equ	0xFFE
 36662                           tosl	equ	0xFFD
 36663                           pclath	equ	0xFFA
 36664                           tblptru	equ	0xFF8
 36665                           tblptrh	equ	0xFF7
 36666                           tblptrl	equ	0xFF6
 36667                           tablat	equ	0xFF5
 36668                           prodh	equ	0xFF4
 36669                           prodl	equ	0xFF3
 36670                           intcon	equ	0xFF2
 36671                           indf0	equ	0xFEF
 36672                           postinc0	equ	0xFEE
 36673                           fsr0h	equ	0xFEA
 36674                           fsr0l	equ	0xFE9
 36675                           wreg	equ	0xFE8
 36676                           indf1	equ	0xFE7
 36677                           postinc1	equ	0xFE6
 36678                           postdec1	equ	0xFE5
 36679                           plusw1	equ	0xFE3
 36680                           fsr1h	equ	0xFE2
 36681                           fsr1l	equ	0xFE1
 36682                           indf2	equ	0xFDF
 36683                           postinc2	equ	0xFDE
 36684                           postdec2	equ	0xFDD
 36685                           plusw2	equ	0xFDB
 36686                           fsr2h	equ	0xFDA
 36687                           fsr2l	equ	0xFD9
 36688                           status	equ	0xFD8
 36689                           
 36690 ;; *************** function __fill_buffer_get_mode_details *****************
 36691 ;; Defined at:
 36692 ;;		line 268 in file "api.c"
 36693 ;; Parameters:    Size  Location     Type
 36694 ;;  outBuffer       2    0[BANK0 ] PTR unsigned char 
 36695 ;;		 -> ToSendDataBuffer(64), 
 36696 ;; Auto vars:     Size  Location     Type
 36697 ;;		None
 36698 ;; Return value:  Size  Location     Type
 36699 ;;                  1    wreg      void 
 36700 ;; Registers used:
 36701 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 36702 ;; Tracked objects:
 36703 ;;		On entry : 0/0
 36704 ;;		On exit  : 0/0
 36705 ;;		Unchanged: 0/0
 36706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 36707 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36709 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36710 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 36711 ;;Total ram usage:        4 bytes
 36712 ;; Hardware stack levels used:    1
 36713 ;; Hardware stack levels required when called:   10
 36714 ;; This function calls:
 36715 ;;		Nothing
 36716 ;; This function is called by:
 36717 ;;		_api_prepare
 36718 ;; This function uses a non-reentrant model
 36719 ;;
 36720                           
 36721                           	psect	text144
 36722  00EBDA                     __ptext144:
 36723                           	opt stack 0
 36724  00EBDA                     __fill_buffer_get_mode_details:
 36725                           	opt stack 18
 36726                           
 36727                           ;api.c: 271: outBuffer[0] = DATAREQUEST_GET_MODE_DETAILS;
 36728                           
 36729                           ; BSR set to: 0
 36730                           ;incstack = 0
 36731  00EBDA  C060  FFD9         	movff	__fill_buffer_get_mode_details@outBuffer,fsr2l
 36732  00EBDE  C061  FFDA         	movff	__fill_buffer_get_mode_details@outBuffer+1,fsr2h
 36733  00EBE2  0E13               	movlw	19
 36734  00EBE4  6EDF               	movwf	indf2,c
 36735                           
 36736                           ;api.c: 274: outBuffer[1] = ((unsigned char)((0x62A1)&0xFF));
 36737  00EBE6  0100               	movlb	0	; () banked
 36738  00EBE8  EE20 F001          	lfsr	2,1
 36739  00EBEC  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36740  00EBEE  26D9               	addwf	fsr2l,f,c
 36741  00EBF0  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36742  00EBF2  22DA               	addwfc	fsr2h,f,c
 36743  00EBF4  0EA1               	movlw	161
 36744  00EBF6  6EDF               	movwf	indf2,c
 36745                           
 36746                           ; BSR set to: 0
 36747                           ;api.c: 275: outBuffer[2] = ((unsigned char)(((0x62A1)>>8)&0xFF));
 36748  00EBF8  EE20 F002          	lfsr	2,2
 36749  00EBFC  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36750  00EBFE  26D9               	addwf	fsr2l,f,c
 36751  00EC00  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36752  00EC02  22DA               	addwfc	fsr2h,f,c
 36753  00EC04  0E62               	movlw	98
 36754  00EC06  6EDF               	movwf	indf2,c
 36755                           
 36756                           ; BSR set to: 0
 36757                           ;api.c: 278: outBuffer[3] = os.displayState;
 36758  00EC08  EE20 F003          	lfsr	2,3
 36759  00EC0C  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36760  00EC0E  26D9               	addwf	fsr2l,f,c
 36761  00EC10  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36762  00EC12  22DA               	addwfc	fsr2h,f,c
 36763  00EC14  C180  FFDF         	movff	_os+13,indf2	;volatile
 36764                           
 36765                           ;api.c: 280: switch(os.displayState & 0x0F)
 36766  00EC18  D090               	goto	l2219
 36767  00EC1A                     
 36768                           ; BSR set to: 0
 36769                           ;api.c: 286: case DISPLAY_STATE_SETUP2:;api.c: 287: outBuffer[4] = os.setup_step_size;
 36770                           
 36771                           ; BSR set to: 0
 36772                           
 36773                           ; BSR set to: 0
 36774  00EC1A  EE20 F004          	lfsr	2,4
 36775  00EC1E  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36776  00EC20  26D9               	addwf	fsr2l,f,c
 36777  00EC22  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36778  00EC24  22DA               	addwfc	fsr2h,f,c
 36779  00EC26  C183  FFDF         	movff	_os+16,indf2	;volatile
 36780                           
 36781                           ;api.c: 288: break;
 36782  00EC2A  0012               	return	
 36783  00EC2C                     
 36784                           ; BSR set to: 0
 36785                           ;api.c: 291: case DISPLAY_STATE_DIVIDE2:;api.c: 293: outBuffer[4] = os.divide_step_size;
 36786                           
 36787                           ; BSR set to: 0
 36788                           
 36789                           ; BSR set to: 0
 36790  00EC2C  EE20 F004          	lfsr	2,4
 36791  00EC30  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36792  00EC32  26D9               	addwf	fsr2l,f,c
 36793  00EC34  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36794  00EC36  22DA               	addwfc	fsr2h,f,c
 36795  00EC38  C188  FFDF         	movff	_os+21,indf2	;volatile
 36796                           
 36797                           ;api.c: 294: outBuffer[5] = ((unsigned char)(((os.division)>>8)&0xFF));
 36798  00EC3C  EE20 F005          	lfsr	2,5
 36799  00EC40  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36800  00EC42  26D9               	addwf	fsr2l,f,c
 36801  00EC44  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36802  00EC46  22DA               	addwfc	fsr2h,f,c
 36803  00EC48  0101               	movlb	1	; () banked
 36804  00EC4A  5187               	movf	(_os+20)& (0+255),w,b	;volatile
 36805  00EC4C  6EDF               	movwf	indf2,c
 36806                           
 36807                           ;api.c: 295: outBuffer[6] = ((unsigned char)((os.division)&0xFF));
 36808  00EC4E  0100               	movlb	0	; () banked
 36809  00EC50  EE20 F006          	lfsr	2,6
 36810  00EC54  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36811  00EC56  26D9               	addwf	fsr2l,f,c
 36812  00EC58  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36813  00EC5A  22DA               	addwfc	fsr2h,f,c
 36814  00EC5C  C186  FFDF         	movff	_os+19,indf2	;volatile
 36815                           
 36816                           ;api.c: 296: outBuffer[7] = ((unsigned char)(((os.divide_jump_size)>>8)&0xFF));
 36817  00EC60  EE20 F007          	lfsr	2,7
 36818  00EC64  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36819  00EC66  26D9               	addwf	fsr2l,f,c
 36820  00EC68  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36821  00EC6A  22DA               	addwfc	fsr2h,f,c
 36822  00EC6C  0101               	movlb	1	; () banked
 36823  00EC6E  518C               	movf	(_os+25)& (0+255),w,b	;volatile
 36824  00EC70  6EDF               	movwf	indf2,c
 36825                           
 36826                           ;api.c: 297: outBuffer[8] = ((unsigned char)((os.divide_jump_size)&0xFF));
 36827  00EC72  0100               	movlb	0	; () banked
 36828  00EC74  EE20 F008          	lfsr	2,8
 36829  00EC78  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36830  00EC7A  26D9               	addwf	fsr2l,f,c
 36831  00EC7C  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36832  00EC7E  22DA               	addwfc	fsr2h,f,c
 36833  00EC80  C18B  FFDF         	movff	_os+24,indf2	;volatile
 36834                           
 36835                           ;api.c: 298: outBuffer[9] = ((unsigned char)(((os.divide_position)>>8)&0xFF));
 36836  00EC84  EE20 F009          	lfsr	2,9
 36837  00EC88  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36838  00EC8A  26D9               	addwf	fsr2l,f,c
 36839  00EC8C  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36840  00EC8E  22DA               	addwfc	fsr2h,f,c
 36841  00EC90  0101               	movlb	1	; () banked
 36842  00EC92  518A               	movf	(_os+23)& (0+255),w,b	;volatile
 36843  00EC94  6EDF               	movwf	indf2,c
 36844                           
 36845                           ;api.c: 299: outBuffer[10] = ((unsigned char)((os.divide_position)&0xFF));
 36846  00EC96  0100               	movlb	0	; () banked
 36847  00EC98  EE20 F00A          	lfsr	2,10
 36848  00EC9C  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36849  00EC9E  26D9               	addwf	fsr2l,f,c
 36850  00ECA0  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36851  00ECA2  22DA               	addwfc	fsr2h,f,c
 36852  00ECA4  C189  FFDF         	movff	_os+22,indf2	;volatile
 36853                           
 36854                           ;api.c: 300: break;
 36855  00ECA8  0012               	return	
 36856  00ECAA                     
 36857                           ; BSR set to: 0
 36858                           ;api.c: 303: case DISPLAY_STATE_ARC2:;api.c: 304: outBuffer[4] = ((unsigned char)(((os.a
      +                          rc_step_size)>>8)&0xFF));
 36859                           
 36860                           ; BSR set to: 0
 36861                           
 36862                           ; BSR set to: 0
 36863  00ECAA  EE20 F004          	lfsr	2,4
 36864  00ECAE  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36865  00ECB0  26D9               	addwf	fsr2l,f,c
 36866  00ECB2  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36867  00ECB4  22DA               	addwfc	fsr2h,f,c
 36868  00ECB6  0101               	movlb	1	; () banked
 36869  00ECB8  518E               	movf	(_os+27)& (0+255),w,b	;volatile
 36870  00ECBA  6EDF               	movwf	indf2,c
 36871                           
 36872                           ;api.c: 305: outBuffer[5] = ((unsigned char)((os.arc_step_size)&0xFF));
 36873  00ECBC  0100               	movlb	0	; () banked
 36874  00ECBE  EE20 F005          	lfsr	2,5
 36875  00ECC2  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36876  00ECC4  26D9               	addwf	fsr2l,f,c
 36877  00ECC6  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36878  00ECC8  22DA               	addwfc	fsr2h,f,c
 36879  00ECCA  C18D  FFDF         	movff	_os+26,indf2	;volatile
 36880                           
 36881                           ;api.c: 306: outBuffer[6] = os.arc_direction;
 36882  00ECCE  EE20 F006          	lfsr	2,6
 36883  00ECD2  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36884  00ECD4  26D9               	addwf	fsr2l,f,c
 36885  00ECD6  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36886  00ECD8  22DA               	addwfc	fsr2h,f,c
 36887  00ECDA  C195  FFDF         	movff	_os+34,indf2	;volatile
 36888                           
 36889                           ;api.c: 307: outBuffer[7] = ((unsigned char)(((os.arc_speed)>>8)&0xFF));
 36890  00ECDE  EE20 F007          	lfsr	2,7
 36891  00ECE2  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36892  00ECE4  26D9               	addwf	fsr2l,f,c
 36893  00ECE6  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36894  00ECE8  22DA               	addwfc	fsr2h,f,c
 36895  00ECEA  0101               	movlb	1	; () banked
 36896  00ECEC  5194               	movf	(_os+33)& (0+255),w,b	;volatile
 36897  00ECEE  6EDF               	movwf	indf2,c
 36898                           
 36899                           ;api.c: 308: outBuffer[8] = ((unsigned char)((os.arc_speed)&0xFF));
 36900  00ECF0  0100               	movlb	0	; () banked
 36901  00ECF2  EE20 F008          	lfsr	2,8
 36902  00ECF6  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36903  00ECF8  26D9               	addwf	fsr2l,f,c
 36904  00ECFA  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36905  00ECFC  22DA               	addwfc	fsr2h,f,c
 36906  00ECFE  C193  FFDF         	movff	_os+32,indf2	;volatile
 36907                           
 36908                           ; BSR set to: 0
 36909                           ;api.c: 312: break;
 36910                           
 36911                           ;api.c: 311: case DISPLAY_STATE_ZERO:
 36912                           
 36913                           ;api.c: 309: break;
 36914  00ED02  0012               	return	
 36915  00ED04                     
 36916                           ; BSR set to: 0
 36917                           ;api.c: 315: outBuffer[4] = os.manual_direction;
 36918                           
 36919                           ; BSR set to: 0
 36920  00ED04  EE20 F004          	lfsr	2,4
 36921  00ED08  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36922  00ED0A  26D9               	addwf	fsr2l,f,c
 36923  00ED0C  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36924  00ED0E  22DA               	addwfc	fsr2h,f,c
 36925  00ED10  C198  FFDF         	movff	_os+37,indf2	;volatile
 36926                           
 36927                           ;api.c: 316: outBuffer[5] = ((unsigned char)(((os.manual_speed)>>8)&0xFF));
 36928  00ED14  EE20 F005          	lfsr	2,5
 36929  00ED18  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36930  00ED1A  26D9               	addwf	fsr2l,f,c
 36931  00ED1C  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36932  00ED1E  22DA               	addwfc	fsr2h,f,c
 36933  00ED20  0101               	movlb	1	; () banked
 36934  00ED22  5197               	movf	(_os+36)& (0+255),w,b	;volatile
 36935  00ED24  6EDF               	movwf	indf2,c
 36936                           
 36937                           ;api.c: 317: outBuffer[6] = ((unsigned char)((os.manual_speed)&0xFF));
 36938  00ED26  0100               	movlb	0	; () banked
 36939  00ED28  EE20 F006          	lfsr	2,6
 36940  00ED2C  5160               	movf	__fill_buffer_get_mode_details@outBuffer& (0+255),w,b
 36941  00ED2E  26D9               	addwf	fsr2l,f,c
 36942  00ED30  5161               	movf	(__fill_buffer_get_mode_details@outBuffer+1)& (0+255),w,b
 36943  00ED32  22DA               	addwfc	fsr2h,f,c
 36944  00ED34  C196  FFDF         	movff	_os+35,indf2	;volatile
 36945                           
 36946                           ; BSR set to: 0
 36947                           ;api.c: 319: }
 36948                           
 36949                           ;api.c: 318: break;
 36950  00ED38  0012               	return	
 36951  00ED3A                     l2219:
 36952                           
 36953                           ; BSR set to: 0
 36954                           
 36955                           ; BSR set to: 0
 36956  00ED3A  0101               	movlb	1	; () banked
 36957  00ED3C  5180               	movf	(_os+13)& (0+255),w,b	;volatile
 36958  00ED3E  0B0F               	andlw	15
 36959  00ED40  0100               	movlb	0	; () banked
 36960  00ED42  6F62               	movwf	??__fill_buffer_get_mode_details& (0+255),b
 36961  00ED44  6B63               	clrf	(??__fill_buffer_get_mode_details+1)& (0+255),b
 36962                           
 36963                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 36964                           ; Switch size 1, requested type "space"
 36965                           ; Number of cases is 1, Range of values is 0 to 0
 36966                           ; switch strategies available:
 36967                           ; Name         Instructions Cycles
 36968                           ; simple_byte            4     3 (average)
 36969                           ;	Chosen strategy is simple_byte
 36970  00ED46  5163               	movf	(??__fill_buffer_get_mode_details+1)& (0+255),w,b
 36971  00ED48  0A00               	xorlw	0	; case 0
 36972  00ED4A  A4D8               	btfss	status,2,c
 36973  00ED4C  0012               	return	
 36974                           
 36975                           ; BSR set to: 0
 36976                           ; Switch size 1, requested type "space"
 36977                           ; Number of cases is 9, Range of values is 0 to 128
 36978                           ; switch strategies available:
 36979                           ; Name         Instructions Cycles
 36980                           ; simple_byte           28    15 (average)
 36981                           ;	Chosen strategy is simple_byte
 36982  00ED4E  5162               	movf	??__fill_buffer_get_mode_details& (0+255),w,b
 36983  00ED50  0A00               	xorlw	0	; case 0
 36984  00ED52  B4D8               	btfsc	status,2,c
 36985  00ED54  0012               	return	
 36986  00ED56  0A10               	xorlw	16	; case 16
 36987  00ED58  B4D8               	btfsc	status,2,c
 36988  00ED5A  D75F               	goto	l2222
 36989  00ED5C  0A30               	xorlw	48	; case 32
 36990  00ED5E  B4D8               	btfsc	status,2,c
 36991  00ED60  D75C               	goto	l2222
 36992  00ED62  0A10               	xorlw	16	; case 48
 36993  00ED64  B4D8               	btfsc	status,2,c
 36994  00ED66  D762               	goto	l2224
 36995  00ED68  0A70               	xorlw	112	; case 64
 36996  00ED6A  B4D8               	btfsc	status,2,c
 36997  00ED6C  D75F               	goto	l2224
 36998  00ED6E  0A10               	xorlw	16	; case 80
 36999  00ED70  B4D8               	btfsc	status,2,c
 37000  00ED72  D79B               	goto	l2226
 37001  00ED74  0A30               	xorlw	48	; case 96
 37002  00ED76  B4D8               	btfsc	status,2,c
 37003  00ED78  D798               	goto	l2226
 37004  00ED7A  0A10               	xorlw	16	; case 112
 37005  00ED7C  B4D8               	btfsc	status,2,c
 37006  00ED7E  0012               	return	
 37007  00ED80  0AF0               	xorlw	240	; case 128
 37008  00ED82  A4D8               	btfss	status,2,c
 37009  00ED84  0012               	return	
 37010  00ED86  D7BE               	goto	l2229
 37011  00ED88                     __end_of__fill_buffer_get_mode_details:
 37012                           	opt stack 0
 37013                           tosu	equ	0xFFF
 37014                           tosh	equ	0xFFE
 37015                           tosl	equ	0xFFD
 37016                           pclath	equ	0xFFA
 37017                           tblptru	equ	0xFF8
 37018                           tblptrh	equ	0xFF7
 37019                           tblptrl	equ	0xFF6
 37020                           tablat	equ	0xFF5
 37021                           prodh	equ	0xFF4
 37022                           prodl	equ	0xFF3
 37023                           intcon	equ	0xFF2
 37024                           indf0	equ	0xFEF
 37025                           postinc0	equ	0xFEE
 37026                           fsr0h	equ	0xFEA
 37027                           fsr0l	equ	0xFE9
 37028                           wreg	equ	0xFE8
 37029                           indf1	equ	0xFE7
 37030                           postinc1	equ	0xFE6
 37031                           postdec1	equ	0xFE5
 37032                           plusw1	equ	0xFE3
 37033                           fsr1h	equ	0xFE2
 37034                           fsr1l	equ	0xFE1
 37035                           indf2	equ	0xFDF
 37036                           postinc2	equ	0xFDE
 37037                           postdec2	equ	0xFDD
 37038                           plusw2	equ	0xFDB
 37039                           fsr2h	equ	0xFDA
 37040                           fsr2l	equ	0xFD9
 37041                           status	equ	0xFD8
 37042                           
 37043 ;; *************** function __fill_buffer_get_display *****************
 37044 ;; Defined at:
 37045 ;;		line 227 in file "api.c"
 37046 ;; Parameters:    Size  Location     Type
 37047 ;;  outBuffer       2    4[BANK0 ] PTR unsigned char 
 37048 ;;		 -> ToSendDataBuffer(64), 
 37049 ;;  secondHalf      1    6[BANK0 ] unsigned char 
 37050 ;; Auto vars:     Size  Location     Type
 37051 ;;  position        1   15[BANK0 ] unsigned char 
 37052 ;;  start_line      1   14[BANK0 ] unsigned char 
 37053 ;;  line            1   13[BANK0 ] unsigned char 
 37054 ;;  cntr            1   12[BANK0 ] unsigned char 
 37055 ;; Return value:  Size  Location     Type
 37056 ;;                  1    wreg      void 
 37057 ;; Registers used:
 37058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37059 ;; Tracked objects:
 37060 ;;		On entry : 0/0
 37061 ;;		On exit  : 0/0
 37062 ;;		Unchanged: 0/0
 37063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 37064 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37065 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37066 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37067 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37068 ;;Total ram usage:       12 bytes
 37069 ;; Hardware stack levels used:    1
 37070 ;; Hardware stack levels required when called:   11
 37071 ;; This function calls:
 37072 ;;		_display_get_character
 37073 ;; This function is called by:
 37074 ;;		_api_prepare
 37075 ;; This function uses a non-reentrant model
 37076 ;;
 37077                           
 37078                           	psect	text145
 37079  011CD6                     __ptext145:
 37080                           	opt stack 0
 37081  011CD6                     __fill_buffer_get_display:
 37082                           	opt stack 17
 37083                           
 37084                           ;api.c: 229: uint8_t cntr;;api.c: 230: uint8_t line;;api.c: 231: uint8_t start_line;;api
      +                          .c: 232: uint8_t position;;api.c: 235: if(secondHalf)
 37085                           
 37086                           ; BSR set to: 0
 37087                           ;incstack = 0
 37088  011CD6  0100               	movlb	0	; () banked
 37089  011CD8  5166               	movf	__fill_buffer_get_display@secondHalf& (0+255),w,b
 37090  011CDA  B4D8               	btfsc	status,2,c
 37091  011CDC  D006               	goto	l2207
 37092                           
 37093                           ; BSR set to: 0
 37094                           ;api.c: 236: {;api.c: 237: outBuffer[0] = DATAREQUEST_GET_DISPLAY_2;
 37095  011CDE  C064  FFD9         	movff	__fill_buffer_get_display@outBuffer,fsr2l
 37096  011CE2  C065  FFDA         	movff	__fill_buffer_get_display@outBuffer+1,fsr2h
 37097  011CE6  0E12               	movlw	18
 37098  011CE8  D005               	goto	L62
 37099  011CEA                     l2207:
 37100                           
 37101                           ; BSR set to: 0
 37102                           ;api.c: 239: else;api.c: 240: {;api.c: 241: outBuffer[0] = DATAREQUEST_GET_DISPLAY_1;
 37103                           
 37104                           ; BSR set to: 0
 37105  011CEA  C064  FFD9         	movff	__fill_buffer_get_display@outBuffer,fsr2l
 37106  011CEE  C065  FFDA         	movff	__fill_buffer_get_display@outBuffer+1,fsr2h
 37107  011CF2  0E11               	movlw	17
 37108  011CF4                     L62:
 37109  011CF4  6EDF               	movwf	indf2,c
 37110                           
 37111                           ; BSR set to: 0
 37112                           ;api.c: 242: };api.c: 245: outBuffer[1] = ((unsigned char)((0x62A1)&0xFF));
 37113                           
 37114                           ; BSR set to: 0
 37115  011CF6  EE20 F001          	lfsr	2,1
 37116  011CFA  5164               	movf	__fill_buffer_get_display@outBuffer& (0+255),w,b
 37117  011CFC  26D9               	addwf	fsr2l,f,c
 37118  011CFE  5165               	movf	(__fill_buffer_get_display@outBuffer+1)& (0+255),w,b
 37119  011D00  22DA               	addwfc	fsr2h,f,c
 37120  011D02  0EA1               	movlw	161
 37121  011D04  6EDF               	movwf	indf2,c
 37122                           
 37123                           ; BSR set to: 0
 37124                           ;api.c: 246: outBuffer[2] = ((unsigned char)(((0x62A1)>>8)&0xFF));
 37125  011D06  EE20 F002          	lfsr	2,2
 37126  011D0A  5164               	movf	__fill_buffer_get_display@outBuffer& (0+255),w,b
 37127  011D0C  26D9               	addwf	fsr2l,f,c
 37128  011D0E  5165               	movf	(__fill_buffer_get_display@outBuffer+1)& (0+255),w,b
 37129  011D10  22DA               	addwfc	fsr2h,f,c
 37130  011D12  0E62               	movlw	98
 37131  011D14  6EDF               	movwf	indf2,c
 37132                           
 37133                           ; BSR set to: 0
 37134                           ;api.c: 249: cntr = 3;
 37135  011D16  0E03               	movlw	3
 37136  011D18  6F6C               	movwf	__fill_buffer_get_display@cntr& (0+255),b
 37137                           
 37138                           ; BSR set to: 0
 37139                           ;api.c: 250: if(secondHalf)
 37140  011D1A  5166               	movf	__fill_buffer_get_display@secondHalf& (0+255),w,b
 37141  011D1C  B4D8               	btfsc	status,2,c
 37142  011D1E  D002               	goto	l2209
 37143                           
 37144                           ; BSR set to: 0
 37145                           ;api.c: 251: {;api.c: 252: start_line = 2;
 37146  011D20  0E02               	movlw	2
 37147  011D22  D001               	goto	L63
 37148  011D24                     l2209:
 37149                           
 37150                           ; BSR set to: 0
 37151                           ;api.c: 254: else;api.c: 255: {;api.c: 256: start_line = 0;
 37152                           
 37153                           ; BSR set to: 0
 37154  011D24  0E00               	movlw	0
 37155  011D26                     L63:
 37156  011D26  6F6E               	movwf	__fill_buffer_get_display@start_line& (0+255),b
 37157                           
 37158                           ; BSR set to: 0
 37159                           ;api.c: 257: };api.c: 258: for(line=start_line; line<start_line+2; ++line)
 37160                           
 37161                           ; BSR set to: 0
 37162  011D28  C06E  F06D         	movff	__fill_buffer_get_display@start_line,__fill_buffer_get_display@line
 37163  011D2C  D01B               	goto	l2211
 37164  011D2E                     
 37165                           ; BSR set to: 0
 37166                           ;api.c: 259: {;api.c: 260: for(position=0; position<20; ++position)
 37167                           
 37168                           ; BSR set to: 0
 37169  011D2E  0E00               	movlw	0
 37170  011D30  6F6F               	movwf	__fill_buffer_get_display@position& (0+255),b
 37171  011D32                     l21298:
 37172                           
 37173                           ; BSR set to: 0
 37174  011D32  0E13               	movlw	19
 37175  011D34  656F               	cpfsgt	__fill_buffer_get_display@position& (0+255),b
 37176  011D36  D001               	goto	l2213
 37177  011D38  D014               	goto	u21260
 37178  011D3A                     l2213:
 37179                           
 37180                           ; BSR set to: 0
 37181                           ;api.c: 261: {;api.c: 262: outBuffer[cntr] = (uint8_t) display_get_character(line, posit
      +                          ion);
 37182                           
 37183                           ; BSR set to: 0
 37184  011D3A  C06F  F060         	movff	__fill_buffer_get_display@position,display_get_character@position
 37185  011D3E  516D               	movf	__fill_buffer_get_display@line& (0+255),w,b
 37186  011D40  ECBD  F09F         	call	_display_get_character
 37187  011D44  0100               	movlb	0	; () banked
 37188  011D46  6F67               	movwf	??__fill_buffer_get_display& (0+255),b
 37189  011D48  516C               	movf	__fill_buffer_get_display@cntr& (0+255),w,b
 37190  011D4A  0D01               	mullw	1
 37191  011D4C  50F3               	movf	prodl,w,c
 37192  011D4E  2564               	addwf	__fill_buffer_get_display@outBuffer& (0+255),w,b
 37193  011D50  6ED9               	movwf	fsr2l,c
 37194  011D52  50F4               	movf	prodh,w,c
 37195  011D54  2165               	addwfc	(__fill_buffer_get_display@outBuffer+1)& (0+255),w,b
 37196  011D56  6EDA               	movwf	fsr2h,c
 37197  011D58  C067  FFDF         	movff	??__fill_buffer_get_display,indf2
 37198                           
 37199                           ; BSR set to: 0
 37200                           ;api.c: 263: ++cntr;
 37201  011D5C  2B6C               	incf	__fill_buffer_get_display@cntr& (0+255),f,b
 37202                           
 37203                           ; BSR set to: 0
 37204  011D5E  2B6F               	incf	__fill_buffer_get_display@position& (0+255),f,b
 37205  011D60  D7E8               	goto	l21298
 37206  011D62                     u21260:
 37207                           
 37208                           ; BSR set to: 0
 37209                           
 37210                           ; BSR set to: 0
 37211  011D62  2B6D               	incf	__fill_buffer_get_display@line& (0+255),f,b
 37212  011D64                     l2211:
 37213                           
 37214                           ; BSR set to: 0
 37215                           
 37216                           ; BSR set to: 0
 37217  011D64  516E               	movf	__fill_buffer_get_display@start_line& (0+255),w,b
 37218  011D66  6F67               	movwf	??__fill_buffer_get_display& (0+255),b
 37219  011D68  6B68               	clrf	(??__fill_buffer_get_display+1)& (0+255),b
 37220  011D6A  0E02               	movlw	2
 37221  011D6C  2767               	addwf	??__fill_buffer_get_display& (0+255),f,b
 37222  011D6E  0E00               	movlw	0
 37223  011D70  2368               	addwfc	(??__fill_buffer_get_display+1)& (0+255),f,b
 37224  011D72  516D               	movf	__fill_buffer_get_display@line& (0+255),w,b
 37225  011D74  6F69               	movwf	(??__fill_buffer_get_display+2)& (0+255),b
 37226  011D76  6B6A               	clrf	(??__fill_buffer_get_display+3)& (0+255),b
 37227  011D78  5167               	movf	??__fill_buffer_get_display& (0+255),w,b
 37228  011D7A  5D69               	subwf	(??__fill_buffer_get_display+2)& (0+255),w,b
 37229  011D7C  516A               	movf	(??__fill_buffer_get_display+3)& (0+255),w,b
 37230  011D7E  0A80               	xorlw	128
 37231  011D80  6F6B               	movwf	(??__fill_buffer_get_display+4)& (0+255),b
 37232  011D82  5168               	movf	(??__fill_buffer_get_display+1)& (0+255),w,b
 37233  011D84  0A80               	xorlw	128
 37234  011D86  596B               	subwfb	(??__fill_buffer_get_display+4)& (0+255),w,b
 37235  011D88  B0D8               	btfsc	status,0,c
 37236  011D8A  0012               	return	
 37237  011D8C  D7D0               	goto	l2212
 37238  011D8E                     __end_of__fill_buffer_get_display:
 37239                           	opt stack 0
 37240                           tosu	equ	0xFFF
 37241                           tosh	equ	0xFFE
 37242                           tosl	equ	0xFFD
 37243                           pclath	equ	0xFFA
 37244                           tblptru	equ	0xFF8
 37245                           tblptrh	equ	0xFF7
 37246                           tblptrl	equ	0xFF6
 37247                           tablat	equ	0xFF5
 37248                           prodh	equ	0xFF4
 37249                           prodl	equ	0xFF3
 37250                           intcon	equ	0xFF2
 37251                           indf0	equ	0xFEF
 37252                           postinc0	equ	0xFEE
 37253                           fsr0h	equ	0xFEA
 37254                           fsr0l	equ	0xFE9
 37255                           wreg	equ	0xFE8
 37256                           indf1	equ	0xFE7
 37257                           postinc1	equ	0xFE6
 37258                           postdec1	equ	0xFE5
 37259                           plusw1	equ	0xFE3
 37260                           fsr1h	equ	0xFE2
 37261                           fsr1l	equ	0xFE1
 37262                           indf2	equ	0xFDF
 37263                           postinc2	equ	0xFDE
 37264                           postdec2	equ	0xFDD
 37265                           plusw2	equ	0xFDB
 37266                           fsr2h	equ	0xFDA
 37267                           fsr2l	equ	0xFD9
 37268                           status	equ	0xFD8
 37269                           
 37270 ;; *************** function _display_get_character *****************
 37271 ;; Defined at:
 37272 ;;		line 580 in file "display.c"
 37273 ;; Parameters:    Size  Location     Type
 37274 ;;  line            1    wreg     unsigned char 
 37275 ;;  position        1    0[BANK0 ] unsigned char 
 37276 ;; Auto vars:     Size  Location     Type
 37277 ;;  line            1    3[BANK0 ] unsigned char 
 37278 ;; Return value:  Size  Location     Type
 37279 ;;                  1    wreg      unsigned char 
 37280 ;; Registers used:
 37281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 37282 ;; Tracked objects:
 37283 ;;		On entry : 0/0
 37284 ;;		On exit  : 0/0
 37285 ;;		Unchanged: 0/0
 37286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 37287 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37289 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37290 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37291 ;;Total ram usage:        4 bytes
 37292 ;; Hardware stack levels used:    1
 37293 ;; Hardware stack levels required when called:   10
 37294 ;; This function calls:
 37295 ;;		Nothing
 37296 ;; This function is called by:
 37297 ;;		__fill_buffer_get_display
 37298 ;; This function uses a non-reentrant model
 37299 ;;
 37300                           
 37301                           	psect	text146
 37302  013F7A                     __ptext146:
 37303                           	opt stack 0
 37304  013F7A                     _display_get_character:
 37305                           	opt stack 17
 37306                           
 37307                           ; BSR set to: 0
 37308                           ;incstack = 0
 37309                           ;display_get_character@line stored from wreg
 37310  013F7A  0100               	movlb	0	; () banked
 37311  013F7C  6F63               	movwf	display_get_character@line& (0+255),b
 37312                           
 37313                           ;display.c: 582: return display_content[line][position];
 37314  013F7E  0100               	movlb	0	; () banked
 37315  013F80  5163               	movf	display_get_character@line& (0+255),w,b
 37316  013F82  0D14               	mullw	20
 37317  013F84  0E80               	movlw	low _display_content
 37318  013F86  6F61               	movwf	??_display_get_character& (0+255),b
 37319  013F88  0E02               	movlw	high _display_content
 37320  013F8A  6F62               	movwf	(??_display_get_character+1)& (0+255),b
 37321  013F8C  50F3               	movf	prodl,w,c
 37322  013F8E  2761               	addwf	??_display_get_character& (0+255),f,b
 37323  013F90  50F4               	movf	prodh,w,c
 37324  013F92  2362               	addwfc	(??_display_get_character+1)& (0+255),f,b
 37325  013F94  5160               	movf	display_get_character@position& (0+255),w,b
 37326  013F96  0D01               	mullw	1
 37327  013F98  50F3               	movf	prodl,w,c
 37328  013F9A  2561               	addwf	??_display_get_character& (0+255),w,b
 37329  013F9C  6ED9               	movwf	fsr2l,c
 37330  013F9E  50F4               	movf	prodh,w,c
 37331  013FA0  2162               	addwfc	(??_display_get_character+1)& (0+255),w,b
 37332  013FA2  6EDA               	movwf	fsr2h,c
 37333  013FA4  50DF               	movf	indf2,w,c
 37334  013FA6  0012               	return	
 37335  013FA8                     __end_of_display_get_character:
 37336                           	opt stack 0
 37337                           tosu	equ	0xFFF
 37338                           tosh	equ	0xFFE
 37339                           tosl	equ	0xFFD
 37340                           pclath	equ	0xFFA
 37341                           tblptru	equ	0xFF8
 37342                           tblptrh	equ	0xFF7
 37343                           tblptrl	equ	0xFF6
 37344                           tablat	equ	0xFF5
 37345                           prodh	equ	0xFF4
 37346                           prodl	equ	0xFF3
 37347                           intcon	equ	0xFF2
 37348                           indf0	equ	0xFEF
 37349                           postinc0	equ	0xFEE
 37350                           fsr0h	equ	0xFEA
 37351                           fsr0l	equ	0xFE9
 37352                           wreg	equ	0xFE8
 37353                           indf1	equ	0xFE7
 37354                           postinc1	equ	0xFE6
 37355                           postdec1	equ	0xFE5
 37356                           plusw1	equ	0xFE3
 37357                           fsr1h	equ	0xFE2
 37358                           fsr1l	equ	0xFE1
 37359                           indf2	equ	0xFDF
 37360                           postinc2	equ	0xFDE
 37361                           postdec2	equ	0xFDD
 37362                           plusw2	equ	0xFDB
 37363                           fsr2h	equ	0xFDA
 37364                           fsr2l	equ	0xFD9
 37365                           status	equ	0xFD8
 37366                           
 37367 ;; *************** function _api_parse *****************
 37368 ;; Defined at:
 37369 ;;		line 92 in file "api.c"
 37370 ;; Parameters:    Size  Location     Type
 37371 ;;  inBuffer        2   91[BANK0 ] PTR unsigned char 
 37372 ;;		 -> ReceivedDataBuffer(64), 
 37373 ;;  receivedData    1   93[BANK0 ] unsigned char 
 37374 ;;  outBuffer       2   94[BANK0 ] PTR unsigned char 
 37375 ;;		 -> ToSendDataBuffer(64), 
 37376 ;; Auto vars:     Size  Location     Type
 37377 ;;  out_idx_ptr     2   98[BANK0 ] PTR unsigned char 
 37378 ;;		 -> api_parse@out_idx(1), 
 37379 ;;  in_idx          1  101[BANK0 ] unsigned char 
 37380 ;;  out_idx         1  100[BANK0 ] unsigned char 
 37381 ;; Return value:  Size  Location     Type
 37382 ;;                  1    wreg      void 
 37383 ;; Registers used:
 37384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 37385 ;; Tracked objects:
 37386 ;;		On entry : 0/0
 37387 ;;		On exit  : 0/0
 37388 ;;		Unchanged: 0/0
 37389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 37390 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37391 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37392 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37393 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37394 ;;Total ram usage:       11 bytes
 37395 ;; Hardware stack levels used:    1
 37396 ;; Hardware stack levels required when called:   14
 37397 ;; This function calls:
 37398 ;;		__parse_command_long
 37399 ;;		__parse_command_short
 37400 ;; This function is called by:
 37401 ;;		_APP_DeviceCustomHIDTasks
 37402 ;; This function uses a non-reentrant model
 37403 ;;
 37404                           
 37405                           	psect	text147
 37406  00FE6C                     __ptext147:
 37407                           	opt stack 0
 37408  00FE6C                     _api_parse:
 37409                           	opt stack 15
 37410                           
 37411                           ;api.c: 96: uint8_t in_idx;;api.c: 97: uint8_t out_idx;;api.c: 98: uint8_t *out_idx_ptr;
      +                          ;api.c: 100: out_idx = 0;
 37412                           
 37413                           ; BSR set to: 0
 37414                           ;incstack = 0
 37415  00FE6C  0E00               	movlw	0
 37416  00FE6E  0100               	movlb	0	; () banked
 37417  00FE70  6FC4               	movwf	api_parse@out_idx& (0+255),b
 37418                           
 37419                           ; BSR set to: 0
 37420                           ;api.c: 101: out_idx_ptr = &out_idx;
 37421  00FE72  0EC4               	movlw	low api_parse@out_idx
 37422  00FE74  6FC2               	movwf	api_parse@out_idx_ptr& (0+255),b
 37423  00FE76  0E00               	movlw	high api_parse@out_idx
 37424  00FE78  6FC3               	movwf	(api_parse@out_idx_ptr+1)& (0+255),b
 37425                           
 37426                           ; BSR set to: 0
 37427                           ;api.c: 103: if(inBuffer[0]>0x7F)
 37428  00FE7A  C0BB  FFD9         	movff	api_parse@inBuffer,fsr2l
 37429  00FE7E  C0BC  FFDA         	movff	api_parse@inBuffer+1,fsr2h
 37430  00FE82  0E7F               	movlw	127
 37431  00FE84  64DF               	cpfsgt	indf2,c
 37432  00FE86  D001               	goto	l2188
 37433  00FE88  0012               	return	
 37434  00FE8A                     l2188:
 37435                           
 37436                           ; BSR set to: 0
 37437                           ;api.c: 108: };api.c: 110: if(inBuffer[0]==DATAREQUEST_GET_ECHO)
 37438                           
 37439                           ; BSR set to: 0
 37440  00FE8A  C0BB  FFD9         	movff	api_parse@inBuffer,fsr2l
 37441  00FE8E  C0BC  FFDA         	movff	api_parse@inBuffer+1,fsr2h
 37442  00FE92  0E20               	movlw	32
 37443  00FE94  18DE               	xorwf	postinc2,w,c
 37444  00FE96  B4D8               	btfsc	status,2,c
 37445  00FE98  0012               	return	
 37446                           
 37447                           ; BSR set to: 0
 37448                           ;api.c: 115: };api.c: 117: if(inBuffer[0]==DATAREQUEST_GET_COMMAND_RESPONSE)
 37449                           
 37450                           ; BSR set to: 0
 37451                           
 37452                           ; BSR set to: 0
 37453                           ;api.c: 111: {;api.c: 114: return;
 37454  00FE9A  C0BB  FFD9         	movff	api_parse@inBuffer,fsr2l
 37455  00FE9E  C0BC  FFDA         	movff	api_parse@inBuffer+1,fsr2h
 37456  00FEA2  50DF               	movf	indf2,w,c
 37457  00FEA4  A4D8               	btfss	status,2,c
 37458  00FEA6  D018               	goto	l2191
 37459                           
 37460                           ; BSR set to: 0
 37461                           ;api.c: 118: {;api.c: 120: outBuffer[0] = DATAREQUEST_GET_COMMAND_RESPONSE;
 37462  00FEA8  C0BE  FFD9         	movff	api_parse@outBuffer,fsr2l
 37463  00FEAC  C0BF  FFDA         	movff	api_parse@outBuffer+1,fsr2h
 37464  00FEB0  0E00               	movlw	0
 37465  00FEB2  6EDF               	movwf	indf2,c
 37466                           
 37467                           ; BSR set to: 0
 37468                           ;api.c: 123: outBuffer[1] = ((unsigned char)((0x62A1)&0xFF));
 37469  00FEB4  EE20 F001          	lfsr	2,1
 37470  00FEB8  51BE               	movf	api_parse@outBuffer& (0+255),w,b
 37471  00FEBA  26D9               	addwf	fsr2l,f,c
 37472  00FEBC  51BF               	movf	(api_parse@outBuffer+1)& (0+255),w,b
 37473  00FEBE  22DA               	addwfc	fsr2h,f,c
 37474  00FEC0  0EA1               	movlw	161
 37475  00FEC2  6EDF               	movwf	indf2,c
 37476                           
 37477                           ; BSR set to: 0
 37478                           ;api.c: 124: outBuffer[2] = ((unsigned char)(((0x62A1)>>8)&0xFF));
 37479  00FEC4  EE20 F002          	lfsr	2,2
 37480  00FEC8  51BE               	movf	api_parse@outBuffer& (0+255),w,b
 37481  00FECA  26D9               	addwf	fsr2l,f,c
 37482  00FECC  51BF               	movf	(api_parse@outBuffer+1)& (0+255),w,b
 37483  00FECE  22DA               	addwfc	fsr2h,f,c
 37484  00FED0  0E62               	movlw	98
 37485  00FED2  6EDF               	movwf	indf2,c
 37486                           
 37487                           ; BSR set to: 0
 37488                           ;api.c: 127: out_idx = 3;
 37489  00FED4  0E03               	movlw	3
 37490  00FED6  6FC4               	movwf	api_parse@out_idx& (0+255),b
 37491  00FED8                     l2191:
 37492                           
 37493                           ; BSR set to: 0
 37494                           ;api.c: 128: };api.c: 130: in_idx = 1;
 37495                           
 37496                           ; BSR set to: 0
 37497  00FED8  0E01               	movlw	1
 37498  00FEDA  6FC5               	movwf	api_parse@in_idx& (0+255),b
 37499                           
 37500                           ;api.c: 131: while(in_idx<receivedDataLength)
 37501  00FEDC  D057               	goto	l2197
 37502  00FEDE                     
 37503                           ; BSR set to: 0
 37504                           ;api.c: 132: {;api.c: 134: if(inBuffer[in_idx]==COMMAND_STOP_PARSING)
 37505                           
 37506                           ; BSR set to: 0
 37507  00FEDE  51C5               	movf	api_parse@in_idx& (0+255),w,b
 37508  00FEE0  0D01               	mullw	1
 37509  00FEE2  50F3               	movf	prodl,w,c
 37510  00FEE4  25BB               	addwf	api_parse@inBuffer& (0+255),w,b
 37511  00FEE6  6ED9               	movwf	fsr2l,c
 37512  00FEE8  50F4               	movf	prodh,w,c
 37513  00FEEA  21BC               	addwfc	(api_parse@inBuffer+1)& (0+255),w,b
 37514  00FEEC  6EDA               	movwf	fsr2h,c
 37515  00FEEE  0E99               	movlw	153
 37516  00FEF0  18DE               	xorwf	postinc2,w,c
 37517  00FEF2  B4D8               	btfsc	status,2,c
 37518  00FEF4  0012               	return	
 37519  00FEF6  D02F               	goto	l2195
 37520  00FEF8                     
 37521                           ; BSR set to: 0
 37522                           ;api.c: 142: _parse_command_short(inBuffer[in_idx]);
 37523                           
 37524                           ; BSR set to: 0
 37525  00FEF8  51C5               	movf	api_parse@in_idx& (0+255),w,b
 37526  00FEFA  0D01               	mullw	1
 37527  00FEFC  50F3               	movf	prodl,w,c
 37528  00FEFE  25BB               	addwf	api_parse@inBuffer& (0+255),w,b
 37529  00FF00  6ED9               	movwf	fsr2l,c
 37530  00FF02  50F4               	movf	prodh,w,c
 37531  00FF04  21BC               	addwfc	(api_parse@inBuffer+1)& (0+255),w,b
 37532  00FF06  6EDA               	movwf	fsr2h,c
 37533  00FF08  50DF               	movf	indf2,w,c
 37534  00FF0A  EC90  F077         	call	__parse_command_short
 37535  00FF0E  D00B               	goto	l21972
 37536  00FF10                     
 37537                           ; BSR set to: 0
 37538                           ;api.c: 147: _parse_command_short(inBuffer[in_idx]);
 37539                           
 37540                           ; BSR set to: 0
 37541  00FF10  51C5               	movf	api_parse@in_idx& (0+255),w,b
 37542  00FF12  0D01               	mullw	1
 37543  00FF14  50F3               	movf	prodl,w,c
 37544  00FF16  25BB               	addwf	api_parse@inBuffer& (0+255),w,b
 37545  00FF18  6ED9               	movwf	fsr2l,c
 37546  00FF1A  50F4               	movf	prodh,w,c
 37547  00FF1C  21BC               	addwfc	(api_parse@inBuffer+1)& (0+255),w,b
 37548  00FF1E  6EDA               	movwf	fsr2h,c
 37549  00FF20  50DF               	movf	indf2,w,c
 37550  00FF22  EC90  F077         	call	__parse_command_short
 37551  00FF26                     l21972:
 37552                           
 37553                           ;api.c: 148: ++in_idx;
 37554  00FF26  0100               	movlb	0	; () banked
 37555  00FF28  2BC5               	incf	api_parse@in_idx& (0+255),f,b
 37556                           
 37557                           ;api.c: 149: break;
 37558  00FF2A  D030               	goto	l2197
 37559  00FF2C                     
 37560                           ; BSR set to: 0
 37561                           ;api.c: 152: in_idx += _parse_command_long(&inBuffer[in_idx], outBuffer, out_idx_ptr);
 37562                           
 37563                           ; BSR set to: 0
 37564  00FF2C  51C5               	movf	api_parse@in_idx& (0+255),w,b
 37565  00FF2E  0D01               	mullw	1
 37566  00FF30  50F3               	movf	prodl,w,c
 37567  00FF32  25BB               	addwf	api_parse@inBuffer& (0+255),w,b
 37568  00FF34  6FAA               	movwf	__parse_command_long@data& (0+255),b
 37569  00FF36  50F4               	movf	prodh,w,c
 37570  00FF38  21BC               	addwfc	(api_parse@inBuffer+1)& (0+255),w,b
 37571  00FF3A  6FAB               	movwf	(__parse_command_long@data+1)& (0+255),b
 37572  00FF3C  C0BE  F0AC         	movff	api_parse@outBuffer,__parse_command_long@out_buffer
 37573  00FF40  C0BF  F0AD         	movff	api_parse@outBuffer+1,__parse_command_long@out_buffer+1
 37574  00FF44  C0C2  F0AE         	movff	api_parse@out_idx_ptr,__parse_command_long@out_idx_ptr
 37575  00FF48  C0C3  F0AF         	movff	api_parse@out_idx_ptr+1,__parse_command_long@out_idx_ptr+1
 37576  00FF4C  ECC5  F09D         	call	__parse_command_long	;wreg free
 37577  00FF50  0100               	movlb	0	; () banked
 37578  00FF52  27C5               	addwf	api_parse@in_idx& (0+255),f,b
 37579                           
 37580                           ;api.c: 153: break;
 37581  00FF54  D01B               	goto	l2197
 37582  00FF56                     l2195:
 37583                           
 37584                           ; BSR set to: 0
 37585                           
 37586                           ; BSR set to: 0
 37587  00FF56  51C5               	movf	api_parse@in_idx& (0+255),w,b
 37588  00FF58  0D01               	mullw	1
 37589  00FF5A  50F3               	movf	prodl,w,c
 37590  00FF5C  25BB               	addwf	api_parse@inBuffer& (0+255),w,b
 37591  00FF5E  6ED9               	movwf	fsr2l,c
 37592  00FF60  50F4               	movf	prodh,w,c
 37593  00FF62  21BC               	addwfc	(api_parse@inBuffer+1)& (0+255),w,b
 37594  00FF64  6EDA               	movwf	fsr2h,c
 37595  00FF66  50DF               	movf	indf2,w,c
 37596  00FF68  0BF0               	andlw	240
 37597  00FF6A  6FC0               	movwf	??_api_parse& (0+255),b
 37598  00FF6C  6BC1               	clrf	(??_api_parse+1)& (0+255),b
 37599                           
 37600                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 37601                           ; Switch size 1, requested type "space"
 37602                           ; Number of cases is 1, Range of values is 0 to 0
 37603                           ; switch strategies available:
 37604                           ; Name         Instructions Cycles
 37605                           ; simple_byte            4     3 (average)
 37606                           ;	Chosen strategy is simple_byte
 37607  00FF6E  51C1               	movf	(??_api_parse+1)& (0+255),w,b
 37608  00FF70  0A00               	xorlw	0	; case 0
 37609  00FF72  A4D8               	btfss	status,2,c
 37610  00FF74  0012               	return	
 37611                           
 37612                           ; BSR set to: 0
 37613                           ; Switch size 1, requested type "space"
 37614                           ; Number of cases is 3, Range of values is 32 to 144
 37615                           ; switch strategies available:
 37616                           ; Name         Instructions Cycles
 37617                           ; simple_byte           10     6 (average)
 37618                           ;	Chosen strategy is simple_byte
 37619  00FF76  51C0               	movf	??_api_parse& (0+255),w,b
 37620  00FF78  0A20               	xorlw	32	; case 32
 37621  00FF7A  B4D8               	btfsc	status,2,c
 37622  00FF7C  D7BD               	goto	l2196
 37623  00FF7E  0A10               	xorlw	16	; case 48
 37624  00FF80  B4D8               	btfsc	status,2,c
 37625  00FF82  D7C6               	goto	l2198
 37626  00FF84  0AA0               	xorlw	160	; case 144
 37627  00FF86  A4D8               	btfss	status,2,c
 37628  00FF88  0012               	return	
 37629  00FF8A  D7D0               	goto	l2199
 37630  00FF8C                     l2197:
 37631                           
 37632                           ; BSR set to: 0
 37633                           
 37634                           ; BSR set to: 0
 37635                           
 37636                           ; BSR set to: 0
 37637  00FF8C  51BD               	movf	api_parse@receivedDataLength& (0+255),w,b
 37638  00FF8E  5DC5               	subwf	api_parse@in_idx& (0+255),w,b
 37639  00FF90  B0D8               	btfsc	status,0,c
 37640  00FF92  0012               	return	
 37641  00FF94  D7A4               	goto	l2193
 37642  00FF96                     __end_of_api_parse:
 37643                           	opt stack 0
 37644                           tosu	equ	0xFFF
 37645                           tosh	equ	0xFFE
 37646                           tosl	equ	0xFFD
 37647                           pclath	equ	0xFFA
 37648                           tblptru	equ	0xFF8
 37649                           tblptrh	equ	0xFF7
 37650                           tblptrl	equ	0xFF6
 37651                           tablat	equ	0xFF5
 37652                           prodh	equ	0xFF4
 37653                           prodl	equ	0xFF3
 37654                           intcon	equ	0xFF2
 37655                           indf0	equ	0xFEF
 37656                           postinc0	equ	0xFEE
 37657                           fsr0h	equ	0xFEA
 37658                           fsr0l	equ	0xFE9
 37659                           wreg	equ	0xFE8
 37660                           indf1	equ	0xFE7
 37661                           postinc1	equ	0xFE6
 37662                           postdec1	equ	0xFE5
 37663                           plusw1	equ	0xFE3
 37664                           fsr1h	equ	0xFE2
 37665                           fsr1l	equ	0xFE1
 37666                           indf2	equ	0xFDF
 37667                           postinc2	equ	0xFDE
 37668                           postdec2	equ	0xFDD
 37669                           plusw2	equ	0xFDB
 37670                           fsr2h	equ	0xFDA
 37671                           fsr2l	equ	0xFD9
 37672                           status	equ	0xFD8
 37673                           
 37674 ;; *************** function __parse_command_short *****************
 37675 ;; Defined at:
 37676 ;;		line 322 in file "api.c"
 37677 ;; Parameters:    Size  Location     Type
 37678 ;;  cmd             1    wreg     unsigned char 
 37679 ;; Auto vars:     Size  Location     Type
 37680 ;;  cmd             1   90[BANK0 ] unsigned char 
 37681 ;; Return value:  Size  Location     Type
 37682 ;;                  1    wreg      void 
 37683 ;; Registers used:
 37684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 37685 ;; Tracked objects:
 37686 ;;		On entry : 0/0
 37687 ;;		On exit  : 0/0
 37688 ;;		Unchanged: 0/0
 37689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 37690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37693 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 37694 ;;Total ram usage:        1 bytes
 37695 ;; Hardware stack levels used:    1
 37696 ;; Hardware stack levels required when called:   13
 37697 ;; This function calls:
 37698 ;;		_motor_go_to_steps_position
 37699 ;;		_motor_schedule_command
 37700 ;; This function is called by:
 37701 ;;		_api_parse
 37702 ;; This function uses a non-reentrant model
 37703 ;;
 37704                           
 37705                           	psect	text148
 37706  00EF20                     __ptext148:
 37707                           	opt stack 0
 37708  00EF20                     __parse_command_short:
 37709                           	opt stack 15
 37710                           
 37711                           ; BSR set to: 0
 37712                           ;incstack = 0
 37713                           ;__parse_command_short@cmd stored from wreg
 37714  00EF20  0100               	movlb	0	; () banked
 37715  00EF22  6FBA               	movwf	__parse_command_short@cmd& (0+255),b
 37716                           
 37717                           ;api.c: 324: switch(cmd)
 37718  00EF24  D08E               	goto	l2233
 37719  00EF26                     
 37720                           ;api.c: 342: os.displayState = DISPLAY_STATE_MAIN_SETUP;
 37721  00EF26  0E01               	movlw	1
 37722  00EF28  0101               	movlb	1	; () banked
 37723  00EF2A  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 37724                           
 37725                           ;api.c: 343: break;
 37726  00EF2C  0012               	return	
 37727  00EF2E                     
 37728                           ;api.c: 346: os.displayState = DISPLAY_STATE_SETUP1_CONFIRM;
 37729                           
 37730                           ; BSR set to: 1
 37731  00EF2E  0E11               	movlw	17
 37732  00EF30  0101               	movlb	1	; () banked
 37733  00EF32  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 37734                           
 37735                           ;api.c: 347: break;
 37736  00EF34  0012               	return	
 37737  00EF36                     
 37738                           ;api.c: 350: os.displayState = DISPLAY_STATE_DIVIDE1_CONFIRM;
 37739                           
 37740                           ; BSR set to: 1
 37741  00EF36  0E31               	movlw	49
 37742  00EF38  0101               	movlb	1	; () banked
 37743  00EF3A  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 37744                           
 37745                           ;api.c: 351: break;
 37746  00EF3C  0012               	return	
 37747  00EF3E                     
 37748                           ;api.c: 354: os.displayState = DISPLAY_STATE_ARC1_CONFIRM;
 37749                           
 37750                           ; BSR set to: 1
 37751  00EF3E  0E51               	movlw	81
 37752  00EF40  0101               	movlb	1	; () banked
 37753  00EF42  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 37754                           
 37755                           ;api.c: 355: break;
 37756  00EF44  0012               	return	
 37757  00EF46                     
 37758                           ;api.c: 358: os.displayState = DISPLAY_STATE_MANUAL_CANCEL;
 37759                           
 37760                           ; BSR set to: 1
 37761  00EF46  0E82               	movlw	130
 37762  00EF48  0101               	movlb	1	; () banked
 37763  00EF4A  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 37764                           
 37765                           ;api.c: 359: break;
 37766  00EF4C  0012               	return	
 37767  00EF4E                     
 37768                           ;api.c: 362: os.displayState = DISPLAY_STATE_ZERO_NORMAL;
 37769                           
 37770                           ; BSR set to: 1
 37771  00EF4E  0E71               	movlw	113
 37772  00EF50  0101               	movlb	1	; () banked
 37773  00EF52  6F80               	movwf	(_os+13)& (0+255),b	;volatile
 37774                           
 37775                           ;api.c: 363: break;
 37776  00EF54  0012               	return	
 37777  00EF56                     
 37778                           ;api.c: 366: os.current_position_in_steps = 0;
 37779                           
 37780                           ; BSR set to: 1
 37781  00EF56  0E00               	movlw	0
 37782  00EF58  0101               	movlb	1	; () banked
 37783  00EF5A  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 37784  00EF5C  0E00               	movlw	0
 37785  00EF5E  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 37786  00EF60  0E00               	movlw	0
 37787  00EF62  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 37788  00EF64  0E00               	movlw	0
 37789  00EF66  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 37790                           
 37791                           ;api.c: 367: os.divide_position = 0;
 37792  00EF68  0E00               	movlw	0
 37793  00EF6A  6F8A               	movwf	(_os+23)& (0+255),b	;volatile
 37794  00EF6C  0E00               	movlw	0
 37795  00EF6E  6F89               	movwf	(_os+22)& (0+255),b	;volatile
 37796                           
 37797                           ; BSR set to: 1
 37798                           ;api.c: 368: motor_schedule_command(MOTOR_DIRECTION_CW, config.overshoot_in_steps, 0);
 37799  00EF70  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 37800  00EF74  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 37801  00EF78  0100               	movlb	0	; () banked
 37802  00EF7A  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 37803  00EF7C  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 37804  00EF7E  0E00               	movlw	0
 37805  00EF80  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 37806  00EF82  0E00               	movlw	0
 37807  00EF84  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 37808  00EF86  0E01               	movlw	1
 37809  00EF88  ECCE  F08F         	call	_motor_schedule_command
 37810                           
 37811                           ;api.c: 369: motor_schedule_command(MOTOR_DIRECTION_CCW, config.overshoot_in_steps, 0);
 37812  00EF8C  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 37813  00EF90  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 37814  00EF94  0100               	movlb	0	; () banked
 37815  00EF96  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 37816  00EF98  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 37817  00EF9A  0E00               	movlw	0
 37818  00EF9C  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 37819  00EF9E  0E00               	movlw	0
 37820  00EFA0  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 37821  00EFA2  0EFF               	movlw	255
 37822  00EFA4  ECCE  F08F         	call	_motor_schedule_command
 37823                           
 37824                           ;api.c: 370: os.approach_direction = MOTOR_DIRECTION_CCW;
 37825  00EFA8  0101               	movlb	1	; () banked
 37826  00EFAA  6985               	setf	(_os+18)& (0+255),b	;volatile
 37827                           
 37828                           ;api.c: 371: break;
 37829  00EFAC  0012               	return	
 37830  00EFAE                     
 37831                           ;api.c: 374: os.current_position_in_steps = 0;
 37832                           
 37833                           ; BSR set to: 1
 37834  00EFAE  0E00               	movlw	0
 37835  00EFB0  0101               	movlb	1	; () banked
 37836  00EFB2  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 37837  00EFB4  0E00               	movlw	0
 37838  00EFB6  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 37839  00EFB8  0E00               	movlw	0
 37840  00EFBA  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 37841  00EFBC  0E00               	movlw	0
 37842  00EFBE  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 37843                           
 37844                           ;api.c: 375: os.divide_position = 0;
 37845  00EFC0  0E00               	movlw	0
 37846  00EFC2  6F8A               	movwf	(_os+23)& (0+255),b	;volatile
 37847  00EFC4  0E00               	movlw	0
 37848  00EFC6  6F89               	movwf	(_os+22)& (0+255),b	;volatile
 37849                           
 37850                           ; BSR set to: 1
 37851                           ;api.c: 376: motor_schedule_command(MOTOR_DIRECTION_CCW, config.overshoot_in_steps, 0);
 37852  00EFC8  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 37853  00EFCC  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 37854  00EFD0  0100               	movlb	0	; () banked
 37855  00EFD2  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 37856  00EFD4  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 37857  00EFD6  0E00               	movlw	0
 37858  00EFD8  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 37859  00EFDA  0E00               	movlw	0
 37860  00EFDC  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 37861  00EFDE  0EFF               	movlw	255
 37862  00EFE0  ECCE  F08F         	call	_motor_schedule_command
 37863                           
 37864                           ;api.c: 377: motor_schedule_command(MOTOR_DIRECTION_CW, config.overshoot_in_steps, 0);
 37865  00EFE4  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 37866  00EFE8  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 37867  00EFEC  0100               	movlb	0	; () banked
 37868  00EFEE  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 37869  00EFF0  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 37870  00EFF2  0E00               	movlw	0
 37871  00EFF4  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 37872  00EFF6  0E00               	movlw	0
 37873  00EFF8  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 37874  00EFFA  0E01               	movlw	1
 37875  00EFFC  ECCE  F08F         	call	_motor_schedule_command
 37876                           
 37877                           ;api.c: 378: os.approach_direction = MOTOR_DIRECTION_CW;
 37878  00F000  0E01               	movlw	1
 37879  00F002  0101               	movlb	1	; () banked
 37880  00F004  6F85               	movwf	(_os+18)& (0+255),b	;volatile
 37881                           
 37882                           ;api.c: 379: break;
 37883  00F006  0012               	return	
 37884  00F008                     
 37885                           ;api.c: 382: motor_go_to_steps_position(0);
 37886                           
 37887                           ; BSR set to: 1
 37888  00F008  0E00               	movlw	0
 37889  00F00A  0100               	movlb	0	; () banked
 37890  00F00C  6F9E               	movwf	motor_go_to_steps_position@target_position& (0+255),b
 37891  00F00E  0E00               	movlw	0
 37892  00F010  6F9F               	movwf	(motor_go_to_steps_position@target_position+1)& (0+255),b
 37893  00F012  0E00               	movlw	0
 37894  00F014  6FA0               	movwf	(motor_go_to_steps_position@target_position+2)& (0+255),b
 37895  00F016  0E00               	movlw	0
 37896  00F018  6FA1               	movwf	(motor_go_to_steps_position@target_position+3)& (0+255),b
 37897  00F01A  EC2F  F064         	call	_motor_go_to_steps_position	;wreg free
 37898  00F01E                     
 37899                           ;api.c: 385: --os.encoder2Count;
 37900  00F01E  0101               	movlb	1	; () banked
 37901  00F020  0778               	decf	(_os+5)& (0+255),f,b	;volatile
 37902                           
 37903                           ;api.c: 386: break;
 37904  00F022  0012               	return	
 37905  00F024                     
 37906                           ;api.c: 389: ++os.encoder2Count;
 37907                           
 37908                           ; BSR set to: 1
 37909  00F024  0101               	movlb	1	; () banked
 37910  00F026  2B78               	incf	(_os+5)& (0+255),f,b	;volatile
 37911                           
 37912                           ;api.c: 390: break;
 37913  00F028  0012               	return	
 37914  00F02A                     
 37915                           ;api.c: 393: ++os.button2;
 37916                           
 37917                           ; BSR set to: 1
 37918  00F02A  0101               	movlb	1	; () banked
 37919  00F02C  2B79               	incf	(_os+6)& (0+255),f,b	;volatile
 37920                           
 37921                           ;api.c: 394: break;
 37922  00F02E  0012               	return	
 37923  00F030                     
 37924                           ;api.c: 397: --os.encoder1Count;
 37925                           
 37926                           ; BSR set to: 1
 37927  00F030  0101               	movlb	1	; () banked
 37928  00F032  0776               	decf	(_os+3)& (0+255),f,b	;volatile
 37929                           
 37930                           ;api.c: 398: break;
 37931  00F034  0012               	return	
 37932  00F036                     
 37933                           ;api.c: 401: ++os.encoder1Count;
 37934                           
 37935                           ; BSR set to: 1
 37936  00F036  0101               	movlb	1	; () banked
 37937  00F038  2B76               	incf	(_os+3)& (0+255),f,b	;volatile
 37938                           
 37939                           ;api.c: 402: break;
 37940  00F03A  0012               	return	
 37941  00F03C                     
 37942                           ;api.c: 405: ++os.button1;
 37943                           
 37944                           ; BSR set to: 1
 37945  00F03C  0101               	movlb	1	; () banked
 37946  00F03E  2B77               	incf	(_os+4)& (0+255),f,b	;volatile
 37947                           
 37948                           ; BSR set to: 1
 37949                           ;api.c: 407: }
 37950                           
 37951                           ;api.c: 406: break;
 37952  00F040  0012               	return	
 37953  00F042                     l2233:
 37954                           
 37955                           ; BSR set to: 1
 37956  00F042  0100               	movlb	0	; () banked
 37957  00F044  51BA               	movf	__parse_command_short@cmd& (0+255),w,b
 37958                           
 37959                           ; Switch size 1, requested type "space"
 37960                           ; Number of cases is 15, Range of values is 32 to 53
 37961                           ; switch strategies available:
 37962                           ; Name         Instructions Cycles
 37963                           ; simple_byte           46    24 (average)
 37964                           ;	Chosen strategy is simple_byte
 37965  00F046  0A20               	xorlw	32	; case 32
 37966  00F048  B4D8               	btfsc	status,2,c
 37967  00F04A  D76D               	goto	l2234
 37968  00F04C  0A01               	xorlw	1	; case 33
 37969  00F04E  B4D8               	btfsc	status,2,c
 37970  00F050  D76E               	goto	l2236
 37971  00F052  0A03               	xorlw	3	; case 34
 37972  00F054  B4D8               	btfsc	status,2,c
 37973  00F056  D76F               	goto	l2237
 37974  00F058  0A01               	xorlw	1	; case 35
 37975  00F05A  B4D8               	btfsc	status,2,c
 37976  00F05C  D770               	goto	l2238
 37977  00F05E  0A07               	xorlw	7	; case 36
 37978  00F060  B4D8               	btfsc	status,2,c
 37979  00F062  D771               	goto	l2239
 37980  00F064  0A01               	xorlw	1	; case 37
 37981  00F066  B4D8               	btfsc	status,2,c
 37982  00F068  D772               	goto	l2240
 37983  00F06A  0A03               	xorlw	3	; case 38
 37984  00F06C  B4D8               	btfsc	status,2,c
 37985  00F06E  D773               	goto	l2241
 37986  00F070  0A01               	xorlw	1	; case 39
 37987  00F072  B4D8               	btfsc	status,2,c
 37988  00F074  D79C               	goto	l2242
 37989  00F076  0A0F               	xorlw	15	; case 40
 37990  00F078  B4D8               	btfsc	status,2,c
 37991  00F07A  D7C6               	goto	l2243
 37992  00F07C  0A18               	xorlw	24	; case 48
 37993  00F07E  B4D8               	btfsc	status,2,c
 37994  00F080  D7CE               	goto	l2244
 37995  00F082  0A01               	xorlw	1	; case 49
 37996  00F084  B4D8               	btfsc	status,2,c
 37997  00F086  D7CE               	goto	l2245
 37998  00F088  0A03               	xorlw	3	; case 50
 37999  00F08A  B4D8               	btfsc	status,2,c
 38000  00F08C  D7CE               	goto	l2246
 38001  00F08E  0A01               	xorlw	1	; case 51
 38002  00F090  B4D8               	btfsc	status,2,c
 38003  00F092  D7CE               	goto	l2247
 38004  00F094  0A07               	xorlw	7	; case 52
 38005  00F096  B4D8               	btfsc	status,2,c
 38006  00F098  D7CE               	goto	l2248
 38007  00F09A  0A01               	xorlw	1	; case 53
 38008  00F09C  A4D8               	btfss	status,2,c
 38009  00F09E  0012               	return	
 38010  00F0A0  D7CD               	goto	l2249
 38011  00F0A2                     __end_of__parse_command_short:
 38012                           	opt stack 0
 38013                           tosu	equ	0xFFF
 38014                           tosh	equ	0xFFE
 38015                           tosl	equ	0xFFD
 38016                           pclath	equ	0xFFA
 38017                           tblptru	equ	0xFF8
 38018                           tblptrh	equ	0xFF7
 38019                           tblptrl	equ	0xFF6
 38020                           tablat	equ	0xFF5
 38021                           prodh	equ	0xFF4
 38022                           prodl	equ	0xFF3
 38023                           intcon	equ	0xFF2
 38024                           indf0	equ	0xFEF
 38025                           postinc0	equ	0xFEE
 38026                           fsr0h	equ	0xFEA
 38027                           fsr0l	equ	0xFE9
 38028                           wreg	equ	0xFE8
 38029                           indf1	equ	0xFE7
 38030                           postinc1	equ	0xFE6
 38031                           postdec1	equ	0xFE5
 38032                           plusw1	equ	0xFE3
 38033                           fsr1h	equ	0xFE2
 38034                           fsr1l	equ	0xFE1
 38035                           indf2	equ	0xFDF
 38036                           postinc2	equ	0xFDE
 38037                           postdec2	equ	0xFDD
 38038                           plusw2	equ	0xFDB
 38039                           fsr2h	equ	0xFDA
 38040                           fsr2l	equ	0xFD9
 38041                           status	equ	0xFD8
 38042                           
 38043 ;; *************** function _motor_go_to_steps_position *****************
 38044 ;; Defined at:
 38045 ;;		line 443 in file "motor.c"
 38046 ;; Parameters:    Size  Location     Type
 38047 ;;  target_posit    4   62[BANK0 ] unsigned long 
 38048 ;; Auto vars:     Size  Location     Type
 38049 ;;  distance_ccw    4   86[BANK0 ] unsigned long 
 38050 ;;  distance_cw     4   82[BANK0 ] unsigned long 
 38051 ;;  overhead_ccw    4   78[BANK0 ] unsigned long 
 38052 ;;  overhead_cw     4   74[BANK0 ] unsigned long 
 38053 ;; Return value:  Size  Location     Type
 38054 ;;                  1    wreg      void 
 38055 ;; Registers used:
 38056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 38057 ;; Tracked objects:
 38058 ;;		On entry : 0/0
 38059 ;;		On exit  : 0/0
 38060 ;;		Unchanged: 0/0
 38061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 38062 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38063 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38064 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38065 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38066 ;;Total ram usage:       28 bytes
 38067 ;; Hardware stack levels used:    1
 38068 ;; Hardware stack levels required when called:   12
 38069 ;; This function calls:
 38070 ;;		_motor_schedule_command
 38071 ;; This function is called by:
 38072 ;;		__parse_command_short
 38073 ;;		_motor_divide_jump
 38074 ;;		_motor_divide_jump_to_nearest
 38075 ;;		_encoder_statemachine
 38076 ;;		_motor_go_to_degrees_position
 38077 ;; This function uses a non-reentrant model
 38078 ;;
 38079                           
 38080                           	psect	text149
 38081  00C85E                     __ptext149:
 38082                           	opt stack 0
 38083  00C85E                     _motor_go_to_steps_position:
 38084                           	opt stack 17
 38085                           
 38086                           ;motor.c: 445: uint32_t distance_cw;;motor.c: 446: uint32_t overhead_cw;;motor.c: 447: u
      +                          int32_t distance_ccw;;motor.c: 448: uint32_t overhead_ccw;;motor.c: 451: if(os.busy)
 38087                           
 38088                           ;incstack = 0
 38089  00C85E  0101               	movlb	1	; () banked
 38090  00C860  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 38091  00C862  A4D8               	btfss	status,2,c
 38092  00C864  0012               	return	
 38093                           
 38094                           ; BSR set to: 1
 38095                           ;motor.c: 454: };motor.c: 457: if(os.current_position_in_steps == target_position)
 38096                           
 38097                           ; BSR set to: 1
 38098                           
 38099                           ; BSR set to: 1
 38100                           ;motor.c: 452: {;motor.c: 453: return;
 38101  00C866  0100               	movlb	0	; () banked
 38102  00C868  519E               	movf	motor_go_to_steps_position@target_position& (0+255),w,b
 38103  00C86A  0101               	movlb	1	; () banked
 38104  00C86C  197A               	xorwf	(_os+7)& (0+255),w,b	;volatile
 38105  00C86E  E110               	bnz	l20264
 38106  00C870  0100               	movlb	0	; () banked
 38107  00C872  519F               	movf	(motor_go_to_steps_position@target_position+1)& (0+255),w,b
 38108  00C874  0101               	movlb	1	; () banked
 38109  00C876  197B               	xorwf	(_os+8)& (0+255),w,b	;volatile
 38110  00C878  E10B               	bnz	l20264
 38111  00C87A  0100               	movlb	0	; () banked
 38112  00C87C  51A0               	movf	(motor_go_to_steps_position@target_position+2)& (0+255),w,b
 38113  00C87E  0101               	movlb	1	; () banked
 38114  00C880  197C               	xorwf	(_os+9)& (0+255),w,b	;volatile
 38115  00C882  E106               	bnz	l20264
 38116  00C884  0100               	movlb	0	; () banked
 38117  00C886  51A1               	movf	(motor_go_to_steps_position@target_position+3)& (0+255),w,b
 38118  00C888  0101               	movlb	1	; () banked
 38119  00C88A  197D               	xorwf	(_os+10)& (0+255),w,b	;volatile
 38120  00C88C  B4D8               	btfsc	status,2,c
 38121  00C88E  0012               	return	
 38122  00C890                     l20264:
 38123                           
 38124                           ; BSR set to: 1
 38125                           ;motor.c: 460: };motor.c: 463: overhead_cw = 0;
 38126  00C890  0E00               	movlw	0
 38127  00C892  0100               	movlb	0	; () banked
 38128  00C894  6FAA               	movwf	motor_go_to_steps_position@overhead_cw& (0+255),b
 38129  00C896  0E00               	movlw	0
 38130  00C898  6FAB               	movwf	(motor_go_to_steps_position@overhead_cw+1)& (0+255),b
 38131  00C89A  0E00               	movlw	0
 38132  00C89C  6FAC               	movwf	(motor_go_to_steps_position@overhead_cw+2)& (0+255),b
 38133  00C89E  0E00               	movlw	0
 38134  00C8A0  6FAD               	movwf	(motor_go_to_steps_position@overhead_cw+3)& (0+255),b
 38135                           
 38136                           ; BSR set to: 0
 38137                           ;motor.c: 464: distance_cw = target_position - os.current_position_in_steps;
 38138  00C8A2  C17A  F0A2         	movff	_os+7,??_motor_go_to_steps_position	;volatile
 38139  00C8A6  C17B  F0A3         	movff	_os+8,??_motor_go_to_steps_position+1	;volatile
 38140  00C8AA  C17C  F0A4         	movff	_os+9,??_motor_go_to_steps_position+2	;volatile
 38141  00C8AE  C17D  F0A5         	movff	_os+10,??_motor_go_to_steps_position+3	;volatile
 38142  00C8B2  1FA2               	comf	??_motor_go_to_steps_position& (0+255),f,b
 38143  00C8B4  1FA3               	comf	(??_motor_go_to_steps_position+1)& (0+255),f,b
 38144  00C8B6  1FA4               	comf	(??_motor_go_to_steps_position+2)& (0+255),f,b
 38145  00C8B8  1FA5               	comf	(??_motor_go_to_steps_position+3)& (0+255),f,b
 38146  00C8BA  2BA2               	incf	??_motor_go_to_steps_position& (0+255),f,b
 38147  00C8BC  0E00               	movlw	0
 38148  00C8BE  23A3               	addwfc	(??_motor_go_to_steps_position+1)& (0+255),f,b
 38149  00C8C0  23A4               	addwfc	(??_motor_go_to_steps_position+2)& (0+255),f,b
 38150  00C8C2  23A5               	addwfc	(??_motor_go_to_steps_position+3)& (0+255),f,b
 38151  00C8C4  519E               	movf	motor_go_to_steps_position@target_position& (0+255),w,b
 38152  00C8C6  25A2               	addwf	??_motor_go_to_steps_position& (0+255),w,b
 38153  00C8C8  6FB2               	movwf	motor_go_to_steps_position@distance_cw& (0+255),b
 38154  00C8CA  519F               	movf	(motor_go_to_steps_position@target_position+1)& (0+255),w,b
 38155  00C8CC  21A3               	addwfc	(??_motor_go_to_steps_position+1)& (0+255),w,b
 38156  00C8CE  6FB3               	movwf	(motor_go_to_steps_position@distance_cw+1)& (0+255),b
 38157  00C8D0  51A0               	movf	(motor_go_to_steps_position@target_position+2)& (0+255),w,b
 38158  00C8D2  21A4               	addwfc	(??_motor_go_to_steps_position+2)& (0+255),w,b
 38159  00C8D4  6FB4               	movwf	(motor_go_to_steps_position@distance_cw+2)& (0+255),b
 38160  00C8D6  51A1               	movf	(motor_go_to_steps_position@target_position+3)& (0+255),w,b
 38161  00C8D8  21A5               	addwfc	(??_motor_go_to_steps_position+3)& (0+255),w,b
 38162  00C8DA  6FB5               	movwf	(motor_go_to_steps_position@distance_cw+3)& (0+255),b
 38163                           
 38164                           ; BSR set to: 0
 38165                           ;motor.c: 465: if(distance_cw>config.full_circle_in_steps)
 38166  00C8DC  51B2               	movf	motor_go_to_steps_position@distance_cw& (0+255),w,b
 38167  00C8DE  0101               	movlb	1	; () banked
 38168  00C8E0  5DA3               	subwf	_config& (0+255),w,b
 38169  00C8E2  0100               	movlb	0	; () banked
 38170  00C8E4  51B3               	movf	(motor_go_to_steps_position@distance_cw+1)& (0+255),w,b
 38171  00C8E6  0101               	movlb	1	; () banked
 38172  00C8E8  59A4               	subwfb	(_config+1)& (0+255),w,b
 38173  00C8EA  0100               	movlb	0	; () banked
 38174  00C8EC  51B4               	movf	(motor_go_to_steps_position@distance_cw+2)& (0+255),w,b
 38175  00C8EE  0101               	movlb	1	; () banked
 38176  00C8F0  59A5               	subwfb	(_config+2)& (0+255),w,b
 38177  00C8F2  0100               	movlb	0	; () banked
 38178  00C8F4  51B5               	movf	(motor_go_to_steps_position@distance_cw+3)& (0+255),w,b
 38179  00C8F6  0101               	movlb	1	; () banked
 38180  00C8F8  59A6               	subwfb	(_config+3)& (0+255),w,b
 38181  00C8FA  B0D8               	btfsc	status,0,c
 38182  00C8FC  D00F               	goto	l2419
 38183                           
 38184                           ; BSR set to: 1
 38185                           ;motor.c: 466: {;motor.c: 467: distance_cw += config.full_circle_in_steps;
 38186  00C8FE  51A3               	movf	_config& (0+255),w,b
 38187  00C900  0100               	movlb	0	; () banked
 38188  00C902  27B2               	addwf	motor_go_to_steps_position@distance_cw& (0+255),f,b
 38189  00C904  0101               	movlb	1	; () banked
 38190  00C906  51A4               	movf	(_config+1)& (0+255),w,b
 38191  00C908  0100               	movlb	0	; () banked
 38192  00C90A  23B3               	addwfc	(motor_go_to_steps_position@distance_cw+1)& (0+255),f,b
 38193  00C90C  0101               	movlb	1	; () banked
 38194  00C90E  51A5               	movf	(_config+2)& (0+255),w,b
 38195  00C910  0100               	movlb	0	; () banked
 38196  00C912  23B4               	addwfc	(motor_go_to_steps_position@distance_cw+2)& (0+255),f,b
 38197  00C914  0101               	movlb	1	; () banked
 38198  00C916  51A6               	movf	(_config+3)& (0+255),w,b
 38199  00C918  0100               	movlb	0	; () banked
 38200  00C91A  23B5               	addwfc	(motor_go_to_steps_position@distance_cw+3)& (0+255),f,b
 38201  00C91C                     l2419:
 38202                           
 38203                           ;motor.c: 468: };motor.c: 469: if(os.approach_direction==MOTOR_DIRECTION_CCW)
 38204  00C91C  0101               	movlb	1	; () banked
 38205  00C91E  2985               	incf	(_os+18)& (0+255),w,b	;volatile
 38206  00C920  A4D8               	btfss	status,2,c
 38207  00C922  D023               	goto	l2420
 38208                           
 38209                           ; BSR set to: 1
 38210                           ;motor.c: 470: {;motor.c: 471: distance_cw += config.overshoot_in_steps;
 38211  00C924  51A8               	movf	(_config+5)& (0+255),w,b
 38212  00C926  0100               	movlb	0	; () banked
 38213  00C928  27B2               	addwf	motor_go_to_steps_position@distance_cw& (0+255),f,b
 38214  00C92A  0101               	movlb	1	; () banked
 38215  00C92C  51A9               	movf	(_config+6)& (0+255),w,b
 38216  00C92E  0100               	movlb	0	; () banked
 38217  00C930  23B3               	addwfc	(motor_go_to_steps_position@distance_cw+1)& (0+255),f,b
 38218  00C932  0E00               	movlw	0
 38219  00C934  23B4               	addwfc	(motor_go_to_steps_position@distance_cw+2)& (0+255),f,b
 38220  00C936  0E00               	movlw	0
 38221  00C938  23B5               	addwfc	(motor_go_to_steps_position@distance_cw+3)& (0+255),f,b
 38222                           
 38223                           ;motor.c: 472: overhead_cw += config.overshoot_in_steps;
 38224  00C93A  0101               	movlb	1	; () banked
 38225  00C93C  51A8               	movf	(_config+5)& (0+255),w,b
 38226  00C93E  0100               	movlb	0	; () banked
 38227  00C940  27AA               	addwf	motor_go_to_steps_position@overhead_cw& (0+255),f,b
 38228  00C942  0101               	movlb	1	; () banked
 38229  00C944  51A9               	movf	(_config+6)& (0+255),w,b
 38230  00C946  0100               	movlb	0	; () banked
 38231  00C948  23AB               	addwfc	(motor_go_to_steps_position@overhead_cw+1)& (0+255),f,b
 38232  00C94A  0E00               	movlw	0
 38233  00C94C  23AC               	addwfc	(motor_go_to_steps_position@overhead_cw+2)& (0+255),f,b
 38234  00C94E  0E00               	movlw	0
 38235  00C950  23AD               	addwfc	(motor_go_to_steps_position@overhead_cw+3)& (0+255),f,b
 38236                           
 38237                           ;motor.c: 473: overhead_cw += config.overshoot_cost_in_steps;
 38238  00C952  0101               	movlb	1	; () banked
 38239  00C954  51AA               	movf	(_config+7)& (0+255),w,b
 38240  00C956  0100               	movlb	0	; () banked
 38241  00C958  27AA               	addwf	motor_go_to_steps_position@overhead_cw& (0+255),f,b
 38242  00C95A  0101               	movlb	1	; () banked
 38243  00C95C  51AB               	movf	(_config+8)& (0+255),w,b
 38244  00C95E  0100               	movlb	0	; () banked
 38245  00C960  23AB               	addwfc	(motor_go_to_steps_position@overhead_cw+1)& (0+255),f,b
 38246  00C962  0E00               	movlw	0
 38247  00C964  23AC               	addwfc	(motor_go_to_steps_position@overhead_cw+2)& (0+255),f,b
 38248  00C966  0E00               	movlw	0
 38249  00C968  23AD               	addwfc	(motor_go_to_steps_position@overhead_cw+3)& (0+255),f,b
 38250  00C96A                     l2420:
 38251                           
 38252                           ;motor.c: 474: };motor.c: 477: overhead_ccw = 0;
 38253                           
 38254                           ; BSR set to: 0
 38255  00C96A  0E00               	movlw	0
 38256  00C96C  0100               	movlb	0	; () banked
 38257  00C96E  6FAE               	movwf	motor_go_to_steps_position@overhead_ccw& (0+255),b
 38258  00C970  0E00               	movlw	0
 38259  00C972  6FAF               	movwf	(motor_go_to_steps_position@overhead_ccw+1)& (0+255),b
 38260  00C974  0E00               	movlw	0
 38261  00C976  6FB0               	movwf	(motor_go_to_steps_position@overhead_ccw+2)& (0+255),b
 38262  00C978  0E00               	movlw	0
 38263  00C97A  6FB1               	movwf	(motor_go_to_steps_position@overhead_ccw+3)& (0+255),b
 38264                           
 38265                           ; BSR set to: 0
 38266                           ;motor.c: 478: distance_ccw = os.current_position_in_steps - target_position;
 38267  00C97C  C09E  F0A2         	movff	motor_go_to_steps_position@target_position,??_motor_go_to_steps_position
 38268  00C980  C09F  F0A3         	movff	motor_go_to_steps_position@target_position+1,??_motor_go_to_steps_position+1
 38269  00C984  C0A0  F0A4         	movff	motor_go_to_steps_position@target_position+2,??_motor_go_to_steps_position+2
 38270  00C988  C0A1  F0A5         	movff	motor_go_to_steps_position@target_position+3,??_motor_go_to_steps_position+3
 38271  00C98C  1FA2               	comf	??_motor_go_to_steps_position& (0+255),f,b
 38272  00C98E  1FA3               	comf	(??_motor_go_to_steps_position+1)& (0+255),f,b
 38273  00C990  1FA4               	comf	(??_motor_go_to_steps_position+2)& (0+255),f,b
 38274  00C992  1FA5               	comf	(??_motor_go_to_steps_position+3)& (0+255),f,b
 38275  00C994  2BA2               	incf	??_motor_go_to_steps_position& (0+255),f,b
 38276  00C996  0E00               	movlw	0
 38277  00C998  23A3               	addwfc	(??_motor_go_to_steps_position+1)& (0+255),f,b
 38278  00C99A  23A4               	addwfc	(??_motor_go_to_steps_position+2)& (0+255),f,b
 38279  00C99C  23A5               	addwfc	(??_motor_go_to_steps_position+3)& (0+255),f,b
 38280  00C99E  0101               	movlb	1	; () banked
 38281  00C9A0  517A               	movf	(_os+7)& (0+255),w,b	;volatile
 38282  00C9A2  0100               	movlb	0	; () banked
 38283  00C9A4  25A2               	addwf	??_motor_go_to_steps_position& (0+255),w,b
 38284  00C9A6  6FB6               	movwf	motor_go_to_steps_position@distance_ccw& (0+255),b
 38285  00C9A8  0101               	movlb	1	; () banked
 38286  00C9AA  517B               	movf	(_os+8)& (0+255),w,b	;volatile
 38287  00C9AC  0100               	movlb	0	; () banked
 38288  00C9AE  21A3               	addwfc	(??_motor_go_to_steps_position+1)& (0+255),w,b
 38289  00C9B0  6FB7               	movwf	(motor_go_to_steps_position@distance_ccw+1)& (0+255),b
 38290  00C9B2  0101               	movlb	1	; () banked
 38291  00C9B4  517C               	movf	(_os+9)& (0+255),w,b	;volatile
 38292  00C9B6  0100               	movlb	0	; () banked
 38293  00C9B8  21A4               	addwfc	(??_motor_go_to_steps_position+2)& (0+255),w,b
 38294  00C9BA  6FB8               	movwf	(motor_go_to_steps_position@distance_ccw+2)& (0+255),b
 38295  00C9BC  0101               	movlb	1	; () banked
 38296  00C9BE  517D               	movf	(_os+10)& (0+255),w,b	;volatile
 38297  00C9C0  0100               	movlb	0	; () banked
 38298  00C9C2  21A5               	addwfc	(??_motor_go_to_steps_position+3)& (0+255),w,b
 38299  00C9C4  6FB9               	movwf	(motor_go_to_steps_position@distance_ccw+3)& (0+255),b
 38300                           
 38301                           ; BSR set to: 0
 38302                           ;motor.c: 479: if(distance_ccw>config.full_circle_in_steps)
 38303  00C9C6  51B6               	movf	motor_go_to_steps_position@distance_ccw& (0+255),w,b
 38304  00C9C8  0101               	movlb	1	; () banked
 38305  00C9CA  5DA3               	subwf	_config& (0+255),w,b
 38306  00C9CC  0100               	movlb	0	; () banked
 38307  00C9CE  51B7               	movf	(motor_go_to_steps_position@distance_ccw+1)& (0+255),w,b
 38308  00C9D0  0101               	movlb	1	; () banked
 38309  00C9D2  59A4               	subwfb	(_config+1)& (0+255),w,b
 38310  00C9D4  0100               	movlb	0	; () banked
 38311  00C9D6  51B8               	movf	(motor_go_to_steps_position@distance_ccw+2)& (0+255),w,b
 38312  00C9D8  0101               	movlb	1	; () banked
 38313  00C9DA  59A5               	subwfb	(_config+2)& (0+255),w,b
 38314  00C9DC  0100               	movlb	0	; () banked
 38315  00C9DE  51B9               	movf	(motor_go_to_steps_position@distance_ccw+3)& (0+255),w,b
 38316  00C9E0  0101               	movlb	1	; () banked
 38317  00C9E2  59A6               	subwfb	(_config+3)& (0+255),w,b
 38318  00C9E4  B0D8               	btfsc	status,0,c
 38319  00C9E6  D00F               	goto	l2421
 38320                           
 38321                           ; BSR set to: 1
 38322                           ;motor.c: 480: {;motor.c: 481: distance_ccw += config.full_circle_in_steps;
 38323  00C9E8  51A3               	movf	_config& (0+255),w,b
 38324  00C9EA  0100               	movlb	0	; () banked
 38325  00C9EC  27B6               	addwf	motor_go_to_steps_position@distance_ccw& (0+255),f,b
 38326  00C9EE  0101               	movlb	1	; () banked
 38327  00C9F0  51A4               	movf	(_config+1)& (0+255),w,b
 38328  00C9F2  0100               	movlb	0	; () banked
 38329  00C9F4  23B7               	addwfc	(motor_go_to_steps_position@distance_ccw+1)& (0+255),f,b
 38330  00C9F6  0101               	movlb	1	; () banked
 38331  00C9F8  51A5               	movf	(_config+2)& (0+255),w,b
 38332  00C9FA  0100               	movlb	0	; () banked
 38333  00C9FC  23B8               	addwfc	(motor_go_to_steps_position@distance_ccw+2)& (0+255),f,b
 38334  00C9FE  0101               	movlb	1	; () banked
 38335  00CA00  51A6               	movf	(_config+3)& (0+255),w,b
 38336  00CA02  0100               	movlb	0	; () banked
 38337  00CA04  23B9               	addwfc	(motor_go_to_steps_position@distance_ccw+3)& (0+255),f,b
 38338  00CA06                     l2421:
 38339                           
 38340                           ;motor.c: 482: };motor.c: 483: if(os.approach_direction==MOTOR_DIRECTION_CW)
 38341  00CA06  0101               	movlb	1	; () banked
 38342  00CA08  0585               	decf	(_os+18)& (0+255),w,b	;volatile
 38343  00CA0A  A4D8               	btfss	status,2,c
 38344  00CA0C  D023               	goto	l2422
 38345                           
 38346                           ; BSR set to: 1
 38347                           ;motor.c: 484: {;motor.c: 485: distance_ccw += config.overshoot_in_steps;
 38348  00CA0E  51A8               	movf	(_config+5)& (0+255),w,b
 38349  00CA10  0100               	movlb	0	; () banked
 38350  00CA12  27B6               	addwf	motor_go_to_steps_position@distance_ccw& (0+255),f,b
 38351  00CA14  0101               	movlb	1	; () banked
 38352  00CA16  51A9               	movf	(_config+6)& (0+255),w,b
 38353  00CA18  0100               	movlb	0	; () banked
 38354  00CA1A  23B7               	addwfc	(motor_go_to_steps_position@distance_ccw+1)& (0+255),f,b
 38355  00CA1C  0E00               	movlw	0
 38356  00CA1E  23B8               	addwfc	(motor_go_to_steps_position@distance_ccw+2)& (0+255),f,b
 38357  00CA20  0E00               	movlw	0
 38358  00CA22  23B9               	addwfc	(motor_go_to_steps_position@distance_ccw+3)& (0+255),f,b
 38359                           
 38360                           ;motor.c: 486: overhead_ccw += config.overshoot_in_steps;
 38361  00CA24  0101               	movlb	1	; () banked
 38362  00CA26  51A8               	movf	(_config+5)& (0+255),w,b
 38363  00CA28  0100               	movlb	0	; () banked
 38364  00CA2A  27AE               	addwf	motor_go_to_steps_position@overhead_ccw& (0+255),f,b
 38365  00CA2C  0101               	movlb	1	; () banked
 38366  00CA2E  51A9               	movf	(_config+6)& (0+255),w,b
 38367  00CA30  0100               	movlb	0	; () banked
 38368  00CA32  23AF               	addwfc	(motor_go_to_steps_position@overhead_ccw+1)& (0+255),f,b
 38369  00CA34  0E00               	movlw	0
 38370  00CA36  23B0               	addwfc	(motor_go_to_steps_position@overhead_ccw+2)& (0+255),f,b
 38371  00CA38  0E00               	movlw	0
 38372  00CA3A  23B1               	addwfc	(motor_go_to_steps_position@overhead_ccw+3)& (0+255),f,b
 38373                           
 38374                           ;motor.c: 487: overhead_ccw += config.overshoot_cost_in_steps;
 38375  00CA3C  0101               	movlb	1	; () banked
 38376  00CA3E  51AA               	movf	(_config+7)& (0+255),w,b
 38377  00CA40  0100               	movlb	0	; () banked
 38378  00CA42  27AE               	addwf	motor_go_to_steps_position@overhead_ccw& (0+255),f,b
 38379  00CA44  0101               	movlb	1	; () banked
 38380  00CA46  51AB               	movf	(_config+8)& (0+255),w,b
 38381  00CA48  0100               	movlb	0	; () banked
 38382  00CA4A  23AF               	addwfc	(motor_go_to_steps_position@overhead_ccw+1)& (0+255),f,b
 38383  00CA4C  0E00               	movlw	0
 38384  00CA4E  23B0               	addwfc	(motor_go_to_steps_position@overhead_ccw+2)& (0+255),f,b
 38385  00CA50  0E00               	movlw	0
 38386  00CA52  23B1               	addwfc	(motor_go_to_steps_position@overhead_ccw+3)& (0+255),f,b
 38387  00CA54                     l2422:
 38388                           
 38389                           ;motor.c: 488: };motor.c: 491: if((distance_cw+overhead_cw) < (distance_ccw+overhead_ccw
      +                          ))
 38390                           
 38391                           ; BSR set to: 0
 38392  00CA54  0100               	movlb	0	; () banked
 38393  00CA56  51AE               	movf	motor_go_to_steps_position@overhead_ccw& (0+255),w,b
 38394  00CA58  25B6               	addwf	motor_go_to_steps_position@distance_ccw& (0+255),w,b
 38395  00CA5A  6FA2               	movwf	??_motor_go_to_steps_position& (0+255),b
 38396  00CA5C  51AF               	movf	(motor_go_to_steps_position@overhead_ccw+1)& (0+255),w,b
 38397  00CA5E  21B7               	addwfc	(motor_go_to_steps_position@distance_ccw+1)& (0+255),w,b
 38398  00CA60  6FA3               	movwf	(??_motor_go_to_steps_position+1)& (0+255),b
 38399  00CA62  51B0               	movf	(motor_go_to_steps_position@overhead_ccw+2)& (0+255),w,b
 38400  00CA64  21B8               	addwfc	(motor_go_to_steps_position@distance_ccw+2)& (0+255),w,b
 38401  00CA66  6FA4               	movwf	(??_motor_go_to_steps_position+2)& (0+255),b
 38402  00CA68  51B1               	movf	(motor_go_to_steps_position@overhead_ccw+3)& (0+255),w,b
 38403  00CA6A  21B9               	addwfc	(motor_go_to_steps_position@distance_ccw+3)& (0+255),w,b
 38404  00CA6C  6FA5               	movwf	(??_motor_go_to_steps_position+3)& (0+255),b
 38405  00CA6E  51AA               	movf	motor_go_to_steps_position@overhead_cw& (0+255),w,b
 38406  00CA70  25B2               	addwf	motor_go_to_steps_position@distance_cw& (0+255),w,b
 38407  00CA72  6FA6               	movwf	(??_motor_go_to_steps_position+4)& (0+255),b
 38408  00CA74  51AB               	movf	(motor_go_to_steps_position@overhead_cw+1)& (0+255),w,b
 38409  00CA76  21B3               	addwfc	(motor_go_to_steps_position@distance_cw+1)& (0+255),w,b
 38410  00CA78  6FA7               	movwf	(??_motor_go_to_steps_position+5)& (0+255),b
 38411  00CA7A  51AC               	movf	(motor_go_to_steps_position@overhead_cw+2)& (0+255),w,b
 38412  00CA7C  21B4               	addwfc	(motor_go_to_steps_position@distance_cw+2)& (0+255),w,b
 38413  00CA7E  6FA8               	movwf	(??_motor_go_to_steps_position+6)& (0+255),b
 38414  00CA80  51AD               	movf	(motor_go_to_steps_position@overhead_cw+3)& (0+255),w,b
 38415  00CA82  21B5               	addwfc	(motor_go_to_steps_position@distance_cw+3)& (0+255),w,b
 38416  00CA84  6FA9               	movwf	(??_motor_go_to_steps_position+7)& (0+255),b
 38417  00CA86  51A2               	movf	??_motor_go_to_steps_position& (0+255),w,b
 38418  00CA88  5DA6               	subwf	(??_motor_go_to_steps_position+4)& (0+255),w,b
 38419  00CA8A  51A3               	movf	(??_motor_go_to_steps_position+1)& (0+255),w,b
 38420  00CA8C  59A7               	subwfb	(??_motor_go_to_steps_position+5)& (0+255),w,b
 38421  00CA8E  51A4               	movf	(??_motor_go_to_steps_position+2)& (0+255),w,b
 38422  00CA90  59A8               	subwfb	(??_motor_go_to_steps_position+6)& (0+255),w,b
 38423  00CA92  51A5               	movf	(??_motor_go_to_steps_position+3)& (0+255),w,b
 38424  00CA94  59A9               	subwfb	(??_motor_go_to_steps_position+7)& (0+255),w,b
 38425  00CA96  B0D8               	btfsc	status,0,c
 38426  00CA98  D034               	goto	l2423
 38427                           
 38428                           ; BSR set to: 0
 38429                           ;motor.c: 492: {;motor.c: 493: if(os.approach_direction==MOTOR_DIRECTION_CW)
 38430  00CA9A  0101               	movlb	1	; () banked
 38431  00CA9C  0585               	decf	(_os+18)& (0+255),w,b	;volatile
 38432  00CA9E  A4D8               	btfss	status,2,c
 38433  00CAA0  D011               	goto	l2424
 38434                           
 38435                           ; BSR set to: 1
 38436                           ;motor.c: 494: {;motor.c: 496: motor_schedule_command(MOTOR_DIRECTION_CW, distance_cw, 0
      +                          );
 38437  00CAA2  C0B2  F097         	movff	motor_go_to_steps_position@distance_cw,motor_schedule_command@distance_in_steps
 38438  00CAA6  C0B3  F098         	movff	motor_go_to_steps_position@distance_cw+1,motor_schedule_command@distance_in_steps
      +                          +1
 38439  00CAAA  C0B4  F099         	movff	motor_go_to_steps_position@distance_cw+2,motor_schedule_command@distance_in_steps
      +                          +2
 38440  00CAAE  C0B5  F09A         	movff	motor_go_to_steps_position@distance_cw+3,motor_schedule_command@distance_in_steps
      +                          +3
 38441  00CAB2  0E00               	movlw	0
 38442  00CAB4  0100               	movlb	0	; () banked
 38443  00CAB6  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38444  00CAB8  0E00               	movlw	0
 38445  00CABA  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38446  00CABC  0E01               	movlw	1
 38447  00CABE  ECCE  F08F         	call	_motor_schedule_command
 38448                           
 38449                           ;motor.c: 497: }
 38450  00CAC2  0012               	return	
 38451  00CAC4                     l2424:
 38452                           
 38453                           ;motor.c: 498: else;motor.c: 499: {;motor.c: 501: motor_schedule_command(MOTOR_DIRECTION
      +                          _CW, distance_cw, 0);
 38454  00CAC4  C0B2  F097         	movff	motor_go_to_steps_position@distance_cw,motor_schedule_command@distance_in_steps
 38455  00CAC8  C0B3  F098         	movff	motor_go_to_steps_position@distance_cw+1,motor_schedule_command@distance_in_steps
      +                          +1
 38456  00CACC  C0B4  F099         	movff	motor_go_to_steps_position@distance_cw+2,motor_schedule_command@distance_in_steps
      +                          +2
 38457  00CAD0  C0B5  F09A         	movff	motor_go_to_steps_position@distance_cw+3,motor_schedule_command@distance_in_steps
      +                          +3
 38458  00CAD4  0E00               	movlw	0
 38459  00CAD6  0100               	movlb	0	; () banked
 38460  00CAD8  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38461  00CADA  0E00               	movlw	0
 38462  00CADC  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38463  00CADE  0E01               	movlw	1
 38464  00CAE0  ECCE  F08F         	call	_motor_schedule_command
 38465                           
 38466                           ;motor.c: 502: motor_schedule_command(MOTOR_DIRECTION_CCW, config.overshoot_in_steps, 0)
      +                          ;
 38467  00CAE4  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 38468  00CAE8  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 38469  00CAEC  0100               	movlb	0	; () banked
 38470  00CAEE  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 38471  00CAF0  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 38472  00CAF2  0E00               	movlw	0
 38473  00CAF4  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38474  00CAF6  0E00               	movlw	0
 38475  00CAF8  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38476  00CAFA  0EFF               	movlw	255
 38477  00CAFC  ECCE  F08F         	call	_motor_schedule_command
 38478                           
 38479                           ;motor.c: 503: };motor.c: 504: }
 38480  00CB00  0012               	return	
 38481  00CB02                     l2423:
 38482                           
 38483                           ;motor.c: 505: else;motor.c: 506: {;motor.c: 507: if(os.approach_direction==MOTOR_DIRECT
      +                          ION_CCW)
 38484  00CB02  0101               	movlb	1	; () banked
 38485  00CB04  2985               	incf	(_os+18)& (0+255),w,b	;volatile
 38486  00CB06  A4D8               	btfss	status,2,c
 38487  00CB08  D011               	goto	l2427
 38488                           
 38489                           ; BSR set to: 1
 38490                           ;motor.c: 508: {;motor.c: 510: motor_schedule_command(MOTOR_DIRECTION_CCW, distance_ccw,
      +                           0);
 38491  00CB0A  C0B6  F097         	movff	motor_go_to_steps_position@distance_ccw,motor_schedule_command@distance_in_steps
 38492  00CB0E  C0B7  F098         	movff	motor_go_to_steps_position@distance_ccw+1,motor_schedule_command@distance_in_step
      +                          s+1
 38493  00CB12  C0B8  F099         	movff	motor_go_to_steps_position@distance_ccw+2,motor_schedule_command@distance_in_step
      +                          s+2
 38494  00CB16  C0B9  F09A         	movff	motor_go_to_steps_position@distance_ccw+3,motor_schedule_command@distance_in_step
      +                          s+3
 38495  00CB1A  0E00               	movlw	0
 38496  00CB1C  0100               	movlb	0	; () banked
 38497  00CB1E  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38498  00CB20  0E00               	movlw	0
 38499  00CB22  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38500  00CB24  0EFF               	movlw	255
 38501  00CB26  ECCE  F08F         	call	_motor_schedule_command
 38502                           
 38503                           ;motor.c: 511: }
 38504  00CB2A  0012               	return	
 38505  00CB2C                     l2427:
 38506                           
 38507                           ;motor.c: 512: else;motor.c: 513: {;motor.c: 515: motor_schedule_command(MOTOR_DIRECTION
      +                          _CCW, distance_ccw, 0);
 38508  00CB2C  C0B6  F097         	movff	motor_go_to_steps_position@distance_ccw,motor_schedule_command@distance_in_steps
 38509  00CB30  C0B7  F098         	movff	motor_go_to_steps_position@distance_ccw+1,motor_schedule_command@distance_in_step
      +                          s+1
 38510  00CB34  C0B8  F099         	movff	motor_go_to_steps_position@distance_ccw+2,motor_schedule_command@distance_in_step
      +                          s+2
 38511  00CB38  C0B9  F09A         	movff	motor_go_to_steps_position@distance_ccw+3,motor_schedule_command@distance_in_step
      +                          s+3
 38512  00CB3C  0E00               	movlw	0
 38513  00CB3E  0100               	movlb	0	; () banked
 38514  00CB40  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38515  00CB42  0E00               	movlw	0
 38516  00CB44  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38517  00CB46  0EFF               	movlw	255
 38518  00CB48  ECCE  F08F         	call	_motor_schedule_command
 38519                           
 38520                           ;motor.c: 516: motor_schedule_command(MOTOR_DIRECTION_CW, config.overshoot_in_steps, 0);
 38521  00CB4C  C1A8  F097         	movff	_config+5,motor_schedule_command@distance_in_steps
 38522  00CB50  C1A9  F098         	movff	_config+6,motor_schedule_command@distance_in_steps+1
 38523  00CB54  0100               	movlb	0	; () banked
 38524  00CB56  6B99               	clrf	(motor_schedule_command@distance_in_steps+2)& (0+255),b
 38525  00CB58  6B9A               	clrf	(motor_schedule_command@distance_in_steps+3)& (0+255),b
 38526  00CB5A  0E00               	movlw	0
 38527  00CB5C  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38528  00CB5E  0E00               	movlw	0
 38529  00CB60  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38530  00CB62  0E01               	movlw	1
 38531  00CB64  ECCE  F08F         	call	_motor_schedule_command
 38532  00CB68  0012               	return	
 38533  00CB6A                     __end_of_motor_go_to_steps_position:
 38534                           	opt stack 0
 38535                           tosu	equ	0xFFF
 38536                           tosh	equ	0xFFE
 38537                           tosl	equ	0xFFD
 38538                           pclath	equ	0xFFA
 38539                           tblptru	equ	0xFF8
 38540                           tblptrh	equ	0xFF7
 38541                           tblptrl	equ	0xFF6
 38542                           tablat	equ	0xFF5
 38543                           prodh	equ	0xFF4
 38544                           prodl	equ	0xFF3
 38545                           intcon	equ	0xFF2
 38546                           indf0	equ	0xFEF
 38547                           postinc0	equ	0xFEE
 38548                           fsr0h	equ	0xFEA
 38549                           fsr0l	equ	0xFE9
 38550                           wreg	equ	0xFE8
 38551                           indf1	equ	0xFE7
 38552                           postinc1	equ	0xFE6
 38553                           postdec1	equ	0xFE5
 38554                           plusw1	equ	0xFE3
 38555                           fsr1h	equ	0xFE2
 38556                           fsr1l	equ	0xFE1
 38557                           indf2	equ	0xFDF
 38558                           postinc2	equ	0xFDE
 38559                           postdec2	equ	0xFDD
 38560                           plusw2	equ	0xFDB
 38561                           fsr2h	equ	0xFDA
 38562                           fsr2l	equ	0xFD9
 38563                           status	equ	0xFD8
 38564                           
 38565 ;; *************** function __parse_command_long *****************
 38566 ;; Defined at:
 38567 ;;		line 410 in file "api.c"
 38568 ;; Parameters:    Size  Location     Type
 38569 ;;  data            2   74[BANK0 ] PTR unsigned char 
 38570 ;;		 -> ReceivedDataBuffer(64), 
 38571 ;;  out_buffer      2   76[BANK0 ] PTR unsigned char 
 38572 ;;		 -> ToSendDataBuffer(64), 
 38573 ;;  out_idx_ptr     2   78[BANK0 ] PTR unsigned char 
 38574 ;;		 -> api_parse@out_idx(1), 
 38575 ;; Auto vars:     Size  Location     Type
 38576 ;;  length          1   80[BANK0 ] unsigned char 
 38577 ;; Return value:  Size  Location     Type
 38578 ;;                  1    wreg      unsigned char 
 38579 ;; Registers used:
 38580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 38581 ;; Tracked objects:
 38582 ;;		On entry : 0/0
 38583 ;;		On exit  : 0/0
 38584 ;;		Unchanged: 0/0
 38585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 38586 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38589 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38590 ;;Total ram usage:        7 bytes
 38591 ;; Hardware stack levels used:    1
 38592 ;; Hardware stack levels required when called:   13
 38593 ;; This function calls:
 38594 ;;		__parse_jump_steps
 38595 ;; This function is called by:
 38596 ;;		_api_parse
 38597 ;; This function uses a non-reentrant model
 38598 ;;
 38599                           
 38600                           	psect	text150
 38601  013B8A                     __ptext150:
 38602                           	opt stack 0
 38603  013B8A                     __parse_command_long:
 38604                           	opt stack 15
 38605                           
 38606                           ;api.c: 412: uint8_t length = 65;
 38607                           
 38608                           ;incstack = 0
 38609  013B8A  0E41               	movlw	65
 38610  013B8C  0100               	movlb	0	; () banked
 38611  013B8E  6FB0               	movwf	__parse_command_long@length& (0+255),b
 38612                           
 38613                           ;api.c: 414: switch(data[0])
 38614  013B90  D011               	goto	l2253
 38615  013B92                     
 38616                           ; BSR set to: 0
 38617                           ;api.c: 421: length = _parse_jump_steps(data, out_buffer, out_idx_ptr);
 38618                           
 38619                           ; BSR set to: 0
 38620  013B92  C0AA  F09E         	movff	__parse_command_long@data,__parse_jump_steps@data
 38621  013B96  C0AB  F09F         	movff	__parse_command_long@data+1,__parse_jump_steps@data+1
 38622  013B9A  C0AC  F0A0         	movff	__parse_command_long@out_buffer,__parse_jump_steps@out_buffer
 38623  013B9E  C0AD  F0A1         	movff	__parse_command_long@out_buffer+1,__parse_jump_steps@out_buffer+1
 38624  013BA2  C0AE  F0A2         	movff	__parse_command_long@out_idx_ptr,__parse_jump_steps@out_idx_ptr
 38625  013BA6  C0AF  F0A3         	movff	__parse_command_long@out_idx_ptr+1,__parse_jump_steps@out_idx_ptr+1
 38626  013BAA  ECF8  F078         	call	__parse_jump_steps	;wreg free
 38627  013BAE  0100               	movlb	0	; () banked
 38628  013BB0  6FB0               	movwf	__parse_command_long@length& (0+255),b
 38629                           
 38630                           ; BSR set to: 0
 38631                           ;api.c: 423: }
 38632                           
 38633                           ;api.c: 422: break;
 38634  013BB2  D008               	goto	l2255
 38635  013BB4                     l2253:
 38636                           
 38637                           ; BSR set to: 0
 38638                           
 38639                           ; BSR set to: 0
 38640  013BB4  C0AA  FFD9         	movff	__parse_command_long@data,fsr2l
 38641  013BB8  C0AB  FFDA         	movff	__parse_command_long@data+1,fsr2h
 38642  013BBC  50DF               	movf	indf2,w,c
 38643                           
 38644                           ; Switch size 1, requested type "space"
 38645                           ; Number of cases is 1, Range of values is 144 to 144
 38646                           ; switch strategies available:
 38647                           ; Name         Instructions Cycles
 38648                           ; simple_byte            4     3 (average)
 38649                           ;	Chosen strategy is simple_byte
 38650  013BBE  0A90               	xorlw	144	; case 144
 38651  013BC0  B4D8               	btfsc	status,2,c
 38652  013BC2  D7E7               	goto	l2254
 38653  013BC4                     l2255:
 38654                           
 38655                           ; BSR set to: 0
 38656                           ;api.c: 427: return length;
 38657                           
 38658                           ; BSR set to: 0
 38659  013BC4  51B0               	movf	__parse_command_long@length& (0+255),w,b
 38660  013BC6  0012               	return	
 38661  013BC8                     __end_of__parse_command_long:
 38662                           	opt stack 0
 38663                           tosu	equ	0xFFF
 38664                           tosh	equ	0xFFE
 38665                           tosl	equ	0xFFD
 38666                           pclath	equ	0xFFA
 38667                           tblptru	equ	0xFF8
 38668                           tblptrh	equ	0xFF7
 38669                           tblptrl	equ	0xFF6
 38670                           tablat	equ	0xFF5
 38671                           prodh	equ	0xFF4
 38672                           prodl	equ	0xFF3
 38673                           intcon	equ	0xFF2
 38674                           indf0	equ	0xFEF
 38675                           postinc0	equ	0xFEE
 38676                           fsr0h	equ	0xFEA
 38677                           fsr0l	equ	0xFE9
 38678                           wreg	equ	0xFE8
 38679                           indf1	equ	0xFE7
 38680                           postinc1	equ	0xFE6
 38681                           postdec1	equ	0xFE5
 38682                           plusw1	equ	0xFE3
 38683                           fsr1h	equ	0xFE2
 38684                           fsr1l	equ	0xFE1
 38685                           indf2	equ	0xFDF
 38686                           postinc2	equ	0xFDE
 38687                           postdec2	equ	0xFDD
 38688                           plusw2	equ	0xFDB
 38689                           fsr2h	equ	0xFDA
 38690                           fsr2l	equ	0xFD9
 38691                           status	equ	0xFD8
 38692                           
 38693 ;; *************** function __parse_jump_steps *****************
 38694 ;; Defined at:
 38695 ;;		line 453 in file "api.c"
 38696 ;; Parameters:    Size  Location     Type
 38697 ;;  data            2   62[BANK0 ] PTR unsigned char 
 38698 ;;		 -> ReceivedDataBuffer(64), 
 38699 ;;  out_buffer      2   64[BANK0 ] PTR unsigned char 
 38700 ;;		 -> ToSendDataBuffer(64), 
 38701 ;;  out_idx_ptr     2   66[BANK0 ] PTR unsigned char 
 38702 ;;		 -> api_parse@out_idx(1), 
 38703 ;; Auto vars:     Size  Location     Type
 38704 ;;  number_of_st    4   70[BANK0 ] long 
 38705 ;;  return_value    1   69[BANK0 ] unsigned char 
 38706 ;; Return value:  Size  Location     Type
 38707 ;;                  1    wreg      unsigned char 
 38708 ;; Registers used:
 38709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 38710 ;; Tracked objects:
 38711 ;;		On entry : 0/0
 38712 ;;		On exit  : 0/0
 38713 ;;		Unchanged: 0/0
 38714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 38715 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38716 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38718 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38719 ;;Total ram usage:       12 bytes
 38720 ;; Hardware stack levels used:    1
 38721 ;; Hardware stack levels required when called:   12
 38722 ;; This function calls:
 38723 ;;		_motor_schedule_command
 38724 ;; This function is called by:
 38725 ;;		__parse_command_long
 38726 ;; This function uses a non-reentrant model
 38727 ;;
 38728                           
 38729                           	psect	text151
 38730  00F1F0                     __ptext151:
 38731                           	opt stack 0
 38732  00F1F0                     __parse_jump_steps:
 38733                           	opt stack 15
 38734                           
 38735                           ;api.c: 457: uint8_t return_value;;api.c: 458: int32_t number_of_steps;;api.c: 460: numb
      +                          er_of_steps = data[1];
 38736                           
 38737                           ; BSR set to: 0
 38738                           ;incstack = 0
 38739  00F1F0  0100               	movlb	0	; () banked
 38740  00F1F2  EE20 F001          	lfsr	2,1
 38741  00F1F6  519E               	movf	__parse_jump_steps@data& (0+255),w,b
 38742  00F1F8  26D9               	addwf	fsr2l,f,c
 38743  00F1FA  519F               	movf	(__parse_jump_steps@data+1)& (0+255),w,b
 38744  00F1FC  22DA               	addwfc	fsr2h,f,c
 38745  00F1FE  50DF               	movf	indf2,w,c
 38746  00F200  6FA4               	movwf	??__parse_jump_steps& (0+255),b
 38747  00F202  51A4               	movf	??__parse_jump_steps& (0+255),w,b
 38748  00F204  6FA6               	movwf	__parse_jump_steps@number_of_steps& (0+255),b
 38749  00F206  6BA7               	clrf	(__parse_jump_steps@number_of_steps+1)& (0+255),b
 38750  00F208  6BA8               	clrf	(__parse_jump_steps@number_of_steps+2)& (0+255),b
 38751  00F20A  6BA9               	clrf	(__parse_jump_steps@number_of_steps+3)& (0+255),b
 38752                           
 38753                           ; BSR set to: 0
 38754                           ;api.c: 461: number_of_steps <<= 8;
 38755  00F20C  C0A8  F0A9         	movff	__parse_jump_steps@number_of_steps+2,__parse_jump_steps@number_of_steps+3
 38756  00F210  C0A7  F0A8         	movff	__parse_jump_steps@number_of_steps+1,__parse_jump_steps@number_of_steps+2
 38757  00F214  C0A6  F0A7         	movff	__parse_jump_steps@number_of_steps,__parse_jump_steps@number_of_steps+1
 38758  00F218  6BA6               	clrf	__parse_jump_steps@number_of_steps& (0+255),b
 38759                           
 38760                           ; BSR set to: 0
 38761                           ;api.c: 462: number_of_steps |= data[2];
 38762  00F21A  EE20 F002          	lfsr	2,2
 38763  00F21E  519E               	movf	__parse_jump_steps@data& (0+255),w,b
 38764  00F220  26D9               	addwf	fsr2l,f,c
 38765  00F222  519F               	movf	(__parse_jump_steps@data+1)& (0+255),w,b
 38766  00F224  22DA               	addwfc	fsr2h,f,c
 38767  00F226  50DF               	movf	indf2,w,c
 38768  00F228  6FA4               	movwf	??__parse_jump_steps& (0+255),b
 38769  00F22A  51A4               	movf	??__parse_jump_steps& (0+255),w,b
 38770  00F22C  13A6               	iorwf	__parse_jump_steps@number_of_steps& (0+255),f,b
 38771                           
 38772                           ;api.c: 463: number_of_steps <<= 8;
 38773  00F22E  C0A8  F0A9         	movff	__parse_jump_steps@number_of_steps+2,__parse_jump_steps@number_of_steps+3
 38774  00F232  C0A7  F0A8         	movff	__parse_jump_steps@number_of_steps+1,__parse_jump_steps@number_of_steps+2
 38775  00F236  C0A6  F0A7         	movff	__parse_jump_steps@number_of_steps,__parse_jump_steps@number_of_steps+1
 38776  00F23A  6BA6               	clrf	__parse_jump_steps@number_of_steps& (0+255),b
 38777                           
 38778                           ; BSR set to: 0
 38779                           ;api.c: 464: number_of_steps |= data[3];
 38780  00F23C  EE20 F003          	lfsr	2,3
 38781  00F240  519E               	movf	__parse_jump_steps@data& (0+255),w,b
 38782  00F242  26D9               	addwf	fsr2l,f,c
 38783  00F244  519F               	movf	(__parse_jump_steps@data+1)& (0+255),w,b
 38784  00F246  22DA               	addwfc	fsr2h,f,c
 38785  00F248  50DF               	movf	indf2,w,c
 38786  00F24A  6FA4               	movwf	??__parse_jump_steps& (0+255),b
 38787  00F24C  51A4               	movf	??__parse_jump_steps& (0+255),w,b
 38788  00F24E  13A6               	iorwf	__parse_jump_steps@number_of_steps& (0+255),f,b
 38789                           
 38790                           ; BSR set to: 0
 38791                           ;api.c: 465: number_of_steps <<= 8;
 38792  00F250  C0A8  F0A9         	movff	__parse_jump_steps@number_of_steps+2,__parse_jump_steps@number_of_steps+3
 38793  00F254  C0A7  F0A8         	movff	__parse_jump_steps@number_of_steps+1,__parse_jump_steps@number_of_steps+2
 38794  00F258  C0A6  F0A7         	movff	__parse_jump_steps@number_of_steps,__parse_jump_steps@number_of_steps+1
 38795  00F25C  6BA6               	clrf	__parse_jump_steps@number_of_steps& (0+255),b
 38796                           
 38797                           ;api.c: 466: number_of_steps |= data[4];
 38798  00F25E  EE20 F004          	lfsr	2,4
 38799  00F262  519E               	movf	__parse_jump_steps@data& (0+255),w,b
 38800  00F264  26D9               	addwf	fsr2l,f,c
 38801  00F266  519F               	movf	(__parse_jump_steps@data+1)& (0+255),w,b
 38802  00F268  22DA               	addwfc	fsr2h,f,c
 38803  00F26A  50DF               	movf	indf2,w,c
 38804  00F26C  6FA4               	movwf	??__parse_jump_steps& (0+255),b
 38805  00F26E  51A4               	movf	??__parse_jump_steps& (0+255),w,b
 38806  00F270  13A6               	iorwf	__parse_jump_steps@number_of_steps& (0+255),f,b
 38807                           
 38808                           ; BSR set to: 0
 38809                           ;api.c: 468: if(number_of_steps>0)
 38810  00F272  BFA9               	btfsc	(__parse_jump_steps@number_of_steps+3)& (0+255),7,b
 38811  00F274  D017               	goto	l2259
 38812  00F276  51A9               	movf	(__parse_jump_steps@number_of_steps+3)& (0+255),w,b
 38813  00F278  11A8               	iorwf	(__parse_jump_steps@number_of_steps+2)& (0+255),w,b
 38814  00F27A  11A7               	iorwf	(__parse_jump_steps@number_of_steps+1)& (0+255),w,b
 38815  00F27C  E103               	bnz	u19870
 38816  00F27E  05A6               	decf	__parse_jump_steps@number_of_steps& (0+255),w,b
 38817  00F280  A0D8               	btfss	status,0,c
 38818  00F282  D010               	goto	l2259
 38819  00F284                     u19870:
 38820                           
 38821                           ; BSR set to: 0
 38822                           ;api.c: 469: {;api.c: 470: return_value = motor_schedule_command(MOTOR_DIRECTION_CW, (ui
      +                          nt32_t) number_of_steps, 0);
 38823  00F284  C0A6  F097         	movff	__parse_jump_steps@number_of_steps,motor_schedule_command@distance_in_steps
 38824  00F288  C0A7  F098         	movff	__parse_jump_steps@number_of_steps+1,motor_schedule_command@distance_in_steps+1
 38825  00F28C  C0A8  F099         	movff	__parse_jump_steps@number_of_steps+2,motor_schedule_command@distance_in_steps+2
 38826  00F290  C0A9  F09A         	movff	__parse_jump_steps@number_of_steps+3,motor_schedule_command@distance_in_steps+3
 38827  00F294  0E00               	movlw	0
 38828  00F296  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38829  00F298  0E00               	movlw	0
 38830  00F29A  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38831  00F29C  0E01               	movlw	1
 38832  00F29E  ECCE  F08F         	call	_motor_schedule_command
 38833  00F2A2  D017               	goto	L64
 38834  00F2A4                     l2259:
 38835                           
 38836                           ; BSR set to: 0
 38837                           ;api.c: 472: else;api.c: 473: {;api.c: 474: number_of_steps = -number_of_steps;
 38838                           
 38839                           ; BSR set to: 0
 38840  00F2A4  1FA9               	comf	(__parse_jump_steps@number_of_steps+3)& (0+255),f,b
 38841  00F2A6  1FA8               	comf	(__parse_jump_steps@number_of_steps+2)& (0+255),f,b
 38842  00F2A8  1FA7               	comf	(__parse_jump_steps@number_of_steps+1)& (0+255),f,b
 38843  00F2AA  6DA6               	negf	__parse_jump_steps@number_of_steps& (0+255),b
 38844  00F2AC  0E00               	movlw	0
 38845  00F2AE  23A7               	addwfc	(__parse_jump_steps@number_of_steps+1)& (0+255),f,b
 38846  00F2B0  23A8               	addwfc	(__parse_jump_steps@number_of_steps+2)& (0+255),f,b
 38847  00F2B2  23A9               	addwfc	(__parse_jump_steps@number_of_steps+3)& (0+255),f,b
 38848                           
 38849                           ; BSR set to: 0
 38850                           ;api.c: 475: return_value = motor_schedule_command(MOTOR_DIRECTION_CCW, (uint32_t) numbe
      +                          r_of_steps, 0);
 38851  00F2B4  C0A6  F097         	movff	__parse_jump_steps@number_of_steps,motor_schedule_command@distance_in_steps
 38852  00F2B8  C0A7  F098         	movff	__parse_jump_steps@number_of_steps+1,motor_schedule_command@distance_in_steps+1
 38853  00F2BC  C0A8  F099         	movff	__parse_jump_steps@number_of_steps+2,motor_schedule_command@distance_in_steps+2
 38854  00F2C0  C0A9  F09A         	movff	__parse_jump_steps@number_of_steps+3,motor_schedule_command@distance_in_steps+3
 38855  00F2C4  0E00               	movlw	0
 38856  00F2C6  6F9C               	movwf	(motor_schedule_command@speed+1)& (0+255),b
 38857  00F2C8  0E00               	movlw	0
 38858  00F2CA  6F9B               	movwf	motor_schedule_command@speed& (0+255),b
 38859  00F2CC  0EFF               	movlw	255
 38860  00F2CE  ECCE  F08F         	call	_motor_schedule_command
 38861  00F2D2                     L64:
 38862  00F2D2  0100               	movlb	0	; () banked
 38863  00F2D4  6FA5               	movwf	__parse_jump_steps@return_value& (0+255),b
 38864                           
 38865                           ; BSR set to: 0
 38866                           ;api.c: 476: };api.c: 479: if(((*out_idx_ptr)>0) && ((*out_idx_ptr)<63))
 38867                           
 38868                           ; BSR set to: 0
 38869  00F2D6  C0A2  FFD9         	movff	__parse_jump_steps@out_idx_ptr,fsr2l
 38870  00F2DA  C0A3  FFDA         	movff	__parse_jump_steps@out_idx_ptr+1,fsr2h
 38871  00F2DE  50DF               	movf	indf2,w,c
 38872  00F2E0  B4D8               	btfsc	status,2,c
 38873  00F2E2  D02B               	goto	l2261
 38874                           
 38875                           ; BSR set to: 0
 38876  00F2E4  C0A2  FFD9         	movff	__parse_jump_steps@out_idx_ptr,fsr2l
 38877  00F2E8  C0A3  FFDA         	movff	__parse_jump_steps@out_idx_ptr+1,fsr2h
 38878  00F2EC  0E3F               	movlw	63
 38879  00F2EE  60DF               	cpfslt	indf2,c
 38880  00F2F0  D024               	goto	l2261
 38881                           
 38882                           ; BSR set to: 0
 38883                           ;api.c: 480: {;api.c: 481: out_buffer[(*out_idx_ptr)++] = COMMAND_JUMP_STEPS;
 38884  00F2F2  C0A2  FFD9         	movff	__parse_jump_steps@out_idx_ptr,fsr2l
 38885  00F2F6  C0A3  FFDA         	movff	__parse_jump_steps@out_idx_ptr+1,fsr2h
 38886  00F2FA  CFDF F0A4          	movff	indf2,??__parse_jump_steps
 38887  00F2FE  0E01               	movlw	1
 38888  00F300  26DF               	addwf	indf2,f,c
 38889  00F302  51A4               	movf	??__parse_jump_steps& (0+255),w,b
 38890  00F304  0D01               	mullw	1
 38891  00F306  50F3               	movf	prodl,w,c
 38892  00F308  25A0               	addwf	__parse_jump_steps@out_buffer& (0+255),w,b
 38893  00F30A  6ED9               	movwf	fsr2l,c
 38894  00F30C  50F4               	movf	prodh,w,c
 38895  00F30E  21A1               	addwfc	(__parse_jump_steps@out_buffer+1)& (0+255),w,b
 38896  00F310  6EDA               	movwf	fsr2h,c
 38897  00F312  0E90               	movlw	144
 38898  00F314  6EDF               	movwf	indf2,c
 38899                           
 38900                           ;api.c: 482: out_buffer[(*out_idx_ptr)++] = return_value;
 38901  00F316  C0A2  FFD9         	movff	__parse_jump_steps@out_idx_ptr,fsr2l
 38902  00F31A  C0A3  FFDA         	movff	__parse_jump_steps@out_idx_ptr+1,fsr2h
 38903  00F31E  CFDF F0A4          	movff	indf2,??__parse_jump_steps
 38904  00F322  0E01               	movlw	1
 38905  00F324  26DF               	addwf	indf2,f,c
 38906  00F326  51A4               	movf	??__parse_jump_steps& (0+255),w,b
 38907  00F328  0D01               	mullw	1
 38908  00F32A  50F3               	movf	prodl,w,c
 38909  00F32C  25A0               	addwf	__parse_jump_steps@out_buffer& (0+255),w,b
 38910  00F32E  6ED9               	movwf	fsr2l,c
 38911  00F330  50F4               	movf	prodh,w,c
 38912  00F332  21A1               	addwfc	(__parse_jump_steps@out_buffer+1)& (0+255),w,b
 38913  00F334  6EDA               	movwf	fsr2h,c
 38914  00F336  C0A5  FFDF         	movff	__parse_jump_steps@return_value,indf2
 38915  00F33A                     l2261:
 38916                           
 38917                           ; BSR set to: 0
 38918                           ;api.c: 483: };api.c: 485: return 5;
 38919                           
 38920                           ; BSR set to: 0
 38921  00F33A  0E05               	movlw	5
 38922  00F33C  0012               	return	
 38923  00F33E                     __end_of__parse_jump_steps:
 38924                           	opt stack 0
 38925                           tosu	equ	0xFFF
 38926                           tosh	equ	0xFFE
 38927                           tosl	equ	0xFFD
 38928                           pclath	equ	0xFFA
 38929                           tblptru	equ	0xFF8
 38930                           tblptrh	equ	0xFF7
 38931                           tblptrl	equ	0xFF6
 38932                           tablat	equ	0xFF5
 38933                           prodh	equ	0xFF4
 38934                           prodl	equ	0xFF3
 38935                           intcon	equ	0xFF2
 38936                           indf0	equ	0xFEF
 38937                           postinc0	equ	0xFEE
 38938                           fsr0h	equ	0xFEA
 38939                           fsr0l	equ	0xFE9
 38940                           wreg	equ	0xFE8
 38941                           indf1	equ	0xFE7
 38942                           postinc1	equ	0xFE6
 38943                           postdec1	equ	0xFE5
 38944                           plusw1	equ	0xFE3
 38945                           fsr1h	equ	0xFE2
 38946                           fsr1l	equ	0xFE1
 38947                           indf2	equ	0xFDF
 38948                           postinc2	equ	0xFDE
 38949                           postdec2	equ	0xFDD
 38950                           plusw2	equ	0xFDB
 38951                           fsr2h	equ	0xFDA
 38952                           fsr2l	equ	0xFD9
 38953                           status	equ	0xFD8
 38954                           
 38955 ;; *************** function _motor_schedule_command *****************
 38956 ;; Defined at:
 38957 ;;		line 99 in file "motor.c"
 38958 ;; Parameters:    Size  Location     Type
 38959 ;;  direction       1    wreg     enum E6622
 38960 ;;  distance_in_    4   55[BANK0 ] unsigned long 
 38961 ;;  speed           2   59[BANK0 ] unsigned int 
 38962 ;; Auto vars:     Size  Location     Type
 38963 ;;  direction       1   61[BANK0 ] enum E6622
 38964 ;; Return value:  Size  Location     Type
 38965 ;;                  1    wreg      unsigned char 
 38966 ;; Registers used:
 38967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 38968 ;; Tracked objects:
 38969 ;;		On entry : 0/0
 38970 ;;		On exit  : 0/0
 38971 ;;		Unchanged: 0/0
 38972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 38973 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38976 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 38977 ;;Total ram usage:        7 bytes
 38978 ;; Hardware stack levels used:    1
 38979 ;; Hardware stack levels required when called:   11
 38980 ;; This function calls:
 38981 ;;		__motor_run
 38982 ;;		_motor_items_in_cue
 38983 ;; This function is called by:
 38984 ;;		__parse_command_short
 38985 ;;		__parse_jump_steps
 38986 ;;		_motor_go_to_steps_position
 38987 ;;		_motor_arc_move
 38988 ;;		_encoder_statemachine
 38989 ;; This function uses a non-reentrant model
 38990 ;;
 38991                           
 38992                           	psect	text152
 38993  011F9C                     __ptext152:
 38994                           	opt stack 0
 38995  011F9C                     _motor_schedule_command:
 38996                           	opt stack 18
 38997                           
 38998                           ; BSR set to: 0
 38999                           ;incstack = 0
 39000                           ;motor_schedule_command@direction stored from wreg
 39001  011F9C  0100               	movlb	0	; () banked
 39002  011F9E  6F9D               	movwf	motor_schedule_command@direction& (0+255),b
 39003                           
 39004                           ;motor.c: 101: if((motor_items_in_cue()==0) && (os.busy==0))
 39005  011FA0  EC8B  F0A1         	call	_motor_items_in_cue	;wreg free
 39006  011FA4  0900               	iorlw	0
 39007  011FA6  A4D8               	btfss	status,2,c
 39008  011FA8  D016               	goto	l2353
 39009  011FAA  0101               	movlb	1	; () banked
 39010  011FAC  5181               	movf	(_os+14)& (0+255),w,b	;volatile
 39011  011FAE  A4D8               	btfss	status,2,c
 39012  011FB0  D012               	goto	l2353
 39013                           
 39014                           ; BSR set to: 1
 39015                           ;motor.c: 102: {;motor.c: 105: _motor_run(direction, distance_in_steps, speed);
 39016  011FB2  C097  F060         	movff	motor_schedule_command@distance_in_steps,__motor_run@distance_in_steps
 39017  011FB6  C098  F061         	movff	motor_schedule_command@distance_in_steps+1,__motor_run@distance_in_steps+1
 39018  011FBA  C099  F062         	movff	motor_schedule_command@distance_in_steps+2,__motor_run@distance_in_steps+2
 39019  011FBE  C09A  F063         	movff	motor_schedule_command@distance_in_steps+3,__motor_run@distance_in_steps+3
 39020  011FC2  C09B  F064         	movff	motor_schedule_command@speed,__motor_run@speed
 39021  011FC6  C09C  F065         	movff	motor_schedule_command@speed+1,__motor_run@speed+1
 39022  011FCA  0100               	movlb	0	; () banked
 39023  011FCC  519D               	movf	motor_schedule_command@direction& (0+255),w,b
 39024  011FCE  EC34  F072         	call	__motor_run
 39025                           
 39026                           ;motor.c: 107: return 1;
 39027  011FD2  0E01               	movlw	1
 39028  011FD4  0012               	return	
 39029  011FD6                     l2353:
 39030                           
 39031                           ;motor.c: 108: };motor.c: 109: if(motor_items_in_cue()==8-1)
 39032  011FD6  EC8B  F0A1         	call	_motor_items_in_cue	;wreg free
 39033  011FDA  0A07               	xorlw	7
 39034  011FDC  A4D8               	btfss	status,2,c
 39035  011FDE  D002               	goto	l2355
 39036                           
 39037                           ;motor.c: 110: {;motor.c: 113: return 0;
 39038  011FE0  0E00               	movlw	0
 39039                           
 39040                           ;motor.c: 114: }
 39041  011FE2  0012               	return	
 39042  011FE4                     l2355:
 39043                           
 39044                           ;motor.c: 115: else;motor.c: 116: {;motor.c: 118: motor_command_cue[motor_cue_write_inde
      +                          x].direction = direction;
 39045  011FE4  0100               	movlb	0	; () banked
 39046  011FE6  51F2               	movf	_motor_cue_write_index& (0+255),w,b
 39047  011FE8  0D07               	mullw	7
 39048  011FEA  0E00               	movlw	low _motor_command_cue
 39049  011FEC  24F3               	addwf	prodl,w,c
 39050  011FEE  6ED9               	movwf	fsr2l,c
 39051  011FF0  0E02               	movlw	high _motor_command_cue
 39052  011FF2  20F4               	addwfc	prodh,w,c
 39053  011FF4  6EDA               	movwf	fsr2h,c
 39054  011FF6  C09D  FFDF         	movff	motor_schedule_command@direction,indf2
 39055                           
 39056                           ;motor.c: 119: motor_command_cue[motor_cue_write_index].distance = distance_in_steps;
 39057  011FFA  51F2               	movf	_motor_cue_write_index& (0+255),w,b
 39058  011FFC  0D07               	mullw	7
 39059  011FFE  0E01               	movlw	1
 39060  012000  26F3               	addwf	prodl,f,c
 39061  012002  0E00               	movlw	0
 39062  012004  22F4               	addwfc	prodh,f,c
 39063  012006  0E00               	movlw	low _motor_command_cue
 39064  012008  24F3               	addwf	prodl,w,c
 39065  01200A  6ED9               	movwf	fsr2l,c
 39066  01200C  0E02               	movlw	high _motor_command_cue
 39067  01200E  20F4               	addwfc	prodh,w,c
 39068  012010  6EDA               	movwf	fsr2h,c
 39069  012012  C097  FFDE         	movff	motor_schedule_command@distance_in_steps,postinc2
 39070  012016  C098  FFDE         	movff	motor_schedule_command@distance_in_steps+1,postinc2
 39071  01201A  C099  FFDE         	movff	motor_schedule_command@distance_in_steps+2,postinc2
 39072  01201E  C09A  FFDE         	movff	motor_schedule_command@distance_in_steps+3,postinc2
 39073                           
 39074                           ;motor.c: 120: motor_command_cue[motor_cue_write_index].speed = speed;
 39075  012022  51F2               	movf	_motor_cue_write_index& (0+255),w,b
 39076  012024  0D07               	mullw	7
 39077  012026  0E05               	movlw	5
 39078  012028  26F3               	addwf	prodl,f,c
 39079  01202A  0E00               	movlw	0
 39080  01202C  22F4               	addwfc	prodh,f,c
 39081  01202E  0E00               	movlw	low _motor_command_cue
 39082  012030  24F3               	addwf	prodl,w,c
 39083  012032  6ED9               	movwf	fsr2l,c
 39084  012034  0E02               	movlw	high _motor_command_cue
 39085  012036  20F4               	addwfc	prodh,w,c
 39086  012038  6EDA               	movwf	fsr2h,c
 39087  01203A  C09B  FFDE         	movff	motor_schedule_command@speed,postinc2
 39088  01203E  C09C  FFDD         	movff	motor_schedule_command@speed+1,postdec2
 39089                           
 39090                           ; BSR set to: 0
 39091                           ;motor.c: 122: ++motor_cue_write_index;
 39092  012042  2BF2               	incf	_motor_cue_write_index& (0+255),f,b
 39093                           
 39094                           ; BSR set to: 0
 39095                           ;motor.c: 124: return 1;
 39096  012044  0E01               	movlw	1
 39097                           
 39098                           ; BSR set to: 0
 39099  012046  0012               	return	
 39100  012048                     __end_of_motor_schedule_command:
 39101                           	opt stack 0
 39102                           tosu	equ	0xFFF
 39103                           tosh	equ	0xFFE
 39104                           tosl	equ	0xFFD
 39105                           pclath	equ	0xFFA
 39106                           tblptru	equ	0xFF8
 39107                           tblptrh	equ	0xFF7
 39108                           tblptrl	equ	0xFF6
 39109                           tablat	equ	0xFF5
 39110                           prodh	equ	0xFF4
 39111                           prodl	equ	0xFF3
 39112                           intcon	equ	0xFF2
 39113                           indf0	equ	0xFEF
 39114                           postinc0	equ	0xFEE
 39115                           fsr0h	equ	0xFEA
 39116                           fsr0l	equ	0xFE9
 39117                           wreg	equ	0xFE8
 39118                           indf1	equ	0xFE7
 39119                           postinc1	equ	0xFE6
 39120                           postdec1	equ	0xFE5
 39121                           plusw1	equ	0xFE3
 39122                           fsr1h	equ	0xFE2
 39123                           fsr1l	equ	0xFE1
 39124                           indf2	equ	0xFDF
 39125                           postinc2	equ	0xFDE
 39126                           postdec2	equ	0xFDD
 39127                           plusw2	equ	0xFDB
 39128                           fsr2h	equ	0xFDA
 39129                           fsr2l	equ	0xFD9
 39130                           status	equ	0xFD8
 39131                           
 39132 ;; *************** function _motor_items_in_cue *****************
 39133 ;; Defined at:
 39134 ;;		line 94 in file "motor.c"
 39135 ;; Parameters:    Size  Location     Type
 39136 ;;		None
 39137 ;; Auto vars:     Size  Location     Type
 39138 ;;		None
 39139 ;; Return value:  Size  Location     Type
 39140 ;;                  1    wreg      unsigned char 
 39141 ;; Registers used:
 39142 ;;		wreg, status,2, status,0
 39143 ;; Tracked objects:
 39144 ;;		On entry : 0/0
 39145 ;;		On exit  : 0/0
 39146 ;;		Unchanged: 0/0
 39147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 39148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39152 ;;Total ram usage:        0 bytes
 39153 ;; Hardware stack levels used:    1
 39154 ;; Hardware stack levels required when called:   10
 39155 ;; This function calls:
 39156 ;;		Nothing
 39157 ;; This function is called by:
 39158 ;;		_motor_schedule_command
 39159 ;;		_motor_process_cue
 39160 ;; This function uses a non-reentrant model
 39161 ;;
 39162                           
 39163                           	psect	text153
 39164  014316                     __ptext153:
 39165                           	opt stack 0
 39166  014316                     _motor_items_in_cue:
 39167                           	opt stack 19
 39168                           
 39169                           ;motor.c: 96: return ((motor_cue_write_index-motor_cue_read_index) & 0b111);
 39170                           
 39171                           ;incstack = 0
 39172  014316  0100               	movlb	0	; () banked
 39173  014318  51F3               	movf	_motor_cue_read_index& (0+255),w,b
 39174  01431A  0800               	sublw	0
 39175  01431C  25F2               	addwf	_motor_cue_write_index& (0+255),w,b
 39176  01431E  0B07               	andlw	7
 39177  014320  0012               	return	
 39178  014322                     __end_of_motor_items_in_cue:
 39179                           	opt stack 0
 39180                           tosu	equ	0xFFF
 39181                           tosh	equ	0xFFE
 39182                           tosl	equ	0xFFD
 39183                           pclath	equ	0xFFA
 39184                           tblptru	equ	0xFF8
 39185                           tblptrh	equ	0xFF7
 39186                           tblptrl	equ	0xFF6
 39187                           tablat	equ	0xFF5
 39188                           prodh	equ	0xFF4
 39189                           prodl	equ	0xFF3
 39190                           intcon	equ	0xFF2
 39191                           indf0	equ	0xFEF
 39192                           postinc0	equ	0xFEE
 39193                           fsr0h	equ	0xFEA
 39194                           fsr0l	equ	0xFE9
 39195                           wreg	equ	0xFE8
 39196                           indf1	equ	0xFE7
 39197                           postinc1	equ	0xFE6
 39198                           postdec1	equ	0xFE5
 39199                           plusw1	equ	0xFE3
 39200                           fsr1h	equ	0xFE2
 39201                           fsr1l	equ	0xFE1
 39202                           indf2	equ	0xFDF
 39203                           postinc2	equ	0xFDE
 39204                           postdec2	equ	0xFDD
 39205                           plusw2	equ	0xFDB
 39206                           fsr2h	equ	0xFDA
 39207                           fsr2l	equ	0xFD9
 39208                           status	equ	0xFD8
 39209                           
 39210 ;; *************** function __motor_run *****************
 39211 ;; Defined at:
 39212 ;;		line 177 in file "motor.c"
 39213 ;; Parameters:    Size  Location     Type
 39214 ;;  direction       1    wreg     enum E6622
 39215 ;;  distance_in_    4    0[BANK0 ] unsigned long 
 39216 ;;  speed           2    4[BANK0 ] unsigned int 
 39217 ;; Auto vars:     Size  Location     Type
 39218 ;;  direction       1   10[BANK0 ] enum E6622
 39219 ;; Return value:  Size  Location     Type
 39220 ;;                  1    wreg      void 
 39221 ;; Registers used:
 39222 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 39223 ;; Tracked objects:
 39224 ;;		On entry : 0/0
 39225 ;;		On exit  : 0/0
 39226 ;;		Unchanged: 0/0
 39227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 39228 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39230 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39231 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39232 ;;Total ram usage:       11 bytes
 39233 ;; Hardware stack levels used:    1
 39234 ;; Hardware stack levels required when called:   10
 39235 ;; This function calls:
 39236 ;;		Nothing
 39237 ;; This function is called by:
 39238 ;;		_motor_schedule_command
 39239 ;;		_motor_process_cue
 39240 ;; This function uses a non-reentrant model
 39241 ;;
 39242                           
 39243                           	psect	text154
 39244  00E468                     __ptext154:
 39245                           	opt stack 0
 39246  00E468                     __motor_run:
 39247                           	opt stack 19
 39248                           
 39249                           ; BSR set to: 0
 39250                           ;incstack = 0
 39251                           ;__motor_run@direction stored from wreg
 39252  00E468  0100               	movlb	0	; () banked
 39253  00E46A  6F6A               	movwf	__motor_run@direction& (0+255),b
 39254                           
 39255                           ;motor.c: 180: motor_direction = direction;
 39256  00E46C  C06A  F0F1         	movff	__motor_run@direction,_motor_direction
 39257                           
 39258                           ;motor.c: 183: if(distance_in_steps==0)
 39259  00E470  0100               	movlb	0	; () banked
 39260  00E472  5160               	movf	__motor_run@distance_in_steps& (0+255),w,b
 39261  00E474  1161               	iorwf	(__motor_run@distance_in_steps+1)& (0+255),w,b
 39262  00E476  1162               	iorwf	(__motor_run@distance_in_steps+2)& (0+255),w,b
 39263  00E478  1163               	iorwf	(__motor_run@distance_in_steps+3)& (0+255),w,b
 39264  00E47A  A4D8               	btfss	status,2,c
 39265  00E47C  D00A               	goto	l2369
 39266                           
 39267                           ; BSR set to: 0
 39268                           ;motor.c: 184: {;motor.c: 186: motor_final_stepcount = 0xFFFFFF00;
 39269  00E47E  0E00               	movlw	0
 39270  00E480  0101               	movlb	1	; () banked
 39271  00E482  6F42               	movwf	_motor_final_stepcount& (0+255),b	;volatile
 39272  00E484  0EFF               	movlw	255
 39273  00E486  6F43               	movwf	(_motor_final_stepcount+1)& (0+255),b	;volatile
 39274  00E488  0EFF               	movlw	255
 39275  00E48A  6F44               	movwf	(_motor_final_stepcount+2)& (0+255),b	;volatile
 39276  00E48C  0EFF               	movlw	255
 39277  00E48E  6F45               	movwf	(_motor_final_stepcount+3)& (0+255),b	;volatile
 39278                           
 39279                           ;motor.c: 187: }
 39280  00E490  D008               	goto	l2370
 39281  00E492                     l2369:
 39282                           
 39283                           ; BSR set to: 0
 39284                           ;motor.c: 188: else;motor.c: 189: {;motor.c: 190: motor_final_stepcount = distance_in_st
      +                          eps;
 39285  00E492  C060  F142         	movff	__motor_run@distance_in_steps,_motor_final_stepcount	;volatile
 39286  00E496  C061  F143         	movff	__motor_run@distance_in_steps+1,_motor_final_stepcount+1	;volatile
 39287  00E49A  C062  F144         	movff	__motor_run@distance_in_steps+2,_motor_final_stepcount+2	;volatile
 39288  00E49E  C063  F145         	movff	__motor_run@distance_in_steps+3,_motor_final_stepcount+3	;volatile
 39289  00E4A2                     l2370:
 39290                           
 39291                           ;motor.c: 192: };motor.c: 195: if(speed==0)
 39292                           
 39293                           ; BSR set to: 0
 39294  00E4A2  0100               	movlb	0	; () banked
 39295  00E4A4  5164               	movf	__motor_run@speed& (0+255),w,b
 39296  00E4A6  1165               	iorwf	(__motor_run@speed+1)& (0+255),w,b
 39297  00E4A8  A4D8               	btfss	status,2,c
 39298  00E4AA  D005               	goto	l2371
 39299                           
 39300                           ; BSR set to: 0
 39301                           ;motor.c: 196: {;motor.c: 197: motor_maximum_speed = config.maximum_speed;
 39302  00E4AC  C1AE  F162         	movff	_config+11,_motor_maximum_speed
 39303  00E4B0  C1AF  F163         	movff	_config+12,_motor_maximum_speed+1
 39304                           
 39305                           ;motor.c: 198: }
 39306  00E4B4  D004               	goto	l2372
 39307  00E4B6                     l2371:
 39308                           
 39309                           ; BSR set to: 0
 39310                           ;motor.c: 199: else;motor.c: 200: {;motor.c: 201: motor_maximum_speed = speed;
 39311  00E4B6  C064  F162         	movff	__motor_run@speed,_motor_maximum_speed
 39312  00E4BA  C065  F163         	movff	__motor_run@speed+1,_motor_maximum_speed+1
 39313  00E4BE                     l2372:
 39314                           
 39315                           ; BSR set to: 0
 39316                           ;motor.c: 202: };motor.c: 205: motor_current_speed = 0;
 39317                           
 39318                           ; BSR set to: 0
 39319  00E4BE  0E00               	movlw	0
 39320  00E4C0  6FEA               	movwf	(_motor_current_speed+1)& (0+255),b	;volatile
 39321  00E4C2  0E00               	movlw	0
 39322  00E4C4  6FE9               	movwf	_motor_current_speed& (0+255),b	;volatile
 39323                           
 39324                           ;motor.c: 206: motor_current_stepcount = 0;
 39325  00E4C6  0E00               	movlw	0
 39326  00E4C8  6E16               	movwf	_motor_current_stepcount,c	;volatile
 39327  00E4CA  0E00               	movlw	0
 39328  00E4CC  6E17               	movwf	_motor_current_stepcount+1,c	;volatile
 39329  00E4CE  0E00               	movlw	0
 39330  00E4D0  6E18               	movwf	_motor_current_stepcount+2,c	;volatile
 39331  00E4D2  0E00               	movlw	0
 39332  00E4D4  6E19               	movwf	_motor_current_stepcount+3,c	;volatile
 39333                           
 39334                           ; BSR set to: 0
 39335                           ;motor.c: 208: motor_next_speed_check = motor_steps_lookup[1];
 39336  00E4D6  0E63               	movlw	low (_motor_steps_lookup+2)
 39337  00E4D8  6EF6               	movwf	tblptrl,c
 39338  00E4DA  0E94               	movlw	high (_motor_steps_lookup+2)
 39339  00E4DC  6EF7               	movwf	tblptrh,c
 39340  00E4DE                     	if	0	;tblptru may be non-zero
 39341  00E4DE                     	endif
 39342  00E4DE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 39343  00E4DE  0E00               	movlw	low (__mediumconst shr (0+16))
 39344  00E4E0  6EF8               	movwf	tblptru,c
 39345  00E4E2                     	endif
 39346  00E4E2  0009               	tblrd		*+
 39347  00E4E4  CFF5 F066          	movff	tablat,??__motor_run
 39348  00E4E8  0009               	tblrd		*+
 39349  00E4EA  CFF5 F067          	movff	tablat,??__motor_run+1
 39350  00E4EE  C066  F13E         	movff	??__motor_run,_motor_next_speed_check	;volatile
 39351  00E4F2  C067  F13F         	movff	??__motor_run+1,_motor_next_speed_check+1	;volatile
 39352  00E4F6  0101               	movlb	1	; () banked
 39353  00E4F8  6B40               	clrf	(_motor_next_speed_check+2)& (0+255),b	;volatile
 39354  00E4FA  6B41               	clrf	(_motor_next_speed_check+3)& (0+255),b	;volatile
 39355                           
 39356                           ; BSR set to: 1
 39357                           ;motor.c: 211: CCP1CONbits.CCP1M = 0b0000;
 39358  00E4FC  90BA               	bcf	4026,0,c	;volatile
 39359  00E4FE  92BA               	bcf	4026,1,c	;volatile
 39360  00E500  94BA               	bcf	4026,2,c	;volatile
 39361  00E502  96BA               	bcf	4026,3,c	;volatile
 39362                           
 39363                           ; BSR set to: 1
 39364                           ;motor.c: 214: LATBbits.LB0 = 0;
 39365  00E504  908A               	bcf	3978,0,c	;volatile
 39366                           
 39367                           ; BSR set to: 1
 39368                           ;motor.c: 215: if(direction==MOTOR_DIRECTION_CCW)
 39369  00E506  0100               	movlb	0	; () banked
 39370  00E508  296A               	incf	__motor_run@direction& (0+255),w,b
 39371  00E50A  A4D8               	btfss	status,2,c
 39372  00E50C  D005               	goto	l2373
 39373                           
 39374                           ; BSR set to: 0
 39375                           ;motor.c: 216: {;motor.c: 217: if(config.inverse_direction)
 39376  00E50E  0101               	movlb	1	; () banked
 39377  00E510  51A7               	movf	(_config+4)& (0+255),w,b
 39378  00E512  B4D8               	btfsc	status,2,c
 39379  00E514  D005               	goto	u18530
 39380  00E516  D006               	goto	l2377
 39381  00E518                     l2373:
 39382                           
 39383                           ;motor.c: 222: else;motor.c: 223: {;motor.c: 224: if(config.inverse_direction)
 39384                           
 39385                           ; BSR set to: 1
 39386  00E518  0101               	movlb	1	; () banked
 39387  00E51A  51A7               	movf	(_config+4)& (0+255),w,b
 39388  00E51C  B4D8               	btfsc	status,2,c
 39389  00E51E  D002               	goto	l2377
 39390  00E520                     u18530:
 39391                           
 39392                           ; BSR set to: 1
 39393                           ;motor.c: 225: LATBbits.LB2 = 0;
 39394  00E520  948A               	bcf	3978,2,c	;volatile
 39395  00E522  D001               	goto	l2378
 39396  00E524                     l2377:
 39397                           
 39398                           ; BSR set to: 1
 39399                           ;motor.c: 226: else;motor.c: 227: LATBbits.LB2 = 1;
 39400  00E524  848A               	bsf	3978,2,c	;volatile
 39401  00E526                     l2378:
 39402                           
 39403                           ; BSR set to: 1
 39404                           ;motor.c: 228: };motor.c: 231: LATBbits.LB1 = 1;
 39405                           
 39406                           ; BSR set to: 1
 39407  00E526  828A               	bsf	3978,1,c	;volatile
 39408                           
 39409                           ; BSR set to: 1
 39410                           ;motor.c: 234: ++motor_current_stepcount;
 39411  00E528  0E01               	movlw	1
 39412  00E52A  2616               	addwf	_motor_current_stepcount,f,c	;volatile
 39413  00E52C  0E00               	movlw	0
 39414  00E52E  2217               	addwfc	_motor_current_stepcount+1,f,c	;volatile
 39415  00E530  2218               	addwfc	_motor_current_stepcount+2,f,c	;volatile
 39416  00E532  2219               	addwfc	_motor_current_stepcount+3,f,c	;volatile
 39417                           
 39418                           ;motor.c: 237: os.current_position_in_steps += motor_direction;
 39419  00E534  0100               	movlb	0	; () banked
 39420  00E536  51F1               	movf	_motor_direction& (0+255),w,b
 39421  00E538  6F66               	movwf	??__motor_run& (0+255),b
 39422  00E53A  0E00               	movlw	0
 39423  00E53C  BF66               	btfsc	??__motor_run& (0+255),7,b
 39424  00E53E  0EFF               	movlw	255
 39425  00E540  6F67               	movwf	(??__motor_run+1)& (0+255),b
 39426  00E542  6F68               	movwf	(??__motor_run+2)& (0+255),b
 39427  00E544  6F69               	movwf	(??__motor_run+3)& (0+255),b
 39428  00E546  5166               	movf	??__motor_run& (0+255),w,b
 39429  00E548  0101               	movlb	1	; () banked
 39430  00E54A  277A               	addwf	(_os+7)& (0+255),f,b	;volatile
 39431  00E54C  0100               	movlb	0	; () banked
 39432  00E54E  5167               	movf	(??__motor_run+1)& (0+255),w,b
 39433  00E550  0101               	movlb	1	; () banked
 39434  00E552  237B               	addwfc	(_os+8)& (0+255),f,b	;volatile
 39435  00E554  0100               	movlb	0	; () banked
 39436  00E556  5168               	movf	(??__motor_run+2)& (0+255),w,b
 39437  00E558  0101               	movlb	1	; () banked
 39438  00E55A  237C               	addwfc	(_os+9)& (0+255),f,b	;volatile
 39439  00E55C  0100               	movlb	0	; () banked
 39440  00E55E  5169               	movf	(??__motor_run+3)& (0+255),w,b
 39441  00E560  0101               	movlb	1	; () banked
 39442  00E562  237D               	addwfc	(_os+10)& (0+255),f,b	;volatile
 39443                           
 39444                           ;motor.c: 238: if(os.current_position_in_steps==config.full_circle_in_steps)
 39445  00E564  51A3               	movf	_config& (0+255),w,b
 39446  00E566  197A               	xorwf	(_os+7)& (0+255),w,b	;volatile
 39447  00E568  E112               	bnz	l18838
 39448  00E56A  51A4               	movf	(_config+1)& (0+255),w,b
 39449  00E56C  197B               	xorwf	(_os+8)& (0+255),w,b	;volatile
 39450  00E56E  E10F               	bnz	l18838
 39451  00E570  51A5               	movf	(_config+2)& (0+255),w,b
 39452  00E572  197C               	xorwf	(_os+9)& (0+255),w,b	;volatile
 39453  00E574  E10C               	bnz	l18838
 39454  00E576  51A6               	movf	(_config+3)& (0+255),w,b
 39455  00E578  197D               	xorwf	(_os+10)& (0+255),w,b	;volatile
 39456  00E57A  A4D8               	btfss	status,2,c
 39457  00E57C  D008               	goto	l2379
 39458                           
 39459                           ; BSR set to: 1
 39460                           ;motor.c: 239: os.current_position_in_steps = 0;
 39461  00E57E  0E00               	movlw	0
 39462  00E580  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 39463  00E582  0E00               	movlw	0
 39464  00E584  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 39465  00E586  0E00               	movlw	0
 39466  00E588  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 39467  00E58A  0E00               	movlw	0
 39468  00E58C  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 39469  00E58E                     l2379:
 39470  00E58E                     l18838:
 39471                           
 39472                           ; BSR set to: 1
 39473                           ;motor.c: 240: if(os.current_position_in_steps==0xFFFFFFFF)
 39474  00E58E  297A               	incf	(_os+7)& (0+255),w,b	;volatile
 39475  00E590  E113               	bnz	l18842
 39476  00E592  297B               	incf	(_os+8)& (0+255),w,b	;volatile
 39477  00E594  E111               	bnz	l18842
 39478  00E596  297C               	incf	(_os+9)& (0+255),w,b	;volatile
 39479  00E598  E10F               	bnz	l18842
 39480  00E59A  297D               	incf	(_os+10)& (0+255),w,b	;volatile
 39481  00E59C  A4D8               	btfss	status,2,c
 39482  00E59E  D00C               	goto	l2380
 39483                           
 39484                           ; BSR set to: 1
 39485                           ;motor.c: 241: os.current_position_in_steps = (config.full_circle_in_steps-1);
 39486  00E5A0  0EFF               	movlw	255
 39487  00E5A2  25A3               	addwf	_config& (0+255),w,b
 39488  00E5A4  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 39489  00E5A6  0EFF               	movlw	255
 39490  00E5A8  21A4               	addwfc	(_config+1)& (0+255),w,b
 39491  00E5AA  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 39492  00E5AC  0EFF               	movlw	255
 39493  00E5AE  21A5               	addwfc	(_config+2)& (0+255),w,b
 39494  00E5B0  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 39495  00E5B2  0EFF               	movlw	255
 39496  00E5B4  21A6               	addwfc	(_config+3)& (0+255),w,b
 39497  00E5B6  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 39498  00E5B8                     l2380:
 39499  00E5B8                     l18842:
 39500                           
 39501                           ; BSR set to: 1
 39502                           ;motor.c: 244: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 0;};
 39503  00E5B8  0E55               	movlw	85
 39504  00E5BA  6EA7               	movwf	4007,c	;volsfr
 39505                           
 39506                           ; BSR set to: 1
 39507  00E5BC  0EAA               	movlw	170
 39508  00E5BE  6EA7               	movwf	4007,c	;volsfr
 39509                           
 39510                           ; BSR set to: 1
 39511  00E5C0  010E               	movlb	14	; () banked
 39512  00E5C2  91BF               	bcf	191,0,b	;volatile
 39513                           
 39514                           ; BSR set to: 14
 39515                           ;motor.c: 245: RPOR4 = 0;
 39516  00E5C4  0E00               	movlw	0
 39517  00E5C6  6FC4               	movwf	196,b	;volatile
 39518                           
 39519                           ; BSR set to: 14
 39520                           ;motor.c: 246: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 1;};
 39521  00E5C8  0E55               	movlw	85
 39522  00E5CA  6EA7               	movwf	4007,c	;volsfr
 39523                           
 39524                           ; BSR set to: 14
 39525  00E5CC  0EAA               	movlw	170
 39526  00E5CE  6EA7               	movwf	4007,c	;volsfr
 39527                           
 39528                           ; BSR set to: 14
 39529  00E5D0  81BF               	bsf	191,0,b	;volatile
 39530                           
 39531                           ; BSR set to: 14
 39532                           ;motor.c: 249: motor_mode = MOTOR_MODE_MANUAL;
 39533  00E5D2  0E00               	movlw	0
 39534  00E5D4  6E20               	movwf	_motor_mode,c
 39535                           
 39536                           ; BSR set to: 14
 39537                           ;motor.c: 253: T2CONbits.T2CKPS = motor_prescaler_lookup[motor_current_speed];
 39538  00E5D6  0EFD               	movlw	low _motor_prescaler_lookup
 39539  00E5D8  0100               	movlb	0	; () banked
 39540  00E5DA  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 39541  00E5DC  6EF6               	movwf	tblptrl,c
 39542  00E5DE  0E9B               	movlw	high _motor_prescaler_lookup
 39543  00E5E0  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 39544  00E5E2  6EF7               	movwf	tblptrh,c
 39545  00E5E4                     	if	1	;There are 3 active tblptr bytes
 39546  00E5E4  6AF8               	clrf	tblptru,c
 39547  00E5E6  0E00               	movlw	low (__mediumconst shr (0+16))
 39548  00E5E8  22F8               	addwfc	tblptru,f,c
 39549  00E5EA                     	endif
 39550  00E5EA  0008               	tblrd		*
 39551  00E5EC  CFF5 F066          	movff	tablat,??__motor_run
 39552  00E5F0  50CA               	movf	4042,w,c	;volatile
 39553  00E5F2  1966               	xorwf	??__motor_run& (0+255),w,b
 39554  00E5F4  0BFC               	andlw	-4
 39555  00E5F6  1966               	xorwf	??__motor_run& (0+255),w,b
 39556  00E5F8  6ECA               	movwf	4042,c	;volatile
 39557                           
 39558                           ; BSR set to: 0
 39559                           ;motor.c: 255: PR2 = motor_period_lookup[motor_current_speed];
 39560  00E5FA  0E16               	movlw	low _motor_period_lookup
 39561  00E5FC  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 39562  00E5FE  6EF6               	movwf	tblptrl,c
 39563  00E600  0E9A               	movlw	high _motor_period_lookup
 39564  00E602  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 39565  00E604  6EF7               	movwf	tblptrh,c
 39566  00E606                     	if	1	;There are 3 active tblptr bytes
 39567  00E606  6AF8               	clrf	tblptru,c
 39568  00E608  0E00               	movlw	low (__mediumconst shr (0+16))
 39569  00E60A  22F8               	addwfc	tblptru,f,c
 39570  00E60C                     	endif
 39571  00E60C  0008               	tblrd		*
 39572  00E60E  CFF5 FFCB          	movff	tablat,4043	;volatile
 39573                           
 39574                           ; BSR set to: 0
 39575                           ;motor.c: 257: T2CONbits.T2OUTPS = motor_postscaler_lookup[motor_current_speed];
 39576  00E612  0E2F               	movlw	low _motor_postscaler_lookup
 39577  00E614  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 39578  00E616  6EF6               	movwf	tblptrl,c
 39579  00E618  0E98               	movlw	high _motor_postscaler_lookup
 39580  00E61A  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 39581  00E61C  6EF7               	movwf	tblptrh,c
 39582  00E61E                     	if	1	;There are 3 active tblptr bytes
 39583  00E61E  6AF8               	clrf	tblptru,c
 39584  00E620  0E00               	movlw	low (__mediumconst shr (0+16))
 39585  00E622  22F8               	addwfc	tblptru,f,c
 39586  00E624                     	endif
 39587  00E624  0008               	tblrd		*
 39588  00E626  CFF5 F066          	movff	tablat,??__motor_run
 39589  00E62A  4766               	rlncf	??__motor_run& (0+255),f,b
 39590  00E62C  4766               	rlncf	??__motor_run& (0+255),f,b
 39591  00E62E  4766               	rlncf	??__motor_run& (0+255),f,b
 39592  00E630  50CA               	movf	4042,w,c	;volatile
 39593  00E632  1966               	xorwf	??__motor_run& (0+255),w,b
 39594  00E634  0B87               	andlw	-121
 39595  00E636  1966               	xorwf	??__motor_run& (0+255),w,b
 39596  00E638  6ECA               	movwf	4042,c	;volatile
 39597                           
 39598                           ; BSR set to: 0
 39599                           ;motor.c: 259: CCPR1L = PR2>>1;
 39600  00E63A  90D8               	bcf	status,0,c
 39601  00E63C  30CB               	rrcf	4043,w,c	;volatile
 39602  00E63E  6EBB               	movwf	4027,c	;volatile
 39603                           
 39604                           ; BSR set to: 0
 39605                           ;motor.c: 262: PIR1bits.TMR2IF = 0;
 39606  00E640  929E               	bcf	3998,1,c	;volatile
 39607                           
 39608                           ; BSR set to: 0
 39609                           ;motor.c: 263: PIE1bits.TMR2IE = 1;
 39610  00E642  829D               	bsf	3997,1,c	;volatile
 39611                           
 39612                           ; BSR set to: 0
 39613                           ;motor.c: 266: TMR2 = 0;
 39614  00E644  0E00               	movlw	0
 39615  00E646  6ECC               	movwf	4044,c	;volatile
 39616                           
 39617                           ; BSR set to: 0
 39618                           ;motor.c: 267: T2CONbits.TMR2ON = 1;
 39619  00E648  84CA               	bsf	4042,2,c	;volatile
 39620                           
 39621                           ; BSR set to: 0
 39622                           ;motor.c: 270: os.busy = 1;
 39623  00E64A  0E01               	movlw	1
 39624  00E64C  0101               	movlb	1	; () banked
 39625  00E64E  6F81               	movwf	(_os+14)& (0+255),b	;volatile
 39626                           
 39627                           ; BSR set to: 1
 39628  00E650  0012               	return		;funcret
 39629  00E652                     __end_of__motor_run:
 39630                           	opt stack 0
 39631                           tosu	equ	0xFFF
 39632                           tosh	equ	0xFFE
 39633                           tosl	equ	0xFFD
 39634                           pclath	equ	0xFFA
 39635                           tblptru	equ	0xFF8
 39636                           tblptrh	equ	0xFF7
 39637                           tblptrl	equ	0xFF6
 39638                           tablat	equ	0xFF5
 39639                           prodh	equ	0xFF4
 39640                           prodl	equ	0xFF3
 39641                           intcon	equ	0xFF2
 39642                           indf0	equ	0xFEF
 39643                           postinc0	equ	0xFEE
 39644                           fsr0h	equ	0xFEA
 39645                           fsr0l	equ	0xFE9
 39646                           wreg	equ	0xFE8
 39647                           indf1	equ	0xFE7
 39648                           postinc1	equ	0xFE6
 39649                           postdec1	equ	0xFE5
 39650                           plusw1	equ	0xFE3
 39651                           fsr1h	equ	0xFE2
 39652                           fsr1l	equ	0xFE1
 39653                           indf2	equ	0xFDF
 39654                           postinc2	equ	0xFDE
 39655                           postdec2	equ	0xFDD
 39656                           plusw2	equ	0xFDB
 39657                           fsr2h	equ	0xFDA
 39658                           fsr2l	equ	0xFD9
 39659                           status	equ	0xFD8
 39660                           
 39661 ;; *************** function _USBTransferOnePacket *****************
 39662 ;; Defined at:
 39663 ;;		line 995 in file "usb_device.c"
 39664 ;; Parameters:    Size  Location     Type
 39665 ;;  ep              1    wreg     unsigned char 
 39666 ;;  dir             1    0[BANK0 ] unsigned char 
 39667 ;;  data            2    1[BANK0 ] PTR unsigned char 
 39668 ;;		 -> ToSendDataBuffer(64), ReceivedDataBuffer(64), msd_buffer(512), msd_csw(13), 
 39669 ;;		 -> msd_cbw(31), NULL(0), 
 39670 ;;  len             1    3[BANK0 ] unsigned char 
 39671 ;; Auto vars:     Size  Location     Type
 39672 ;;  ep              1    8[BANK0 ] unsigned char 
 39673 ;;  handle          2    9[BANK0 ] PTR volatile struct __BD
 39674 ;;		 -> RAM(3759), NULL(0), BDT(48), 
 39675 ;; Return value:  Size  Location     Type
 39676 ;;                  2    0[BANK0 ] PTR void 
 39677 ;; Registers used:
 39678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 39679 ;; Tracked objects:
 39680 ;;		On entry : 0/0
 39681 ;;		On exit  : 0/0
 39682 ;;		Unchanged: 0/0
 39683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 39684 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39685 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39686 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39687 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39688 ;;Total ram usage:       11 bytes
 39689 ;; Hardware stack levels used:    1
 39690 ;; Hardware stack levels required when called:   10
 39691 ;; This function calls:
 39692 ;;		Nothing
 39693 ;; This function is called by:
 39694 ;;		_MSDTasks
 39695 ;;		_MSDProcessCommandMediaPresent
 39696 ;;		_MSDReadHandler
 39697 ;;		_MSDWriteHandler
 39698 ;;		_APP_DeviceCustomHIDTasks
 39699 ;; This function uses a non-reentrant model
 39700 ;;
 39701                           
 39702                           	psect	text155
 39703  0104DE                     __ptext155:
 39704                           	opt stack 0
 39705  0104DE                     _USBTransferOnePacket:
 39706                           	opt stack 18
 39707                           
 39708                           ; BSR set to: 1
 39709                           ;incstack = 0
 39710                           ;USBTransferOnePacket@ep stored from wreg
 39711  0104DE  0100               	movlb	0	; () banked
 39712  0104E0  6F68               	movwf	USBTransferOnePacket@ep& (0+255),b
 39713                           
 39714                           ;usb_device.c: 997: volatile BDT_ENTRY* handle;;usb_device.c: 1000: if(dir != 0)
 39715  0104E2  0100               	movlb	0	; () banked
 39716  0104E4  5160               	movf	USBTransferOnePacket@dir& (0+255),w,b
 39717  0104E6  B4D8               	btfsc	status,2,c
 39718  0104E8  D007               	goto	l184
 39719                           
 39720                           ; BSR set to: 0
 39721                           ;usb_device.c: 1001: {;usb_device.c: 1003: handle = pBDTEntryIn[ep];
 39722  0104EA  5168               	movf	USBTransferOnePacket@ep& (0+255),w,b
 39723  0104EC  0D02               	mullw	2
 39724  0104EE  0E10               	movlw	low _pBDTEntryIn
 39725  0104F0  24F3               	addwf	prodl,w,c
 39726  0104F2  6ED9               	movwf	fsr2l,c
 39727  0104F4  0E00               	movlw	high _pBDTEntryIn
 39728  0104F6  D006               	goto	L65
 39729  0104F8                     l184:
 39730                           
 39731                           ; BSR set to: 0
 39732                           ;usb_device.c: 1005: else;usb_device.c: 1006: {;usb_device.c: 1008: handle = pBDTEntryOu
      +                          t[ep];
 39733                           
 39734                           ; BSR set to: 0
 39735  0104F8  5168               	movf	USBTransferOnePacket@ep& (0+255),w,b
 39736  0104FA  0D02               	mullw	2
 39737  0104FC  0E38               	movlw	low _pBDTEntryOut
 39738  0104FE  24F3               	addwf	prodl,w,c
 39739  010500  6ED9               	movwf	fsr2l,c
 39740  010502  0E01               	movlw	high _pBDTEntryOut
 39741  010504                     L65:
 39742  010504  20F4               	addwfc	prodh,w,c
 39743  010506  6EDA               	movwf	fsr2h,c
 39744  010508  CFDE F069          	movff	postinc2,USBTransferOnePacket@handle
 39745  01050C  CFDD F06A          	movff	postdec2,USBTransferOnePacket@handle+1
 39746                           
 39747                           ; BSR set to: 0
 39748                           ;usb_device.c: 1009: };usb_device.c: 1013: if(handle == 0)
 39749                           
 39750                           ; BSR set to: 0
 39751  010510  5169               	movf	USBTransferOnePacket@handle& (0+255),w,b
 39752  010512  116A               	iorwf	(USBTransferOnePacket@handle+1)& (0+255),w,b
 39753  010514  A4D8               	btfss	status,2,c
 39754  010516  D005               	goto	l186
 39755                           
 39756                           ; BSR set to: 0
 39757                           ;usb_device.c: 1014: {;usb_device.c: 1015: return 0;
 39758  010518  0E00               	movlw	0
 39759  01051A  6F60               	movwf	?_USBTransferOnePacket& (0+255),b
 39760  01051C  0E00               	movlw	0
 39761  01051E  6F61               	movwf	(?_USBTransferOnePacket+1)& (0+255),b
 39762                           
 39763                           ; BSR set to: 0
 39764  010520  0012               	return	
 39765  010522                     l186:
 39766                           
 39767                           ; BSR set to: 0
 39768                           ;usb_device.c: 1016: };usb_device.c: 1029: handle->ADR = ((uint16_t)(data));
 39769                           
 39770                           ; BSR set to: 0
 39771  010522  EE20 F002          	lfsr	2,2
 39772  010526  5169               	movf	USBTransferOnePacket@handle& (0+255),w,b
 39773  010528  26D9               	addwf	fsr2l,f,c
 39774  01052A  516A               	movf	(USBTransferOnePacket@handle+1)& (0+255),w,b
 39775  01052C  22DA               	addwfc	fsr2h,f,c
 39776  01052E  C061  FFDE         	movff	USBTransferOnePacket@data,postinc2
 39777  010532  C062  FFDD         	movff	USBTransferOnePacket@data+1,postdec2
 39778                           
 39779                           ;usb_device.c: 1030: handle->CNT = len;
 39780  010536  EE20 F001          	lfsr	2,1
 39781  01053A  5169               	movf	USBTransferOnePacket@handle& (0+255),w,b
 39782  01053C  26D9               	addwf	fsr2l,f,c
 39783  01053E  516A               	movf	(USBTransferOnePacket@handle+1)& (0+255),w,b
 39784  010540  22DA               	addwfc	fsr2h,f,c
 39785  010542  C063  FFDF         	movff	USBTransferOnePacket@len,indf2
 39786                           
 39787                           ; BSR set to: 0
 39788                           ;usb_device.c: 1031: handle->STAT.Val &= 0x40;
 39789  010546  C069  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
 39790  01054A  C06A  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
 39791  01054E  0E40               	movlw	64
 39792  010550  16DF               	andwf	indf2,f,c
 39793                           
 39794                           ; BSR set to: 0
 39795                           ;usb_device.c: 1032: handle->STAT.Val |= (0x08 & 0x08);
 39796  010552  C069  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
 39797  010556  C06A  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
 39798  01055A  0E00               	movlw	0
 39799  01055C  86DB               	bsf	plusw2,3,c
 39800                           
 39801                           ; BSR set to: 0
 39802                           ;usb_device.c: 1033: handle->STAT.Val |= 0x80;
 39803  01055E  C069  FFD9         	movff	USBTransferOnePacket@handle,fsr2l
 39804  010562  C06A  FFDA         	movff	USBTransferOnePacket@handle+1,fsr2h
 39805  010566  0E00               	movlw	0
 39806  010568  8EDB               	bsf	plusw2,7,c
 39807                           
 39808                           ; BSR set to: 0
 39809                           ;usb_device.c: 1036: if(dir != 0)
 39810  01056A  5160               	movf	USBTransferOnePacket@dir& (0+255),w,b
 39811  01056C  B4D8               	btfsc	status,2,c
 39812  01056E  D018               	goto	l188
 39813                           
 39814                           ; BSR set to: 0
 39815                           ;usb_device.c: 1037: {;usb_device.c: 1039: pBDTEntryIn[ep] = (BDT_ENTRY*)(((uintptr_t)pB
      +                          DTEntryIn[ep]) ^ 0x0004);
 39816  010570  5168               	movf	USBTransferOnePacket@ep& (0+255),w,b
 39817  010572  0D02               	mullw	2
 39818  010574  0E10               	movlw	low _pBDTEntryIn
 39819  010576  24F3               	addwf	prodl,w,c
 39820  010578  6ED9               	movwf	fsr2l,c
 39821  01057A  0E00               	movlw	high _pBDTEntryIn
 39822  01057C  20F4               	addwfc	prodh,w,c
 39823  01057E  6EDA               	movwf	fsr2h,c
 39824  010580  CFDE F064          	movff	postinc2,??_USBTransferOnePacket
 39825  010584  CFDD F065          	movff	postdec2,??_USBTransferOnePacket+1
 39826  010588  0E04               	movlw	4
 39827  01058A  1964               	xorwf	??_USBTransferOnePacket& (0+255),w,b
 39828  01058C  6F66               	movwf	(??_USBTransferOnePacket+2)& (0+255),b
 39829  01058E  5165               	movf	(??_USBTransferOnePacket+1)& (0+255),w,b
 39830  010590  6F67               	movwf	(??_USBTransferOnePacket+3)& (0+255),b
 39831  010592  5168               	movf	USBTransferOnePacket@ep& (0+255),w,b
 39832  010594  0D02               	mullw	2
 39833  010596  0E10               	movlw	low _pBDTEntryIn
 39834  010598  24F3               	addwf	prodl,w,c
 39835  01059A  6ED9               	movwf	fsr2l,c
 39836  01059C  0E00               	movlw	high _pBDTEntryIn
 39837  01059E  D017               	goto	L66
 39838  0105A0                     l188:
 39839                           
 39840                           ; BSR set to: 0
 39841                           ;usb_device.c: 1041: else;usb_device.c: 1042: {;usb_device.c: 1044: pBDTEntryOut[ep] = (
      +                          BDT_ENTRY*)(((uintptr_t)pBDTEntryOut[ep]) ^ 0x0004);
 39842                           
 39843                           ; BSR set to: 0
 39844  0105A0  5168               	movf	USBTransferOnePacket@ep& (0+255),w,b
 39845  0105A2  0D02               	mullw	2
 39846  0105A4  0E38               	movlw	low _pBDTEntryOut
 39847  0105A6  24F3               	addwf	prodl,w,c
 39848  0105A8  6ED9               	movwf	fsr2l,c
 39849  0105AA  0E01               	movlw	high _pBDTEntryOut
 39850  0105AC  20F4               	addwfc	prodh,w,c
 39851  0105AE  6EDA               	movwf	fsr2h,c
 39852  0105B0  CFDE F064          	movff	postinc2,??_USBTransferOnePacket
 39853  0105B4  CFDD F065          	movff	postdec2,??_USBTransferOnePacket+1
 39854  0105B8  0E04               	movlw	4
 39855  0105BA  1964               	xorwf	??_USBTransferOnePacket& (0+255),w,b
 39856  0105BC  6F66               	movwf	(??_USBTransferOnePacket+2)& (0+255),b
 39857  0105BE  5165               	movf	(??_USBTransferOnePacket+1)& (0+255),w,b
 39858  0105C0  6F67               	movwf	(??_USBTransferOnePacket+3)& (0+255),b
 39859  0105C2  5168               	movf	USBTransferOnePacket@ep& (0+255),w,b
 39860  0105C4  0D02               	mullw	2
 39861  0105C6  0E38               	movlw	low _pBDTEntryOut
 39862  0105C8  24F3               	addwf	prodl,w,c
 39863  0105CA  6ED9               	movwf	fsr2l,c
 39864  0105CC  0E01               	movlw	high _pBDTEntryOut
 39865  0105CE                     L66:
 39866  0105CE  20F4               	addwfc	prodh,w,c
 39867  0105D0  6EDA               	movwf	fsr2h,c
 39868  0105D2  C066  FFDE         	movff	??_USBTransferOnePacket+2,postinc2
 39869  0105D6  C067  FFDD         	movff	??_USBTransferOnePacket+3,postdec2
 39870                           
 39871                           ; BSR set to: 0
 39872                           ;usb_device.c: 1045: };usb_device.c: 1046: return (void*)handle;
 39873                           
 39874                           ; BSR set to: 0
 39875  0105DA  C069  F060         	movff	USBTransferOnePacket@handle,?_USBTransferOnePacket
 39876  0105DE  C06A  F061         	movff	USBTransferOnePacket@handle+1,?_USBTransferOnePacket+1
 39877  0105E2  0012               	return	
 39878  0105E4                     __end_of_USBTransferOnePacket:
 39879                           	opt stack 0
 39880                           tosu	equ	0xFFF
 39881                           tosh	equ	0xFFE
 39882                           tosl	equ	0xFFD
 39883                           pclath	equ	0xFFA
 39884                           tblptru	equ	0xFF8
 39885                           tblptrh	equ	0xFF7
 39886                           tblptrl	equ	0xFF6
 39887                           tablat	equ	0xFF5
 39888                           prodh	equ	0xFF4
 39889                           prodl	equ	0xFF3
 39890                           intcon	equ	0xFF2
 39891                           indf0	equ	0xFEF
 39892                           postinc0	equ	0xFEE
 39893                           fsr0h	equ	0xFEA
 39894                           fsr0l	equ	0xFE9
 39895                           wreg	equ	0xFE8
 39896                           indf1	equ	0xFE7
 39897                           postinc1	equ	0xFE6
 39898                           postdec1	equ	0xFE5
 39899                           plusw1	equ	0xFE3
 39900                           fsr1h	equ	0xFE2
 39901                           fsr1l	equ	0xFE1
 39902                           indf2	equ	0xFDF
 39903                           postinc2	equ	0xFDE
 39904                           postdec2	equ	0xFDD
 39905                           plusw2	equ	0xFDB
 39906                           fsr2h	equ	0xFDA
 39907                           fsr2l	equ	0xFD9
 39908                           status	equ	0xFD8
 39909                           
 39910 ;; *************** function _SYS_InterruptHigh *****************
 39911 ;; Defined at:
 39912 ;;		line 162 in file "system.c"
 39913 ;; Parameters:    Size  Location     Type
 39914 ;;		None
 39915 ;; Auto vars:     Size  Location     Type
 39916 ;;		None
 39917 ;; Return value:  Size  Location     Type
 39918 ;;                  1    wreg      void 
 39919 ;; Registers used:
 39920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 39921 ;; Tracked objects:
 39922 ;;		On entry : 0/0
 39923 ;;		On exit  : 0/0
 39924 ;;		Unchanged: 0/0
 39925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 39926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39928 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39929 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 39930 ;;Total ram usage:       14 bytes
 39931 ;; Hardware stack levels used:    1
 39932 ;; Hardware stack levels required when called:    9
 39933 ;; This function calls:
 39934 ;;		_USBDeviceTasks
 39935 ;;		_motor_isr
 39936 ;;		_tmr0_isr
 39937 ;; This function is called by:
 39938 ;;		Interrupt level 2
 39939 ;; This function uses a non-reentrant model
 39940 ;;
 39941                           
 39942                           	psect	intcode
 39943  009008                     __pintcode:
 39944                           	opt stack 0
 39945  009008                     _SYS_InterruptHigh:
 39946                           	opt stack 9
 39947                           
 39948                           ; BSR set to: 0
 39949                           ;incstack = 0
 39950  009008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 39951  00900A  CFFA F04D          	movff	pclath,??_SYS_InterruptHigh
 39952  00900E  CFFB F04E          	movff	pclatu,??_SYS_InterruptHigh+1
 39953  009012  CFE9 F04F          	movff	fsr0l,??_SYS_InterruptHigh+2
 39954  009016  CFEA F050          	movff	fsr0h,??_SYS_InterruptHigh+3
 39955  00901A  CFE1 F051          	movff	fsr1l,??_SYS_InterruptHigh+4
 39956  00901E  CFE2 F052          	movff	fsr1h,??_SYS_InterruptHigh+5
 39957  009022  CFD9 F053          	movff	fsr2l,??_SYS_InterruptHigh+6
 39958  009026  CFDA F054          	movff	fsr2h,??_SYS_InterruptHigh+7
 39959  00902A  CFF3 F055          	movff	prodl,??_SYS_InterruptHigh+8
 39960  00902E  CFF4 F056          	movff	prodh,??_SYS_InterruptHigh+9
 39961  009032  CFF6 F057          	movff	tblptrl,??_SYS_InterruptHigh+10
 39962  009036  CFF7 F058          	movff	tblptrh,??_SYS_InterruptHigh+11
 39963  00903A  CFF8 F059          	movff	tblptru,??_SYS_InterruptHigh+12
 39964  00903E  CFF5 F05A          	movff	tablat,??_SYS_InterruptHigh+13
 39965                           
 39966                           ;system.c: 165: USBDeviceTasks();
 39967  009042  EC89  F07B         	call	_USBDeviceTasks	;wreg free
 39968                           
 39969                           ;system.c: 169: if(PIR1bits.TMR2IF)
 39970  009046  B29E               	btfsc	3998,1,c	;volatile
 39971                           
 39972                           ;system.c: 170: {;system.c: 171: motor_isr();
 39973  009048  EC42  F05C         	call	_motor_isr	;wreg free
 39974                           
 39975                           ;system.c: 172: };system.c: 174: if(INTCONbits.T0IF)
 39976  00904C  B4F2               	btfsc	intcon,2,c	;volatile
 39977                           
 39978                           ;system.c: 175: {;system.c: 176: tmr0_isr();
 39979  00904E  EC1F  F09E         	call	_tmr0_isr	;wreg free
 39980  009052  C05A  FFF5         	movff	??_SYS_InterruptHigh+13,tablat
 39981  009056  C059  FFF8         	movff	??_SYS_InterruptHigh+12,tblptru
 39982  00905A  C058  FFF7         	movff	??_SYS_InterruptHigh+11,tblptrh
 39983  00905E  C057  FFF6         	movff	??_SYS_InterruptHigh+10,tblptrl
 39984  009062  C056  FFF4         	movff	??_SYS_InterruptHigh+9,prodh
 39985  009066  C055  FFF3         	movff	??_SYS_InterruptHigh+8,prodl
 39986  00906A  C054  FFDA         	movff	??_SYS_InterruptHigh+7,fsr2h
 39987  00906E  C053  FFD9         	movff	??_SYS_InterruptHigh+6,fsr2l
 39988  009072  C052  FFE2         	movff	??_SYS_InterruptHigh+5,fsr1h
 39989  009076  C051  FFE1         	movff	??_SYS_InterruptHigh+4,fsr1l
 39990  00907A  C050  FFEA         	movff	??_SYS_InterruptHigh+3,fsr0h
 39991  00907E  C04F  FFE9         	movff	??_SYS_InterruptHigh+2,fsr0l
 39992  009082  C04E  FFFB         	movff	??_SYS_InterruptHigh+1,pclatu
 39993  009086  C04D  FFFA         	movff	??_SYS_InterruptHigh,pclath
 39994  00908A  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 39995  00908C  0011               	retfie		f
 39996  00908E                     __end_of_SYS_InterruptHigh:
 39997                           	opt stack 0
 39998                           tosu	equ	0xFFF
 39999                           tosh	equ	0xFFE
 40000                           tosl	equ	0xFFD
 40001                           pclatu	equ	0xFFB
 40002                           pclath	equ	0xFFA
 40003                           tblptru	equ	0xFF8
 40004                           tblptrh	equ	0xFF7
 40005                           tblptrl	equ	0xFF6
 40006                           tablat	equ	0xFF5
 40007                           prodh	equ	0xFF4
 40008                           prodl	equ	0xFF3
 40009                           intcon	equ	0xFF2
 40010                           indf0	equ	0xFEF
 40011                           postinc0	equ	0xFEE
 40012                           fsr0h	equ	0xFEA
 40013                           fsr0l	equ	0xFE9
 40014                           wreg	equ	0xFE8
 40015                           indf1	equ	0xFE7
 40016                           postinc1	equ	0xFE6
 40017                           postdec1	equ	0xFE5
 40018                           plusw1	equ	0xFE3
 40019                           fsr1h	equ	0xFE2
 40020                           fsr1l	equ	0xFE1
 40021                           indf2	equ	0xFDF
 40022                           postinc2	equ	0xFDE
 40023                           postdec2	equ	0xFDD
 40024                           plusw2	equ	0xFDB
 40025                           fsr2h	equ	0xFDA
 40026                           fsr2l	equ	0xFD9
 40027                           status	equ	0xFD8
 40028                           
 40029 ;; *************** function _tmr0_isr *****************
 40030 ;; Defined at:
 40031 ;;		line 22 in file "os.c"
 40032 ;; Parameters:    Size  Location     Type
 40033 ;;		None
 40034 ;; Auto vars:     Size  Location     Type
 40035 ;;		None
 40036 ;; Return value:  Size  Location     Type
 40037 ;;                  1    wreg      void 
 40038 ;; Registers used:
 40039 ;;		wreg, status,2, status,0, cstack
 40040 ;; Tracked objects:
 40041 ;;		On entry : 0/0
 40042 ;;		On exit  : 0/0
 40043 ;;		Unchanged: 0/0
 40044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 40045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40049 ;;Total ram usage:        0 bytes
 40050 ;; Hardware stack levels used:    1
 40051 ;; Hardware stack levels required when called:    1
 40052 ;; This function calls:
 40053 ;;		_encoder_run
 40054 ;; This function is called by:
 40055 ;;		_SYS_InterruptHigh
 40056 ;; This function uses a non-reentrant model
 40057 ;;
 40058                           
 40059                           	psect	text157
 40060  013C3E                     __ptext157:
 40061                           	opt stack 0
 40062  013C3E                     _tmr0_isr:
 40063                           	opt stack 16
 40064                           
 40065                           ;os.c: 25: if(INTCONbits.T0IF)
 40066                           
 40067                           ;incstack = 0
 40068  013C3E  A4F2               	btfss	intcon,2,c	;volatile
 40069  013C40  0012               	return	
 40070                           
 40071                           ;os.c: 26: {;os.c: 28: TMR0H = 0xFA;
 40072  013C42  0EFA               	movlw	250
 40073  013C44  6ED7               	movwf	4055,c	;volatile
 40074                           
 40075                           ;os.c: 29: TMR0L = 0x24;
 40076  013C46  0E24               	movlw	36
 40077  013C48  6ED6               	movwf	4054,c	;volatile
 40078                           
 40079                           ;os.c: 32: INTCONbits.T0IF = 0;
 40080  013C4A  94F2               	bcf	intcon,2,c	;volatile
 40081                           
 40082                           ;os.c: 35: encoder_run();
 40083  013C4C  EC75  F083         	call	_encoder_run	;wreg free
 40084                           
 40085                           ;os.c: 38: ++os.subTimeSlot;
 40086  013C50  0101               	movlb	1	; () banked
 40087  013C52  2B73               	incf	_os& (0+255),f,b	;volatile
 40088                           
 40089                           ; BSR set to: 1
 40090                           ;os.c: 39: if(os.subTimeSlot>=10)
 40091  013C54  0E09               	movlw	9
 40092  013C56  6573               	cpfsgt	_os& (0+255),b	;volatile
 40093  013C58  0012               	return	
 40094                           
 40095                           ; BSR set to: 1
 40096                           ;os.c: 40: {;os.c: 41: if(os.done)
 40097  013C5A  5175               	movf	(_os+2)& (0+255),w,b	;volatile
 40098  013C5C  B4D8               	btfsc	status,2,c
 40099  013C5E  0012               	return	
 40100                           
 40101                           ; BSR set to: 1
 40102                           ;os.c: 42: {;os.c: 43: ++os.timeSlot;
 40103  013C60  2B74               	incf	(_os+1)& (0+255),f,b	;volatile
 40104                           
 40105                           ; BSR set to: 1
 40106                           ;os.c: 44: if(os.timeSlot==16)
 40107  013C62  0E10               	movlw	16
 40108  013C64  1974               	xorwf	(_os+1)& (0+255),w,b	;volatile
 40109  013C66  A4D8               	btfss	status,2,c
 40110  013C68  D002               	goto	i2l1053
 40111                           
 40112                           ; BSR set to: 1
 40113                           ;os.c: 45: {;os.c: 46: os.timeSlot = 0;
 40114  013C6A  0E00               	movlw	0
 40115  013C6C  6F74               	movwf	(_os+1)& (0+255),b	;volatile
 40116  013C6E                     i2l1053:
 40117                           
 40118                           ; BSR set to: 1
 40119                           ;os.c: 47: };os.c: 48: os.subTimeSlot = 0;
 40120  013C6E  0E00               	movlw	0
 40121  013C70  6F73               	movwf	_os& (0+255),b	;volatile
 40122                           
 40123                           ;os.c: 49: os.done = 0;
 40124  013C72  0E00               	movlw	0
 40125  013C74  6F75               	movwf	(_os+2)& (0+255),b	;volatile
 40126                           
 40127                           ; BSR set to: 1
 40128                           
 40129                           ; BSR set to: 1
 40130  013C76  0012               	return	
 40131  013C78                     __end_of_tmr0_isr:
 40132                           	opt stack 0
 40133                           tosu	equ	0xFFF
 40134                           tosh	equ	0xFFE
 40135                           tosl	equ	0xFFD
 40136                           pclatu	equ	0xFFB
 40137                           pclath	equ	0xFFA
 40138                           tblptru	equ	0xFF8
 40139                           tblptrh	equ	0xFF7
 40140                           tblptrl	equ	0xFF6
 40141                           tablat	equ	0xFF5
 40142                           prodh	equ	0xFF4
 40143                           prodl	equ	0xFF3
 40144                           intcon	equ	0xFF2
 40145                           indf0	equ	0xFEF
 40146                           postinc0	equ	0xFEE
 40147                           fsr0h	equ	0xFEA
 40148                           fsr0l	equ	0xFE9
 40149                           wreg	equ	0xFE8
 40150                           indf1	equ	0xFE7
 40151                           postinc1	equ	0xFE6
 40152                           postdec1	equ	0xFE5
 40153                           plusw1	equ	0xFE3
 40154                           fsr1h	equ	0xFE2
 40155                           fsr1l	equ	0xFE1
 40156                           indf2	equ	0xFDF
 40157                           postinc2	equ	0xFDE
 40158                           postdec2	equ	0xFDD
 40159                           plusw2	equ	0xFDB
 40160                           fsr2h	equ	0xFDA
 40161                           fsr2l	equ	0xFD9
 40162                           status	equ	0xFD8
 40163                           
 40164 ;; *************** function _encoder_run *****************
 40165 ;; Defined at:
 40166 ;;		line 103 in file "encoder.c"
 40167 ;; Parameters:    Size  Location     Type
 40168 ;;		None
 40169 ;; Auto vars:     Size  Location     Type
 40170 ;;		None
 40171 ;; Return value:  Size  Location     Type
 40172 ;;                  1    wreg      void 
 40173 ;; Registers used:
 40174 ;;		wreg, status,2, status,0
 40175 ;; Tracked objects:
 40176 ;;		On entry : 0/0
 40177 ;;		On exit  : 0/0
 40178 ;;		Unchanged: 0/0
 40179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 40180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40184 ;;Total ram usage:        0 bytes
 40185 ;; Hardware stack levels used:    1
 40186 ;; This function calls:
 40187 ;;		Nothing
 40188 ;; This function is called by:
 40189 ;;		_tmr0_isr
 40190 ;; This function uses a non-reentrant model
 40191 ;;
 40192                           
 40193                           	psect	text158
 40194  0106EA                     __ptext158:
 40195                           	opt stack 0
 40196  0106EA                     _encoder_run:
 40197                           	opt stack 16
 40198                           
 40199                           ;encoder.c: 105: if(enc1 != (PORTE&0b00000111))
 40200                           
 40201                           ;incstack = 0
 40202  0106EA  5084               	movf	3972,w,c	;volatile
 40203  0106EC  0B07               	andlw	7
 40204  0106EE  181F               	xorwf	_enc1,w,c
 40205  0106F0  B4D8               	btfsc	status,2,c
 40206  0106F2  D037               	goto	i2l2523
 40207                           
 40208                           ;encoder.c: 106: {;encoder.c: 108: if(PORTEbits.RE0 && PORTEbits.RE2 && (!(enc1&0b000000
      +                          01)))
 40209  0106F4  B084               	btfsc	3972,0,c	;volatile
 40210  0106F6  A484               	btfss	3972,2,c	;volatile
 40211  0106F8  D00E               	goto	i2l2526
 40212  0106FA  B01F               	btfsc	_enc1,0,c
 40213  0106FC  D00C               	goto	i2l2526
 40214                           
 40215                           ;encoder.c: 109: {;encoder.c: 110: if(os.encoder1Count<127)
 40216  0106FE  0E7F               	movlw	127
 40217  010700  0101               	movlb	1	; () banked
 40218  010702  1976               	xorwf	(_os+3)& (0+255),w,b	;volatile
 40219  010704  B4D8               	btfsc	status,2,c
 40220  010706  D007               	goto	i2l2526
 40221                           
 40222                           ; BSR set to: 1
 40223                           ;encoder.c: 111: {;encoder.c: 112: ++os.encoder1Count;
 40224  010708  2B76               	incf	(_os+3)& (0+255),f,b	;volatile
 40225                           
 40226                           ; BSR set to: 1
 40227                           ;encoder.c: 113: if(config.beep_duration)
 40228  01070A  51B8               	movf	(_config+21)& (0+255),w,b
 40229  01070C  B4D8               	btfsc	status,2,c
 40230  01070E  D003               	goto	i2l2526
 40231                           
 40232                           ; BSR set to: 1
 40233                           ;encoder.c: 114: {;encoder.c: 115: LATCbits.LC7 = 1;
 40234  010710  8E8B               	bsf	3979,7,c	;volatile
 40235                           
 40236                           ;encoder.c: 116: os.beep_count = config.beep_duration;
 40237  010712  C1B8  F199         	movff	_config+21,_os+38	;volatile
 40238  010716                     i2l2526:
 40239                           
 40240                           ;encoder.c: 117: };encoder.c: 118: };encoder.c: 119: };encoder.c: 121: if(PORTEbits.RE2 
      +                          && PORTEbits.RE0 && (!(enc1&0b00000100)))
 40241                           
 40242                           ; BSR set to: 1
 40243                           
 40244                           ; BSR set to: 1
 40245  010716  B484               	btfsc	3972,2,c	;volatile
 40246  010718  A084               	btfss	3972,0,c	;volatile
 40247  01071A  D00F               	goto	i2l2529
 40248  01071C  B41F               	btfsc	_enc1,2,c
 40249  01071E  D00D               	goto	i2l2529
 40250                           
 40251                           ;encoder.c: 122: {;encoder.c: 123: if(os.encoder1Count>-128)
 40252  010720  0101               	movlb	1	; () banked
 40253  010722  5176               	movf	(_os+3)& (0+255),w,b	;volatile
 40254  010724  0A80               	xorlw	128
 40255  010726  0FFF               	addlw	255
 40256  010728  A0D8               	btfss	status,0,c
 40257  01072A  D007               	goto	i2l2529
 40258                           
 40259                           ; BSR set to: 1
 40260                           ;encoder.c: 124: {;encoder.c: 125: --os.encoder1Count;
 40261  01072C  0776               	decf	(_os+3)& (0+255),f,b	;volatile
 40262                           
 40263                           ; BSR set to: 1
 40264                           ;encoder.c: 126: if(config.beep_duration)
 40265  01072E  51B8               	movf	(_config+21)& (0+255),w,b
 40266  010730  B4D8               	btfsc	status,2,c
 40267  010732  D003               	goto	i2l2529
 40268                           
 40269                           ; BSR set to: 1
 40270                           ;encoder.c: 127: {;encoder.c: 128: LATCbits.LC7 = 1;
 40271  010734  8E8B               	bsf	3979,7,c	;volatile
 40272                           
 40273                           ;encoder.c: 129: os.beep_count = config.beep_duration;
 40274  010736  C1B8  F199         	movff	_config+21,_os+38	;volatile
 40275  01073A                     i2l2529:
 40276                           
 40277                           ;encoder.c: 130: };encoder.c: 131: };encoder.c: 132: };encoder.c: 134: if(PORTEbits.RE1 
      +                          && (!(enc1&0b00000010)))
 40278                           
 40279                           ; BSR set to: 1
 40280                           
 40281                           ; BSR set to: 1
 40282  01073A  B284               	btfsc	3972,1,c	;volatile
 40283  01073C  B21F               	btfsc	_enc1,1,c
 40284  01073E  D009               	goto	i2l2531
 40285                           
 40286                           ;encoder.c: 135: {;encoder.c: 136: os.button1 = 1;
 40287  010740  0E01               	movlw	1
 40288  010742  0101               	movlb	1	; () banked
 40289  010744  6F77               	movwf	(_os+4)& (0+255),b	;volatile
 40290                           
 40291                           ;encoder.c: 137: if(config.beep_duration)
 40292  010746  51B8               	movf	(_config+21)& (0+255),w,b
 40293  010748  B4D8               	btfsc	status,2,c
 40294  01074A  D003               	goto	i2l2531
 40295                           
 40296                           ; BSR set to: 1
 40297                           ;encoder.c: 138: {;encoder.c: 139: LATCbits.LC7 = 1;
 40298  01074C  8E8B               	bsf	3979,7,c	;volatile
 40299                           
 40300                           ;encoder.c: 140: os.beep_count = config.beep_duration;
 40301  01074E  C1B8  F199         	movff	_config+21,_os+38	;volatile
 40302  010752                     i2l2531:
 40303                           
 40304                           ;encoder.c: 141: };encoder.c: 142: };encoder.c: 144: if((!PORTEbits.RE1) && (enc1&0b0000
      +                          0010))
 40305                           
 40306                           ; BSR set to: 1
 40307  010752  A284               	btfss	3972,1,c	;volatile
 40308  010754  A21F               	btfss	_enc1,1,c
 40309  010756  D002               	goto	i2l2532
 40310                           
 40311                           ;encoder.c: 145: {;encoder.c: 146: os.button1 = -1;
 40312  010758  0101               	movlb	1	; () banked
 40313  01075A  6977               	setf	(_os+4)& (0+255),b	;volatile
 40314  01075C                     i2l2532:
 40315                           
 40316                           ;encoder.c: 147: };encoder.c: 149: enc1 = PORTE & 0b00000111;
 40317                           
 40318                           ; BSR set to: 1
 40319  01075C  5084               	movf	3972,w,c	;volatile
 40320  01075E  0B07               	andlw	7
 40321  010760  6E1F               	movwf	_enc1,c
 40322  010762                     i2l2523:
 40323                           
 40324                           ;encoder.c: 150: };encoder.c: 152: if(enc2 != (PORTA&0b00000111))
 40325  010762  5080               	movf	3968,w,c	;volatile
 40326  010764  0B07               	andlw	7
 40327  010766  181E               	xorwf	_enc2,w,c
 40328  010768  B4D8               	btfsc	status,2,c
 40329  01076A  D037               	goto	i2l2533
 40330                           
 40331                           ;encoder.c: 153: {;encoder.c: 155: if(PORTAbits.RA2 && PORTAbits.RA0 && (!(enc2&0b000001
      +                          00)))
 40332  01076C  B480               	btfsc	3968,2,c	;volatile
 40333  01076E  A080               	btfss	3968,0,c	;volatile
 40334  010770  D00E               	goto	i2l2536
 40335  010772  B41E               	btfsc	_enc2,2,c
 40336  010774  D00C               	goto	i2l2536
 40337                           
 40338                           ;encoder.c: 156: {;encoder.c: 157: if(os.encoder2Count<127)
 40339  010776  0E7F               	movlw	127
 40340  010778  0101               	movlb	1	; () banked
 40341  01077A  1978               	xorwf	(_os+5)& (0+255),w,b	;volatile
 40342  01077C  B4D8               	btfsc	status,2,c
 40343  01077E  D007               	goto	i2l2536
 40344                           
 40345                           ; BSR set to: 1
 40346                           ;encoder.c: 158: {;encoder.c: 159: ++os.encoder2Count;
 40347  010780  2B78               	incf	(_os+5)& (0+255),f,b	;volatile
 40348                           
 40349                           ; BSR set to: 1
 40350                           ;encoder.c: 160: if(config.beep_duration)
 40351  010782  51B8               	movf	(_config+21)& (0+255),w,b
 40352  010784  B4D8               	btfsc	status,2,c
 40353  010786  D003               	goto	i2l2536
 40354                           
 40355                           ; BSR set to: 1
 40356                           ;encoder.c: 161: {;encoder.c: 162: LATCbits.LC7 = 1;
 40357  010788  8E8B               	bsf	3979,7,c	;volatile
 40358                           
 40359                           ;encoder.c: 163: os.beep_count = config.beep_duration;
 40360  01078A  C1B8  F199         	movff	_config+21,_os+38	;volatile
 40361  01078E                     i2l2536:
 40362                           
 40363                           ;encoder.c: 164: };encoder.c: 165: };encoder.c: 166: };encoder.c: 168: if(PORTAbits.RA0 
      +                          && PORTAbits.RA2 && (!(enc2&0b00000001)))
 40364                           
 40365                           ; BSR set to: 1
 40366                           
 40367                           ; BSR set to: 1
 40368  01078E  B080               	btfsc	3968,0,c	;volatile
 40369  010790  A480               	btfss	3968,2,c	;volatile
 40370  010792  D00F               	goto	i2l2539
 40371  010794  B01E               	btfsc	_enc2,0,c
 40372  010796  D00D               	goto	i2l2539
 40373                           
 40374                           ;encoder.c: 169: {;encoder.c: 170: if(os.encoder2Count>-128)
 40375  010798  0101               	movlb	1	; () banked
 40376  01079A  5178               	movf	(_os+5)& (0+255),w,b	;volatile
 40377  01079C  0A80               	xorlw	128
 40378  01079E  0FFF               	addlw	255
 40379  0107A0  A0D8               	btfss	status,0,c
 40380  0107A2  D007               	goto	i2l2539
 40381                           
 40382                           ; BSR set to: 1
 40383                           ;encoder.c: 171: {;encoder.c: 172: --os.encoder2Count;
 40384  0107A4  0778               	decf	(_os+5)& (0+255),f,b	;volatile
 40385                           
 40386                           ; BSR set to: 1
 40387                           ;encoder.c: 173: if(config.beep_duration)
 40388  0107A6  51B8               	movf	(_config+21)& (0+255),w,b
 40389  0107A8  B4D8               	btfsc	status,2,c
 40390  0107AA  D003               	goto	i2l2539
 40391                           
 40392                           ; BSR set to: 1
 40393                           ;encoder.c: 174: {;encoder.c: 175: LATCbits.LC7 = 1;
 40394  0107AC  8E8B               	bsf	3979,7,c	;volatile
 40395                           
 40396                           ;encoder.c: 176: os.beep_count = config.beep_duration;
 40397  0107AE  C1B8  F199         	movff	_config+21,_os+38	;volatile
 40398  0107B2                     i2l2539:
 40399                           
 40400                           ;encoder.c: 177: };encoder.c: 178: };encoder.c: 179: };encoder.c: 181: if(PORTAbits.RA1 
      +                          && (!(enc2&0b00000010)))
 40401                           
 40402                           ; BSR set to: 1
 40403                           
 40404                           ; BSR set to: 1
 40405  0107B2  B280               	btfsc	3968,1,c	;volatile
 40406  0107B4  B21E               	btfsc	_enc2,1,c
 40407  0107B6  D009               	goto	i2l2541
 40408                           
 40409                           ;encoder.c: 182: {;encoder.c: 183: os.button2 = 1;
 40410  0107B8  0E01               	movlw	1
 40411  0107BA  0101               	movlb	1	; () banked
 40412  0107BC  6F79               	movwf	(_os+6)& (0+255),b	;volatile
 40413                           
 40414                           ;encoder.c: 184: if(config.beep_duration)
 40415  0107BE  51B8               	movf	(_config+21)& (0+255),w,b
 40416  0107C0  B4D8               	btfsc	status,2,c
 40417  0107C2  D003               	goto	i2l2541
 40418                           
 40419                           ; BSR set to: 1
 40420                           ;encoder.c: 185: {;encoder.c: 186: LATCbits.LC7 = 1;
 40421  0107C4  8E8B               	bsf	3979,7,c	;volatile
 40422                           
 40423                           ;encoder.c: 187: os.beep_count = config.beep_duration;
 40424  0107C6  C1B8  F199         	movff	_config+21,_os+38	;volatile
 40425  0107CA                     i2l2541:
 40426                           
 40427                           ;encoder.c: 188: };encoder.c: 189: };encoder.c: 191: if((!PORTAbits.RA1) && (enc2&0b0000
      +                          0010))
 40428                           
 40429                           ; BSR set to: 1
 40430  0107CA  A280               	btfss	3968,1,c	;volatile
 40431  0107CC  A21E               	btfss	_enc2,1,c
 40432  0107CE  D002               	goto	i2l2542
 40433                           
 40434                           ;encoder.c: 192: {;encoder.c: 193: os.button2 = -1;
 40435  0107D0  0101               	movlb	1	; () banked
 40436  0107D2  6979               	setf	(_os+6)& (0+255),b	;volatile
 40437  0107D4                     i2l2542:
 40438                           
 40439                           ;encoder.c: 194: };encoder.c: 196: enc2 = PORTA & 0b00000111;
 40440                           
 40441                           ; BSR set to: 1
 40442  0107D4  5080               	movf	3968,w,c	;volatile
 40443  0107D6  0B07               	andlw	7
 40444  0107D8  6E1E               	movwf	_enc2,c
 40445  0107DA                     i2l2533:
 40446                           
 40447                           ;encoder.c: 197: };encoder.c: 200: if(os.beep_count)
 40448  0107DA  0101               	movlb	1	; () banked
 40449  0107DC  5199               	movf	(_os+38)& (0+255),w,b	;volatile
 40450  0107DE  B4D8               	btfsc	status,2,c
 40451  0107E0  0012               	return	
 40452                           
 40453                           ; BSR set to: 1
 40454                           ;encoder.c: 201: {;encoder.c: 202: --os.beep_count;
 40455  0107E2  0799               	decf	(_os+38)& (0+255),f,b	;volatile
 40456                           
 40457                           ; BSR set to: 1
 40458                           ;encoder.c: 203: if(!os.beep_count)
 40459  0107E4  5199               	movf	(_os+38)& (0+255),w,b	;volatile
 40460  0107E6  A4D8               	btfss	status,2,c
 40461  0107E8  0012               	return	
 40462                           
 40463                           ; BSR set to: 1
 40464                           ;encoder.c: 204: {;encoder.c: 205: LATCbits.LC7 = 0;
 40465  0107EA  9E8B               	bcf	3979,7,c	;volatile
 40466                           
 40467                           ; BSR set to: 1
 40468  0107EC  0012               	return	
 40469  0107EE                     __end_of_encoder_run:
 40470                           	opt stack 0
 40471                           tosu	equ	0xFFF
 40472                           tosh	equ	0xFFE
 40473                           tosl	equ	0xFFD
 40474                           pclatu	equ	0xFFB
 40475                           pclath	equ	0xFFA
 40476                           tblptru	equ	0xFF8
 40477                           tblptrh	equ	0xFF7
 40478                           tblptrl	equ	0xFF6
 40479                           tablat	equ	0xFF5
 40480                           prodh	equ	0xFF4
 40481                           prodl	equ	0xFF3
 40482                           intcon	equ	0xFF2
 40483                           indf0	equ	0xFEF
 40484                           postinc0	equ	0xFEE
 40485                           fsr0h	equ	0xFEA
 40486                           fsr0l	equ	0xFE9
 40487                           wreg	equ	0xFE8
 40488                           indf1	equ	0xFE7
 40489                           postinc1	equ	0xFE6
 40490                           postdec1	equ	0xFE5
 40491                           plusw1	equ	0xFE3
 40492                           fsr1h	equ	0xFE2
 40493                           fsr1l	equ	0xFE1
 40494                           indf2	equ	0xFDF
 40495                           postinc2	equ	0xFDE
 40496                           postdec2	equ	0xFDD
 40497                           plusw2	equ	0xFDB
 40498                           fsr2h	equ	0xFDA
 40499                           fsr2l	equ	0xFD9
 40500                           status	equ	0xFD8
 40501                           
 40502 ;; *************** function _motor_isr *****************
 40503 ;; Defined at:
 40504 ;;		line 273 in file "motor.c"
 40505 ;; Parameters:    Size  Location     Type
 40506 ;;		None
 40507 ;; Auto vars:     Size  Location     Type
 40508 ;;  steps_remain    4   20[COMRAM] unsigned long 
 40509 ;;  steps_until_    2   18[COMRAM] unsigned int 
 40510 ;;  steps_until_    2   16[COMRAM] unsigned int 
 40511 ;; Return value:  Size  Location     Type
 40512 ;;                  1    wreg      void 
 40513 ;; Registers used:
 40514 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 40515 ;; Tracked objects:
 40516 ;;		On entry : 0/0
 40517 ;;		On exit  : 0/0
 40518 ;;		Unchanged: 0/0
 40519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 40520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40521 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40522 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40523 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 40524 ;;Total ram usage:       24 bytes
 40525 ;; Hardware stack levels used:    1
 40526 ;; This function calls:
 40527 ;;		Nothing
 40528 ;; This function is called by:
 40529 ;;		_SYS_InterruptHigh
 40530 ;; This function uses a non-reentrant model
 40531 ;;
 40532                           
 40533                           	psect	text159
 40534  00B884                     __ptext159:
 40535                           	opt stack 0
 40536  00B884                     _motor_isr:
 40537                           	opt stack 17
 40538                           
 40539                           ;motor.c: 275: uint32_t steps_remaining;;motor.c: 276: uint16_t steps_until_standstill;;
      +                          motor.c: 277: uint16_t steps_until_standstill_if_accelerate;;motor.c: 280: PIR1bits.TMR2
      +                          IF = 0;
 40540                           
 40541                           ; BSR set to: 1
 40542                           ;incstack = 0
 40543  00B884  929E               	bcf	3998,1,c	;volatile
 40544                           
 40545                           ;motor.c: 282: if(motor_mode==MOTOR_MODE_MANUAL)
 40546  00B886  5020               	movf	_motor_mode,w,c
 40547  00B888  A4D8               	btfss	status,2,c
 40548  00B88A  D018               	goto	i2l2388
 40549                           
 40550                           ;motor.c: 283: {;motor.c: 285: if(LATBbits.LB1)
 40551  00B88C  A28A               	btfss	3978,1,c	;volatile
 40552  00B88E  D015               	goto	i2l2385
 40553                           
 40554                           ;motor.c: 286: {;motor.c: 288: LATBbits.LB1 = 0;
 40555  00B890  928A               	bcf	3978,1,c	;volatile
 40556                           
 40557                           ;motor.c: 291: if(motor_current_stepcount==motor_final_stepcount)
 40558  00B892  0101               	movlb	1	; () banked
 40559  00B894  5142               	movf	_motor_final_stepcount& (0+255),w,b	;volatile
 40560  00B896  1816               	xorwf	_motor_current_stepcount,w,c	;volatile
 40561  00B898  E109               	bnz	i2u1662_41
 40562  00B89A  5143               	movf	(_motor_final_stepcount+1)& (0+255),w,b	;volatile
 40563  00B89C  1817               	xorwf	_motor_current_stepcount+1,w,c	;volatile
 40564  00B89E  E106               	bnz	i2u1662_41
 40565  00B8A0  5144               	movf	(_motor_final_stepcount+2)& (0+255),w,b	;volatile
 40566  00B8A2  1818               	xorwf	_motor_current_stepcount+2,w,c	;volatile
 40567  00B8A4  E103               	bnz	i2u1662_41
 40568  00B8A6  5145               	movf	(_motor_final_stepcount+3)& (0+255),w,b	;volatile
 40569  00B8A8  1819               	xorwf	_motor_current_stepcount+3,w,c	;volatile
 40570  00B8AA  A4D8               	btfss	status,2,c
 40571  00B8AC                     i2u1662_41:
 40572  00B8AC  0012               	return	
 40573                           
 40574                           ; BSR set to: 1
 40575                           ;motor.c: 292: {;motor.c: 295: T2CONbits.TMR2ON = 0;
 40576  00B8AE  94CA               	bcf	4042,2,c	;volatile
 40577                           
 40578                           ;motor.c: 297: PIR1bits.TMR2IF = 0;
 40579  00B8B0  929E               	bcf	3998,1,c	;volatile
 40580                           
 40581                           ;motor.c: 298: PIE1bits.TMR2IE = 0;
 40582  00B8B2  929D               	bcf	3997,1,c	;volatile
 40583                           
 40584                           ; BSR set to: 1
 40585                           ;motor.c: 299: os.busy = 0;
 40586  00B8B4  0E00               	movlw	0
 40587  00B8B6  6F81               	movwf	(_os+14)& (0+255),b	;volatile
 40588                           
 40589                           ; BSR set to: 1
 40590                           ;motor.c: 300: };motor.c: 303: return;
 40591                           
 40592                           ; BSR set to: 1
 40593  00B8B8  0012               	return	
 40594  00B8BA                     i2l2385:
 40595                           
 40596                           ;motor.c: 305: else;motor.c: 306: {;motor.c: 308: LATBbits.LB1 = 1;
 40597  00B8BA  828A               	bsf	3978,1,c	;volatile
 40598  00B8BC                     i2l2388:
 40599                           
 40600                           ;motor.c: 309: };motor.c: 310: };motor.c: 312: ++motor_current_stepcount;
 40601  00B8BC  0E01               	movlw	1
 40602  00B8BE  2616               	addwf	_motor_current_stepcount,f,c	;volatile
 40603  00B8C0  0E00               	movlw	0
 40604  00B8C2  2217               	addwfc	_motor_current_stepcount+1,f,c	;volatile
 40605  00B8C4  2218               	addwfc	_motor_current_stepcount+2,f,c	;volatile
 40606  00B8C6  2219               	addwfc	_motor_current_stepcount+3,f,c	;volatile
 40607                           
 40608                           ;motor.c: 315: os.current_position_in_steps += motor_direction;
 40609  00B8C8  0100               	movlb	0	; () banked
 40610  00B8CA  51F1               	movf	_motor_direction& (0+255),w,b
 40611  00B8CC  6E2E               	movwf	??_motor_isr& (0+255),c
 40612  00B8CE  0E00               	movlw	0
 40613  00B8D0  BE2E               	btfsc	??_motor_isr& (0+255),7,c
 40614  00B8D2  0EFF               	movlw	255
 40615  00B8D4  6E2F               	movwf	(??_motor_isr+1)& (0+255),c
 40616  00B8D6  6E30               	movwf	(??_motor_isr+2)& (0+255),c
 40617  00B8D8  6E31               	movwf	(??_motor_isr+3)& (0+255),c
 40618  00B8DA  502E               	movf	??_motor_isr,w,c
 40619  00B8DC  0101               	movlb	1	; () banked
 40620  00B8DE  277A               	addwf	(_os+7)& (0+255),f,b	;volatile
 40621  00B8E0  502F               	movf	??_motor_isr+1,w,c
 40622  00B8E2  237B               	addwfc	(_os+8)& (0+255),f,b	;volatile
 40623  00B8E4  5030               	movf	??_motor_isr+2,w,c
 40624  00B8E6  237C               	addwfc	(_os+9)& (0+255),f,b	;volatile
 40625  00B8E8  5031               	movf	??_motor_isr+3,w,c
 40626  00B8EA  237D               	addwfc	(_os+10)& (0+255),f,b	;volatile
 40627                           
 40628                           ;motor.c: 316: if(os.current_position_in_steps==config.full_circle_in_steps)
 40629  00B8EC  51A3               	movf	_config& (0+255),w,b
 40630  00B8EE  197A               	xorwf	(_os+7)& (0+255),w,b	;volatile
 40631  00B8F0  E112               	bnz	i2l17064
 40632  00B8F2  51A4               	movf	(_config+1)& (0+255),w,b
 40633  00B8F4  197B               	xorwf	(_os+8)& (0+255),w,b	;volatile
 40634  00B8F6  E10F               	bnz	i2l17064
 40635  00B8F8  51A5               	movf	(_config+2)& (0+255),w,b
 40636  00B8FA  197C               	xorwf	(_os+9)& (0+255),w,b	;volatile
 40637  00B8FC  E10C               	bnz	i2l17064
 40638  00B8FE  51A6               	movf	(_config+3)& (0+255),w,b
 40639  00B900  197D               	xorwf	(_os+10)& (0+255),w,b	;volatile
 40640  00B902  A4D8               	btfss	status,2,c
 40641  00B904  D008               	goto	i2l2389
 40642                           
 40643                           ; BSR set to: 1
 40644                           ;motor.c: 317: os.current_position_in_steps = 0;
 40645  00B906  0E00               	movlw	0
 40646  00B908  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 40647  00B90A  0E00               	movlw	0
 40648  00B90C  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 40649  00B90E  0E00               	movlw	0
 40650  00B910  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 40651  00B912  0E00               	movlw	0
 40652  00B914  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 40653  00B916                     i2l2389:
 40654  00B916                     i2l17064:
 40655                           
 40656                           ; BSR set to: 1
 40657                           ;motor.c: 318: if(os.current_position_in_steps==0xFFFFFFFF)
 40658  00B916  297A               	incf	(_os+7)& (0+255),w,b	;volatile
 40659  00B918  E113               	bnz	i2l2390
 40660  00B91A  297B               	incf	(_os+8)& (0+255),w,b	;volatile
 40661  00B91C  E111               	bnz	i2l2390
 40662  00B91E  297C               	incf	(_os+9)& (0+255),w,b	;volatile
 40663  00B920  E10F               	bnz	i2l2390
 40664  00B922  297D               	incf	(_os+10)& (0+255),w,b	;volatile
 40665  00B924  A4D8               	btfss	status,2,c
 40666  00B926  D00C               	goto	i2l2390
 40667                           
 40668                           ; BSR set to: 1
 40669                           ;motor.c: 319: os.current_position_in_steps = (config.full_circle_in_steps-1);
 40670  00B928  0EFF               	movlw	255
 40671  00B92A  25A3               	addwf	_config& (0+255),w,b
 40672  00B92C  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 40673  00B92E  0EFF               	movlw	255
 40674  00B930  21A4               	addwfc	(_config+1)& (0+255),w,b
 40675  00B932  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 40676  00B934  0EFF               	movlw	255
 40677  00B936  21A5               	addwfc	(_config+2)& (0+255),w,b
 40678  00B938  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 40679  00B93A  0EFF               	movlw	255
 40680  00B93C  21A6               	addwfc	(_config+3)& (0+255),w,b
 40681  00B93E  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 40682  00B940                     i2l2390:
 40683                           
 40684                           ; BSR set to: 1
 40685                           ;motor.c: 322: if(motor_current_stepcount==motor_next_speed_check)
 40686  00B940  513E               	movf	_motor_next_speed_check& (0+255),w,b	;volatile
 40687  00B942  1816               	xorwf	_motor_current_stepcount,w,c	;volatile
 40688  00B944  E109               	bnz	i2u1665_41
 40689  00B946  513F               	movf	(_motor_next_speed_check+1)& (0+255),w,b	;volatile
 40690  00B948  1817               	xorwf	_motor_current_stepcount+1,w,c	;volatile
 40691  00B94A  E106               	bnz	i2u1665_41
 40692  00B94C  5140               	movf	(_motor_next_speed_check+2)& (0+255),w,b	;volatile
 40693  00B94E  1818               	xorwf	_motor_current_stepcount+2,w,c	;volatile
 40694  00B950  E103               	bnz	i2u1665_41
 40695  00B952  5141               	movf	(_motor_next_speed_check+3)& (0+255),w,b	;volatile
 40696  00B954  1819               	xorwf	_motor_current_stepcount+3,w,c	;volatile
 40697  00B956  A4D8               	btfss	status,2,c
 40698  00B958                     i2u1665_41:
 40699  00B958  D20F               	goto	i2l2403
 40700                           
 40701                           ; BSR set to: 1
 40702                           ;motor.c: 323: {;motor.c: 325: steps_remaining = motor_final_stepcount - motor_current_s
      +                          tepcount;
 40703  00B95A  C016  F02E         	movff	_motor_current_stepcount,??_motor_isr	;volatile
 40704  00B95E  C017  F02F         	movff	_motor_current_stepcount+1,??_motor_isr+1	;volatile
 40705  00B962  C018  F030         	movff	_motor_current_stepcount+2,??_motor_isr+2	;volatile
 40706  00B966  C019  F031         	movff	_motor_current_stepcount+3,??_motor_isr+3	;volatile
 40707  00B96A  1E2E               	comf	??_motor_isr,f,c
 40708  00B96C  1E2F               	comf	??_motor_isr+1,f,c
 40709  00B96E  1E30               	comf	??_motor_isr+2,f,c
 40710  00B970  1E31               	comf	??_motor_isr+3,f,c
 40711  00B972  2A2E               	incf	??_motor_isr,f,c
 40712  00B974  0E00               	movlw	0
 40713  00B976  222F               	addwfc	??_motor_isr+1,f,c
 40714  00B978  2230               	addwfc	??_motor_isr+2,f,c
 40715  00B97A  2231               	addwfc	??_motor_isr+3,f,c
 40716  00B97C  5142               	movf	_motor_final_stepcount& (0+255),w,b	;volatile
 40717  00B97E  242E               	addwf	??_motor_isr,w,c
 40718  00B980  6E42               	movwf	motor_isr@steps_remaining,c
 40719  00B982  5143               	movf	(_motor_final_stepcount+1)& (0+255),w,b	;volatile
 40720  00B984  202F               	addwfc	??_motor_isr+1,w,c
 40721  00B986  6E43               	movwf	motor_isr@steps_remaining+1,c
 40722  00B988  5144               	movf	(_motor_final_stepcount+2)& (0+255),w,b	;volatile
 40723  00B98A  2030               	addwfc	??_motor_isr+2,w,c
 40724  00B98C  6E44               	movwf	motor_isr@steps_remaining+2,c
 40725  00B98E  5145               	movf	(_motor_final_stepcount+3)& (0+255),w,b	;volatile
 40726  00B990  2031               	addwfc	??_motor_isr+3,w,c
 40727  00B992  6E45               	movwf	motor_isr@steps_remaining+3,c
 40728                           
 40729                           ; BSR set to: 1
 40730                           ;motor.c: 326: steps_until_standstill = motor_steps_lookup[motor_current_speed];
 40731  00B994  90D8               	bcf	status,0,c
 40732  00B996  0100               	movlb	0	; () banked
 40733  00B998  35E9               	rlcf	_motor_current_speed& (0+255),w,b	;volatile
 40734  00B99A  6EF6               	movwf	tblptrl,c
 40735  00B99C  35EA               	rlcf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40736  00B99E  6EF7               	movwf	tblptrh,c
 40737  00B9A0  0E61               	movlw	low _motor_steps_lookup
 40738  00B9A2  26F6               	addwf	tblptrl,f,c
 40739  00B9A4  0E94               	movlw	high _motor_steps_lookup
 40740  00B9A6  22F7               	addwfc	tblptrh,f,c
 40741  00B9A8                     	if	1	;There are 3 active tblptr bytes
 40742  00B9A8  6AF8               	clrf	tblptru,c
 40743  00B9AA  0E00               	movlw	low (__mediumconst shr (0+16))
 40744  00B9AC  22F8               	addwfc	tblptru,f,c
 40745  00B9AE                     	endif
 40746  00B9AE  0009               	tblrd		*+
 40747  00B9B0  CFF5 F03E          	movff	tablat,motor_isr@steps_until_standstill
 40748  00B9B4  000A               	tblrd		*-
 40749  00B9B6  CFF5 F03F          	movff	tablat,motor_isr@steps_until_standstill+1
 40750                           
 40751                           ; BSR set to: 0
 40752                           ;motor.c: 327: steps_until_standstill_if_accelerate = motor_steps_lookup[motor_current_s
      +                          peed+2];
 40753  00B9BA  C0E9  F02E         	movff	_motor_current_speed,??_motor_isr	;volatile
 40754  00B9BE  C0EA  F02F         	movff	_motor_current_speed+1,??_motor_isr+1	;volatile
 40755  00B9C2  90D8               	bcf	status,0,c
 40756  00B9C4  362E               	rlcf	??_motor_isr,f,c
 40757  00B9C6  362F               	rlcf	??_motor_isr+1,f,c
 40758  00B9C8  0E04               	movlw	4
 40759  00B9CA  262E               	addwf	??_motor_isr,f,c
 40760  00B9CC  0E00               	movlw	0
 40761  00B9CE  222F               	addwfc	??_motor_isr+1,f,c
 40762  00B9D0  0E61               	movlw	low _motor_steps_lookup
 40763  00B9D2  242E               	addwf	??_motor_isr,w,c
 40764  00B9D4  6EF6               	movwf	tblptrl,c
 40765  00B9D6  0E94               	movlw	high _motor_steps_lookup
 40766  00B9D8  202F               	addwfc	??_motor_isr+1,w,c
 40767  00B9DA  6EF7               	movwf	tblptrh,c
 40768  00B9DC                     	if	1	;There are 3 active tblptr bytes
 40769  00B9DC  6AF8               	clrf	tblptru,c
 40770  00B9DE  0E00               	movlw	low (__mediumconst shr (0+16))
 40771  00B9E0  22F8               	addwfc	tblptru,f,c
 40772  00B9E2                     	endif
 40773  00B9E2  0009               	tblrd		*+
 40774  00B9E4  CFF5 F040          	movff	tablat,motor_isr@steps_until_standstill_if_accelerate
 40775  00B9E8  000A               	tblrd		*-
 40776  00B9EA  CFF5 F041          	movff	tablat,motor_isr@steps_until_standstill_if_accelerate+1
 40777                           
 40778                           ;motor.c: 329: if((motor_current_speed>motor_maximum_speed) || (steps_until_standstill>=
      +                          steps_remaining))
 40779  00B9EE  51E9               	movf	_motor_current_speed& (0+255),w,b	;volatile
 40780  00B9F0  0101               	movlb	1	; () banked
 40781  00B9F2  5D62               	subwf	_motor_maximum_speed& (0+255),w,b
 40782  00B9F4  0100               	movlb	0	; () banked
 40783  00B9F6  51EA               	movf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40784  00B9F8  0101               	movlb	1	; () banked
 40785  00B9FA  5963               	subwfb	(_motor_maximum_speed+1)& (0+255),w,b
 40786  00B9FC  A0D8               	btfss	status,0,c
 40787  00B9FE  D010               	goto	i2u1667_40
 40788                           
 40789                           ; BSR set to: 1
 40790  00BA00  503E               	movf	motor_isr@steps_until_standstill,w,c
 40791  00BA02  6E2E               	movwf	??_motor_isr& (0+255),c
 40792  00BA04  503F               	movf	motor_isr@steps_until_standstill+1,w,c
 40793  00BA06  6E2F               	movwf	(??_motor_isr+1)& (0+255),c
 40794  00BA08  6A30               	clrf	(??_motor_isr+2)& (0+255),c
 40795  00BA0A  6A31               	clrf	(??_motor_isr+3)& (0+255),c
 40796  00BA0C  5042               	movf	motor_isr@steps_remaining,w,c
 40797  00BA0E  5C2E               	subwf	??_motor_isr,w,c
 40798  00BA10  5043               	movf	motor_isr@steps_remaining+1,w,c
 40799  00BA12  582F               	subwfb	??_motor_isr+1,w,c
 40800  00BA14  5044               	movf	motor_isr@steps_remaining+2,w,c
 40801  00BA16  5830               	subwfb	??_motor_isr+2,w,c
 40802  00BA18  5045               	movf	motor_isr@steps_remaining+3,w,c
 40803  00BA1A  5831               	subwfb	??_motor_isr+3,w,c
 40804  00BA1C  A0D8               	btfss	status,0,c
 40805  00BA1E  D0E0               	goto	i2l2392
 40806  00BA20                     i2u1667_40:
 40807                           
 40808                           ; BSR set to: 1
 40809                           ;motor.c: 330: {;motor.c: 332: if(motor_current_speed>0)
 40810                           
 40811                           ; BSR set to: 1
 40812  00BA20  0100               	movlb	0	; () banked
 40813  00BA22  51E9               	movf	_motor_current_speed& (0+255),w,b	;volatile
 40814  00BA24  11EA               	iorwf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40815  00BA26  B4D8               	btfsc	status,2,c
 40816  00BA28  D003               	goto	i2l2395
 40817                           
 40818                           ; BSR set to: 0
 40819                           ;motor.c: 333: {;motor.c: 334: --motor_current_speed;
 40820  00BA2A  07E9               	decf	_motor_current_speed& (0+255),f,b	;volatile
 40821  00BA2C  A0D8               	btfss	status,0,c
 40822  00BA2E  07EA               	decf	(_motor_current_speed+1)& (0+255),f,b	;volatile
 40823  00BA30                     i2l2395:
 40824                           
 40825                           ; BSR set to: 0
 40826                           ;motor.c: 335: };motor.c: 338: if((motor_mode==MOTOR_MODE_PWM) && (motor_postscaler_look
      +                          up[motor_current_speed]>0))
 40827                           
 40828                           ; BSR set to: 0
 40829  00BA30  0420               	decf	_motor_mode,w,c
 40830  00BA32  A4D8               	btfss	status,2,c
 40831  00BA34  D024               	goto	i2l2396
 40832                           
 40833                           ; BSR set to: 0
 40834  00BA36  0E2F               	movlw	low _motor_postscaler_lookup
 40835  00BA38  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 40836  00BA3A  6EF6               	movwf	tblptrl,c
 40837  00BA3C  0E98               	movlw	high _motor_postscaler_lookup
 40838  00BA3E  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40839  00BA40  6EF7               	movwf	tblptrh,c
 40840  00BA42                     	if	1	;There are 3 active tblptr bytes
 40841  00BA42  6AF8               	clrf	tblptru,c
 40842  00BA44  0E00               	movlw	low (__mediumconst shr (0+16))
 40843  00BA46  22F8               	addwfc	tblptru,f,c
 40844  00BA48                     	endif
 40845  00BA48  0008               	tblrd		*
 40846  00BA4A  50F5               	movf	tablat,w,c
 40847  00BA4C  0900               	iorlw	0
 40848  00BA4E  B4D8               	btfsc	status,2,c
 40849  00BA50  D016               	goto	i2l2396
 40850                           
 40851                           ; BSR set to: 0
 40852                           ;motor.c: 339: {;motor.c: 341: motor_mode = MOTOR_MODE_MANUAL;
 40853  00BA52  0E00               	movlw	0
 40854  00BA54  6E20               	movwf	_motor_mode,c
 40855                           
 40856                           ; BSR set to: 0
 40857                           ;motor.c: 344: LATBbits.LB1 = 1;
 40858  00BA56  828A               	bsf	3978,1,c	;volatile
 40859                           
 40860                           ;motor.c: 345: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 0;};
 40861  00BA58  0E55               	movlw	85
 40862  00BA5A  6EA7               	movwf	4007,c	;volsfr
 40863  00BA5C  0EAA               	movlw	170
 40864  00BA5E  6EA7               	movwf	4007,c	;volsfr
 40865                           
 40866                           ; BSR set to: 0
 40867  00BA60  010E               	movlb	14	; () banked
 40868  00BA62  91BF               	bcf	191,0,b	;volatile
 40869                           
 40870                           ;motor.c: 346: RPOR4 = 0;
 40871  00BA64  0E00               	movlw	0
 40872  00BA66  6FC4               	movwf	196,b	;volatile
 40873                           
 40874                           ;motor.c: 347: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 1;};
 40875  00BA68  0E55               	movlw	85
 40876  00BA6A  6EA7               	movwf	4007,c	;volsfr
 40877  00BA6C  0EAA               	movlw	170
 40878  00BA6E  6EA7               	movwf	4007,c	;volsfr
 40879                           
 40880                           ; BSR set to: 14
 40881  00BA70  81BF               	bsf	191,0,b	;volatile
 40882                           
 40883                           ;motor.c: 350: TMR2 = 0;
 40884  00BA72  0E00               	movlw	0
 40885  00BA74  6ECC               	movwf	4044,c	;volatile
 40886                           
 40887                           ; BSR set to: 14
 40888                           ;motor.c: 353: CCP1CONbits.CCP1M = 0b0000;
 40889  00BA76  90BA               	bcf	4026,0,c	;volatile
 40890  00BA78  92BA               	bcf	4026,1,c	;volatile
 40891  00BA7A  94BA               	bcf	4026,2,c	;volatile
 40892  00BA7C  96BA               	bcf	4026,3,c	;volatile
 40893  00BA7E                     i2l2396:
 40894                           
 40895                           ;motor.c: 354: };motor.c: 358: T2CONbits.T2CKPS = motor_prescaler_lookup[motor_current_s
      +                          peed];
 40896                           
 40897                           ; BSR set to: 14
 40898  00BA7E  0EFD               	movlw	low _motor_prescaler_lookup
 40899  00BA80  0100               	movlb	0	; () banked
 40900  00BA82  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 40901  00BA84  6EF6               	movwf	tblptrl,c
 40902  00BA86  0E9B               	movlw	high _motor_prescaler_lookup
 40903  00BA88  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40904  00BA8A  6EF7               	movwf	tblptrh,c
 40905  00BA8C                     	if	1	;There are 3 active tblptr bytes
 40906  00BA8C  6AF8               	clrf	tblptru,c
 40907  00BA8E  0E00               	movlw	low (__mediumconst shr (0+16))
 40908  00BA90  22F8               	addwfc	tblptru,f,c
 40909  00BA92                     	endif
 40910  00BA92  0008               	tblrd		*
 40911  00BA94  CFF5 F02E          	movff	tablat,??_motor_isr
 40912  00BA98  50CA               	movf	4042,w,c	;volatile
 40913  00BA9A  182E               	xorwf	??_motor_isr,w,c
 40914  00BA9C  0BFC               	andlw	-4
 40915  00BA9E  182E               	xorwf	??_motor_isr,w,c
 40916  00BAA0  6ECA               	movwf	4042,c	;volatile
 40917                           
 40918                           ; BSR set to: 0
 40919                           ;motor.c: 360: PR2 = motor_period_lookup[motor_current_speed];
 40920  00BAA2  0E16               	movlw	low _motor_period_lookup
 40921  00BAA4  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 40922  00BAA6  6EF6               	movwf	tblptrl,c
 40923  00BAA8  0E9A               	movlw	high _motor_period_lookup
 40924  00BAAA  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40925  00BAAC  6EF7               	movwf	tblptrh,c
 40926  00BAAE                     	if	1	;There are 3 active tblptr bytes
 40927  00BAAE  6AF8               	clrf	tblptru,c
 40928  00BAB0  0E00               	movlw	low (__mediumconst shr (0+16))
 40929  00BAB2  22F8               	addwfc	tblptru,f,c
 40930  00BAB4                     	endif
 40931  00BAB4  0008               	tblrd		*
 40932  00BAB6  CFF5 FFCB          	movff	tablat,4043	;volatile
 40933                           
 40934                           ; BSR set to: 0
 40935                           ;motor.c: 362: T2CONbits.T2OUTPS = motor_postscaler_lookup[motor_current_speed];
 40936  00BABA  0E2F               	movlw	low _motor_postscaler_lookup
 40937  00BABC  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 40938  00BABE  6EF6               	movwf	tblptrl,c
 40939  00BAC0  0E98               	movlw	high _motor_postscaler_lookup
 40940  00BAC2  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40941  00BAC4  6EF7               	movwf	tblptrh,c
 40942  00BAC6                     	if	1	;There are 3 active tblptr bytes
 40943  00BAC6  6AF8               	clrf	tblptru,c
 40944  00BAC8  0E00               	movlw	low (__mediumconst shr (0+16))
 40945  00BACA  22F8               	addwfc	tblptru,f,c
 40946  00BACC                     	endif
 40947  00BACC  0008               	tblrd		*
 40948  00BACE  CFF5 F02E          	movff	tablat,??_motor_isr
 40949  00BAD2  462E               	rlncf	??_motor_isr,f,c
 40950  00BAD4  462E               	rlncf	??_motor_isr,f,c
 40951  00BAD6  462E               	rlncf	??_motor_isr,f,c
 40952  00BAD8  50CA               	movf	4042,w,c	;volatile
 40953  00BADA  182E               	xorwf	??_motor_isr,w,c
 40954  00BADC  0B87               	andlw	-121
 40955  00BADE  182E               	xorwf	??_motor_isr,w,c
 40956  00BAE0  6ECA               	movwf	4042,c	;volatile
 40957                           
 40958                           ; BSR set to: 0
 40959                           ;motor.c: 364: CCPR1L = PR2>>1;
 40960  00BAE2  90D8               	bcf	status,0,c
 40961  00BAE4  30CB               	rrcf	4043,w,c	;volatile
 40962  00BAE6  6EBB               	movwf	4027,c	;volatile
 40963                           
 40964                           ; BSR set to: 0
 40965                           ;motor.c: 367: if(motor_current_speed>0)
 40966  00BAE8  51E9               	movf	_motor_current_speed& (0+255),w,b	;volatile
 40967  00BAEA  11EA               	iorwf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 40968  00BAEC  B4D8               	btfsc	status,2,c
 40969  00BAEE  D058               	goto	i2l2397
 40970                           
 40971                           ; BSR set to: 0
 40972                           ;motor.c: 368: {;motor.c: 369: motor_next_speed_check = motor_current_stepcount + motor_
      +                          steps_lookup[motor_current_speed] - motor_steps_lookup[motor_current_speed-1];
 40973  00BAF0  0EFE               	movlw	254
 40974  00BAF2  6E2E               	movwf	??_motor_isr& (0+255),c
 40975  00BAF4  0EFF               	movlw	255
 40976  00BAF6  6E2F               	movwf	(??_motor_isr+1)& (0+255),c
 40977  00BAF8  C0E9  F030         	movff	_motor_current_speed,??_motor_isr+2	;volatile
 40978  00BAFC  C0EA  F031         	movff	_motor_current_speed+1,??_motor_isr+3	;volatile
 40979  00BB00  90D8               	bcf	status,0,c
 40980  00BB02  3630               	rlcf	??_motor_isr+2,f,c
 40981  00BB04  3631               	rlcf	??_motor_isr+3,f,c
 40982  00BB06  502E               	movf	??_motor_isr,w,c
 40983  00BB08  2630               	addwf	??_motor_isr+2,f,c
 40984  00BB0A  502F               	movf	??_motor_isr+1,w,c
 40985  00BB0C  2231               	addwfc	??_motor_isr+3,f,c
 40986  00BB0E  0E61               	movlw	low _motor_steps_lookup
 40987  00BB10  2430               	addwf	??_motor_isr+2,w,c
 40988  00BB12  6EF6               	movwf	tblptrl,c
 40989  00BB14  0E94               	movlw	high _motor_steps_lookup
 40990  00BB16  2031               	addwfc	??_motor_isr+3,w,c
 40991  00BB18  6EF7               	movwf	tblptrh,c
 40992  00BB1A                     	if	1	;There are 3 active tblptr bytes
 40993  00BB1A  6AF8               	clrf	tblptru,c
 40994  00BB1C  0E00               	movlw	low (__mediumconst shr (0+16))
 40995  00BB1E  22F8               	addwfc	tblptru,f,c
 40996  00BB20                     	endif
 40997  00BB20  0009               	tblrd		*+
 40998  00BB22  CFF5 F032          	movff	tablat,??_motor_isr+4
 40999  00BB26  0009               	tblrd		*+
 41000  00BB28  CFF5 F033          	movff	tablat,??_motor_isr+5
 41001  00BB2C  5032               	movf	??_motor_isr+4,w,c
 41002  00BB2E  6E34               	movwf	(??_motor_isr+6)& (0+255),c
 41003  00BB30  5033               	movf	??_motor_isr+5,w,c
 41004  00BB32  6E35               	movwf	(??_motor_isr+7)& (0+255),c
 41005  00BB34  6A36               	clrf	(??_motor_isr+8)& (0+255),c
 41006  00BB36  6A37               	clrf	(??_motor_isr+9)& (0+255),c
 41007  00BB38  1E34               	comf	??_motor_isr+6,f,c
 41008  00BB3A  1E35               	comf	??_motor_isr+7,f,c
 41009  00BB3C  1E36               	comf	??_motor_isr+8,f,c
 41010  00BB3E  1E37               	comf	??_motor_isr+9,f,c
 41011  00BB40  2A34               	incf	??_motor_isr+6,f,c
 41012  00BB42  0E00               	movlw	0
 41013  00BB44  2235               	addwfc	??_motor_isr+7,f,c
 41014  00BB46  2236               	addwfc	??_motor_isr+8,f,c
 41015  00BB48  2237               	addwfc	??_motor_isr+9,f,c
 41016  00BB4A  90D8               	bcf	status,0,c
 41017  00BB4C  35E9               	rlcf	_motor_current_speed& (0+255),w,b	;volatile
 41018  00BB4E  6EF6               	movwf	tblptrl,c
 41019  00BB50  35EA               	rlcf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41020  00BB52  6EF7               	movwf	tblptrh,c
 41021  00BB54  0E61               	movlw	low _motor_steps_lookup
 41022  00BB56  26F6               	addwf	tblptrl,f,c
 41023  00BB58  0E94               	movlw	high _motor_steps_lookup
 41024  00BB5A  22F7               	addwfc	tblptrh,f,c
 41025  00BB5C                     	if	1	;There are 3 active tblptr bytes
 41026  00BB5C  6AF8               	clrf	tblptru,c
 41027  00BB5E  0E00               	movlw	low (__mediumconst shr (0+16))
 41028  00BB60  22F8               	addwfc	tblptru,f,c
 41029  00BB62                     	endif
 41030  00BB62  0009               	tblrd		*+
 41031  00BB64  CFF5 F038          	movff	tablat,??_motor_isr+10
 41032  00BB68  0009               	tblrd		*+
 41033  00BB6A  CFF5 F039          	movff	tablat,??_motor_isr+11
 41034  00BB6E  5038               	movf	??_motor_isr+10,w,c
 41035  00BB70  2434               	addwf	??_motor_isr+6,w,c
 41036  00BB72  6E3A               	movwf	(??_motor_isr+12)& (0+255),c
 41037  00BB74  5039               	movf	??_motor_isr+11,w,c
 41038  00BB76  2035               	addwfc	??_motor_isr+7,w,c
 41039  00BB78  6E3B               	movwf	(??_motor_isr+13)& (0+255),c
 41040  00BB7A  0E00               	movlw	0
 41041  00BB7C  2036               	addwfc	??_motor_isr+8,w,c
 41042  00BB7E  6E3C               	movwf	(??_motor_isr+14)& (0+255),c
 41043  00BB80  0E00               	movlw	0
 41044  00BB82  2037               	addwfc	??_motor_isr+9,w,c
 41045  00BB84  6E3D               	movwf	(??_motor_isr+15)& (0+255),c
 41046  00BB86  5016               	movf	_motor_current_stepcount,w,c	;volatile
 41047  00BB88  243A               	addwf	??_motor_isr+12,w,c
 41048  00BB8A  0101               	movlb	1	; () banked
 41049  00BB8C  6F3E               	movwf	_motor_next_speed_check& (0+255),b	;volatile
 41050  00BB8E  5017               	movf	_motor_current_stepcount+1,w,c	;volatile
 41051  00BB90  203B               	addwfc	??_motor_isr+13,w,c
 41052  00BB92  6F3F               	movwf	(_motor_next_speed_check+1)& (0+255),b	;volatile
 41053  00BB94  5018               	movf	_motor_current_stepcount+2,w,c	;volatile
 41054  00BB96  203C               	addwfc	??_motor_isr+14,w,c
 41055  00BB98  6F40               	movwf	(_motor_next_speed_check+2)& (0+255),b	;volatile
 41056  00BB9A  5019               	movf	_motor_current_stepcount+3,w,c	;volatile
 41057  00BB9C  203D               	addwfc	??_motor_isr+15,w,c
 41058  00BB9E  D0EB               	goto	L70
 41059  00BBA0                     i2l2397:
 41060                           
 41061                           ;motor.c: 371: else;motor.c: 372: {;motor.c: 373: motor_next_speed_check = motor_current
      +                          _stepcount + motor_steps_lookup[motor_current_speed];
 41062                           
 41063                           ; BSR set to: 1
 41064  00BBA0  90D8               	bcf	status,0,c
 41065  00BBA2  0100               	movlb	0	; () banked
 41066  00BBA4  35E9               	rlcf	_motor_current_speed& (0+255),w,b	;volatile
 41067  00BBA6  6EF6               	movwf	tblptrl,c
 41068  00BBA8  35EA               	rlcf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41069  00BBAA  6EF7               	movwf	tblptrh,c
 41070  00BBAC  0E61               	movlw	low _motor_steps_lookup
 41071  00BBAE  26F6               	addwf	tblptrl,f,c
 41072  00BBB0  0E94               	movlw	high _motor_steps_lookup
 41073  00BBB2  22F7               	addwfc	tblptrh,f,c
 41074  00BBB4                     	if	1	;There are 3 active tblptr bytes
 41075  00BBB4  6AF8               	clrf	tblptru,c
 41076  00BBB6  0E00               	movlw	low (__mediumconst shr (0+16))
 41077  00BBB8  22F8               	addwfc	tblptru,f,c
 41078  00BBBA                     	endif
 41079  00BBBA  0009               	tblrd		*+
 41080  00BBBC  CFF5 F02E          	movff	tablat,??_motor_isr
 41081  00BBC0  0009               	tblrd		*+
 41082  00BBC2  CFF5 F02F          	movff	tablat,??_motor_isr+1
 41083  00BBC6  502E               	movf	??_motor_isr,w,c
 41084  00BBC8  2416               	addwf	_motor_current_stepcount,w,c	;volatile
 41085  00BBCA  0101               	movlb	1	; () banked
 41086  00BBCC  6F3E               	movwf	_motor_next_speed_check& (0+255),b	;volatile
 41087  00BBCE  502F               	movf	??_motor_isr+1,w,c
 41088  00BBD0  2017               	addwfc	_motor_current_stepcount+1,w,c	;volatile
 41089  00BBD2  6F3F               	movwf	(_motor_next_speed_check+1)& (0+255),b	;volatile
 41090  00BBD4  0E00               	movlw	0
 41091  00BBD6  2018               	addwfc	_motor_current_stepcount+2,w,c	;volatile
 41092  00BBD8  6F40               	movwf	(_motor_next_speed_check+2)& (0+255),b	;volatile
 41093  00BBDA  0E00               	movlw	0
 41094  00BBDC  2019               	addwfc	_motor_current_stepcount+3,w,c	;volatile
 41095  00BBDE  D0CB               	goto	L70
 41096  00BBE0                     i2l2392:
 41097                           
 41098                           ; BSR set to: 1
 41099                           ;motor.c: 376: else if((motor_current_speed==motor_maximum_speed) || (steps_until_stands
      +                          till_if_accelerate>=steps_remaining))
 41100                           
 41101                           ; BSR set to: 1
 41102  00BBE0  5162               	movf	_motor_maximum_speed& (0+255),w,b
 41103  00BBE2  0100               	movlb	0	; () banked
 41104  00BBE4  19E9               	xorwf	_motor_current_speed& (0+255),w,b	;volatile
 41105  00BBE6  E106               	bnz	i2u1672_40
 41106  00BBE8  0101               	movlb	1	; () banked
 41107  00BBEA  5163               	movf	(_motor_maximum_speed+1)& (0+255),w,b
 41108  00BBEC  0100               	movlb	0	; () banked
 41109  00BBEE  19EA               	xorwf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41110  00BBF0  B4D8               	btfsc	status,2,c
 41111  00BBF2  D010               	goto	i2u1673_40
 41112  00BBF4                     i2u1672_40:
 41113                           
 41114                           ; BSR set to: 0
 41115  00BBF4  5040               	movf	motor_isr@steps_until_standstill_if_accelerate,w,c
 41116  00BBF6  6E2E               	movwf	??_motor_isr& (0+255),c
 41117  00BBF8  5041               	movf	motor_isr@steps_until_standstill_if_accelerate+1,w,c
 41118  00BBFA  6E2F               	movwf	(??_motor_isr+1)& (0+255),c
 41119  00BBFC  6A30               	clrf	(??_motor_isr+2)& (0+255),c
 41120  00BBFE  6A31               	clrf	(??_motor_isr+3)& (0+255),c
 41121  00BC00  5042               	movf	motor_isr@steps_remaining,w,c
 41122  00BC02  5C2E               	subwf	??_motor_isr,w,c
 41123  00BC04  5043               	movf	motor_isr@steps_remaining+1,w,c
 41124  00BC06  582F               	subwfb	??_motor_isr+1,w,c
 41125  00BC08  5044               	movf	motor_isr@steps_remaining+2,w,c
 41126  00BC0A  5830               	subwfb	??_motor_isr+2,w,c
 41127  00BC0C  5045               	movf	motor_isr@steps_remaining+3,w,c
 41128  00BC0E  5831               	subwfb	??_motor_isr+3,w,c
 41129  00BC10  A0D8               	btfss	status,0,c
 41130  00BC12  D002               	goto	i2l2400
 41131  00BC14                     i2u1673_40:
 41132                           
 41133                           ; BSR set to: 0
 41134                           ;motor.c: 377: {;motor.c: 380: motor_next_speed_check = motor_current_stepcount + motor_
      +                          steps_lookup[motor_current_speed+1] - motor_steps_lookup[motor_current_speed];
 41135                           
 41136                           ; BSR set to: 0
 41137  00BC14  90D8               	bcf	status,0,c
 41138  00BC16  D05D               	goto	L69
 41139  00BC18                     i2l2400:
 41140                           
 41141                           ;motor.c: 382: else;motor.c: 383: {;motor.c: 385: ++motor_current_speed;
 41142                           
 41143                           ; BSR set to: 1
 41144  00BC18  0100               	movlb	0	; () banked
 41145  00BC1A  4BE9               	infsnz	_motor_current_speed& (0+255),f,b	;volatile
 41146  00BC1C  2BEA               	incf	(_motor_current_speed+1)& (0+255),f,b	;volatile
 41147                           
 41148                           ; BSR set to: 0
 41149                           ;motor.c: 389: T2CONbits.T2CKPS = motor_prescaler_lookup[motor_current_speed];
 41150  00BC1E  0EFD               	movlw	low _motor_prescaler_lookup
 41151  00BC20  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 41152  00BC22  6EF6               	movwf	tblptrl,c
 41153  00BC24  0E9B               	movlw	high _motor_prescaler_lookup
 41154  00BC26  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41155  00BC28  6EF7               	movwf	tblptrh,c
 41156  00BC2A                     	if	1	;There are 3 active tblptr bytes
 41157  00BC2A  6AF8               	clrf	tblptru,c
 41158  00BC2C  0E00               	movlw	low (__mediumconst shr (0+16))
 41159  00BC2E  22F8               	addwfc	tblptru,f,c
 41160  00BC30                     	endif
 41161  00BC30  0008               	tblrd		*
 41162  00BC32  CFF5 F02E          	movff	tablat,??_motor_isr
 41163  00BC36  50CA               	movf	4042,w,c	;volatile
 41164  00BC38  182E               	xorwf	??_motor_isr,w,c
 41165  00BC3A  0BFC               	andlw	-4
 41166  00BC3C  182E               	xorwf	??_motor_isr,w,c
 41167  00BC3E  6ECA               	movwf	4042,c	;volatile
 41168                           
 41169                           ; BSR set to: 0
 41170                           ;motor.c: 391: PR2 = motor_period_lookup[motor_current_speed];
 41171  00BC40  0E16               	movlw	low _motor_period_lookup
 41172  00BC42  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 41173  00BC44  6EF6               	movwf	tblptrl,c
 41174  00BC46  0E9A               	movlw	high _motor_period_lookup
 41175  00BC48  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41176  00BC4A  6EF7               	movwf	tblptrh,c
 41177  00BC4C                     	if	1	;There are 3 active tblptr bytes
 41178  00BC4C  6AF8               	clrf	tblptru,c
 41179  00BC4E  0E00               	movlw	low (__mediumconst shr (0+16))
 41180  00BC50  22F8               	addwfc	tblptru,f,c
 41181  00BC52                     	endif
 41182  00BC52  0008               	tblrd		*
 41183  00BC54  CFF5 FFCB          	movff	tablat,4043	;volatile
 41184                           
 41185                           ; BSR set to: 0
 41186                           ;motor.c: 393: T2CONbits.T2OUTPS = motor_postscaler_lookup[motor_current_speed];
 41187  00BC58  0E2F               	movlw	low _motor_postscaler_lookup
 41188  00BC5A  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 41189  00BC5C  6EF6               	movwf	tblptrl,c
 41190  00BC5E  0E98               	movlw	high _motor_postscaler_lookup
 41191  00BC60  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41192  00BC62  6EF7               	movwf	tblptrh,c
 41193  00BC64                     	if	1	;There are 3 active tblptr bytes
 41194  00BC64  6AF8               	clrf	tblptru,c
 41195  00BC66  0E00               	movlw	low (__mediumconst shr (0+16))
 41196  00BC68  22F8               	addwfc	tblptru,f,c
 41197  00BC6A                     	endif
 41198  00BC6A  0008               	tblrd		*
 41199  00BC6C  CFF5 F02E          	movff	tablat,??_motor_isr
 41200  00BC70  462E               	rlncf	??_motor_isr,f,c
 41201  00BC72  462E               	rlncf	??_motor_isr,f,c
 41202  00BC74  462E               	rlncf	??_motor_isr,f,c
 41203  00BC76  50CA               	movf	4042,w,c	;volatile
 41204  00BC78  182E               	xorwf	??_motor_isr,w,c
 41205  00BC7A  0B87               	andlw	-121
 41206  00BC7C  182E               	xorwf	??_motor_isr,w,c
 41207  00BC7E  6ECA               	movwf	4042,c	;volatile
 41208                           
 41209                           ; BSR set to: 0
 41210                           ;motor.c: 395: CCPR1L = PR2>>1;
 41211  00BC80  90D8               	bcf	status,0,c
 41212  00BC82  30CB               	rrcf	4043,w,c	;volatile
 41213  00BC84  6EBB               	movwf	4027,c	;volatile
 41214                           
 41215                           ; BSR set to: 0
 41216                           ;motor.c: 397: if((motor_mode==MOTOR_MODE_MANUAL) && (motor_postscaler_lookup[motor_curr
      +                          ent_speed]==0))
 41217  00BC86  5020               	movf	_motor_mode,w,c
 41218  00BC88  A4D8               	btfss	status,2,c
 41219  00BC8A  D021               	goto	i2l2404
 41220                           
 41221                           ; BSR set to: 0
 41222  00BC8C  0E2F               	movlw	low _motor_postscaler_lookup
 41223  00BC8E  25E9               	addwf	_motor_current_speed& (0+255),w,b	;volatile
 41224  00BC90  6EF6               	movwf	tblptrl,c
 41225  00BC92  0E98               	movlw	high _motor_postscaler_lookup
 41226  00BC94  21EA               	addwfc	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41227  00BC96  6EF7               	movwf	tblptrh,c
 41228  00BC98                     	if	1	;There are 3 active tblptr bytes
 41229  00BC98  6AF8               	clrf	tblptru,c
 41230  00BC9A  0E00               	movlw	low (__mediumconst shr (0+16))
 41231  00BC9C  22F8               	addwfc	tblptru,f,c
 41232  00BC9E                     	endif
 41233  00BC9E  0008               	tblrd		*
 41234  00BCA0  50F5               	movf	tablat,w,c
 41235  00BCA2  0900               	iorlw	0
 41236  00BCA4  A4D8               	btfss	status,2,c
 41237  00BCA6  D013               	goto	i2l2404
 41238                           
 41239                           ; BSR set to: 0
 41240                           ;motor.c: 398: {;motor.c: 400: motor_mode = MOTOR_MODE_PWM;
 41241  00BCA8  0E01               	movlw	1
 41242  00BCAA  6E20               	movwf	_motor_mode,c
 41243                           
 41244                           ;motor.c: 403: CCP1CONbits.CCP1M = 0b1100;
 41245  00BCAC  50BA               	movf	4026,w,c	;volatile
 41246  00BCAE  0BF0               	andlw	-16
 41247  00BCB0  090C               	iorlw	12
 41248  00BCB2  6EBA               	movwf	4026,c	;volatile
 41249                           
 41250                           ;motor.c: 406: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 0;};
 41251  00BCB4  0E55               	movlw	85
 41252  00BCB6  6EA7               	movwf	4007,c	;volsfr
 41253  00BCB8  0EAA               	movlw	170
 41254  00BCBA  6EA7               	movwf	4007,c	;volsfr
 41255                           
 41256                           ; BSR set to: 0
 41257  00BCBC  010E               	movlb	14	; () banked
 41258  00BCBE  91BF               	bcf	191,0,b	;volatile
 41259                           
 41260                           ;motor.c: 407: RPOR4 = 14;
 41261  00BCC0  0E0E               	movlw	14
 41262  00BCC2  6FC4               	movwf	196,b	;volatile
 41263                           
 41264                           ;motor.c: 408: {EECON2 = 0b01010101; EECON2 = 0b10101010; PPSCONbits.IOLOCK = 1;};
 41265  00BCC4  0E55               	movlw	85
 41266  00BCC6  6EA7               	movwf	4007,c	;volsfr
 41267  00BCC8  0EAA               	movlw	170
 41268  00BCCA  6EA7               	movwf	4007,c	;volsfr
 41269                           
 41270                           ; BSR set to: 14
 41271  00BCCC  81BF               	bsf	191,0,b	;volatile
 41272  00BCCE                     i2l2404:
 41273                           
 41274                           ;motor.c: 409: };motor.c: 412: motor_next_speed_check = motor_current_stepcount + motor_
      +                          steps_lookup[motor_current_speed+1] - motor_steps_lookup[motor_current_speed];
 41275                           
 41276                           ; BSR set to: 14
 41277  00BCCE  90D8               	bcf	status,0,c
 41278  00BCD0  0100               	movlb	0	; () banked
 41279  00BCD2                     L69:
 41280  00BCD2  35E9               	rlcf	_motor_current_speed& (0+255),w,b	;volatile
 41281  00BCD4  6EF6               	movwf	tblptrl,c
 41282  00BCD6  35EA               	rlcf	(_motor_current_speed+1)& (0+255),w,b	;volatile
 41283  00BCD8  6EF7               	movwf	tblptrh,c
 41284  00BCDA  0E61               	movlw	low _motor_steps_lookup
 41285  00BCDC  26F6               	addwf	tblptrl,f,c
 41286  00BCDE  0E94               	movlw	high _motor_steps_lookup
 41287  00BCE0  22F7               	addwfc	tblptrh,f,c
 41288  00BCE2                     	if	1	;There are 3 active tblptr bytes
 41289  00BCE2  6AF8               	clrf	tblptru,c
 41290  00BCE4  0E00               	movlw	low (__mediumconst shr (0+16))
 41291  00BCE6  22F8               	addwfc	tblptru,f,c
 41292  00BCE8                     	endif
 41293  00BCE8  0009               	tblrd		*+
 41294  00BCEA  CFF5 F02E          	movff	tablat,??_motor_isr
 41295  00BCEE  0009               	tblrd		*+
 41296  00BCF0  CFF5 F02F          	movff	tablat,??_motor_isr+1
 41297  00BCF4  502E               	movf	??_motor_isr,w,c
 41298  00BCF6  6E30               	movwf	(??_motor_isr+2)& (0+255),c
 41299  00BCF8  502F               	movf	??_motor_isr+1,w,c
 41300  00BCFA  6E31               	movwf	(??_motor_isr+3)& (0+255),c
 41301  00BCFC  6A32               	clrf	(??_motor_isr+4)& (0+255),c
 41302  00BCFE  6A33               	clrf	(??_motor_isr+5)& (0+255),c
 41303  00BD00  1E30               	comf	??_motor_isr+2,f,c
 41304  00BD02  1E31               	comf	??_motor_isr+3,f,c
 41305  00BD04  1E32               	comf	??_motor_isr+4,f,c
 41306  00BD06  1E33               	comf	??_motor_isr+5,f,c
 41307  00BD08  2A30               	incf	??_motor_isr+2,f,c
 41308  00BD0A  0E00               	movlw	0
 41309  00BD0C  2231               	addwfc	??_motor_isr+3,f,c
 41310  00BD0E  2232               	addwfc	??_motor_isr+4,f,c
 41311  00BD10  2233               	addwfc	??_motor_isr+5,f,c
 41312  00BD12  C0E9  F034         	movff	_motor_current_speed,??_motor_isr+6	;volatile
 41313  00BD16  C0EA  F035         	movff	_motor_current_speed+1,??_motor_isr+7	;volatile
 41314  00BD1A  90D8               	bcf	status,0,c
 41315  00BD1C  3634               	rlcf	??_motor_isr+6,f,c
 41316  00BD1E  3635               	rlcf	??_motor_isr+7,f,c
 41317  00BD20  0E02               	movlw	2
 41318  00BD22  2634               	addwf	??_motor_isr+6,f,c
 41319  00BD24  0E00               	movlw	0
 41320  00BD26  2235               	addwfc	??_motor_isr+7,f,c
 41321  00BD28  0E61               	movlw	low _motor_steps_lookup
 41322  00BD2A  2434               	addwf	??_motor_isr+6,w,c
 41323  00BD2C  6EF6               	movwf	tblptrl,c
 41324  00BD2E  0E94               	movlw	high _motor_steps_lookup
 41325  00BD30  2035               	addwfc	??_motor_isr+7,w,c
 41326  00BD32  6EF7               	movwf	tblptrh,c
 41327  00BD34                     	if	1	;There are 3 active tblptr bytes
 41328  00BD34  6AF8               	clrf	tblptru,c
 41329  00BD36  0E00               	movlw	low (__mediumconst shr (0+16))
 41330  00BD38  22F8               	addwfc	tblptru,f,c
 41331  00BD3A                     	endif
 41332  00BD3A  0009               	tblrd		*+
 41333  00BD3C  CFF5 F036          	movff	tablat,??_motor_isr+8
 41334  00BD40  0009               	tblrd		*+
 41335  00BD42  CFF5 F037          	movff	tablat,??_motor_isr+9
 41336  00BD46  5036               	movf	??_motor_isr+8,w,c
 41337  00BD48  2430               	addwf	??_motor_isr+2,w,c
 41338  00BD4A  6E38               	movwf	(??_motor_isr+10)& (0+255),c
 41339  00BD4C  5037               	movf	??_motor_isr+9,w,c
 41340  00BD4E  2031               	addwfc	??_motor_isr+3,w,c
 41341  00BD50  6E39               	movwf	(??_motor_isr+11)& (0+255),c
 41342  00BD52  0E00               	movlw	0
 41343  00BD54  2032               	addwfc	??_motor_isr+4,w,c
 41344  00BD56  6E3A               	movwf	(??_motor_isr+12)& (0+255),c
 41345  00BD58  0E00               	movlw	0
 41346  00BD5A  2033               	addwfc	??_motor_isr+5,w,c
 41347  00BD5C  6E3B               	movwf	(??_motor_isr+13)& (0+255),c
 41348  00BD5E  5016               	movf	_motor_current_stepcount,w,c	;volatile
 41349  00BD60  2438               	addwf	??_motor_isr+10,w,c
 41350  00BD62  0101               	movlb	1	; () banked
 41351  00BD64  6F3E               	movwf	_motor_next_speed_check& (0+255),b	;volatile
 41352  00BD66  5017               	movf	_motor_current_stepcount+1,w,c	;volatile
 41353  00BD68  2039               	addwfc	??_motor_isr+11,w,c
 41354  00BD6A  6F3F               	movwf	(_motor_next_speed_check+1)& (0+255),b	;volatile
 41355  00BD6C  5018               	movf	_motor_current_stepcount+2,w,c	;volatile
 41356  00BD6E  203A               	addwfc	??_motor_isr+12,w,c
 41357  00BD70  6F40               	movwf	(_motor_next_speed_check+2)& (0+255),b	;volatile
 41358  00BD72  5019               	movf	_motor_current_stepcount+3,w,c	;volatile
 41359  00BD74  203B               	addwfc	??_motor_isr+13,w,c
 41360  00BD76                     L70:
 41361  00BD76  6F41               	movwf	(_motor_next_speed_check+3)& (0+255),b	;volatile
 41362  00BD78                     i2l2403:
 41363                           
 41364                           ; BSR set to: 1
 41365                           ;motor.c: 413: };motor.c: 414: };motor.c: 417: if(PIR1bits.TMR2IF)
 41366                           
 41367                           ; BSR set to: 1
 41368                           
 41369                           ; BSR set to: 1
 41370                           
 41371                           ; BSR set to: 1
 41372  00BD78  A29E               	btfss	3998,1,c	;volatile
 41373  00BD7A  0012               	return	
 41374                           
 41375                           ; BSR set to: 1
 41376                           ;motor.c: 418: {;motor.c: 420: PIR1bits.TMR2IF = 0;
 41377  00BD7C  929E               	bcf	3998,1,c	;volatile
 41378                           
 41379                           ; BSR set to: 1
 41380                           ;motor.c: 422: ++motor_current_stepcount;
 41381  00BD7E  0E01               	movlw	1
 41382  00BD80  2616               	addwf	_motor_current_stepcount,f,c	;volatile
 41383  00BD82  0E00               	movlw	0
 41384  00BD84  2217               	addwfc	_motor_current_stepcount+1,f,c	;volatile
 41385  00BD86  2218               	addwfc	_motor_current_stepcount+2,f,c	;volatile
 41386  00BD88  2219               	addwfc	_motor_current_stepcount+3,f,c	;volatile
 41387                           
 41388                           ;motor.c: 425: os.current_position_in_steps += motor_direction;
 41389  00BD8A  0100               	movlb	0	; () banked
 41390  00BD8C  51F1               	movf	_motor_direction& (0+255),w,b
 41391  00BD8E  6E2E               	movwf	??_motor_isr& (0+255),c
 41392  00BD90  0E00               	movlw	0
 41393  00BD92  BE2E               	btfsc	??_motor_isr& (0+255),7,c
 41394  00BD94  0EFF               	movlw	255
 41395  00BD96  6E2F               	movwf	(??_motor_isr+1)& (0+255),c
 41396  00BD98  6E30               	movwf	(??_motor_isr+2)& (0+255),c
 41397  00BD9A  6E31               	movwf	(??_motor_isr+3)& (0+255),c
 41398  00BD9C  502E               	movf	??_motor_isr,w,c
 41399  00BD9E  0101               	movlb	1	; () banked
 41400  00BDA0  277A               	addwf	(_os+7)& (0+255),f,b	;volatile
 41401  00BDA2  502F               	movf	??_motor_isr+1,w,c
 41402  00BDA4  237B               	addwfc	(_os+8)& (0+255),f,b	;volatile
 41403  00BDA6  5030               	movf	??_motor_isr+2,w,c
 41404  00BDA8  237C               	addwfc	(_os+9)& (0+255),f,b	;volatile
 41405  00BDAA  5031               	movf	??_motor_isr+3,w,c
 41406  00BDAC  237D               	addwfc	(_os+10)& (0+255),f,b	;volatile
 41407                           
 41408                           ;motor.c: 426: if(os.current_position_in_steps==config.full_circle_in_steps)
 41409  00BDAE  51A3               	movf	_config& (0+255),w,b
 41410  00BDB0  197A               	xorwf	(_os+7)& (0+255),w,b	;volatile
 41411  00BDB2  E112               	bnz	i2l17144
 41412  00BDB4  51A4               	movf	(_config+1)& (0+255),w,b
 41413  00BDB6  197B               	xorwf	(_os+8)& (0+255),w,b	;volatile
 41414  00BDB8  E10F               	bnz	i2l17144
 41415  00BDBA  51A5               	movf	(_config+2)& (0+255),w,b
 41416  00BDBC  197C               	xorwf	(_os+9)& (0+255),w,b	;volatile
 41417  00BDBE  E10C               	bnz	i2l17144
 41418  00BDC0  51A6               	movf	(_config+3)& (0+255),w,b
 41419  00BDC2  197D               	xorwf	(_os+10)& (0+255),w,b	;volatile
 41420  00BDC4  A4D8               	btfss	status,2,c
 41421  00BDC6  D008               	goto	i2l2406
 41422                           
 41423                           ; BSR set to: 1
 41424                           ;motor.c: 427: os.current_position_in_steps = 0;
 41425  00BDC8  0E00               	movlw	0
 41426  00BDCA  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 41427  00BDCC  0E00               	movlw	0
 41428  00BDCE  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 41429  00BDD0  0E00               	movlw	0
 41430  00BDD2  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 41431  00BDD4  0E00               	movlw	0
 41432  00BDD6  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 41433  00BDD8                     i2l2406:
 41434  00BDD8                     i2l17144:
 41435                           
 41436                           ; BSR set to: 1
 41437                           ;motor.c: 428: if(os.current_position_in_steps==0xFFFFFFFF)
 41438  00BDD8  297A               	incf	(_os+7)& (0+255),w,b	;volatile
 41439  00BDDA  E114               	bnz	i2l2387
 41440  00BDDC  297B               	incf	(_os+8)& (0+255),w,b	;volatile
 41441  00BDDE  E112               	bnz	i2l2387
 41442  00BDE0  297C               	incf	(_os+9)& (0+255),w,b	;volatile
 41443  00BDE2  E110               	bnz	i2l2387
 41444  00BDE4  297D               	incf	(_os+10)& (0+255),w,b	;volatile
 41445  00BDE6  A4D8               	btfss	status,2,c
 41446  00BDE8  0012               	return	
 41447                           
 41448                           ; BSR set to: 1
 41449                           ;motor.c: 429: os.current_position_in_steps = (config.full_circle_in_steps-1);
 41450  00BDEA  0EFF               	movlw	255
 41451  00BDEC  25A3               	addwf	_config& (0+255),w,b
 41452  00BDEE  6F7A               	movwf	(_os+7)& (0+255),b	;volatile
 41453  00BDF0  0EFF               	movlw	255
 41454  00BDF2  21A4               	addwfc	(_config+1)& (0+255),w,b
 41455  00BDF4  6F7B               	movwf	(_os+8)& (0+255),b	;volatile
 41456  00BDF6  0EFF               	movlw	255
 41457  00BDF8  21A5               	addwfc	(_config+2)& (0+255),w,b
 41458  00BDFA  6F7C               	movwf	(_os+9)& (0+255),b	;volatile
 41459  00BDFC  0EFF               	movlw	255
 41460  00BDFE  21A6               	addwfc	(_config+3)& (0+255),w,b
 41461  00BE00  6F7D               	movwf	(_os+10)& (0+255),b	;volatile
 41462                           
 41463                           ; BSR set to: 1
 41464  00BE02  0012               	return	
 41465  00BE04                     i2l2387:
 41466                           
 41467                           ; BSR set to: 1
 41468  00BE04  0012               	return		;funcret
 41469  00BE06                     __end_of_motor_isr:
 41470                           	opt stack 0
 41471                           tosu	equ	0xFFF
 41472                           tosh	equ	0xFFE
 41473                           tosl	equ	0xFFD
 41474                           pclatu	equ	0xFFB
 41475                           pclath	equ	0xFFA
 41476                           tblptru	equ	0xFF8
 41477                           tblptrh	equ	0xFF7
 41478                           tblptrl	equ	0xFF6
 41479                           tablat	equ	0xFF5
 41480                           prodh	equ	0xFF4
 41481                           prodl	equ	0xFF3
 41482                           intcon	equ	0xFF2
 41483                           indf0	equ	0xFEF
 41484                           postinc0	equ	0xFEE
 41485                           fsr0h	equ	0xFEA
 41486                           fsr0l	equ	0xFE9
 41487                           wreg	equ	0xFE8
 41488                           indf1	equ	0xFE7
 41489                           postinc1	equ	0xFE6
 41490                           postdec1	equ	0xFE5
 41491                           plusw1	equ	0xFE3
 41492                           fsr1h	equ	0xFE2
 41493                           fsr1l	equ	0xFE1
 41494                           indf2	equ	0xFDF
 41495                           postinc2	equ	0xFDE
 41496                           postdec2	equ	0xFDD
 41497                           plusw2	equ	0xFDB
 41498                           fsr2h	equ	0xFDA
 41499                           fsr2l	equ	0xFD9
 41500                           status	equ	0xFD8
 41501                           
 41502 ;; *************** function _USBDeviceTasks *****************
 41503 ;; Defined at:
 41504 ;;		line 477 in file "usb_device.c"
 41505 ;; Parameters:    Size  Location     Type
 41506 ;;		None
 41507 ;; Auto vars:     Size  Location     Type
 41508 ;;  i               1   30[COMRAM] unsigned char 
 41509 ;; Return value:  Size  Location     Type
 41510 ;;                  1    wreg      void 
 41511 ;; Registers used:
 41512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 41513 ;; Tracked objects:
 41514 ;;		On entry : 0/0
 41515 ;;		On exit  : 0/0
 41516 ;;		Unchanged: 0/0
 41517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 41518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41519 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41521 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41522 ;;Total ram usage:        1 bytes
 41523 ;; Hardware stack levels used:    1
 41524 ;; Hardware stack levels required when called:    8
 41525 ;; This function calls:
 41526 ;;		_USBCtrlEPAllowStatusStage
 41527 ;;		_USBCtrlEPService
 41528 ;;		_USBIncrement1msInternalTimers
 41529 ;;		_USBStallHandler
 41530 ;;		_USBSuspend
 41531 ;;		_USBWakeFromSuspend
 41532 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 41533 ;;		i2_USBDeviceInit
 41534 ;; This function is called by:
 41535 ;;		_SYS_InterruptHigh
 41536 ;; This function uses a non-reentrant model
 41537 ;;
 41538                           
 41539                           	psect	text160
 41540  00F712                     __ptext160:
 41541                           	opt stack 0
 41542  00F712                     _USBDeviceTasks:
 41543                           	opt stack 9
 41544                           
 41545                           ;usb_device.c: 479: uint8_t i;;usb_device.c: 590: if(USBDeviceState == ATTACHED_STATE)
 41546                           
 41547                           ; BSR set to: 1
 41548                           ;incstack = 0
 41549  00F712  042B               	decf	_USBDeviceState,w,c	;volatile
 41550  00F714  B4D8               	btfsc	status,2,c
 41551                           
 41552                           ;usb_device.c: 591: {;usb_device.c: 601: if(!UCONbits.SE0)
 41553  00F716  BA65               	btfsc	3941,5,c	;volatile
 41554  00F718  D007               	goto	i2l155
 41555                           
 41556                           ;usb_device.c: 602: {;usb_device.c: 608: {UIR = 0;};
 41557  00F71A  0E00               	movlw	0
 41558  00F71C  6E62               	movwf	3938,c	;volatile
 41559                           
 41560                           ;usb_device.c: 614: UIEbits.URSTIE = 1;
 41561  00F71E  010F               	movlb	15	; () banked
 41562  00F720  8136               	bsf	54,0,b	;volatile
 41563                           
 41564                           ; BSR set to: 15
 41565                           ;usb_device.c: 615: UIEbits.IDLEIE = 1;
 41566  00F722  8936               	bsf	54,4,b	;volatile
 41567                           
 41568                           ;usb_device.c: 616: USBDeviceState = POWERED_STATE;
 41569  00F724  0E02               	movlw	2
 41570  00F726  6E2B               	movwf	_USBDeviceState,c	;volatile
 41571  00F728                     i2l155:
 41572                           
 41573                           ;usb_device.c: 617: };usb_device.c: 618: };usb_device.c: 634: if(UIRbits.ACTVIF && UIEbi
      +                          ts.ACTVIE)
 41574                           
 41575                           ; BSR set to: 15
 41576                           
 41577                           ; BSR set to: 15
 41578  00F728  A462               	btfss	3938,2,c	;volatile
 41579  00F72A  D006               	goto	i2l156
 41580  00F72C  010F               	movlb	15	; () banked
 41581  00F72E  A536               	btfss	54,2,b	;volatile
 41582  00F730  D003               	goto	i2l156
 41583                           
 41584                           ; BSR set to: 15
 41585                           ;usb_device.c: 635: {;usb_device.c: 636: (UIR &= 0xFB);
 41586  00F732  9462               	bcf	3938,2,c	;volatile
 41587                           
 41588                           ; BSR set to: 15
 41589                           ;usb_device.c: 640: USBWakeFromSuspend();
 41590  00F734  ECAA  F09E         	call	_USBWakeFromSuspend	;wreg free
 41591  00F738                     i2l156:
 41592                           
 41593                           ;usb_device.c: 642: };usb_device.c: 647: if(UCONbits.SUSPND==1)
 41594  00F738  A265               	btfss	3941,1,c	;volatile
 41595  00F73A  D002               	goto	i2l157
 41596                           
 41597                           ;usb_device.c: 648: {;usb_device.c: 649: {PIR2bits.USBIF = 0;};
 41598  00F73C  98A1               	bcf	4001,4,c	;volatile
 41599                           
 41600                           ;usb_device.c: 650: return;
 41601  00F73E  0012               	return	
 41602  00F740                     i2l157:
 41603                           
 41604                           ;usb_device.c: 651: };usb_device.c: 663: if(UIRbits.URSTIF && UIEbits.URSTIE)
 41605  00F740  A062               	btfss	3938,0,c	;volatile
 41606  00F742  D009               	goto	i2l159
 41607  00F744  010F               	movlb	15	; () banked
 41608  00F746  A136               	btfss	54,0,b	;volatile
 41609  00F748  D006               	goto	i2l159
 41610                           
 41611                           ; BSR set to: 15
 41612                           ;usb_device.c: 664: {;usb_device.c: 665: USBDeviceInit();
 41613  00F74A  EC44  F07A         	call	i2_USBDeviceInit	;wreg free
 41614                           
 41615                           ;usb_device.c: 669: {PIE2bits.USBIE = 1;};
 41616  00F74E  88A0               	bsf	4000,4,c	;volatile
 41617                           
 41618                           ;usb_device.c: 671: USBDeviceState = DEFAULT_STATE;
 41619  00F750  0E04               	movlw	4
 41620  00F752  6E2B               	movwf	_USBDeviceState,c	;volatile
 41621                           
 41622                           ;usb_device.c: 681: (UIR &= 0xFE);
 41623  00F754  9062               	bcf	3938,0,c	;volatile
 41624  00F756                     i2l159:
 41625                           
 41626                           ;usb_device.c: 682: };usb_device.c: 687: if(UIRbits.IDLEIF && UIEbits.IDLEIE)
 41627  00F756  A862               	btfss	3938,4,c	;volatile
 41628  00F758  D004               	goto	i2l160
 41629  00F75A  010F               	movlb	15	; () banked
 41630  00F75C  B936               	btfsc	54,4,b	;volatile
 41631                           
 41632                           ; BSR set to: 15
 41633                           ;usb_device.c: 688: {;usb_device.c: 694: USBSuspend();
 41634  00F75E  EC8E  F09F         	call	_USBSuspend	;wreg free
 41635  00F762                     i2l160:
 41636                           
 41637                           ;usb_device.c: 696: };usb_device.c: 708: if(UIRbits.SOFIF)
 41638  00F762  AC62               	btfss	3938,6,c	;volatile
 41639  00F764  D01B               	goto	i2l164
 41640                           
 41641                           ;usb_device.c: 709: {;usb_device.c: 711: if(UIEbits.SOFIE)
 41642  00F766  010F               	movlb	15	; () banked
 41643  00F768  AD36               	btfss	54,6,b	;volatile
 41644  00F76A  D00E               	goto	i2l162
 41645                           
 41646                           ; BSR set to: 15
 41647                           ;usb_device.c: 712: {;usb_device.c: 713: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SOF,0,1);
 41648  00F76C  0E00               	movlw	0
 41649  00F76E  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 41650  00F770  0E73               	movlw	115
 41651  00F772  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 41652  00F774  0E00               	movlw	0
 41653  00F776  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 41654  00F778  0E00               	movlw	0
 41655  00F77A  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 41656  00F77C  0E00               	movlw	0
 41657  00F77E  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 41658  00F780  0E01               	movlw	1
 41659  00F782  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 41660  00F784  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 41661  00F788                     i2l162:
 41662                           
 41663                           ;usb_device.c: 714: };usb_device.c: 715: (UIR &= 0xBF);
 41664  00F788  9C62               	bcf	3938,6,c	;volatile
 41665                           
 41666                           ;usb_device.c: 718: USBIncrement1msInternalTimers();
 41667  00F78A  ECE7  F0A0         	call	_USBIncrement1msInternalTimers	;wreg free
 41668                           
 41669                           ;usb_device.c: 735: if(USBStatusStageTimeoutCounter != 0u)
 41670  00F78E  5024               	movf	_USBStatusStageTimeoutCounter,w,c	;volatile
 41671  00F790  A4D8               	btfss	status,2,c
 41672                           
 41673                           ;usb_device.c: 736: {;usb_device.c: 737: USBStatusStageTimeoutCounter--;
 41674  00F792  0624               	decf	_USBStatusStageTimeoutCounter,f,c	;volatile
 41675                           
 41676                           ;usb_device.c: 738: };usb_device.c: 744: if(USBStatusStageTimeoutCounter == 0)
 41677  00F794  5024               	movf	_USBStatusStageTimeoutCounter,w,c	;volatile
 41678  00F796  B4D8               	btfsc	status,2,c
 41679                           
 41680                           ;usb_device.c: 745: {;usb_device.c: 746: USBCtrlEPAllowStatusStage();
 41681  00F798  EC4B  F08D         	call	_USBCtrlEPAllowStatusStage	;wreg free
 41682  00F79C                     i2l164:
 41683                           
 41684                           ;usb_device.c: 747: };usb_device.c: 749: };usb_device.c: 751: if(UIRbits.STALLIF && UIEb
      +                          its.STALLIE)
 41685  00F79C  AA62               	btfss	3938,5,c	;volatile
 41686  00F79E  D004               	goto	i2l165
 41687  00F7A0  010F               	movlb	15	; () banked
 41688  00F7A2  BB36               	btfsc	54,5,b	;volatile
 41689                           
 41690                           ; BSR set to: 15
 41691                           ;usb_device.c: 752: {;usb_device.c: 753: USBStallHandler();
 41692  00F7A4  EC44  F09D         	call	_USBStallHandler	;wreg free
 41693  00F7A8                     i2l165:
 41694                           
 41695                           ;usb_device.c: 754: };usb_device.c: 756: if(UIRbits.UERRIF && UIEbits.UERRIE)
 41696  00F7A8  A262               	btfss	3938,1,c	;volatile
 41697  00F7AA  D012               	goto	i2l166
 41698  00F7AC  010F               	movlb	15	; () banked
 41699  00F7AE  A336               	btfss	54,1,b	;volatile
 41700  00F7B0  D00F               	goto	i2l166
 41701                           
 41702                           ; BSR set to: 15
 41703                           ;usb_device.c: 757: {;usb_device.c: 758: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_BUS_ERROR
      +                          ,0,1);
 41704  00F7B2  0E7F               	movlw	127
 41705  00F7B4  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 41706  00F7B6  683D               	setf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 41707  00F7B8  0E00               	movlw	0
 41708  00F7BA  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 41709  00F7BC  0E00               	movlw	0
 41710  00F7BE  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 41711  00F7C0  0E00               	movlw	0
 41712  00F7C2  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 41713  00F7C4  0E01               	movlw	1
 41714  00F7C6  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 41715  00F7C8  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 41716                           
 41717                           ;usb_device.c: 759: {UEIR = 0;};
 41718  00F7CC  0E00               	movlw	0
 41719  00F7CE  6E63               	movwf	3939,c	;volatile
 41720  00F7D0                     i2l166:
 41721                           
 41722                           ;usb_device.c: 767: };usb_device.c: 774: if(USBDeviceState < DEFAULT_STATE)
 41723  00F7D0  0E04               	movlw	4
 41724  00F7D2  602B               	cpfslt	_USBDeviceState,c	;volatile
 41725  00F7D4  D002               	goto	i2l167
 41726                           
 41727                           ;usb_device.c: 775: {;usb_device.c: 776: {PIR2bits.USBIF = 0;};
 41728  00F7D6  98A1               	bcf	4001,4,c	;volatile
 41729                           
 41730                           ;usb_device.c: 777: return;
 41731  00F7D8  0012               	return	
 41732  00F7DA                     i2l167:
 41733                           
 41734                           ;usb_device.c: 778: };usb_device.c: 783: if(UIEbits.TRNIE)
 41735  00F7DA  010F               	movlb	15	; () banked
 41736  00F7DC  A736               	btfss	54,3,b	;volatile
 41737  00F7DE  D039               	goto	i2u2266_40
 41738                           
 41739                           ; BSR set to: 15
 41740                           ;usb_device.c: 784: {;usb_device.c: 785: for(i = 0; i < 4u; i++)
 41741  00F7E0  0E00               	movlw	0
 41742  00F7E2  6E4C               	movwf	USBDeviceTasks@i,c
 41743  00F7E4                     i2l22518:
 41744                           
 41745                           ; BSR set to: 15
 41746  00F7E4  0E03               	movlw	3
 41747  00F7E6  644C               	cpfsgt	USBDeviceTasks@i,c
 41748  00F7E8  D001               	goto	i2l169
 41749  00F7EA  D033               	goto	i2u2266_40
 41750  00F7EC                     i2l169:
 41751                           
 41752                           ;usb_device.c: 786: {;usb_device.c: 787: if(UIRbits.TRNIF)
 41753  00F7EC  A662               	btfss	3938,3,c	;volatile
 41754  00F7EE  D031               	goto	i2u2266_40
 41755                           
 41756                           ;usb_device.c: 788: {;usb_device.c: 790: USTATcopy.Val = USTAT;
 41757  00F7F0  CF64 F02C          	movff	3940,_USTATcopy	;volatile
 41758                           
 41759                           ;usb_device.c: 791: endpoint_number = USTATcopy.endpoint_number;
 41760  00F7F4  302C               	rrcf	_USTATcopy,w,c	;volatile
 41761  00F7F6  32E8               	rrcf	wreg,f,c
 41762  00F7F8  32E8               	rrcf	wreg,f,c
 41763  00F7FA  0B0F               	andlw	15
 41764  00F7FC  6E26               	movwf	_endpoint_number,c	;volatile
 41765                           
 41766                           ;usb_device.c: 793: (UIR &= 0xF7);
 41767  00F7FE  9662               	bcf	3938,3,c	;volatile
 41768                           
 41769                           ;usb_device.c: 798: if(USTATcopy.direction == 0)
 41770  00F800  B42C               	btfsc	_USTATcopy,2,c	;volatile
 41771  00F802  D007               	goto	i2l172
 41772                           
 41773                           ;usb_device.c: 799: {;usb_device.c: 800: ep_data_out[endpoint_number].bits.ping_pong_sta
      +                          te ^= 1;
 41774  00F804  5026               	movf	_endpoint_number,w,c	;volatile
 41775  00F806  0D01               	mullw	1
 41776  00F808  0E5C               	movlw	low _ep_data_out
 41777  00F80A  24F3               	addwf	prodl,w,c
 41778  00F80C  6ED9               	movwf	fsr2l,c
 41779  00F80E  0E01               	movlw	high _ep_data_out
 41780  00F810  D006               	goto	L71
 41781  00F812                     i2l172:
 41782                           
 41783                           ;usb_device.c: 802: else;usb_device.c: 803: {;usb_device.c: 804: ep_data_in[endpoint_num
      +                          ber].bits.ping_pong_state ^= 1;
 41784                           
 41785                           ; BSR set to: 1
 41786  00F812  5026               	movf	_endpoint_number,w,c	;volatile
 41787  00F814  0D01               	mullw	1
 41788  00F816  0E5F               	movlw	low _ep_data_in
 41789  00F818  24F3               	addwf	prodl,w,c
 41790  00F81A  6ED9               	movwf	fsr2l,c
 41791  00F81C  0E01               	movlw	high _ep_data_in
 41792  00F81E                     L71:
 41793  00F81E  20F4               	addwfc	prodh,w,c
 41794  00F820  6EDA               	movwf	fsr2h,c
 41795  00F822  0101               	movlb	1	; () banked
 41796  00F824  70DF               	btg	indf2,0,c
 41797                           
 41798                           ; BSR set to: 1
 41799                           ;usb_device.c: 805: };usb_device.c: 810: if(endpoint_number == 0)
 41800                           
 41801                           ; BSR set to: 1
 41802  00F826  5026               	movf	_endpoint_number,w,c	;volatile
 41803  00F828  A4D8               	btfss	status,2,c
 41804  00F82A  D003               	goto	i2l174
 41805                           
 41806                           ; BSR set to: 1
 41807                           ;usb_device.c: 811: {;usb_device.c: 812: USBCtrlEPService();
 41808  00F82C  ECA8  F092         	call	_USBCtrlEPService	;wreg free
 41809                           
 41810                           ;usb_device.c: 813: }
 41811  00F830  D00E               	goto	i2l176
 41812  00F832                     i2l174:
 41813                           
 41814                           ;usb_device.c: 814: else;usb_device.c: 815: {;usb_device.c: 816: USER_USB_CALLBACK_EVENT
      +                          _HANDLER(EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
 41815  00F832  0E00               	movlw	0
 41816  00F834  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 41817  00F836  0E72               	movlw	114
 41818  00F838  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 41819  00F83A  0E2C               	movlw	low _USTATcopy
 41820  00F83C  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 41821  00F83E  0E00               	movlw	high _USTATcopy
 41822  00F840  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 41823  00F842  0E00               	movlw	0
 41824  00F844  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 41825  00F846  0E00               	movlw	0
 41826  00F848  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 41827  00F84A  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 41828  00F84E                     i2l176:
 41829  00F84E  2A4C               	incf	USBDeviceTasks@i,f,c
 41830  00F850  D7C9               	goto	i2l22518
 41831  00F852                     i2u2266_40:
 41832                           
 41833                           ;usb_device.c: 822: };usb_device.c: 823: };usb_device.c: 824: };usb_device.c: 826: {PIR2
      +                          bits.USBIF = 0;};
 41834  00F852  98A1               	bcf	4001,4,c	;volatile
 41835  00F854  0012               	return		;funcret
 41836  00F856                     __end_of_USBDeviceTasks:
 41837                           	opt stack 0
 41838                           tosu	equ	0xFFF
 41839                           tosh	equ	0xFFE
 41840                           tosl	equ	0xFFD
 41841                           pclatu	equ	0xFFB
 41842                           pclath	equ	0xFFA
 41843                           tblptru	equ	0xFF8
 41844                           tblptrh	equ	0xFF7
 41845                           tblptrl	equ	0xFF6
 41846                           tablat	equ	0xFF5
 41847                           prodh	equ	0xFF4
 41848                           prodl	equ	0xFF3
 41849                           intcon	equ	0xFF2
 41850                           indf0	equ	0xFEF
 41851                           postinc0	equ	0xFEE
 41852                           fsr0h	equ	0xFEA
 41853                           fsr0l	equ	0xFE9
 41854                           wreg	equ	0xFE8
 41855                           indf1	equ	0xFE7
 41856                           postinc1	equ	0xFE6
 41857                           postdec1	equ	0xFE5
 41858                           plusw1	equ	0xFE3
 41859                           fsr1h	equ	0xFE2
 41860                           fsr1l	equ	0xFE1
 41861                           indf2	equ	0xFDF
 41862                           postinc2	equ	0xFDE
 41863                           postdec2	equ	0xFDD
 41864                           plusw2	equ	0xFDB
 41865                           fsr2h	equ	0xFDA
 41866                           fsr2l	equ	0xFD9
 41867                           status	equ	0xFD8
 41868                           
 41869 ;; *************** function i2_USBDeviceInit *****************
 41870 ;; Defined at:
 41871 ;;		line 277 in file "usb_device.c"
 41872 ;; Parameters:    Size  Location     Type
 41873 ;;		None
 41874 ;; Auto vars:     Size  Location     Type
 41875 ;;  USBDeviceIni    1    8[COMRAM] unsigned char 
 41876 ;; Return value:  Size  Location     Type
 41877 ;;                  1    wreg      void 
 41878 ;; Registers used:
 41879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 41880 ;; Tracked objects:
 41881 ;;		On entry : 0/0
 41882 ;;		On exit  : 0/0
 41883 ;;		Unchanged: 0/0
 41884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 41885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41886 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41888 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 41889 ;;Total ram usage:        1 bytes
 41890 ;; Hardware stack levels used:    1
 41891 ;; Hardware stack levels required when called:    1
 41892 ;; This function calls:
 41893 ;;		i2_memset
 41894 ;; This function is called by:
 41895 ;;		_USBDeviceTasks
 41896 ;; This function uses a non-reentrant model
 41897 ;;
 41898                           
 41899                           	psect	text161
 41900  00F488                     __ptext161:
 41901                           	opt stack 0
 41902  00F488                     i2_USBDeviceInit:
 41903                           	opt stack 15
 41904                           
 41905                           ;usb_device.c: 279: uint8_t i;;usb_device.c: 281: {PIE2bits.USBIE = 0;};
 41906                           
 41907                           ;incstack = 0
 41908  00F488  98A0               	bcf	4000,4,c	;volatile
 41909                           
 41910                           ;usb_device.c: 285: ;;usb_device.c: 288: {UEIR = 0;};
 41911  00F48A  0E00               	movlw	0
 41912  00F48C  6E63               	movwf	3939,c	;volatile
 41913                           
 41914                           ;usb_device.c: 291: {UIR = 0;};
 41915  00F48E  0E00               	movlw	0
 41916  00F490  6E62               	movwf	3938,c	;volatile
 41917                           
 41918                           ;usb_device.c: 294: UEP0 = 0;
 41919  00F492  0E00               	movlw	0
 41920  00F494  010F               	movlb	15	; () banked
 41921  00F496  6F26               	movwf	38,b	;volatile
 41922                           
 41923                           ; BSR set to: 15
 41924                           ;usb_device.c: 296: memset((void*)&UEP1,0x00,(2));;
 41925  00F498  0E27               	movlw	39
 41926  00F49A  6E2E               	movwf	i2memset@p1,c
 41927  00F49C  0E0F               	movlw	15
 41928  00F49E  6E2F               	movwf	i2memset@p1+1,c
 41929  00F4A0  0E00               	movlw	0
 41930  00F4A2  6E31               	movwf	i2memset@c+1,c
 41931  00F4A4  0E00               	movlw	0
 41932  00F4A6  6E30               	movwf	i2memset@c,c
 41933  00F4A8  0E00               	movlw	0
 41934  00F4AA  6E33               	movwf	i2memset@n+1,c
 41935  00F4AC  0E02               	movlw	2
 41936  00F4AE  6E32               	movwf	i2memset@n,c
 41937  00F4B0  ECEA  F09F         	call	i2_memset	;wreg free
 41938                           
 41939                           ;usb_device.c: 298: { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 | 0x40 |
      +                           0x02; };
 41940  00F4B4  0E16               	movlw	22
 41941  00F4B6  010F               	movlb	15	; () banked
 41942  00F4B8  6F39               	movwf	57,b	;volatile
 41943                           
 41944                           ; BSR set to: 15
 41945  00F4BA  0E9F               	movlw	159
 41946  00F4BC  6F37               	movwf	55,b	;volatile
 41947                           
 41948                           ; BSR set to: 15
 41949  00F4BE  0E7B               	movlw	123
 41950  00F4C0  6F36               	movwf	54,b	;volatile
 41951                           
 41952                           ; BSR set to: 15
 41953                           ;usb_device.c: 301: ;;usb_device.c: 304: ;;usb_device.c: 307: for(i = 0; i < (sizeof(BDT
      +                          )/sizeof(BDT_ENTRY)); i++)
 41954  00F4C2  0E00               	movlw	0
 41955  00F4C4  6E36               	movwf	i2USBDeviceInit@i,c
 41956  00F4C6                     i2l15866:
 41957                           
 41958                           ; BSR set to: 15
 41959  00F4C6  0E0B               	movlw	11
 41960  00F4C8  6436               	cpfsgt	i2USBDeviceInit@i,c
 41961  00F4CA  D001               	goto	i2l145
 41962  00F4CC  D00E               	goto	i2u1483_40
 41963  00F4CE                     i2l145:
 41964                           
 41965                           ;usb_device.c: 308: {;usb_device.c: 309: BDT[i].Val = 0x00;
 41966                           
 41967                           ; BSR set to: 15
 41968  00F4CE  5036               	movf	i2USBDeviceInit@i,w,c
 41969  00F4D0  0D04               	mullw	4
 41970  00F4D2  0E00               	movlw	0
 41971  00F4D4  24F3               	addwf	prodl,w,c
 41972  00F4D6  6ED9               	movwf	fsr2l,c
 41973  00F4D8  0E0D               	movlw	13
 41974  00F4DA  20F4               	addwfc	prodh,w,c
 41975  00F4DC  6EDA               	movwf	fsr2h,c
 41976  00F4DE  6ADE               	clrf	postinc2,c
 41977  00F4E0  6ADE               	clrf	postinc2,c
 41978  00F4E2  6ADE               	clrf	postinc2,c
 41979  00F4E4  6ADD               	clrf	postdec2,c
 41980  00F4E6  2A36               	incf	i2USBDeviceInit@i,f,c
 41981  00F4E8  D7EE               	goto	i2l15866
 41982  00F4EA                     i2u1483_40:
 41983                           
 41984                           ;usb_device.c: 310: };usb_device.c: 313: UCONbits.PPBRST = 1;
 41985  00F4EA  8C65               	bsf	3941,6,c	;volatile
 41986                           
 41987                           ;usb_device.c: 316: UADDR = 0x00;
 41988  00F4EC  0E00               	movlw	0
 41989  00F4EE  010F               	movlb	15	; () banked
 41990  00F4F0  6F38               	movwf	56,b	;volatile
 41991                           
 41992                           ; BSR set to: 15
 41993                           ;usb_device.c: 319: UCONbits.PKTDIS = 0;
 41994  00F4F2  9865               	bcf	3941,4,c	;volatile
 41995                           
 41996                           ; BSR set to: 15
 41997                           ;usb_device.c: 322: UCONbits.PPBRST = 0;
 41998  00F4F4  9C65               	bcf	3941,6,c	;volatile
 41999  00F4F6                     
 42000                           ;usb_device.c: 326: {;usb_device.c: 327: (UIR &= 0xF7);
 42001                           
 42002                           ; BSR set to: 15
 42003  00F4F6  9662               	bcf	3938,3,c	;volatile
 42004                           
 42005                           ;usb_device.c: 329: inPipes[0].info.Val = 0;
 42006  00F4F8  0E00               	movlw	0
 42007  00F4FA  6E0D               	movwf	_inPipes+3,c	;volatile
 42008                           
 42009                           ;usb_device.c: 330: outPipes[0].info.Val = 0;
 42010  00F4FC  0E00               	movlw	0
 42011  00F4FE  6E04               	movwf	_outPipes+3,c	;volatile
 42012                           
 42013                           ;usb_device.c: 331: outPipes[0].wCount.Val = 0;
 42014  00F500  0E00               	movlw	0
 42015  00F502  6E06               	movwf	_outPipes+5,c	;volatile
 42016  00F504  0E00               	movlw	0
 42017  00F506  6E05               	movwf	_outPipes+4,c	;volatile
 42018                           
 42019                           ;usb_device.c: 332: }while(UIRbits.TRNIF == 1);
 42020  00F508  B662               	btfsc	3938,3,c	;volatile
 42021  00F50A  D7F5               	goto	i2l147
 42022                           
 42023                           ;usb_device.c: 336: USBStatusStageEnabledFlag1 = 1;
 42024  00F50C  0E01               	movlw	1
 42025  00F50E  6E22               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 42026                           
 42027                           ;usb_device.c: 337: USBStatusStageEnabledFlag2 = 1;
 42028  00F510  0E01               	movlw	1
 42029  00F512  0100               	movlb	0	; () banked
 42030  00F514  6FFE               	movwf	_USBStatusStageEnabledFlag2& (0+255),b	;volatile
 42031                           
 42032                           ;usb_device.c: 339: USBDeferINDataStagePackets = 0;
 42033  00F516  0E00               	movlw	0
 42034  00F518  6FFD               	movwf	_USBDeferINDataStagePackets& (0+255),b	;volatile
 42035                           
 42036                           ;usb_device.c: 340: USBDeferOUTDataStagePackets = 0;
 42037  00F51A  0E00               	movlw	0
 42038  00F51C  6FFC               	movwf	_USBDeferOUTDataStagePackets& (0+255),b	;volatile
 42039                           
 42040                           ;usb_device.c: 341: USBBusIsSuspended = 0;
 42041  00F51E  0E00               	movlw	0
 42042  00F520  6E27               	movwf	_USBBusIsSuspended,c	;volatile
 42043                           
 42044                           ;usb_device.c: 345: for(i = 0; i < (uint8_t)(2+1u); i++)
 42045  00F522  0E00               	movlw	0
 42046  00F524  6E36               	movwf	i2USBDeviceInit@i,c
 42047  00F526                     i2l15894:
 42048                           
 42049                           ; BSR set to: 0
 42050  00F526  0E02               	movlw	2
 42051  00F528  6436               	cpfsgt	i2USBDeviceInit@i,c
 42052  00F52A  D001               	goto	i2l149
 42053  00F52C  D02E               	goto	i2u1486_40
 42054  00F52E                     i2l149:
 42055                           
 42056                           ;usb_device.c: 346: {;usb_device.c: 347: pBDTEntryIn[i] = 0u;
 42057                           
 42058                           ; BSR set to: 0
 42059  00F52E  5036               	movf	i2USBDeviceInit@i,w,c
 42060  00F530  0D02               	mullw	2
 42061  00F532  0E10               	movlw	low _pBDTEntryIn
 42062  00F534  24F3               	addwf	prodl,w,c
 42063  00F536  6ED9               	movwf	fsr2l,c
 42064  00F538  0E00               	movlw	high _pBDTEntryIn
 42065  00F53A  20F4               	addwfc	prodh,w,c
 42066  00F53C  6EDA               	movwf	fsr2h,c
 42067  00F53E  0E00               	movlw	0
 42068  00F540  6EDE               	movwf	postinc2,c
 42069  00F542  0E00               	movlw	0
 42070  00F544  6EDD               	movwf	postdec2,c
 42071                           
 42072                           ;usb_device.c: 348: pBDTEntryOut[i] = 0u;
 42073  00F546  5036               	movf	i2USBDeviceInit@i,w,c
 42074  00F548  0D02               	mullw	2
 42075  00F54A  0E38               	movlw	low _pBDTEntryOut
 42076  00F54C  24F3               	addwf	prodl,w,c
 42077  00F54E  6ED9               	movwf	fsr2l,c
 42078  00F550  0E01               	movlw	high _pBDTEntryOut
 42079  00F552  20F4               	addwfc	prodh,w,c
 42080  00F554  6EDA               	movwf	fsr2h,c
 42081  00F556  0E00               	movlw	0
 42082  00F558  6EDE               	movwf	postinc2,c
 42083  00F55A  0E00               	movlw	0
 42084  00F55C  6EDD               	movwf	postdec2,c
 42085                           
 42086                           ;usb_device.c: 349: ep_data_in[i].Val = 0u;
 42087  00F55E  5036               	movf	i2USBDeviceInit@i,w,c
 42088  00F560  0D01               	mullw	1
 42089  00F562  0E5F               	movlw	low _ep_data_in
 42090  00F564  24F3               	addwf	prodl,w,c
 42091  00F566  6ED9               	movwf	fsr2l,c
 42092  00F568  0E01               	movlw	high _ep_data_in
 42093  00F56A  20F4               	addwfc	prodh,w,c
 42094  00F56C  6EDA               	movwf	fsr2h,c
 42095  00F56E  0E00               	movlw	0
 42096  00F570  6EDF               	movwf	indf2,c
 42097                           
 42098                           ;usb_device.c: 350: ep_data_out[i].Val = 0u;
 42099  00F572  5036               	movf	i2USBDeviceInit@i,w,c
 42100  00F574  0D01               	mullw	1
 42101  00F576  0E5C               	movlw	low _ep_data_out
 42102  00F578  24F3               	addwf	prodl,w,c
 42103  00F57A  6ED9               	movwf	fsr2l,c
 42104  00F57C  0E01               	movlw	high _ep_data_out
 42105  00F57E  20F4               	addwfc	prodh,w,c
 42106  00F580  6EDA               	movwf	fsr2h,c
 42107  00F582  0E00               	movlw	0
 42108  00F584  6EDF               	movwf	indf2,c
 42109  00F586  2A36               	incf	i2USBDeviceInit@i,f,c
 42110  00F588  D7CE               	goto	i2l15894
 42111  00F58A                     i2u1486_40:
 42112                           
 42113                           ;usb_device.c: 351: };usb_device.c: 354: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 42114  00F58A  0E08               	movlw	8
 42115  00F58C  6E10               	movwf	_pBDTEntryIn,c
 42116  00F58E  0E0D               	movlw	13
 42117  00F590  6E11               	movwf	_pBDTEntryIn+1,c
 42118                           
 42119                           ;usb_device.c: 356: UEP0 = 0x06|0x10;
 42120  00F592  0E16               	movlw	22
 42121  00F594  010F               	movlb	15	; () banked
 42122  00F596  6F26               	movwf	38,b	;volatile
 42123                           
 42124                           ; BSR set to: 15
 42125                           ;usb_device.c: 358: BDT[0].ADR = ((uint16_t)(&SetupPkt));
 42126  00F598  0E0D               	movlw	13
 42127  00F59A  010D               	movlb	13	; () banked
 42128  00F59C  6F03               	movwf	3,b	;volatile
 42129  00F59E  0E30               	movlw	48
 42130  00F5A0  6F02               	movwf	2,b	;volatile
 42131                           
 42132                           ; BSR set to: 13
 42133                           ;usb_device.c: 359: BDT[0].CNT = 8;
 42134  00F5A2  0E08               	movlw	8
 42135  00F5A4  6F01               	movwf	1,b	;volatile
 42136                           
 42137                           ; BSR set to: 13
 42138                           ;usb_device.c: 360: BDT[0].STAT.Val = 0x00|0x04;
 42139  00F5A6  0E04               	movlw	4
 42140  00F5A8  6F00               	movwf	0,b	;volatile
 42141                           
 42142                           ; BSR set to: 13
 42143                           ;usb_device.c: 361: BDT[0].STAT.Val |= 0x80;
 42144  00F5AA  8F00               	bsf	0,7,b	;volatile
 42145                           
 42146                           ; BSR set to: 13
 42147                           ;usb_device.c: 364: USBActiveConfiguration = 0;
 42148  00F5AC  0E00               	movlw	0
 42149  00F5AE  6E2D               	movwf	_USBActiveConfiguration,c	;volatile
 42150                           
 42151                           ; BSR set to: 13
 42152                           ;usb_device.c: 366: USB1msTickCount = 0;
 42153  00F5B0  0E00               	movlw	0
 42154  00F5B2  0101               	movlb	1	; () banked
 42155  00F5B4  6F52               	movwf	_USB1msTickCount& (0+255),b	;volatile
 42156  00F5B6  0E00               	movlw	0
 42157  00F5B8  6F53               	movwf	(_USB1msTickCount+1)& (0+255),b	;volatile
 42158  00F5BA  0E00               	movlw	0
 42159  00F5BC  6F54               	movwf	(_USB1msTickCount+2)& (0+255),b	;volatile
 42160  00F5BE  0E00               	movlw	0
 42161  00F5C0  6F55               	movwf	(_USB1msTickCount+3)& (0+255),b	;volatile
 42162                           
 42163                           ; BSR set to: 1
 42164                           ;usb_device.c: 367: USBTicksSinceSuspendEnd = 0;
 42165  00F5C2  0E00               	movlw	0
 42166  00F5C4  0100               	movlb	0	; () banked
 42167  00F5C6  6FFB               	movwf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 42168                           
 42169                           ; BSR set to: 0
 42170                           ;usb_device.c: 370: USBDeviceState = DETACHED_STATE;
 42171  00F5C8  0E00               	movlw	0
 42172  00F5CA  6E2B               	movwf	_USBDeviceState,c	;volatile
 42173                           
 42174                           ; BSR set to: 0
 42175  00F5CC  0012               	return		;funcret
 42176  00F5CE                     __end_ofi2_USBDeviceInit:
 42177                           	opt stack 0
 42178                           tosu	equ	0xFFF
 42179                           tosh	equ	0xFFE
 42180                           tosl	equ	0xFFD
 42181                           pclatu	equ	0xFFB
 42182                           pclath	equ	0xFFA
 42183                           tblptru	equ	0xFF8
 42184                           tblptrh	equ	0xFF7
 42185                           tblptrl	equ	0xFF6
 42186                           tablat	equ	0xFF5
 42187                           prodh	equ	0xFF4
 42188                           prodl	equ	0xFF3
 42189                           intcon	equ	0xFF2
 42190                           indf0	equ	0xFEF
 42191                           postinc0	equ	0xFEE
 42192                           fsr0h	equ	0xFEA
 42193                           fsr0l	equ	0xFE9
 42194                           wreg	equ	0xFE8
 42195                           indf1	equ	0xFE7
 42196                           postinc1	equ	0xFE6
 42197                           postdec1	equ	0xFE5
 42198                           plusw1	equ	0xFE3
 42199                           fsr1h	equ	0xFE2
 42200                           fsr1l	equ	0xFE1
 42201                           indf2	equ	0xFDF
 42202                           postinc2	equ	0xFDE
 42203                           postdec2	equ	0xFDD
 42204                           plusw2	equ	0xFDB
 42205                           fsr2h	equ	0xFDA
 42206                           fsr2l	equ	0xFD9
 42207                           status	equ	0xFD8
 42208                           
 42209 ;; *************** function _USBWakeFromSuspend *****************
 42210 ;; Defined at:
 42211 ;;		line 2305 in file "usb_device.c"
 42212 ;; Parameters:    Size  Location     Type
 42213 ;;		None
 42214 ;; Auto vars:     Size  Location     Type
 42215 ;;		None
 42216 ;; Return value:  Size  Location     Type
 42217 ;;                  1    wreg      void 
 42218 ;; Registers used:
 42219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 42220 ;; Tracked objects:
 42221 ;;		On entry : 0/0
 42222 ;;		On exit  : 0/0
 42223 ;;		Unchanged: 0/0
 42224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 42225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42229 ;;Total ram usage:        0 bytes
 42230 ;; Hardware stack levels used:    1
 42231 ;; Hardware stack levels required when called:    4
 42232 ;; This function calls:
 42233 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 42234 ;; This function is called by:
 42235 ;;		_USBDeviceTasks
 42236 ;; This function uses a non-reentrant model
 42237 ;;
 42238                           
 42239                           	psect	text162
 42240  013D54                     __ptext162:
 42241                           	opt stack 0
 42242  013D54                     _USBWakeFromSuspend:
 42243                           	opt stack 12
 42244                           
 42245                           ;usb_device.c: 2307: USBBusIsSuspended = 0;
 42246                           
 42247                           ; BSR set to: 0
 42248                           ;incstack = 0
 42249  013D54  0E00               	movlw	0
 42250  013D56  6E27               	movwf	_USBBusIsSuspended,c	;volatile
 42251                           
 42252                           ;usb_device.c: 2313: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_RESUME,0,0);
 42253  013D58  0E00               	movlw	0
 42254  013D5A  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 42255  013D5C  0E74               	movlw	116
 42256  013D5E  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 42257  013D60  0E00               	movlw	0
 42258  013D62  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 42259  013D64  0E00               	movlw	0
 42260  013D66  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 42261  013D68  0E00               	movlw	0
 42262  013D6A  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 42263  013D6C  0E00               	movlw	0
 42264  013D6E  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 42265  013D70  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 42266                           
 42267                           ;usb_device.c: 2320: UCONbits.SUSPND = 0;
 42268  013D74  9265               	bcf	3941,1,c	;volatile
 42269                           
 42270                           ;usb_device.c: 2325: UIEbits.ACTVIE = 0;
 42271  013D76  010F               	movlb	15	; () banked
 42272  013D78  9536               	bcf	54,2,b	;volatile
 42273                           
 42274                           ;usb_device.c: 2343: while(UIRbits.ACTVIF)
 42275  013D7A  D001               	goto	i2l315
 42276  013D7C                     
 42277                           ;usb_device.c: 2345: {;usb_device.c: 2346: (UIR &= 0xFB);
 42278                           
 42279                           ; BSR set to: 15
 42280  013D7C  9462               	bcf	3938,2,c	;volatile
 42281  013D7E                     i2l315:
 42282  013D7E  B462               	btfsc	3938,2,c	;volatile
 42283  013D80  D7FD               	goto	i2l316
 42284                           
 42285                           ;usb_device.c: 2347: };usb_device.c: 2349: USBTicksSinceSuspendEnd = 0;
 42286  013D82  0E00               	movlw	0
 42287  013D84  0100               	movlb	0	; () banked
 42288  013D86  6FFB               	movwf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 42289                           
 42290                           ; BSR set to: 0
 42291  013D88  0012               	return		;funcret
 42292  013D8A                     __end_of_USBWakeFromSuspend:
 42293                           	opt stack 0
 42294                           tosu	equ	0xFFF
 42295                           tosh	equ	0xFFE
 42296                           tosl	equ	0xFFD
 42297                           pclatu	equ	0xFFB
 42298                           pclath	equ	0xFFA
 42299                           tblptru	equ	0xFF8
 42300                           tblptrh	equ	0xFF7
 42301                           tblptrl	equ	0xFF6
 42302                           tablat	equ	0xFF5
 42303                           prodh	equ	0xFF4
 42304                           prodl	equ	0xFF3
 42305                           intcon	equ	0xFF2
 42306                           indf0	equ	0xFEF
 42307                           postinc0	equ	0xFEE
 42308                           fsr0h	equ	0xFEA
 42309                           fsr0l	equ	0xFE9
 42310                           wreg	equ	0xFE8
 42311                           indf1	equ	0xFE7
 42312                           postinc1	equ	0xFE6
 42313                           postdec1	equ	0xFE5
 42314                           plusw1	equ	0xFE3
 42315                           fsr1h	equ	0xFE2
 42316                           fsr1l	equ	0xFE1
 42317                           indf2	equ	0xFDF
 42318                           postinc2	equ	0xFDE
 42319                           postdec2	equ	0xFDD
 42320                           plusw2	equ	0xFDB
 42321                           fsr2h	equ	0xFDA
 42322                           fsr2l	equ	0xFD9
 42323                           status	equ	0xFD8
 42324                           
 42325 ;; *************** function _USBSuspend *****************
 42326 ;; Defined at:
 42327 ;;		line 2247 in file "usb_device.c"
 42328 ;; Parameters:    Size  Location     Type
 42329 ;;		None
 42330 ;; Auto vars:     Size  Location     Type
 42331 ;;		None
 42332 ;; Return value:  Size  Location     Type
 42333 ;;                  1    wreg      void 
 42334 ;; Registers used:
 42335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 42336 ;; Tracked objects:
 42337 ;;		On entry : 0/0
 42338 ;;		On exit  : 0/0
 42339 ;;		Unchanged: 0/0
 42340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 42341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42345 ;;Total ram usage:        0 bytes
 42346 ;; Hardware stack levels used:    1
 42347 ;; Hardware stack levels required when called:    4
 42348 ;; This function calls:
 42349 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 42350 ;; This function is called by:
 42351 ;;		_USBDeviceTasks
 42352 ;; This function uses a non-reentrant model
 42353 ;;
 42354                           
 42355                           	psect	text163
 42356  013F1C                     __ptext163:
 42357                           	opt stack 0
 42358  013F1C                     _USBSuspend:
 42359                           	opt stack 12
 42360                           
 42361                           ;usb_device.c: 2272: UIEbits.ACTVIE = 1;
 42362                           
 42363                           ; BSR set to: 0
 42364                           ;incstack = 0
 42365  013F1C  010F               	movlb	15	; () banked
 42366  013F1E  8536               	bsf	54,2,b	;volatile
 42367                           
 42368                           ; BSR set to: 15
 42369                           ;usb_device.c: 2273: (UIR &= 0xEF);
 42370  013F20  9862               	bcf	3938,4,c	;volatile
 42371                           
 42372                           ; BSR set to: 15
 42373                           ;usb_device.c: 2276: UCONbits.SUSPND = 1;
 42374  013F22  8265               	bsf	3941,1,c	;volatile
 42375                           
 42376                           ; BSR set to: 15
 42377                           ;usb_device.c: 2279: USBBusIsSuspended = 1;
 42378  013F24  0E01               	movlw	1
 42379  013F26  6E27               	movwf	_USBBusIsSuspended,c	;volatile
 42380                           
 42381                           ; BSR set to: 15
 42382                           ;usb_device.c: 2280: USBTicksSinceSuspendEnd = 0;
 42383  013F28  0E00               	movlw	0
 42384  013F2A  0100               	movlb	0	; () banked
 42385  013F2C  6FFB               	movwf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 42386                           
 42387                           ; BSR set to: 0
 42388                           ;usb_device.c: 2287: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SUSPEND,0,0);
 42389  013F2E  0E00               	movlw	0
 42390  013F30  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 42391  013F32  0E75               	movlw	117
 42392  013F34  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 42393  013F36  0E00               	movlw	0
 42394  013F38  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 42395  013F3A  0E00               	movlw	0
 42396  013F3C  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 42397  013F3E  0E00               	movlw	0
 42398  013F40  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 42399  013F42  0E00               	movlw	0
 42400  013F44  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 42401  013F46  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 42402  013F4A  0012               	return		;funcret
 42403  013F4C                     __end_of_USBSuspend:
 42404                           	opt stack 0
 42405                           tosu	equ	0xFFF
 42406                           tosh	equ	0xFFE
 42407                           tosl	equ	0xFFD
 42408                           pclatu	equ	0xFFB
 42409                           pclath	equ	0xFFA
 42410                           tblptru	equ	0xFF8
 42411                           tblptrh	equ	0xFF7
 42412                           tblptrl	equ	0xFF6
 42413                           tablat	equ	0xFF5
 42414                           prodh	equ	0xFF4
 42415                           prodl	equ	0xFF3
 42416                           intcon	equ	0xFF2
 42417                           indf0	equ	0xFEF
 42418                           postinc0	equ	0xFEE
 42419                           fsr0h	equ	0xFEA
 42420                           fsr0l	equ	0xFE9
 42421                           wreg	equ	0xFE8
 42422                           indf1	equ	0xFE7
 42423                           postinc1	equ	0xFE6
 42424                           postdec1	equ	0xFE5
 42425                           plusw1	equ	0xFE3
 42426                           fsr1h	equ	0xFE2
 42427                           fsr1l	equ	0xFE1
 42428                           indf2	equ	0xFDF
 42429                           postinc2	equ	0xFDE
 42430                           postdec2	equ	0xFDD
 42431                           plusw2	equ	0xFDB
 42432                           fsr2h	equ	0xFDA
 42433                           fsr2l	equ	0xFD9
 42434                           status	equ	0xFD8
 42435                           
 42436 ;; *************** function _USBStallHandler *****************
 42437 ;; Defined at:
 42438 ;;		line 2204 in file "usb_device.c"
 42439 ;; Parameters:    Size  Location     Type
 42440 ;;		None
 42441 ;; Auto vars:     Size  Location     Type
 42442 ;;		None
 42443 ;; Return value:  Size  Location     Type
 42444 ;;                  1    wreg      void 
 42445 ;; Registers used:
 42446 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 42447 ;; Tracked objects:
 42448 ;;		On entry : 0/0
 42449 ;;		On exit  : 0/0
 42450 ;;		Unchanged: 0/0
 42451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 42452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42454 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42455 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42456 ;;Total ram usage:        1 bytes
 42457 ;; Hardware stack levels used:    1
 42458 ;; This function calls:
 42459 ;;		Nothing
 42460 ;; This function is called by:
 42461 ;;		_USBDeviceTasks
 42462 ;; This function uses a non-reentrant model
 42463 ;;
 42464                           
 42465                           	psect	text164
 42466  013A88                     __ptext164:
 42467                           	opt stack 0
 42468  013A88                     _USBStallHandler:
 42469                           	opt stack 16
 42470                           
 42471                           ;usb_device.c: 2216: if(UEP0bits.EPSTALL == 1)
 42472                           
 42473                           ;incstack = 0
 42474  013A88  010F               	movlb	15	; () banked
 42475  013A8A  A126               	btfss	38,0,b	;volatile
 42476  013A8C  D01D               	goto	i2l307
 42477                           
 42478                           ; BSR set to: 15
 42479                           ;usb_device.c: 2217: {;usb_device.c: 2219: if((pBDTEntryEP0OutCurrent->STAT.Val == 0x80)
      +                           && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 42480  013A8E  C01C  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 42481  013A92  C01D  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 42482  013A96  0E80               	movlw	128
 42483  013A98  18DE               	xorwf	postinc2,w,c
 42484  013A9A  A4D8               	btfss	status,2,c
 42485  013A9C  D014               	goto	i2l308
 42486                           
 42487                           ; BSR set to: 15
 42488  013A9E  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 42489  013AA2  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 42490  013AA6  0E84               	movlw	132
 42491  013AA8  18DE               	xorwf	postinc2,w,c
 42492  013AAA  A4D8               	btfss	status,2,c
 42493  013AAC  D00C               	goto	i2l308
 42494                           
 42495                           ; BSR set to: 15
 42496                           ;usb_device.c: 2220: {;usb_device.c: 2222: pBDTEntryEP0OutCurrent->STAT.Val = 0x00|(0x08
      +                           & 0x08)|0x04;
 42497  013AAE  C01C  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 42498  013AB2  C01D  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 42499  013AB6  0E0C               	movlw	12
 42500  013AB8  6EDF               	movwf	indf2,c
 42501                           
 42502                           ; BSR set to: 15
 42503                           ;usb_device.c: 2223: pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 42504  013ABA  C01C  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 42505  013ABE  C01D  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 42506  013AC2  0E00               	movlw	0
 42507  013AC4  8EDB               	bsf	plusw2,7,c
 42508  013AC6                     i2l308:
 42509                           
 42510                           ; BSR set to: 15
 42511                           ;usb_device.c: 2224: };usb_device.c: 2225: UEP0bits.EPSTALL = 0;
 42512                           
 42513                           ; BSR set to: 15
 42514  013AC6  9126               	bcf	38,0,b	;volatile
 42515  013AC8                     i2l307:
 42516                           
 42517                           ; BSR set to: 15
 42518                           ;usb_device.c: 2226: };usb_device.c: 2228: (UIR &= 0xDF);
 42519  013AC8  9A62               	bcf	3938,5,c	;volatile
 42520                           
 42521                           ; BSR set to: 15
 42522  013ACA  0012               	return		;funcret
 42523  013ACC                     __end_of_USBStallHandler:
 42524                           	opt stack 0
 42525                           tosu	equ	0xFFF
 42526                           tosh	equ	0xFFE
 42527                           tosl	equ	0xFFD
 42528                           pclatu	equ	0xFFB
 42529                           pclath	equ	0xFFA
 42530                           tblptru	equ	0xFF8
 42531                           tblptrh	equ	0xFF7
 42532                           tblptrl	equ	0xFF6
 42533                           tablat	equ	0xFF5
 42534                           prodh	equ	0xFF4
 42535                           prodl	equ	0xFF3
 42536                           intcon	equ	0xFF2
 42537                           indf0	equ	0xFEF
 42538                           postinc0	equ	0xFEE
 42539                           fsr0h	equ	0xFEA
 42540                           fsr0l	equ	0xFE9
 42541                           wreg	equ	0xFE8
 42542                           indf1	equ	0xFE7
 42543                           postinc1	equ	0xFE6
 42544                           postdec1	equ	0xFE5
 42545                           plusw1	equ	0xFE3
 42546                           fsr1h	equ	0xFE2
 42547                           fsr1l	equ	0xFE1
 42548                           indf2	equ	0xFDF
 42549                           postinc2	equ	0xFDE
 42550                           postdec2	equ	0xFDD
 42551                           plusw2	equ	0xFDB
 42552                           fsr2h	equ	0xFDA
 42553                           fsr2l	equ	0xFD9
 42554                           status	equ	0xFD8
 42555                           
 42556 ;; *************** function _USBIncrement1msInternalTimers *****************
 42557 ;; Defined at:
 42558 ;;		line 3027 in file "usb_device.c"
 42559 ;; Parameters:    Size  Location     Type
 42560 ;;		None
 42561 ;; Auto vars:     Size  Location     Type
 42562 ;;		None
 42563 ;; Return value:  Size  Location     Type
 42564 ;;                  1    wreg      void 
 42565 ;; Registers used:
 42566 ;;		wreg, status,2, status,0
 42567 ;; Tracked objects:
 42568 ;;		On entry : 0/0
 42569 ;;		On exit  : 0/0
 42570 ;;		Unchanged: 0/0
 42571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 42572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42576 ;;Total ram usage:        0 bytes
 42577 ;; Hardware stack levels used:    1
 42578 ;; This function calls:
 42579 ;;		Nothing
 42580 ;; This function is called by:
 42581 ;;		_USBDeviceTasks
 42582 ;; This function uses a non-reentrant model
 42583 ;;
 42584                           
 42585                           	psect	text165
 42586  0141CE                     __ptext165:
 42587                           	opt stack 0
 42588  0141CE                     _USBIncrement1msInternalTimers:
 42589                           	opt stack 16
 42590                           
 42591                           ;usb_device.c: 3035: USB1msTickCount++;
 42592                           
 42593                           ; BSR set to: 15
 42594                           ;incstack = 0
 42595  0141CE  0E01               	movlw	1
 42596  0141D0  0101               	movlb	1	; () banked
 42597  0141D2  2752               	addwf	_USB1msTickCount& (0+255),f,b	;volatile
 42598  0141D4  0E00               	movlw	0
 42599  0141D6  2353               	addwfc	(_USB1msTickCount+1)& (0+255),f,b	;volatile
 42600  0141D8  2354               	addwfc	(_USB1msTickCount+2)& (0+255),f,b	;volatile
 42601  0141DA  2355               	addwfc	(_USB1msTickCount+3)& (0+255),f,b	;volatile
 42602                           
 42603                           ; BSR set to: 1
 42604                           ;usb_device.c: 3036: if(USBBusIsSuspended == 0)
 42605  0141DC  5027               	movf	_USBBusIsSuspended,w,c	;volatile
 42606  0141DE  A4D8               	btfss	status,2,c
 42607  0141E0  0012               	return	
 42608                           
 42609                           ; BSR set to: 1
 42610                           ;usb_device.c: 3037: {;usb_device.c: 3038: USBTicksSinceSuspendEnd++;
 42611  0141E2  0100               	movlb	0	; () banked
 42612  0141E4  2BFB               	incf	_USBTicksSinceSuspendEnd& (0+255),f,b	;volatile
 42613                           
 42614                           ; BSR set to: 0
 42615                           ;usb_device.c: 3040: if(USBTicksSinceSuspendEnd == 0)
 42616  0141E6  51FB               	movf	_USBTicksSinceSuspendEnd& (0+255),w,b	;volatile
 42617  0141E8  A4D8               	btfss	status,2,c
 42618  0141EA  0012               	return	
 42619                           
 42620                           ; BSR set to: 0
 42621                           ;usb_device.c: 3041: {;usb_device.c: 3042: USBTicksSinceSuspendEnd = 255;
 42622  0141EC  69FB               	setf	_USBTicksSinceSuspendEnd& (0+255),b	;volatile
 42623                           
 42624                           ; BSR set to: 0
 42625  0141EE  0012               	return	
 42626  0141F0                     __end_of_USBIncrement1msInternalTimers:
 42627                           	opt stack 0
 42628                           tosu	equ	0xFFF
 42629                           tosh	equ	0xFFE
 42630                           tosl	equ	0xFFD
 42631                           pclatu	equ	0xFFB
 42632                           pclath	equ	0xFFA
 42633                           tblptru	equ	0xFF8
 42634                           tblptrh	equ	0xFF7
 42635                           tblptrl	equ	0xFF6
 42636                           tablat	equ	0xFF5
 42637                           prodh	equ	0xFF4
 42638                           prodl	equ	0xFF3
 42639                           intcon	equ	0xFF2
 42640                           indf0	equ	0xFEF
 42641                           postinc0	equ	0xFEE
 42642                           fsr0h	equ	0xFEA
 42643                           fsr0l	equ	0xFE9
 42644                           wreg	equ	0xFE8
 42645                           indf1	equ	0xFE7
 42646                           postinc1	equ	0xFE6
 42647                           postdec1	equ	0xFE5
 42648                           plusw1	equ	0xFE3
 42649                           fsr1h	equ	0xFE2
 42650                           fsr1l	equ	0xFE1
 42651                           indf2	equ	0xFDF
 42652                           postinc2	equ	0xFDE
 42653                           postdec2	equ	0xFDD
 42654                           plusw2	equ	0xFDB
 42655                           fsr2h	equ	0xFDA
 42656                           fsr2l	equ	0xFD9
 42657                           status	equ	0xFD8
 42658                           
 42659 ;; *************** function _USBCtrlEPService *****************
 42660 ;; Defined at:
 42661 ;;		line 2374 in file "usb_device.c"
 42662 ;; Parameters:    Size  Location     Type
 42663 ;;		None
 42664 ;; Auto vars:     Size  Location     Type
 42665 ;;		None
 42666 ;; Return value:  Size  Location     Type
 42667 ;;                  1    wreg      void 
 42668 ;; Registers used:
 42669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 42670 ;; Tracked objects:
 42671 ;;		On entry : 0/0
 42672 ;;		On exit  : 0/0
 42673 ;;		Unchanged: 0/0
 42674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 42675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42677 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42678 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42679 ;;Total ram usage:        1 bytes
 42680 ;; Hardware stack levels used:    1
 42681 ;; Hardware stack levels required when called:    7
 42682 ;; This function calls:
 42683 ;;		_USBCtrlTrfInHandler
 42684 ;;		_USBCtrlTrfOutHandler
 42685 ;;		_USBCtrlTrfSetupHandler
 42686 ;;		i2_memcpy
 42687 ;; This function is called by:
 42688 ;;		_USBDeviceTasks
 42689 ;; This function uses a non-reentrant model
 42690 ;;
 42691                           
 42692                           	psect	text166
 42693  012550                     __ptext166:
 42694                           	opt stack 0
 42695  012550                     _USBCtrlEPService:
 42696                           	opt stack 9
 42697                           
 42698                           ;usb_device.c: 2380: USBStatusStageTimeoutCounter = (uint8_t)45;
 42699                           
 42700                           ;incstack = 0
 42701  012550  0E2D               	movlw	45
 42702  012552  6E24               	movwf	_USBStatusStageTimeoutCounter,c	;volatile
 42703                           
 42704                           ;usb_device.c: 2384: if((USTATcopy.Val & ~0x02) == 0x00)
 42705  012554  C02C  F04B         	movff	_USTATcopy,??_USBCtrlEPService	;volatile
 42706  012558  0EFD               	movlw	253
 42707  01255A  164B               	andwf	??_USBCtrlEPService,f,c
 42708  01255C  A4D8               	btfss	status,2,c
 42709  01255E  D03B               	goto	i2l321
 42710                           
 42711                           ;usb_device.c: 2385: {;usb_device.c: 2388: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*
      +                          )&BDT[(USTATcopy.Val & 0x7E)>>1];
 42712  012560  C02C  F04B         	movff	_USTATcopy,??_USBCtrlEPService	;volatile
 42713  012564  90D8               	bcf	status,0,c
 42714  012566  324B               	rrcf	??_USBCtrlEPService,f,c
 42715  012568  0E3F               	movlw	63
 42716  01256A  164B               	andwf	??_USBCtrlEPService,f,c
 42717  01256C  504B               	movf	??_USBCtrlEPService,w,c
 42718  01256E  0D04               	mullw	4
 42719  012570  0E00               	movlw	0
 42720  012572  24F3               	addwf	prodl,w,c
 42721  012574  6E1C               	movwf	_pBDTEntryEP0OutCurrent,c
 42722  012576  0E0D               	movlw	13
 42723  012578  20F4               	addwfc	prodh,w,c
 42724  01257A  6E1D               	movwf	_pBDTEntryEP0OutCurrent+1,c
 42725                           
 42726                           ;usb_device.c: 2396: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 42727  01257C  C01C  F01A         	movff	_pBDTEntryEP0OutCurrent,_pBDTEntryEP0OutNext
 42728  012580  C01D  F01B         	movff	_pBDTEntryEP0OutCurrent+1,_pBDTEntryEP0OutNext+1
 42729                           
 42730                           ;usb_device.c: 2398: pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryEP
      +                          0OutNext) ^ 0x0004);
 42731  012584  0E04               	movlw	4
 42732  012586  181A               	xorwf	_pBDTEntryEP0OutNext,w,c
 42733  012588  6E1A               	movwf	_pBDTEntryEP0OutNext,c
 42734  01258A  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 42735  01258C  6E1B               	movwf	_pBDTEntryEP0OutNext+1,c
 42736                           
 42737                           ;usb_device.c: 2401: if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 42738  01258E  C01C  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 42739  012592  C01D  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 42740  012596  30DF               	rrcf	indf2,w,c
 42741  012598  32E8               	rrcf	wreg,f,c
 42742  01259A  0B0F               	andlw	15
 42743  01259C  0A0D               	xorlw	13
 42744  01259E  A4D8               	btfss	status,2,c
 42745  0125A0  D017               	goto	i2l322
 42746                           
 42747                           ;usb_device.c: 2402: {;usb_device.c: 2407: memcpy((uint8_t*)&SetupPkt, (uint8_t*)((void 
      +                          *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 42748  0125A2  0E30               	movlw	48
 42749  0125A4  6E2E               	movwf	i2memcpy@d1,c
 42750  0125A6  0E0D               	movlw	13
 42751  0125A8  6E2F               	movwf	i2memcpy@d1+1,c
 42752  0125AA  EE20 F002          	lfsr	2,2
 42753  0125AE  501C               	movf	_pBDTEntryEP0OutCurrent,w,c
 42754  0125B0  26D9               	addwf	fsr2l,f,c
 42755  0125B2  501D               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 42756  0125B4  22DA               	addwfc	fsr2h,f,c
 42757  0125B6  CFDE F030          	movff	postinc2,i2memcpy@s1
 42758  0125BA  CFDD F031          	movff	postdec2,i2memcpy@s1+1
 42759  0125BE  0E00               	movlw	0
 42760  0125C0  6E33               	movwf	i2memcpy@n+1,c
 42761  0125C2  0E08               	movlw	8
 42762  0125C4  6E32               	movwf	i2memcpy@n,c
 42763  0125C6  EC9B  F098         	call	i2_memcpy	;wreg free
 42764                           
 42765                           ;usb_device.c: 2410: USBCtrlTrfSetupHandler();
 42766  0125CA  EC85  F093         	call	_USBCtrlTrfSetupHandler	;wreg free
 42767                           
 42768                           ;usb_device.c: 2411: }
 42769  0125CE  0012               	return	
 42770  0125D0                     i2l322:
 42771                           
 42772                           ;usb_device.c: 2412: else;usb_device.c: 2413: {;usb_device.c: 2415: USBCtrlTrfOutHandler
      +                          ();
 42773  0125D0  ECC9  F098         	call	_USBCtrlTrfOutHandler	;wreg free
 42774                           
 42775                           ;usb_device.c: 2416: };usb_device.c: 2417: }
 42776  0125D4  0012               	return	
 42777  0125D6                     i2l321:
 42778                           
 42779                           ;usb_device.c: 2418: else if((USTATcopy.Val & ~0x02) == 0x04)
 42780  0125D6  502C               	movf	_USTATcopy,w,c	;volatile
 42781  0125D8  0BFD               	andlw	253
 42782  0125DA  0A04               	xorlw	4
 42783  0125DC  A4D8               	btfss	status,2,c
 42784  0125DE  0012               	return	
 42785                           
 42786                           ;usb_device.c: 2419: {;usb_device.c: 2422: USBCtrlTrfInHandler();
 42787  0125E0  EC0C  F08E         	call	_USBCtrlTrfInHandler	;wreg free
 42788  0125E4  0012               	return	
 42789  0125E6                     __end_of_USBCtrlEPService:
 42790                           	opt stack 0
 42791                           tosu	equ	0xFFF
 42792                           tosh	equ	0xFFE
 42793                           tosl	equ	0xFFD
 42794                           pclatu	equ	0xFFB
 42795                           pclath	equ	0xFFA
 42796                           tblptru	equ	0xFF8
 42797                           tblptrh	equ	0xFF7
 42798                           tblptrl	equ	0xFF6
 42799                           tablat	equ	0xFF5
 42800                           prodh	equ	0xFF4
 42801                           prodl	equ	0xFF3
 42802                           intcon	equ	0xFF2
 42803                           indf0	equ	0xFEF
 42804                           postinc0	equ	0xFEE
 42805                           fsr0h	equ	0xFEA
 42806                           fsr0l	equ	0xFE9
 42807                           wreg	equ	0xFE8
 42808                           indf1	equ	0xFE7
 42809                           postinc1	equ	0xFE6
 42810                           postdec1	equ	0xFE5
 42811                           plusw1	equ	0xFE3
 42812                           fsr1h	equ	0xFE2
 42813                           fsr1l	equ	0xFE1
 42814                           indf2	equ	0xFDF
 42815                           postinc2	equ	0xFDE
 42816                           postdec2	equ	0xFDD
 42817                           plusw2	equ	0xFDB
 42818                           fsr2h	equ	0xFDA
 42819                           fsr2l	equ	0xFD9
 42820                           status	equ	0xFD8
 42821                           
 42822 ;; *************** function i2_memcpy *****************
 42823 ;; Defined at:
 42824 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memcpy.c"
 42825 ;; Parameters:    Size  Location     Type
 42826 ;;  d1              2    0[COMRAM] PTR void 
 42827 ;;		 -> fat_create_file@root_entry(32), _flash_set_page_size@command(4), display_content(80), ToSendDataBuffer(64), 
 42828 ;;		 -> msd_buffer(512), SetupPkt(8), 
 42829 ;;  s1              2    2[COMRAM] PTR const void 
 42830 ;;		 -> configFile_extention(3), configFile_name(8), flash_command_pagesize_528(4), flash_command_pagesize_512(4), 
 42831 ;;		 -> STR_6(6), STR_5(9), STR_4(7), STR_3(9), 
 42832 ;;		 -> dc_manual(80), dc_zero(80), STR_2(7), STR_1(9), 
 42833 ;;		 -> dc_arc2(80), dc_arc1(80), dc_divide2(80), dc_divide1(80), 
 42834 ;;		 -> dc_setup2(80), dc_setup1(80), dc_main(80), ReceivedDataBuffer(64), 
 42835 ;;		 -> config(22), os(48), inq_resp(36), CtrlTrfData(8), 
 42836 ;;		 -> RAM(3759), SetupPkt(8), 
 42837 ;;  n               2    4[COMRAM] unsigned int 
 42838 ;; Auto vars:     Size  Location     Type
 42839 ;;  memcpy          2    8[COMRAM] PTR const unsigned char 
 42840 ;;		 -> configFile_extention(3), configFile_name(8), flash_command_pagesize_528(4), flash_command_pagesize_512(4), 
 42841 ;;		 -> STR_6(6), STR_5(9), STR_4(7), STR_3(9), 
 42842 ;;		 -> dc_manual(80), dc_zero(80), STR_2(7), STR_1(9), 
 42843 ;;		 -> dc_arc2(80), dc_arc1(80), dc_divide2(80), dc_divide1(80), 
 42844 ;;		 -> dc_setup2(80), dc_setup1(80), dc_main(80), ReceivedDataBuffer(64), 
 42845 ;;		 -> config(22), os(48), inq_resp(36), CtrlTrfData(8), 
 42846 ;;		 -> RAM(3759), SetupPkt(8), 
 42847 ;;  memcpy          2    6[COMRAM] PTR unsigned char 
 42848 ;;		 -> fat_create_file@root_entry(32), _flash_set_page_size@command(4), display_content(80), ToSendDataBuffer(64), 
 42849 ;;		 -> msd_buffer(512), SetupPkt(8), 
 42850 ;;  memcpy          1   10[COMRAM] unsigned char 
 42851 ;; Return value:  Size  Location     Type
 42852 ;;                  2    0[COMRAM] PTR void 
 42853 ;; Registers used:
 42854 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 42855 ;; Tracked objects:
 42856 ;;		On entry : 0/0
 42857 ;;		On exit  : 0/0
 42858 ;;		Unchanged: 0/0
 42859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 42860 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42861 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42863 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42864 ;;Total ram usage:       11 bytes
 42865 ;; Hardware stack levels used:    1
 42866 ;; This function calls:
 42867 ;;		Nothing
 42868 ;; This function is called by:
 42869 ;;		_USBCtrlEPService
 42870 ;; This function uses a non-reentrant model
 42871 ;;
 42872                           
 42873                           	psect	text167
 42874  013136                     __ptext167:
 42875                           	opt stack 0
 42876  013136                     i2_memcpy:
 42877                           	opt stack 15
 42878                           
 42879                           ;incstack = 0
 42880  013136  C030  F036         	movff	i2memcpy@s1,i2memcpy@s
 42881  01313A  C031  F037         	movff	i2memcpy@s1+1,i2memcpy@s+1
 42882  01313E  C02E  F034         	movff	i2memcpy@d1,i2memcpy@d
 42883  013142  C02F  F035         	movff	i2memcpy@d1+1,i2memcpy@d+1
 42884  013146  D01C               	goto	i2l3478
 42885  013148                     i2l15104:
 42886  013148  C036  FFF6         	movff	i2memcpy@s,tblptrl
 42887  01314C  C037  FFF7         	movff	i2memcpy@s+1,tblptrh
 42888  013150  0E00               	movlw	low (__mediumconst shr (0+16))
 42889  013152  6EF8               	movwf	tblptru,c
 42890  013154  0E0E               	movlw	(high __ramtop+-1)
 42891  013156  64F7               	cpfsgt	tblptrh,c
 42892  013158  D003               	bra	i2u1385_47
 42893  01315A  0008               	tblrd		*
 42894  01315C  50F5               	movf	tablat,w,c
 42895  01315E  D005               	bra	i2u1385_40
 42896  013160                     i2u1385_47:
 42897  013160  CFF6 FFE9          	movff	tblptrl,fsr0l
 42898  013164  CFF7 FFEA          	movff	tblptrh,fsr0h
 42899  013168  50EF               	movf	indf0,w,c
 42900  01316A                     i2u1385_40:
 42901  01316A  6E38               	movwf	i2memcpy@tmp,c
 42902  01316C  4A36               	infsnz	i2memcpy@s,f,c
 42903  01316E  2A37               	incf	i2memcpy@s+1,f,c
 42904  013170  C034  FFD9         	movff	i2memcpy@d,fsr2l
 42905  013174  C035  FFDA         	movff	i2memcpy@d+1,fsr2h
 42906  013178  C038  FFDF         	movff	i2memcpy@tmp,indf2
 42907  01317C  4A34               	infsnz	i2memcpy@d,f,c
 42908  01317E  2A35               	incf	i2memcpy@d+1,f,c
 42909  013180                     i2l3478:
 42910  013180  0632               	decf	i2memcpy@n,f,c
 42911  013182  A0D8               	btfss	status,0,c
 42912  013184  0633               	decf	i2memcpy@n+1,f,c
 42913  013186  2832               	incf	i2memcpy@n,w,c
 42914  013188  E1DF               	bnz	i2l15104
 42915  01318A  2833               	incf	i2memcpy@n+1,w,c
 42916  01318C  B4D8               	btfsc	status,2,c
 42917  01318E  0012               	return	
 42918  013190  D7DB               	goto	i2l3479
 42919  013192                     __end_ofi2_memcpy:
 42920                           	opt stack 0
 42921                           tosu	equ	0xFFF
 42922                           tosh	equ	0xFFE
 42923                           tosl	equ	0xFFD
 42924                           pclatu	equ	0xFFB
 42925                           pclath	equ	0xFFA
 42926                           tblptru	equ	0xFF8
 42927                           tblptrh	equ	0xFF7
 42928                           tblptrl	equ	0xFF6
 42929                           tablat	equ	0xFF5
 42930                           prodh	equ	0xFF4
 42931                           prodl	equ	0xFF3
 42932                           intcon	equ	0xFF2
 42933                           indf0	equ	0xFEF
 42934                           postinc0	equ	0xFEE
 42935                           fsr0h	equ	0xFEA
 42936                           fsr0l	equ	0xFE9
 42937                           wreg	equ	0xFE8
 42938                           indf1	equ	0xFE7
 42939                           postinc1	equ	0xFE6
 42940                           postdec1	equ	0xFE5
 42941                           plusw1	equ	0xFE3
 42942                           fsr1h	equ	0xFE2
 42943                           fsr1l	equ	0xFE1
 42944                           indf2	equ	0xFDF
 42945                           postinc2	equ	0xFDE
 42946                           postdec2	equ	0xFDD
 42947                           plusw2	equ	0xFDB
 42948                           fsr2h	equ	0xFDA
 42949                           fsr2l	equ	0xFD9
 42950                           status	equ	0xFD8
 42951                           
 42952 ;; *************** function _USBCtrlTrfSetupHandler *****************
 42953 ;; Defined at:
 42954 ;;		line 2467 in file "usb_device.c"
 42955 ;; Parameters:    Size  Location     Type
 42956 ;;		None
 42957 ;; Auto vars:     Size  Location     Type
 42958 ;;		None
 42959 ;; Return value:  Size  Location     Type
 42960 ;;                  1    wreg      void 
 42961 ;; Registers used:
 42962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 42963 ;; Tracked objects:
 42964 ;;		On entry : 0/0
 42965 ;;		On exit  : 0/0
 42966 ;;		Unchanged: 0/0
 42967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 42968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 42972 ;;Total ram usage:        0 bytes
 42973 ;; Hardware stack levels used:    1
 42974 ;; Hardware stack levels required when called:    6
 42975 ;; This function calls:
 42976 ;;		_USBCheckStdRequest
 42977 ;;		_USBCtrlEPServiceComplete
 42978 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 42979 ;; This function is called by:
 42980 ;;		_USBCtrlEPService
 42981 ;; This function uses a non-reentrant model
 42982 ;;
 42983                           
 42984                           	psect	text168
 42985  01270A                     __ptext168:
 42986                           	opt stack 0
 42987  01270A                     _USBCtrlTrfSetupHandler:
 42988                           	opt stack 9
 42989                           
 42990                           ;usb_device.c: 2472: shortPacketStatus = 0;
 42991                           
 42992                           ;incstack = 0
 42993  01270A  0E00               	movlw	0
 42994  01270C  6E2A               	movwf	_shortPacketStatus,c	;volatile
 42995                           
 42996                           ;usb_device.c: 2473: USBDeferStatusStagePacket = 0;
 42997  01270E  0E00               	movlw	0
 42998  012710  6E23               	movwf	_USBDeferStatusStagePacket,c	;volatile
 42999                           
 43000                           ;usb_device.c: 2474: USBDeferINDataStagePackets = 0;
 43001  012712  0E00               	movlw	0
 43002  012714  0100               	movlb	0	; () banked
 43003  012716  6FFD               	movwf	_USBDeferINDataStagePackets& (0+255),b	;volatile
 43004                           
 43005                           ;usb_device.c: 2475: USBDeferOUTDataStagePackets = 0;
 43006  012718  0E00               	movlw	0
 43007  01271A  6FFC               	movwf	_USBDeferOUTDataStagePackets& (0+255),b	;volatile
 43008                           
 43009                           ;usb_device.c: 2476: BothEP0OutUOWNsSet = 0;
 43010  01271C  0E00               	movlw	0
 43011  01271E  6E25               	movwf	_BothEP0OutUOWNsSet,c	;volatile
 43012                           
 43013                           ;usb_device.c: 2477: controlTransferState = 0;
 43014  012720  0E00               	movlw	0
 43015  012722  6E29               	movwf	_controlTransferState,c	;volatile
 43016                           
 43017                           ; BSR set to: 0
 43018                           ;usb_device.c: 2486: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 43019  012724  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 43020  012728  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 43021  01272C  0E7F               	movlw	127
 43022  01272E  16DF               	andwf	indf2,f,c
 43023                           
 43024                           ; BSR set to: 0
 43025                           ;usb_device.c: 2488: pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[0]) 
      +                          ^ 0x0004);
 43026  012730  0E04               	movlw	4
 43027  012732  1810               	xorwf	_pBDTEntryIn,w,c
 43028  012734  6E10               	movwf	_pBDTEntryIn,c
 43029  012736  5011               	movf	_pBDTEntryIn+1,w,c
 43030  012738  6E11               	movwf	_pBDTEntryIn+1,c
 43031                           
 43032                           ; BSR set to: 0
 43033                           ;usb_device.c: 2489: pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 43034  01273A  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 43035  01273E  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 43036  012742  0E7F               	movlw	127
 43037  012744  16DF               	andwf	indf2,f,c
 43038                           
 43039                           ; BSR set to: 0
 43040                           ;usb_device.c: 2490: pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[0]) 
      +                          ^ 0x0004);
 43041  012746  0E04               	movlw	4
 43042  012748  1810               	xorwf	_pBDTEntryIn,w,c
 43043  01274A  6E10               	movwf	_pBDTEntryIn,c
 43044  01274C  5011               	movf	_pBDTEntryIn+1,w,c
 43045  01274E  6E11               	movwf	_pBDTEntryIn+1,c
 43046                           
 43047                           ; BSR set to: 0
 43048                           ;usb_device.c: 2491: pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 43049  012750  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 43050  012754  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 43051  012758  0E7F               	movlw	127
 43052  01275A  16DF               	andwf	indf2,f,c
 43053                           
 43054                           ; BSR set to: 0
 43055                           ;usb_device.c: 2493: inPipes[0].info.Val = 0;
 43056  01275C  0E00               	movlw	0
 43057  01275E  6E0D               	movwf	_inPipes+3,c	;volatile
 43058                           
 43059                           ; BSR set to: 0
 43060                           ;usb_device.c: 2494: inPipes[0].wCount.Val = 0;
 43061  012760  0E00               	movlw	0
 43062  012762  6E0F               	movwf	_inPipes+5,c	;volatile
 43063  012764  0E00               	movlw	0
 43064  012766  6E0E               	movwf	_inPipes+4,c	;volatile
 43065                           
 43066                           ; BSR set to: 0
 43067                           ;usb_device.c: 2495: outPipes[0].info.Val = 0;
 43068  012768  0E00               	movlw	0
 43069  01276A  6E04               	movwf	_outPipes+3,c	;volatile
 43070                           
 43071                           ; BSR set to: 0
 43072                           ;usb_device.c: 2496: outPipes[0].wCount.Val = 0;
 43073  01276C  0E00               	movlw	0
 43074  01276E  6E06               	movwf	_outPipes+5,c	;volatile
 43075  012770  0E00               	movlw	0
 43076  012772  6E05               	movwf	_outPipes+4,c	;volatile
 43077                           
 43078                           ; BSR set to: 0
 43079                           ;usb_device.c: 2502: USBCheckStdRequest();
 43080  012774  EC74  F08A         	call	_USBCheckStdRequest	;wreg free
 43081                           
 43082                           ;usb_device.c: 2503: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_EP0_REQUEST,0,0);
 43083  012778  0E00               	movlw	0
 43084  01277A  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 43085  01277C  0E03               	movlw	3
 43086  01277E  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 43087  012780  0E00               	movlw	0
 43088  012782  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 43089  012784  0E00               	movlw	0
 43090  012786  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 43091  012788  0E00               	movlw	0
 43092  01278A  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 43093  01278C  0E00               	movlw	0
 43094  01278E  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 43095  012790  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 43096                           
 43097                           ;usb_device.c: 2516: USBCtrlEPServiceComplete();
 43098  012794  ECF4  F085         	call	_USBCtrlEPServiceComplete	;wreg free
 43099  012798  0012               	return		;funcret
 43100  01279A                     __end_of_USBCtrlTrfSetupHandler:
 43101                           	opt stack 0
 43102                           tosu	equ	0xFFF
 43103                           tosh	equ	0xFFE
 43104                           tosl	equ	0xFFD
 43105                           pclatu	equ	0xFFB
 43106                           pclath	equ	0xFFA
 43107                           tblptru	equ	0xFF8
 43108                           tblptrh	equ	0xFF7
 43109                           tblptrl	equ	0xFF6
 43110                           tablat	equ	0xFF5
 43111                           prodh	equ	0xFF4
 43112                           prodl	equ	0xFF3
 43113                           intcon	equ	0xFF2
 43114                           indf0	equ	0xFEF
 43115                           postinc0	equ	0xFEE
 43116                           fsr0h	equ	0xFEA
 43117                           fsr0l	equ	0xFE9
 43118                           wreg	equ	0xFE8
 43119                           indf1	equ	0xFE7
 43120                           postinc1	equ	0xFE6
 43121                           postdec1	equ	0xFE5
 43122                           plusw1	equ	0xFE3
 43123                           fsr1h	equ	0xFE2
 43124                           fsr1l	equ	0xFE1
 43125                           indf2	equ	0xFDF
 43126                           postinc2	equ	0xFDE
 43127                           postdec2	equ	0xFDD
 43128                           plusw2	equ	0xFDB
 43129                           fsr2h	equ	0xFDA
 43130                           fsr2l	equ	0xFD9
 43131                           status	equ	0xFD8
 43132                           
 43133 ;; *************** function _USBCtrlEPServiceComplete *****************
 43134 ;; Defined at:
 43135 ;;		line 1618 in file "usb_device.c"
 43136 ;; Parameters:    Size  Location     Type
 43137 ;;		None
 43138 ;; Auto vars:     Size  Location     Type
 43139 ;;		None
 43140 ;; Return value:  Size  Location     Type
 43141 ;;                  1    wreg      void 
 43142 ;; Registers used:
 43143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 43144 ;; Tracked objects:
 43145 ;;		On entry : 0/0
 43146 ;;		On exit  : 0/0
 43147 ;;		Unchanged: 0/0
 43148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 43149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43153 ;;Total ram usage:        0 bytes
 43154 ;; Hardware stack levels used:    1
 43155 ;; Hardware stack levels required when called:    2
 43156 ;; This function calls:
 43157 ;;		_USBCtrlEPAllowDataStage
 43158 ;;		_USBCtrlEPAllowStatusStage
 43159 ;; This function is called by:
 43160 ;;		_USBCtrlTrfSetupHandler
 43161 ;; This function uses a non-reentrant model
 43162 ;;
 43163                           
 43164                           	psect	text169
 43165  010BE8                     __ptext169:
 43166                           	opt stack 0
 43167  010BE8                     _USBCtrlEPServiceComplete:
 43168                           	opt stack 12
 43169                           
 43170                           ;usb_device.c: 1624: UCONbits.PKTDIS = 0;
 43171                           
 43172                           ;incstack = 0
 43173  010BE8  9865               	bcf	3941,4,c	;volatile
 43174                           
 43175                           ;usb_device.c: 1630: if(inPipes[0].info.bits.busy == 0)
 43176  010BEA  BE0D               	btfsc	_inPipes+3,7,c	;volatile
 43177  010BEC  D03A               	goto	i2l231
 43178                           
 43179                           ;usb_device.c: 1631: {;usb_device.c: 1632: if(outPipes[0].info.bits.busy == 1)
 43180  010BEE  AE04               	btfss	_outPipes+3,7,c	;volatile
 43181  010BF0  D00D               	goto	i2l232
 43182                           
 43183                           ;usb_device.c: 1633: {;usb_device.c: 1634: controlTransferState = 2;
 43184  010BF2  0E02               	movlw	2
 43185  010BF4  6E29               	movwf	_controlTransferState,c	;volatile
 43186                           
 43187                           ;usb_device.c: 1645: if(USBDeferOUTDataStagePackets == 0)
 43188  010BF6  0100               	movlb	0	; () banked
 43189  010BF8  51FC               	movf	_USBDeferOUTDataStagePackets& (0+255),w,b	;volatile
 43190  010BFA  B4D8               	btfsc	status,2,c
 43191                           
 43192                           ; BSR set to: 0
 43193                           ;usb_device.c: 1646: {;usb_device.c: 1647: USBCtrlEPAllowDataStage();
 43194  010BFC  EC5C  F092         	call	_USBCtrlEPAllowDataStage	;wreg free
 43195                           
 43196                           ;usb_device.c: 1648: };usb_device.c: 1652: USBStatusStageEnabledFlag2 = 0;
 43197  010C00  0E00               	movlw	0
 43198  010C02  0100               	movlb	0	; () banked
 43199  010C04  6FFE               	movwf	_USBStatusStageEnabledFlag2& (0+255),b	;volatile
 43200                           
 43201                           ; BSR set to: 0
 43202                           ;usb_device.c: 1653: USBStatusStageEnabledFlag1 = 0;
 43203  010C06  0E00               	movlw	0
 43204  010C08  6E22               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 43205                           
 43206                           ;usb_device.c: 1654: }
 43207  010C0A  0012               	return	
 43208  010C0C                     i2l232:
 43209                           
 43210                           ;usb_device.c: 1655: else;usb_device.c: 1656: {;usb_device.c: 1661: pBDTEntryEP0OutNext-
      +                          >CNT = 8;
 43211                           
 43212                           ; BSR set to: 0
 43213  010C0C  EE20 F001          	lfsr	2,1
 43214  010C10  501A               	movf	_pBDTEntryEP0OutNext,w,c
 43215  010C12  26D9               	addwf	fsr2l,f,c
 43216  010C14  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 43217  010C16  22DA               	addwfc	fsr2h,f,c
 43218  010C18  0E08               	movlw	8
 43219  010C1A  6EDF               	movwf	indf2,c
 43220                           
 43221                           ;usb_device.c: 1662: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 43222  010C1C  EE20 F002          	lfsr	2,2
 43223  010C20  501A               	movf	_pBDTEntryEP0OutNext,w,c
 43224  010C22  26D9               	addwf	fsr2l,f,c
 43225  010C24  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 43226  010C26  22DA               	addwfc	fsr2h,f,c
 43227  010C28  0E30               	movlw	48
 43228  010C2A  6EDE               	movwf	postinc2,c
 43229  010C2C  0E0D               	movlw	13
 43230  010C2E  6EDD               	movwf	postdec2,c
 43231                           
 43232                           ;usb_device.c: 1663: pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 43233  010C30  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 43234  010C34  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 43235  010C38  0E0C               	movlw	12
 43236  010C3A  6EDF               	movwf	indf2,c
 43237                           
 43238                           ;usb_device.c: 1664: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 43239  010C3C  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 43240  010C40  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 43241  010C44  0E00               	movlw	0
 43242  010C46  8EDB               	bsf	plusw2,7,c
 43243                           
 43244                           ;usb_device.c: 1665: pBDTEntryIn[0]->STAT.Val = 0x04;
 43245  010C48  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 43246  010C4C  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 43247  010C50  0E04               	movlw	4
 43248  010C52  6EDF               	movwf	indf2,c
 43249                           
 43250                           ;usb_device.c: 1666: pBDTEntryIn[0]->STAT.Val |= 0x80;
 43251  010C54  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 43252  010C58  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 43253  010C5C  0E00               	movlw	0
 43254  010C5E  8EDB               	bsf	plusw2,7,c
 43255                           
 43256                           ;usb_device.c: 1667: };usb_device.c: 1668: }
 43257  010C60  0012               	return	
 43258  010C62                     i2l231:
 43259                           
 43260                           ;usb_device.c: 1669: else;usb_device.c: 1670: {;usb_device.c: 1671: if(SetupPkt.DataDir 
      +                          == (0x80>>7))
 43261  010C62  010D               	movlb	13	; () banked
 43262  010C64  AF30               	btfss	48,7,b	;volatile
 43263  010C66  D012               	goto	i2l236
 43264                           
 43265                           ; BSR set to: 13
 43266                           ;usb_device.c: 1672: {;usb_device.c: 1673: controlTransferState = 1;
 43267  010C68  0E01               	movlw	1
 43268  010C6A  6E29               	movwf	_controlTransferState,c	;volatile
 43269                           
 43270                           ;usb_device.c: 1687: if(USBDeferINDataStagePackets == 0)
 43271  010C6C  0100               	movlb	0	; () banked
 43272  010C6E  51FD               	movf	_USBDeferINDataStagePackets& (0+255),w,b	;volatile
 43273  010C70  B4D8               	btfsc	status,2,c
 43274                           
 43275                           ; BSR set to: 0
 43276                           ;usb_device.c: 1688: {;usb_device.c: 1689: USBCtrlEPAllowDataStage();
 43277  010C72  EC5C  F092         	call	_USBCtrlEPAllowDataStage	;wreg free
 43278                           
 43279                           ;usb_device.c: 1690: };usb_device.c: 1712: USBStatusStageEnabledFlag2 = 0;
 43280  010C76  0E00               	movlw	0
 43281  010C78  0100               	movlb	0	; () banked
 43282  010C7A  6FFE               	movwf	_USBStatusStageEnabledFlag2& (0+255),b	;volatile
 43283                           
 43284                           ; BSR set to: 0
 43285                           ;usb_device.c: 1713: USBStatusStageEnabledFlag1 = 0;
 43286  010C7C  0E00               	movlw	0
 43287  010C7E  6E22               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 43288                           
 43289                           ; BSR set to: 0
 43290                           ;usb_device.c: 1714: if(USBDeferStatusStagePacket == 0)
 43291  010C80  5023               	movf	_USBDeferStatusStagePacket,w,c	;volatile
 43292  010C82  A4D8               	btfss	status,2,c
 43293  010C84  0012               	return	
 43294                           
 43295                           ; BSR set to: 0
 43296                           ;usb_device.c: 1715: {;usb_device.c: 1716: USBCtrlEPAllowStatusStage();
 43297  010C86  EC4B  F08D         	call	_USBCtrlEPAllowStatusStage	;wreg free
 43298                           
 43299                           ;usb_device.c: 1717: };usb_device.c: 1718: }
 43300  010C8A  0012               	return	
 43301  010C8C                     i2l236:
 43302                           
 43303                           ;usb_device.c: 1719: else;usb_device.c: 1720: {;usb_device.c: 1731: controlTransferState
      +                           = 2;
 43304  010C8C  0E02               	movlw	2
 43305  010C8E  6E29               	movwf	_controlTransferState,c	;volatile
 43306                           
 43307                           ;usb_device.c: 1734: pBDTEntryEP0OutNext->CNT = 8;
 43308  010C90  EE20 F001          	lfsr	2,1
 43309  010C94  501A               	movf	_pBDTEntryEP0OutNext,w,c
 43310  010C96  26D9               	addwf	fsr2l,f,c
 43311  010C98  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 43312  010C9A  22DA               	addwfc	fsr2h,f,c
 43313  010C9C  0E08               	movlw	8
 43314  010C9E  6EDF               	movwf	indf2,c
 43315                           
 43316                           ;usb_device.c: 1735: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 43317  010CA0  EE20 F002          	lfsr	2,2
 43318  010CA4  501A               	movf	_pBDTEntryEP0OutNext,w,c
 43319  010CA6  26D9               	addwf	fsr2l,f,c
 43320  010CA8  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 43321  010CAA  22DA               	addwfc	fsr2h,f,c
 43322  010CAC  0E30               	movlw	48
 43323  010CAE  6EDE               	movwf	postinc2,c
 43324  010CB0  0E0D               	movlw	13
 43325  010CB2  6EDD               	movwf	postdec2,c
 43326                           
 43327                           ;usb_device.c: 1736: pBDTEntryEP0OutNext->STAT.Val = 0x04;
 43328  010CB4  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 43329  010CB8  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 43330  010CBC  0E04               	movlw	4
 43331  010CBE  6EDF               	movwf	indf2,c
 43332                           
 43333                           ;usb_device.c: 1737: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 43334  010CC0  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 43335  010CC4  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 43336  010CC8  0E00               	movlw	0
 43337  010CCA  8EDB               	bsf	plusw2,7,c
 43338                           
 43339                           ;usb_device.c: 1740: USBStatusStageEnabledFlag2 = 0;
 43340  010CCC  0E00               	movlw	0
 43341  010CCE  0100               	movlb	0	; () banked
 43342  010CD0  6FFE               	movwf	_USBStatusStageEnabledFlag2& (0+255),b	;volatile
 43343                           
 43344                           ; BSR set to: 0
 43345                           ;usb_device.c: 1741: USBStatusStageEnabledFlag1 = 0;
 43346  010CD2  0E00               	movlw	0
 43347  010CD4  6E22               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 43348                           
 43349                           ; BSR set to: 0
 43350                           ;usb_device.c: 1742: if(USBDeferStatusStagePacket == 0)
 43351  010CD6  5023               	movf	_USBDeferStatusStagePacket,w,c	;volatile
 43352  010CD8  A4D8               	btfss	status,2,c
 43353  010CDA  0012               	return	
 43354                           
 43355                           ; BSR set to: 0
 43356                           ;usb_device.c: 1743: {;usb_device.c: 1744: USBCtrlEPAllowStatusStage();
 43357  010CDC  EC4B  F08D         	call	_USBCtrlEPAllowStatusStage	;wreg free
 43358  010CE0  0012               	return	
 43359  010CE2                     __end_of_USBCtrlEPServiceComplete:
 43360                           	opt stack 0
 43361                           tosu	equ	0xFFF
 43362                           tosh	equ	0xFFE
 43363                           tosl	equ	0xFFD
 43364                           pclatu	equ	0xFFB
 43365                           pclath	equ	0xFFA
 43366                           tblptru	equ	0xFF8
 43367                           tblptrh	equ	0xFF7
 43368                           tblptrl	equ	0xFF6
 43369                           tablat	equ	0xFF5
 43370                           prodh	equ	0xFF4
 43371                           prodl	equ	0xFF3
 43372                           intcon	equ	0xFF2
 43373                           indf0	equ	0xFEF
 43374                           postinc0	equ	0xFEE
 43375                           fsr0h	equ	0xFEA
 43376                           fsr0l	equ	0xFE9
 43377                           wreg	equ	0xFE8
 43378                           indf1	equ	0xFE7
 43379                           postinc1	equ	0xFE6
 43380                           postdec1	equ	0xFE5
 43381                           plusw1	equ	0xFE3
 43382                           fsr1h	equ	0xFE2
 43383                           fsr1l	equ	0xFE1
 43384                           indf2	equ	0xFDF
 43385                           postinc2	equ	0xFDE
 43386                           postdec2	equ	0xFDD
 43387                           plusw2	equ	0xFDB
 43388                           fsr2h	equ	0xFDA
 43389                           fsr2l	equ	0xFD9
 43390                           status	equ	0xFD8
 43391                           
 43392 ;; *************** function _USBCtrlEPAllowDataStage *****************
 43393 ;; Defined at:
 43394 ;;		line 1490 in file "usb_device.c"
 43395 ;; Parameters:    Size  Location     Type
 43396 ;;		None
 43397 ;; Auto vars:     Size  Location     Type
 43398 ;;		None
 43399 ;; Return value:  Size  Location     Type
 43400 ;;                  1    wreg      void 
 43401 ;; Registers used:
 43402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 43403 ;; Tracked objects:
 43404 ;;		On entry : 0/0
 43405 ;;		On exit  : 0/0
 43406 ;;		Unchanged: 0/0
 43407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 43408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43412 ;;Total ram usage:        0 bytes
 43413 ;; Hardware stack levels used:    1
 43414 ;; Hardware stack levels required when called:    1
 43415 ;; This function calls:
 43416 ;;		_USBCtrlTrfTxService
 43417 ;; This function is called by:
 43418 ;;		_USBCtrlEPServiceComplete
 43419 ;; This function uses a non-reentrant model
 43420 ;;
 43421                           
 43422                           	psect	text170
 43423  0124B8                     __ptext170:
 43424                           	opt stack 0
 43425  0124B8                     _USBCtrlEPAllowDataStage:
 43426                           	opt stack 12
 43427                           
 43428                           ;usb_device.c: 1492: USBDeferINDataStagePackets = 0;
 43429                           
 43430                           ;incstack = 0
 43431  0124B8  0E00               	movlw	0
 43432  0124BA  0100               	movlb	0	; () banked
 43433  0124BC  6FFD               	movwf	_USBDeferINDataStagePackets& (0+255),b	;volatile
 43434                           
 43435                           ;usb_device.c: 1493: USBDeferOUTDataStagePackets = 0;
 43436  0124BE  0E00               	movlw	0
 43437  0124C0  6FFC               	movwf	_USBDeferOUTDataStagePackets& (0+255),b	;volatile
 43438                           
 43439                           ; BSR set to: 0
 43440                           ;usb_device.c: 1495: if(controlTransferState == 2)
 43441  0124C2  0E02               	movlw	2
 43442  0124C4  1829               	xorwf	_controlTransferState,w,c	;volatile
 43443  0124C6  A4D8               	btfss	status,2,c
 43444  0124C8  D01F               	goto	i2l220
 43445                           
 43446                           ; BSR set to: 0
 43447                           ;usb_device.c: 1496: {;usb_device.c: 1498: pBDTEntryEP0OutNext->CNT = 8;
 43448  0124CA  EE20 F001          	lfsr	2,1
 43449  0124CE  501A               	movf	_pBDTEntryEP0OutNext,w,c
 43450  0124D0  26D9               	addwf	fsr2l,f,c
 43451  0124D2  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 43452  0124D4  22DA               	addwfc	fsr2h,f,c
 43453  0124D6  0E08               	movlw	8
 43454  0124D8  6EDF               	movwf	indf2,c
 43455                           
 43456                           ;usb_device.c: 1499: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&CtrlTrfData));
 43457  0124DA  EE20 F002          	lfsr	2,2
 43458  0124DE  501A               	movf	_pBDTEntryEP0OutNext,w,c
 43459  0124E0  26D9               	addwf	fsr2l,f,c
 43460  0124E2  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 43461  0124E4  22DA               	addwfc	fsr2h,f,c
 43462  0124E6  0E38               	movlw	56
 43463  0124E8  6EDE               	movwf	postinc2,c
 43464  0124EA  0E0D               	movlw	13
 43465  0124EC  6EDD               	movwf	postdec2,c
 43466                           
 43467                           ; BSR set to: 0
 43468                           ;usb_device.c: 1500: pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 43469  0124EE  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 43470  0124F2  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 43471  0124F6  0E48               	movlw	72
 43472  0124F8  6EDF               	movwf	indf2,c
 43473                           
 43474                           ; BSR set to: 0
 43475                           ;usb_device.c: 1501: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 43476  0124FA  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 43477  0124FE  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 43478  012502  0E00               	movlw	0
 43479  012504  8EDB               	bsf	plusw2,7,c
 43480                           
 43481                           ;usb_device.c: 1502: }
 43482  012506  0012               	return	
 43483  012508                     i2l220:
 43484                           
 43485                           ; BSR set to: 0
 43486                           ;usb_device.c: 1503: else;usb_device.c: 1504: {;usb_device.c: 1507: if(SetupPkt.wLength 
      +                          < inPipes[0].wCount.Val)
 43487                           
 43488                           ; BSR set to: 0
 43489  012508  500E               	movf	_inPipes+4,w,c	;volatile
 43490  01250A  010D               	movlb	13	; () banked
 43491  01250C  5D36               	subwf	54,w,b	;volatile
 43492  01250E  500F               	movf	_inPipes+5,w,c	;volatile
 43493  012510  5937               	subwfb	55,w,b	;volatile
 43494  012512  B0D8               	btfsc	status,0,c
 43495  012514  D004               	goto	i2l222
 43496                           
 43497                           ; BSR set to: 13
 43498                           ;usb_device.c: 1508: {;usb_device.c: 1509: inPipes[0].wCount.Val = SetupPkt.wLength;
 43499  012516  CD36 F00E          	movff	3382,_inPipes+4	;volatile
 43500  01251A  CD37 F00F          	movff	3383,_inPipes+5	;volatile
 43501  01251E                     i2l222:
 43502                           
 43503                           ; BSR set to: 13
 43504                           ;usb_device.c: 1510: };usb_device.c: 1511: USBCtrlTrfTxService();
 43505                           
 43506                           ; BSR set to: 13
 43507  01251E  ECB0  F08B         	call	_USBCtrlTrfTxService	;wreg free
 43508                           
 43509                           ;usb_device.c: 1516: pBDTEntryIn[0]->ADR = ((uint16_t)(&CtrlTrfData));
 43510  012522  EE20 F002          	lfsr	2,2
 43511  012526  5010               	movf	_pBDTEntryIn,w,c
 43512  012528  26D9               	addwf	fsr2l,f,c
 43513  01252A  5011               	movf	_pBDTEntryIn+1,w,c
 43514  01252C  22DA               	addwfc	fsr2h,f,c
 43515  01252E  0E38               	movlw	56
 43516  012530  6EDE               	movwf	postinc2,c
 43517  012532  0E0D               	movlw	13
 43518  012534  6EDD               	movwf	postdec2,c
 43519                           
 43520                           ;usb_device.c: 1517: pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 43521  012536  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 43522  01253A  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 43523  01253E  0E48               	movlw	72
 43524  012540  6EDF               	movwf	indf2,c
 43525                           
 43526                           ;usb_device.c: 1518: pBDTEntryIn[0]->STAT.Val |= 0x80;
 43527  012542  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 43528  012546  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 43529  01254A  0E00               	movlw	0
 43530  01254C  8EDB               	bsf	plusw2,7,c
 43531  01254E  0012               	return	
 43532  012550                     __end_of_USBCtrlEPAllowDataStage:
 43533                           	opt stack 0
 43534                           tosu	equ	0xFFF
 43535                           tosh	equ	0xFFE
 43536                           tosl	equ	0xFFD
 43537                           pclatu	equ	0xFFB
 43538                           pclath	equ	0xFFA
 43539                           tblptru	equ	0xFF8
 43540                           tblptrh	equ	0xFF7
 43541                           tblptrl	equ	0xFF6
 43542                           tablat	equ	0xFF5
 43543                           prodh	equ	0xFF4
 43544                           prodl	equ	0xFF3
 43545                           intcon	equ	0xFF2
 43546                           indf0	equ	0xFEF
 43547                           postinc0	equ	0xFEE
 43548                           fsr0h	equ	0xFEA
 43549                           fsr0l	equ	0xFE9
 43550                           wreg	equ	0xFE8
 43551                           indf1	equ	0xFE7
 43552                           postinc1	equ	0xFE6
 43553                           postdec1	equ	0xFE5
 43554                           plusw1	equ	0xFE3
 43555                           fsr1h	equ	0xFE2
 43556                           fsr1l	equ	0xFE1
 43557                           indf2	equ	0xFDF
 43558                           postinc2	equ	0xFDE
 43559                           postdec2	equ	0xFDD
 43560                           plusw2	equ	0xFDB
 43561                           fsr2h	equ	0xFDA
 43562                           fsr2l	equ	0xFD9
 43563                           status	equ	0xFD8
 43564                           
 43565 ;; *************** function _USBCheckStdRequest *****************
 43566 ;; Defined at:
 43567 ;;		line 2688 in file "usb_device.c"
 43568 ;; Parameters:    Size  Location     Type
 43569 ;;		None
 43570 ;; Auto vars:     Size  Location     Type
 43571 ;;		None
 43572 ;; Return value:  Size  Location     Type
 43573 ;;                  1    wreg      void 
 43574 ;; Registers used:
 43575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 43576 ;; Tracked objects:
 43577 ;;		On entry : 0/0
 43578 ;;		On exit  : 0/0
 43579 ;;		Unchanged: 0/0
 43580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 43581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43585 ;;Total ram usage:        0 bytes
 43586 ;; Hardware stack levels used:    1
 43587 ;; Hardware stack levels required when called:    5
 43588 ;; This function calls:
 43589 ;;		_USBStdFeatureReqHandler
 43590 ;;		_USBStdGetDscHandler
 43591 ;;		_USBStdGetStatusHandler
 43592 ;;		_USBStdSetCfgHandler
 43593 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 43594 ;; This function is called by:
 43595 ;;		_USBCtrlTrfSetupHandler
 43596 ;; This function uses a non-reentrant model
 43597 ;;
 43598                           
 43599                           	psect	text171
 43600  0114E8                     __ptext171:
 43601                           	opt stack 0
 43602  0114E8                     _USBCheckStdRequest:
 43603                           	opt stack 9
 43604                           
 43605                           ;usb_device.c: 2690: if(SetupPkt.RequestType != (0x00>>5)) return;
 43606                           
 43607                           ;incstack = 0
 43608  0114E8  010D               	movlb	13	; () banked
 43609  0114EA  3930               	swapf	48,w,b	;volatile
 43610  0114EC  32E8               	rrcf	wreg,f,c
 43611  0114EE  0B03               	andlw	3
 43612  0114F0  0900               	iorlw	0
 43613  0114F2  A4D8               	btfss	status,2,c
 43614  0114F4  0012               	return	
 43615  0114F6  D042               	goto	i2l355
 43616  0114F8                     i2l356:
 43617                           
 43618                           ; BSR set to: 13
 43619                           ;usb_device.c: 2695: inPipes[0].info.bits.busy = 1;
 43620  0114F8  8E0D               	bsf	_inPipes+3,7,c	;volatile
 43621                           
 43622                           ; BSR set to: 13
 43623                           ;usb_device.c: 2696: USBDeviceState = ADR_PENDING_STATE;
 43624  0114FA  0E08               	movlw	8
 43625  0114FC  6E2B               	movwf	_USBDeviceState,c	;volatile
 43626                           
 43627                           ;usb_device.c: 2698: break;
 43628  0114FE  0012               	return	
 43629  011500                     
 43630                           ; BSR set to: 13
 43631                           ;usb_device.c: 2700: USBStdGetDscHandler();
 43632                           
 43633                           ; BSR set to: 13
 43634  011500  ECA0  F07E         	call	_USBStdGetDscHandler	;wreg free
 43635                           
 43636                           ;usb_device.c: 2701: break;
 43637  011504  0012               	return	
 43638  011506                     
 43639                           ;usb_device.c: 2703: USBStdSetCfgHandler();
 43640  011506  EC06  F08A         	call	_USBStdSetCfgHandler	;wreg free
 43641                           
 43642                           ;usb_device.c: 2704: break;
 43643  01150A  0012               	return	
 43644  01150C                     
 43645                           ;usb_device.c: 2706: inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfiguration;
 43646  01150C  0E2D               	movlw	low _USBActiveConfiguration
 43647  01150E  6E0A               	movwf	_inPipes,c	;volatile
 43648  011510  0E00               	movlw	high _USBActiveConfiguration
 43649  011512  6E0B               	movwf	_inPipes+1,c	;volatile
 43650                           
 43651                           ;usb_device.c: 2707: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 43652  011514  800D               	bsf	_inPipes+3,0,c	;volatile
 43653                           
 43654                           ;usb_device.c: 2708: inPipes[0].wCount.v[0] = 1;
 43655  011516  0E01               	movlw	1
 43656  011518  6E0E               	movwf	_inPipes+4,c	;volatile
 43657                           
 43658                           ;usb_device.c: 2709: inPipes[0].info.bits.busy = 1;
 43659  01151A  8E0D               	bsf	_inPipes+3,7,c	;volatile
 43660                           
 43661                           ;usb_device.c: 2710: break;
 43662  01151C  0012               	return	
 43663  01151E                     
 43664                           ;usb_device.c: 2712: USBStdGetStatusHandler();
 43665  01151E  EC75  F091         	call	_USBStdGetStatusHandler	;wreg free
 43666                           
 43667                           ;usb_device.c: 2713: break;
 43668  011522  0012               	return	
 43669  011524                     
 43670                           ;usb_device.c: 2715: case 3:;usb_device.c: 2716: USBStdFeatureReqHandler();
 43671  011524  EC5A  F06B         	call	_USBStdFeatureReqHandler	;wreg free
 43672                           
 43673                           ;usb_device.c: 2717: break;
 43674  011528  0012               	return	
 43675  01152A                     
 43676                           ;usb_device.c: 2719: inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInterface[SetupPkt.bI
      +                          ntfID];
 43677  01152A  010D               	movlb	13	; () banked
 43678  01152C  5134               	movf	52,w,b	;volatile
 43679  01152E  0D01               	mullw	1
 43680  011530  0EBE               	movlw	low _USBAlternateInterface
 43681  011532  24F3               	addwf	prodl,w,c
 43682  011534  6E0A               	movwf	_inPipes,c	;volatile
 43683  011536  0E01               	movlw	high _USBAlternateInterface
 43684  011538  20F4               	addwfc	prodh,w,c
 43685  01153A  6E0B               	movwf	_inPipes+1,c	;volatile
 43686                           
 43687                           ; BSR set to: 13
 43688                           ;usb_device.c: 2720: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 43689  01153C  800D               	bsf	_inPipes+3,0,c	;volatile
 43690                           
 43691                           ; BSR set to: 13
 43692                           ;usb_device.c: 2721: inPipes[0].wCount.v[0] = 1;
 43693  01153E  0E01               	movlw	1
 43694  011540  6E0E               	movwf	_inPipes+4,c	;volatile
 43695                           
 43696                           ; BSR set to: 13
 43697                           ;usb_device.c: 2722: inPipes[0].info.bits.busy = 1;
 43698  011542  8E0D               	bsf	_inPipes+3,7,c	;volatile
 43699                           
 43700                           ;usb_device.c: 2723: break;
 43701  011544  0012               	return	
 43702  011546                     i2l365:
 43703                           
 43704                           ; BSR set to: 13
 43705                           ;usb_device.c: 2725: inPipes[0].info.bits.busy = 1;
 43706  011546  8E0D               	bsf	_inPipes+3,7,c	;volatile
 43707                           
 43708                           ; BSR set to: 13
 43709                           ;usb_device.c: 2726: USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.bAltID;
 43710  011548  5134               	movf	52,w,b	;volatile
 43711  01154A  0D01               	mullw	1
 43712  01154C  0EBE               	movlw	low _USBAlternateInterface
 43713  01154E  24F3               	addwf	prodl,w,c
 43714  011550  6ED9               	movwf	fsr2l,c
 43715  011552  0E01               	movlw	high _USBAlternateInterface
 43716  011554  20F4               	addwfc	prodh,w,c
 43717  011556  6EDA               	movwf	fsr2h,c
 43718  011558  CD32 FFDF          	movff	3378,indf2	;volatile
 43719                           
 43720                           ;usb_device.c: 2727: break;
 43721  01155C  0012               	return	
 43722  01155E                     
 43723                           ; BSR set to: 13
 43724                           ;usb_device.c: 2729: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_SET_DESCRIPTOR,0,0);
 43725                           
 43726                           ; BSR set to: 13
 43727  01155E  0E00               	movlw	0
 43728  011560  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 43729  011562  0E02               	movlw	2
 43730  011564  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 43731  011566  0E00               	movlw	0
 43732  011568  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 43733  01156A  0E00               	movlw	0
 43734  01156C  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 43735  01156E  0E00               	movlw	0
 43736  011570  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 43737  011572  0E00               	movlw	0
 43738  011574  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 43739  011576  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 43740                           
 43741                           ;usb_device.c: 2734: }
 43742                           
 43743                           ;usb_device.c: 2733: break;
 43744                           
 43745                           ;usb_device.c: 2732: default:
 43746                           
 43747                           ;usb_device.c: 2731: case 12:
 43748                           
 43749                           ;usb_device.c: 2730: break;
 43750  01157A  0012               	return	
 43751  01157C                     i2l355:
 43752  01157C  010D               	movlb	13	; () banked
 43753  01157E  5131               	movf	49,w,b	;volatile
 43754                           
 43755                           ; Switch size 1, requested type "space"
 43756                           ; Number of cases is 11, Range of values is 0 to 12
 43757                           ; switch strategies available:
 43758                           ; Name         Instructions Cycles
 43759                           ; simple_byte           34    18 (average)
 43760                           ;	Chosen strategy is simple_byte
 43761  011580  0A00               	xorlw	0	; case 0
 43762  011582  B4D8               	btfsc	status,2,c
 43763  011584  D7CC               	goto	i2l361
 43764  011586  0A01               	xorlw	1	; case 1
 43765  011588  B4D8               	btfsc	status,2,c
 43766  01158A  D7CC               	goto	i2l362
 43767  01158C  0A02               	xorlw	2	; case 3
 43768  01158E  B4D8               	btfsc	status,2,c
 43769  011590  D7C9               	goto	i2l362
 43770  011592  0A06               	xorlw	6	; case 5
 43771  011594  B4D8               	btfsc	status,2,c
 43772  011596  D7B0               	goto	i2l356
 43773  011598  0A03               	xorlw	3	; case 6
 43774  01159A  B4D8               	btfsc	status,2,c
 43775  01159C  D7B1               	goto	i2l358
 43776  01159E  0A01               	xorlw	1	; case 7
 43777  0115A0  B4D8               	btfsc	status,2,c
 43778  0115A2  D7DD               	goto	i2l366
 43779  0115A4  0A0F               	xorlw	15	; case 8
 43780  0115A6  B4D8               	btfsc	status,2,c
 43781  0115A8  D7B1               	goto	i2l360
 43782  0115AA  0A01               	xorlw	1	; case 9
 43783  0115AC  B4D8               	btfsc	status,2,c
 43784  0115AE  D7AB               	goto	i2l359
 43785  0115B0  0A03               	xorlw	3	; case 10
 43786  0115B2  B4D8               	btfsc	status,2,c
 43787  0115B4  D7BA               	goto	i2l364
 43788  0115B6  0A01               	xorlw	1	; case 11
 43789  0115B8  B4D8               	btfsc	status,2,c
 43790  0115BA  D7C5               	goto	i2l365
 43791  0115BC  0A07               	xorlw	7	; case 12
 43792  0115BE  0012               	return	
 43793  0115C0                     __end_of_USBCheckStdRequest:
 43794                           	opt stack 0
 43795                           tosu	equ	0xFFF
 43796                           tosh	equ	0xFFE
 43797                           tosl	equ	0xFFD
 43798                           pclatu	equ	0xFFB
 43799                           pclath	equ	0xFFA
 43800                           tblptru	equ	0xFF8
 43801                           tblptrh	equ	0xFF7
 43802                           tblptrl	equ	0xFF6
 43803                           tablat	equ	0xFF5
 43804                           prodh	equ	0xFF4
 43805                           prodl	equ	0xFF3
 43806                           intcon	equ	0xFF2
 43807                           indf0	equ	0xFEF
 43808                           postinc0	equ	0xFEE
 43809                           fsr0h	equ	0xFEA
 43810                           fsr0l	equ	0xFE9
 43811                           wreg	equ	0xFE8
 43812                           indf1	equ	0xFE7
 43813                           postinc1	equ	0xFE6
 43814                           postdec1	equ	0xFE5
 43815                           plusw1	equ	0xFE3
 43816                           fsr1h	equ	0xFE2
 43817                           fsr1l	equ	0xFE1
 43818                           indf2	equ	0xFDF
 43819                           postinc2	equ	0xFDE
 43820                           postdec2	equ	0xFDD
 43821                           plusw2	equ	0xFDB
 43822                           fsr2h	equ	0xFDA
 43823                           fsr2l	equ	0xFD9
 43824                           status	equ	0xFD8
 43825                           
 43826 ;; *************** function _USBStdSetCfgHandler *****************
 43827 ;; Defined at:
 43828 ;;		line 1970 in file "usb_device.c"
 43829 ;; Parameters:    Size  Location     Type
 43830 ;;		None
 43831 ;; Auto vars:     Size  Location     Type
 43832 ;;  i               1   23[COMRAM] unsigned char 
 43833 ;; Return value:  Size  Location     Type
 43834 ;;                  1    wreg      void 
 43835 ;; Registers used:
 43836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 43837 ;; Tracked objects:
 43838 ;;		On entry : 0/0
 43839 ;;		On exit  : 0/0
 43840 ;;		Unchanged: 0/0
 43841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 43842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43843 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43845 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 43846 ;;Total ram usage:        1 bytes
 43847 ;; Hardware stack levels used:    1
 43848 ;; Hardware stack levels required when called:    4
 43849 ;; This function calls:
 43850 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 43851 ;;		i2_memset
 43852 ;; This function is called by:
 43853 ;;		_USBCheckStdRequest
 43854 ;; This function uses a non-reentrant model
 43855 ;;
 43856                           
 43857                           	psect	text172
 43858  01140C                     __ptext172:
 43859                           	opt stack 0
 43860  01140C                     _USBStdSetCfgHandler:
 43861                           	opt stack 9
 43862                           
 43863                           ;usb_device.c: 1972: uint8_t i;;usb_device.c: 1975: inPipes[0].info.bits.busy = 1;
 43864                           
 43865                           ;incstack = 0
 43866  01140C  8E0D               	bsf	_inPipes+3,7,c	;volatile
 43867                           
 43868                           ;usb_device.c: 1978: memset((void*)&UEP1,0x00,(2));;
 43869  01140E  0E27               	movlw	39
 43870  011410  6E2E               	movwf	i2memset@p1,c
 43871  011412  0E0F               	movlw	15
 43872  011414  6E2F               	movwf	i2memset@p1+1,c
 43873  011416  0E00               	movlw	0
 43874  011418  6E31               	movwf	i2memset@c+1,c
 43875  01141A  0E00               	movlw	0
 43876  01141C  6E30               	movwf	i2memset@c,c
 43877  01141E  0E00               	movlw	0
 43878  011420  6E33               	movwf	i2memset@n+1,c
 43879  011422  0E02               	movlw	2
 43880  011424  6E32               	movwf	i2memset@n,c
 43881  011426  ECEA  F09F         	call	i2_memset	;wreg free
 43882                           
 43883                           ;usb_device.c: 1981: memset((void*)&BDT[0], 0x00, sizeof(BDT));
 43884  01142A  0E00               	movlw	0
 43885  01142C  6E2E               	movwf	i2memset@p1,c
 43886  01142E  0E0D               	movlw	13
 43887  011430  6E2F               	movwf	i2memset@p1+1,c
 43888  011432  0E00               	movlw	0
 43889  011434  6E31               	movwf	i2memset@c+1,c
 43890  011436  0E00               	movlw	0
 43891  011438  6E30               	movwf	i2memset@c,c
 43892  01143A  0E00               	movlw	0
 43893  01143C  6E33               	movwf	i2memset@n+1,c
 43894  01143E  0E30               	movlw	48
 43895  011440  6E32               	movwf	i2memset@n,c
 43896  011442  ECEA  F09F         	call	i2_memset	;wreg free
 43897                           
 43898                           ;usb_device.c: 1984: UCONbits.PPBRST = 1;
 43899  011446  8C65               	bsf	3941,6,c	;volatile
 43900                           
 43901                           ;usb_device.c: 1989: for(i = 0; i < (uint8_t)(2+1u); i++)
 43902  011448  0E00               	movlw	0
 43903  01144A  6E45               	movwf	USBStdSetCfgHandler@i,c
 43904  01144C                     i2l18960:
 43905  01144C  0E02               	movlw	2
 43906  01144E  6445               	cpfsgt	USBStdSetCfgHandler@i,c
 43907  011450  D001               	goto	i2l272
 43908  011452  D016               	goto	i2u1869_40
 43909  011454                     i2l272:
 43910                           
 43911                           ;usb_device.c: 1990: {;usb_device.c: 1991: ep_data_in[i].Val = 0u;
 43912  011454  5045               	movf	USBStdSetCfgHandler@i,w,c
 43913  011456  0D01               	mullw	1
 43914  011458  0E5F               	movlw	low _ep_data_in
 43915  01145A  24F3               	addwf	prodl,w,c
 43916  01145C  6ED9               	movwf	fsr2l,c
 43917  01145E  0E01               	movlw	high _ep_data_in
 43918  011460  20F4               	addwfc	prodh,w,c
 43919  011462  6EDA               	movwf	fsr2h,c
 43920  011464  0E00               	movlw	0
 43921  011466  6EDF               	movwf	indf2,c
 43922                           
 43923                           ;usb_device.c: 1992: ep_data_out[i].Val = 0u;
 43924  011468  5045               	movf	USBStdSetCfgHandler@i,w,c
 43925  01146A  0D01               	mullw	1
 43926  01146C  0E5C               	movlw	low _ep_data_out
 43927  01146E  24F3               	addwf	prodl,w,c
 43928  011470  6ED9               	movwf	fsr2l,c
 43929  011472  0E01               	movlw	high _ep_data_out
 43930  011474  20F4               	addwfc	prodh,w,c
 43931  011476  6EDA               	movwf	fsr2h,c
 43932  011478  0E00               	movlw	0
 43933  01147A  6EDF               	movwf	indf2,c
 43934  01147C  2A45               	incf	USBStdSetCfgHandler@i,f,c
 43935  01147E  D7E6               	goto	i2l18960
 43936  011480                     i2u1869_40:
 43937                           
 43938                           ;usb_device.c: 1993: };usb_device.c: 1996: memset((void*)&USBAlternateInterface,0x00,2);
 43939  011480  0EBE               	movlw	low _USBAlternateInterface
 43940  011482  6E2E               	movwf	i2memset@p1,c
 43941  011484  0E01               	movlw	high _USBAlternateInterface
 43942  011486  6E2F               	movwf	i2memset@p1+1,c
 43943  011488  0E00               	movlw	0
 43944  01148A  6E31               	movwf	i2memset@c+1,c
 43945  01148C  0E00               	movlw	0
 43946  01148E  6E30               	movwf	i2memset@c,c
 43947  011490  0E00               	movlw	0
 43948  011492  6E33               	movwf	i2memset@n+1,c
 43949  011494  0E02               	movlw	2
 43950  011496  6E32               	movwf	i2memset@n,c
 43951  011498  ECEA  F09F         	call	i2_memset	;wreg free
 43952                           
 43953                           ;usb_device.c: 1999: UCONbits.PPBRST = 0;
 43954  01149C  9C65               	bcf	3941,6,c	;volatile
 43955                           
 43956                           ;usb_device.c: 2001: pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 43957  01149E  0E08               	movlw	8
 43958  0114A0  6E10               	movwf	_pBDTEntryIn,c
 43959  0114A2  0E0D               	movlw	13
 43960  0114A4  6E11               	movwf	_pBDTEntryIn+1,c
 43961                           
 43962                           ;usb_device.c: 2004: pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 43963  0114A6  0E00               	movlw	0
 43964  0114A8  6E1C               	movwf	_pBDTEntryEP0OutCurrent,c
 43965  0114AA  0E0D               	movlw	13
 43966  0114AC  6E1D               	movwf	_pBDTEntryEP0OutCurrent+1,c
 43967                           
 43968                           ;usb_device.c: 2005: pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 43969  0114AE  C01C  F01A         	movff	_pBDTEntryEP0OutCurrent,_pBDTEntryEP0OutNext
 43970  0114B2  C01D  F01B         	movff	_pBDTEntryEP0OutCurrent+1,_pBDTEntryEP0OutNext+1
 43971                           
 43972                           ;usb_device.c: 2008: USBActiveConfiguration = SetupPkt.bConfigurationValue;
 43973  0114B6  CD32 F02D          	movff	3378,_USBActiveConfiguration	;volatile
 43974                           
 43975                           ;usb_device.c: 2011: if(USBActiveConfiguration == 0)
 43976  0114BA  502D               	movf	_USBActiveConfiguration,w,c	;volatile
 43977  0114BC  A4D8               	btfss	status,2,c
 43978  0114BE  D003               	goto	i2l274
 43979                           
 43980                           ;usb_device.c: 2012: {;usb_device.c: 2014: USBDeviceState = ADDRESS_STATE;
 43981  0114C0  0E10               	movlw	16
 43982  0114C2  6E2B               	movwf	_USBDeviceState,c	;volatile
 43983                           
 43984                           ;usb_device.c: 2015: }
 43985  0114C4  0012               	return	
 43986  0114C6                     i2l274:
 43987                           
 43988                           ;usb_device.c: 2016: else;usb_device.c: 2017: {;usb_device.c: 2019: USER_USB_CALLBACK_EV
      +                          ENT_HANDLER(EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 43989  0114C6  0E00               	movlw	0
 43990  0114C8  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 43991  0114CA  0E01               	movlw	1
 43992  0114CC  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 43993  0114CE  0E2D               	movlw	low _USBActiveConfiguration
 43994  0114D0  6E3F               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata,c
 43995  0114D2  0E00               	movlw	high _USBActiveConfiguration
 43996  0114D4  6E40               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,c
 43997  0114D6  0E00               	movlw	0
 43998  0114D8  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 43999  0114DA  0E01               	movlw	1
 44000  0114DC  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 44001  0114DE  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 44002                           
 44003                           ;usb_device.c: 2024: USBDeviceState = CONFIGURED_STATE;
 44004  0114E2  0E20               	movlw	32
 44005  0114E4  6E2B               	movwf	_USBDeviceState,c	;volatile
 44006  0114E6  0012               	return	
 44007  0114E8                     __end_of_USBStdSetCfgHandler:
 44008                           	opt stack 0
 44009                           tosu	equ	0xFFF
 44010                           tosh	equ	0xFFE
 44011                           tosl	equ	0xFFD
 44012                           pclatu	equ	0xFFB
 44013                           pclath	equ	0xFFA
 44014                           tblptru	equ	0xFF8
 44015                           tblptrh	equ	0xFF7
 44016                           tblptrl	equ	0xFF6
 44017                           tablat	equ	0xFF5
 44018                           prodh	equ	0xFF4
 44019                           prodl	equ	0xFF3
 44020                           intcon	equ	0xFF2
 44021                           indf0	equ	0xFEF
 44022                           postinc0	equ	0xFEE
 44023                           fsr0h	equ	0xFEA
 44024                           fsr0l	equ	0xFE9
 44025                           wreg	equ	0xFE8
 44026                           indf1	equ	0xFE7
 44027                           postinc1	equ	0xFE6
 44028                           postdec1	equ	0xFE5
 44029                           plusw1	equ	0xFE3
 44030                           fsr1h	equ	0xFE2
 44031                           fsr1l	equ	0xFE1
 44032                           indf2	equ	0xFDF
 44033                           postinc2	equ	0xFDE
 44034                           postdec2	equ	0xFDD
 44035                           plusw2	equ	0xFDB
 44036                           fsr2h	equ	0xFDA
 44037                           fsr2l	equ	0xFD9
 44038                           status	equ	0xFD8
 44039                           
 44040 ;; *************** function i2_memset *****************
 44041 ;; Defined at:
 44042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\memset.c"
 44043 ;; Parameters:    Size  Location     Type
 44044 ;;  p1              2    0[COMRAM] PTR void 
 44045 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
 44046 ;;  c               2    2[COMRAM] int 
 44047 ;;  n               2    4[COMRAM] unsigned int 
 44048 ;; Auto vars:     Size  Location     Type
 44049 ;;  memset          2    6[COMRAM] PTR unsigned char 
 44050 ;;		 -> USBAlternateInterface(2), BDT(48), UEP1(1), 
 44051 ;; Return value:  Size  Location     Type
 44052 ;;                  2    0[COMRAM] PTR void 
 44053 ;; Registers used:
 44054 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 44055 ;; Tracked objects:
 44056 ;;		On entry : 0/0
 44057 ;;		On exit  : 0/0
 44058 ;;		Unchanged: 0/0
 44059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 44060 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44061 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44063 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44064 ;;Total ram usage:        8 bytes
 44065 ;; Hardware stack levels used:    1
 44066 ;; This function calls:
 44067 ;;		Nothing
 44068 ;; This function is called by:
 44069 ;;		_USBStdSetCfgHandler
 44070 ;;		i2_USBDeviceInit
 44071 ;; This function uses a non-reentrant model
 44072 ;;
 44073                           
 44074                           	psect	text173
 44075  013FD4                     __ptext173:
 44076                           	opt stack 0
 44077  013FD4                     i2_memset:
 44078                           	opt stack 15
 44079                           
 44080                           ;incstack = 0
 44081  013FD4  C02E  F034         	movff	i2memset@p1,i2memset@p
 44082  013FD8  C02F  F035         	movff	i2memset@p1+1,i2memset@p+1
 44083  013FDC  D008               	goto	i2l3484
 44084  013FDE                     i2l12044:
 44085  013FDE  C034  FFD9         	movff	i2memset@p,fsr2l
 44086  013FE2  C035  FFDA         	movff	i2memset@p+1,fsr2h
 44087  013FE6  C030  FFDF         	movff	i2memset@c,indf2
 44088  013FEA  4A34               	infsnz	i2memset@p,f,c
 44089  013FEC  2A35               	incf	i2memset@p+1,f,c
 44090  013FEE                     i2l3484:
 44091  013FEE  0632               	decf	i2memset@n,f,c
 44092  013FF0  A0D8               	btfss	status,0,c
 44093  013FF2  0633               	decf	i2memset@n+1,f,c
 44094  013FF4  2832               	incf	i2memset@n,w,c
 44095  013FF6  E1F3               	bnz	i2l12044
 44096  013FF8  2833               	incf	i2memset@n+1,w,c
 44097  013FFA  B4D8               	btfsc	status,2,c
 44098  013FFC  0012               	return	
 44099  013FFE  D7EF               	goto	i2l3485
 44100  014000                     __end_ofi2_memset:
 44101                           	opt stack 0
 44102                           tosu	equ	0xFFF
 44103                           tosh	equ	0xFFE
 44104                           tosl	equ	0xFFD
 44105                           pclatu	equ	0xFFB
 44106                           pclath	equ	0xFFA
 44107                           tblptru	equ	0xFF8
 44108                           tblptrh	equ	0xFF7
 44109                           tblptrl	equ	0xFF6
 44110                           tablat	equ	0xFF5
 44111                           prodh	equ	0xFF4
 44112                           prodl	equ	0xFF3
 44113                           intcon	equ	0xFF2
 44114                           indf0	equ	0xFEF
 44115                           postinc0	equ	0xFEE
 44116                           fsr0h	equ	0xFEA
 44117                           fsr0l	equ	0xFE9
 44118                           wreg	equ	0xFE8
 44119                           indf1	equ	0xFE7
 44120                           postinc1	equ	0xFE6
 44121                           postdec1	equ	0xFE5
 44122                           plusw1	equ	0xFE3
 44123                           fsr1h	equ	0xFE2
 44124                           fsr1l	equ	0xFE1
 44125                           indf2	equ	0xFDF
 44126                           postinc2	equ	0xFDE
 44127                           postdec2	equ	0xFDD
 44128                           plusw2	equ	0xFDB
 44129                           fsr2h	equ	0xFDA
 44130                           fsr2l	equ	0xFD9
 44131                           status	equ	0xFD8
 44132                           
 44133 ;; *************** function _USBStdGetStatusHandler *****************
 44134 ;; Defined at:
 44135 ;;		line 2131 in file "usb_device.c"
 44136 ;; Parameters:    Size  Location     Type
 44137 ;;		None
 44138 ;; Auto vars:     Size  Location     Type
 44139 ;;  p               2    1[COMRAM] PTR struct __BDT
 44140 ;;		 -> RAM(3759), NULL(0), BDT(48), 
 44141 ;; Return value:  Size  Location     Type
 44142 ;;                  1    wreg      void 
 44143 ;; Registers used:
 44144 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 44145 ;; Tracked objects:
 44146 ;;		On entry : 0/0
 44147 ;;		On exit  : 0/0
 44148 ;;		Unchanged: 0/0
 44149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 44150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44151 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44153 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44154 ;;Total ram usage:        3 bytes
 44155 ;; Hardware stack levels used:    1
 44156 ;; This function calls:
 44157 ;;		Nothing
 44158 ;; This function is called by:
 44159 ;;		_USBCheckStdRequest
 44160 ;; This function uses a non-reentrant model
 44161 ;;
 44162                           
 44163                           	psect	text174
 44164  0122EA                     __ptext174:
 44165                           	opt stack 0
 44166  0122EA                     _USBStdGetStatusHandler:
 44167                           	opt stack 13
 44168                           
 44169                           ;usb_device.c: 2133: CtrlTrfData[0] = 0;
 44170                           
 44171                           ;incstack = 0
 44172  0122EA  0E00               	movlw	0
 44173  0122EC  010D               	movlb	13	; () banked
 44174  0122EE  6F38               	movwf	56,b	;volatile
 44175                           
 44176                           ;usb_device.c: 2134: CtrlTrfData[1] = 0;
 44177  0122F0  0E00               	movlw	0
 44178  0122F2  6F39               	movwf	57,b	;volatile
 44179                           
 44180                           ;usb_device.c: 2136: switch(SetupPkt.Recipient)
 44181  0122F4  D033               	goto	i2l293
 44182  0122F6                     i2l294:
 44183                           
 44184                           ; BSR set to: 13
 44185                           ;usb_device.c: 2139: inPipes[0].info.bits.busy = 1;
 44186  0122F6  8E0D               	bsf	_inPipes+3,7,c	;volatile
 44187                           
 44188                           ; BSR set to: 13
 44189                           ;usb_device.c: 2147: };usb_device.c: 2149: if(RemoteWakeup == 1)
 44190                           
 44191                           ; BSR set to: 13
 44192                           
 44193                           ; BSR set to: 13
 44194                           ;usb_device.c: 2145: {;usb_device.c: 2146: CtrlTrfData[0]|=0x01;
 44195                           
 44196                           ;usb_device.c: 2144: if(0 == 1)
 44197  0122F8  0428               	decf	_RemoteWakeup,w,c	;volatile
 44198  0122FA  A4D8               	btfss	status,2,c
 44199  0122FC  D03A               	goto	i2l297
 44200                           
 44201                           ; BSR set to: 13
 44202                           ;usb_device.c: 2150: {;usb_device.c: 2151: CtrlTrfData[0]|=0x02;
 44203  0122FE  8338               	bsf	56,1,b	;volatile
 44204                           
 44205                           ; BSR set to: 13
 44206                           ;usb_device.c: 2152: };usb_device.c: 2153: break;
 44207  012300  D038               	goto	i2l297
 44208  012302                     i2l298:
 44209                           
 44210                           ; BSR set to: 13
 44211                           ;usb_device.c: 2155: inPipes[0].info.bits.busy = 1;
 44212  012302  8E0D               	bsf	_inPipes+3,7,c	;volatile
 44213                           
 44214                           ;usb_device.c: 2156: break;
 44215  012304  D036               	goto	i2l297
 44216  012306                     i2l299:
 44217                           
 44218                           ; BSR set to: 13
 44219                           ;usb_device.c: 2158: inPipes[0].info.bits.busy = 1;
 44220  012306  8E0D               	bsf	_inPipes+3,7,c	;volatile
 44221                           
 44222                           ;usb_device.c: 2162: {;usb_device.c: 2163: BDT_ENTRY *p;;usb_device.c: 2165: if(SetupPkt
      +                          .EPDir == 0)
 44223  012308  BF34               	btfsc	52,7,b	;volatile
 44224  01230A  D00A               	goto	i2l300
 44225                           
 44226                           ; BSR set to: 13
 44227                           ;usb_device.c: 2166: {;usb_device.c: 2167: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 44228  01230C  5134               	movf	52,w,b	;volatile
 44229  01230E  0B0F               	andlw	15
 44230  012310  6E2E               	movwf	??_USBStdGetStatusHandler& (0+255),c
 44231  012312  502E               	movf	??_USBStdGetStatusHandler,w,c
 44232  012314  0D02               	mullw	2
 44233  012316  0E38               	movlw	low _pBDTEntryOut
 44234  012318  24F3               	addwf	prodl,w,c
 44235  01231A  6ED9               	movwf	fsr2l,c
 44236  01231C  0E01               	movlw	high _pBDTEntryOut
 44237  01231E  D009               	goto	L72
 44238  012320                     i2l300:
 44239                           
 44240                           ; BSR set to: 13
 44241                           ;usb_device.c: 2169: else;usb_device.c: 2170: {;usb_device.c: 2171: p = (BDT_ENTRY*)pBDT
      +                          EntryIn[SetupPkt.EPNum];
 44242                           
 44243                           ; BSR set to: 13
 44244  012320  5134               	movf	52,w,b	;volatile
 44245  012322  0B0F               	andlw	15
 44246  012324  6E2E               	movwf	??_USBStdGetStatusHandler& (0+255),c
 44247  012326  502E               	movf	??_USBStdGetStatusHandler,w,c
 44248  012328  0D02               	mullw	2
 44249  01232A  0E10               	movlw	low _pBDTEntryIn
 44250  01232C  24F3               	addwf	prodl,w,c
 44251  01232E  6ED9               	movwf	fsr2l,c
 44252  012330  0E00               	movlw	high _pBDTEntryIn
 44253  012332                     L72:
 44254  012332  20F4               	addwfc	prodh,w,c
 44255  012334  6EDA               	movwf	fsr2h,c
 44256  012336  CFDE F02F          	movff	postinc2,USBStdGetStatusHandler@p
 44257  01233A  CFDD F030          	movff	postdec2,USBStdGetStatusHandler@p+1
 44258                           
 44259                           ; BSR set to: 13
 44260                           ;usb_device.c: 2172: };usb_device.c: 2174: if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 
      +                          1))
 44261                           
 44262                           ; BSR set to: 13
 44263  01233E  C02F  FFD9         	movff	USBStdGetStatusHandler@p,fsr2l
 44264  012342  C030  FFDA         	movff	USBStdGetStatusHandler@p+1,fsr2h
 44265  012346  AEDF               	btfss	indf2,7,c
 44266  012348  D014               	goto	i2l297
 44267                           
 44268                           ; BSR set to: 13
 44269  01234A  C02F  FFD9         	movff	USBStdGetStatusHandler@p,fsr2l
 44270  01234E  C030  FFDA         	movff	USBStdGetStatusHandler@p+1,fsr2h
 44271  012352  A4DF               	btfss	indf2,2,c
 44272  012354  D00E               	goto	i2l297
 44273                           
 44274                           ; BSR set to: 13
 44275                           ;usb_device.c: 2175: CtrlTrfData[0]=0x01;
 44276  012356  0E01               	movlw	1
 44277  012358  6F38               	movwf	56,b	;volatile
 44278                           
 44279                           ; BSR set to: 13
 44280                           ;usb_device.c: 2177: };usb_device.c: 2178: }
 44281                           
 44282                           ; BSR set to: 13
 44283                           ;usb_device.c: 2176: break;
 44284  01235A  D00B               	goto	i2l297
 44285  01235C                     i2l293:
 44286                           
 44287                           ; BSR set to: 13
 44288                           
 44289                           ; BSR set to: 13
 44290  01235C  5130               	movf	48,w,b	;volatile
 44291  01235E  0B1F               	andlw	31
 44292                           
 44293                           ; Switch size 1, requested type "space"
 44294                           ; Number of cases is 3, Range of values is 0 to 2
 44295                           ; switch strategies available:
 44296                           ; Name         Instructions Cycles
 44297                           ; simple_byte           10     6 (average)
 44298                           ;	Chosen strategy is simple_byte
 44299  012360  0A00               	xorlw	0	; case 0
 44300  012362  B4D8               	btfsc	status,2,c
 44301  012364  D7C8               	goto	i2l294
 44302  012366  0A01               	xorlw	1	; case 1
 44303  012368  B4D8               	btfsc	status,2,c
 44304  01236A  D7CB               	goto	i2l298
 44305  01236C  0A03               	xorlw	3	; case 2
 44306  01236E  B4D8               	btfsc	status,2,c
 44307  012370  D7CA               	goto	i2l299
 44308  012372                     i2l297:
 44309                           
 44310                           ; BSR set to: 13
 44311                           ;usb_device.c: 2180: if(inPipes[0].info.bits.busy == 1)
 44312  012372  AE0D               	btfss	_inPipes+3,7,c	;volatile
 44313  012374  0012               	return	
 44314                           
 44315                           ; BSR set to: 13
 44316                           ;usb_device.c: 2181: {;usb_device.c: 2182: inPipes[0].pSrc.bRam = (uint8_t*)&CtrlTrfData
      +                          ;
 44317  012376  0E38               	movlw	56
 44318  012378  6E0A               	movwf	_inPipes,c	;volatile
 44319  01237A  0E0D               	movlw	13
 44320  01237C  6E0B               	movwf	_inPipes+1,c	;volatile
 44321                           
 44322                           ; BSR set to: 13
 44323                           ;usb_device.c: 2183: inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 44324  01237E  800D               	bsf	_inPipes+3,0,c	;volatile
 44325                           
 44326                           ; BSR set to: 13
 44327                           ;usb_device.c: 2184: inPipes[0].wCount.v[0] = 2;
 44328  012380  0E02               	movlw	2
 44329  012382  6E0E               	movwf	_inPipes+4,c	;volatile
 44330  012384  0012               	return	
 44331  012386                     __end_of_USBStdGetStatusHandler:
 44332                           	opt stack 0
 44333                           tosu	equ	0xFFF
 44334                           tosh	equ	0xFFE
 44335                           tosl	equ	0xFFD
 44336                           pclatu	equ	0xFFB
 44337                           pclath	equ	0xFFA
 44338                           tblptru	equ	0xFF8
 44339                           tblptrh	equ	0xFF7
 44340                           tblptrl	equ	0xFF6
 44341                           tablat	equ	0xFF5
 44342                           prodh	equ	0xFF4
 44343                           prodl	equ	0xFF3
 44344                           intcon	equ	0xFF2
 44345                           indf0	equ	0xFEF
 44346                           postinc0	equ	0xFEE
 44347                           fsr0h	equ	0xFEA
 44348                           fsr0l	equ	0xFE9
 44349                           wreg	equ	0xFE8
 44350                           indf1	equ	0xFE7
 44351                           postinc1	equ	0xFE6
 44352                           postdec1	equ	0xFE5
 44353                           plusw1	equ	0xFE3
 44354                           fsr1h	equ	0xFE2
 44355                           fsr1l	equ	0xFE1
 44356                           indf2	equ	0xFDF
 44357                           postinc2	equ	0xFDE
 44358                           postdec2	equ	0xFDD
 44359                           plusw2	equ	0xFDB
 44360                           fsr2h	equ	0xFDA
 44361                           fsr2l	equ	0xFD9
 44362                           status	equ	0xFD8
 44363                           
 44364 ;; *************** function _USBStdGetDscHandler *****************
 44365 ;; Defined at:
 44366 ;;		line 2045 in file "usb_device.c"
 44367 ;; Parameters:    Size  Location     Type
 44368 ;;		None
 44369 ;; Auto vars:     Size  Location     Type
 44370 ;;		None
 44371 ;; Return value:  Size  Location     Type
 44372 ;;                  1    wreg      void 
 44373 ;; Registers used:
 44374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 44375 ;; Tracked objects:
 44376 ;;		On entry : 0/0
 44377 ;;		On exit  : 0/0
 44378 ;;		Unchanged: 0/0
 44379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 44380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44384 ;;Total ram usage:        2 bytes
 44385 ;; Hardware stack levels used:    1
 44386 ;; This function calls:
 44387 ;;		Nothing
 44388 ;; This function is called by:
 44389 ;;		_USBCheckStdRequest
 44390 ;; This function uses a non-reentrant model
 44391 ;;
 44392                           
 44393                           	psect	text175
 44394  00FD40                     __ptext175:
 44395                           	opt stack 0
 44396  00FD40                     _USBStdGetDscHandler:
 44397                           	opt stack 13
 44398                           
 44399                           ;usb_device.c: 2047: if(SetupPkt.bmRequestType == 0x80)
 44400                           
 44401                           ; BSR set to: 13
 44402                           ;incstack = 0
 44403  00FD40  0E80               	movlw	128
 44404  00FD42  010D               	movlb	13	; () banked
 44405  00FD44  1930               	xorwf	48,w,b	;volatile
 44406  00FD46  A4D8               	btfss	status,2,c
 44407  00FD48  0012               	return	
 44408                           
 44409                           ; BSR set to: 13
 44410                           ;usb_device.c: 2048: {;usb_device.c: 2049: inPipes[0].info.Val = 0x00 | 0x80 | 0x40;
 44411  00FD4A  0EC0               	movlw	192
 44412  00FD4C  6E0D               	movwf	_inPipes+3,c	;volatile
 44413                           
 44414                           ;usb_device.c: 2051: switch(SetupPkt.bDescriptorType)
 44415  00FD4E  D082               	goto	i2l280
 44416  00FD50                     
 44417                           ; BSR set to: 13
 44418                           ;usb_device.c: 2057: inPipes[0].pSrc.bRom = (const uint8_t*)&device_dsc;
 44419                           
 44420                           ; BSR set to: 13
 44421  00FD50  0E5B               	movlw	low _device_dsc
 44422  00FD52  6E0A               	movwf	_inPipes,c	;volatile
 44423  00FD54  0EA2               	movlw	high _device_dsc
 44424  00FD56  6E0B               	movwf	_inPipes+1,c	;volatile
 44425                           
 44426                           ; BSR set to: 13
 44427                           ;usb_device.c: 2059: inPipes[0].wCount.Val = sizeof(device_dsc);
 44428  00FD58  0E00               	movlw	0
 44429  00FD5A  6E0F               	movwf	_inPipes+5,c	;volatile
 44430  00FD5C  0E12               	movlw	18
 44431  00FD5E  6E0E               	movwf	_inPipes+4,c	;volatile
 44432                           
 44433                           ;usb_device.c: 2060: break;
 44434  00FD60  0012               	return	
 44435  00FD62                     
 44436                           ; BSR set to: 13
 44437                           ;usb_device.c: 2065: if(SetupPkt.bDscIndex < 1)
 44438                           
 44439                           ; BSR set to: 13
 44440  00FD62  5132               	movf	50,w,b	;volatile
 44441  00FD64  A4D8               	btfss	status,2,c
 44442  00FD66  D042               	goto	i2l284
 44443                           
 44444                           ; BSR set to: 13
 44445                           ;usb_device.c: 2066: {;usb_device.c: 2070: inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.
      +                          bDscIndex);
 44446  00FD68  5132               	movf	50,w,b	;volatile
 44447  00FD6A  0D02               	mullw	2
 44448  00FD6C  0EEC               	movlw	low _USB_CD_Ptr
 44449  00FD6E  24F3               	addwf	prodl,w,c
 44450  00FD70  6EF6               	movwf	tblptrl,c
 44451  00FD72  0E9D               	movlw	high _USB_CD_Ptr
 44452  00FD74  20F4               	addwfc	prodh,w,c
 44453  00FD76  6EF7               	movwf	tblptrh,c
 44454  00FD78                     	if	1	;There are 3 active tblptr bytes
 44455  00FD78  6AF8               	clrf	tblptru,c
 44456  00FD7A  0E00               	movlw	low (__mediumconst shr (0+16))
 44457  00FD7C  22F8               	addwfc	tblptru,f,c
 44458  00FD7E                     	endif
 44459  00FD7E  0009               	tblrd		*+
 44460  00FD80  CFF5 F00A          	movff	tablat,_inPipes	;volatile
 44461  00FD84  000A               	tblrd		*-
 44462  00FD86  CFF5 F00B          	movff	tablat,_inPipes+1	;volatile
 44463                           
 44464                           ; BSR set to: 13
 44465                           ;usb_device.c: 2076: inPipes[0].wCount.byte.LB = *(inPipes[0].pSrc.bRom+2);
 44466  00FD8A  0E02               	movlw	2
 44467  00FD8C  240A               	addwf	_inPipes,w,c	;volatile
 44468  00FD8E  6E2E               	movwf	??_USBStdGetDscHandler& (0+255),c
 44469  00FD90  0E00               	movlw	0
 44470  00FD92  200B               	addwfc	_inPipes+1,w,c	;volatile
 44471  00FD94  6E2F               	movwf	(??_USBStdGetDscHandler+1)& (0+255),c
 44472  00FD96  C02E  FFF6         	movff	??_USBStdGetDscHandler,tblptrl
 44473  00FD9A  C02F  FFF7         	movff	??_USBStdGetDscHandler+1,tblptrh
 44474  00FD9E  0E00               	movlw	low (__mediumconst shr (0+16))
 44475  00FDA0  6EF8               	movwf	tblptru,c
 44476  00FDA2  0E0E               	movlw	(high __ramtop+-1)
 44477  00FDA4  64F7               	cpfsgt	tblptrh,c
 44478  00FDA6  D003               	bra	i2u1045_47
 44479  00FDA8  0008               	tblrd		*
 44480  00FDAA  50F5               	movf	tablat,w,c
 44481  00FDAC  D005               	bra	i2u1045_40
 44482  00FDAE                     i2u1045_47:
 44483  00FDAE  CFF6 FFE9          	movff	tblptrl,fsr0l
 44484  00FDB2  CFF7 FFEA          	movff	tblptrh,fsr0h
 44485  00FDB6  50EF               	movf	indf0,w,c
 44486  00FDB8                     i2u1045_40:
 44487  00FDB8  6E0E               	movwf	_inPipes+4,c	;volatile
 44488                           
 44489                           ;usb_device.c: 2077: inPipes[0].wCount.byte.HB = *(inPipes[0].pSrc.bRom+3);
 44490  00FDBA  0E03               	movlw	3
 44491  00FDBC  240A               	addwf	_inPipes,w,c	;volatile
 44492  00FDBE  6E2E               	movwf	??_USBStdGetDscHandler& (0+255),c
 44493  00FDC0  0E00               	movlw	0
 44494  00FDC2  200B               	addwfc	_inPipes+1,w,c	;volatile
 44495  00FDC4  6E2F               	movwf	(??_USBStdGetDscHandler+1)& (0+255),c
 44496  00FDC6  C02E  FFF6         	movff	??_USBStdGetDscHandler,tblptrl
 44497  00FDCA  C02F  FFF7         	movff	??_USBStdGetDscHandler+1,tblptrh
 44498  00FDCE  0E00               	movlw	low (__mediumconst shr (0+16))
 44499  00FDD0  6EF8               	movwf	tblptru,c
 44500  00FDD2  0E0E               	movlw	(high __ramtop+-1)
 44501  00FDD4  64F7               	cpfsgt	tblptrh,c
 44502  00FDD6  D003               	bra	i2u1046_47
 44503  00FDD8  0008               	tblrd		*
 44504  00FDDA  50F5               	movf	tablat,w,c
 44505  00FDDC  D005               	bra	i2u1046_40
 44506  00FDDE                     i2u1046_47:
 44507  00FDDE  CFF6 FFE9          	movff	tblptrl,fsr0l
 44508  00FDE2  CFF7 FFEA          	movff	tblptrh,fsr0h
 44509  00FDE6  50EF               	movf	indf0,w,c
 44510  00FDE8                     i2u1046_40:
 44511  00FDE8  6E0F               	movwf	_inPipes+5,c	;volatile
 44512                           
 44513                           ;usb_device.c: 2078: }
 44514  00FDEA  0012               	return	
 44515  00FDEC                     i2l284:
 44516                           
 44517                           ;usb_device.c: 2079: else;usb_device.c: 2080: {;usb_device.c: 2081: inPipes[0].info.Val 
      +                          = 0;
 44518  00FDEC  0E00               	movlw	0
 44519  00FDEE  6E0D               	movwf	_inPipes+3,c	;volatile
 44520                           
 44521                           ;usb_device.c: 2082: };usb_device.c: 2083: break;
 44522  00FDF0  0012               	return	
 44523  00FDF2                     
 44524                           ;usb_device.c: 2088: if(SetupPkt.bDscIndex<4)
 44525  00FDF2  0E04               	movlw	4
 44526  00FDF4  010D               	movlb	13	; () banked
 44527  00FDF6  6132               	cpfslt	50,b	;volatile
 44528  00FDF8  D027               	goto	i2l287
 44529                           
 44530                           ; BSR set to: 13
 44531                           ;usb_device.c: 2089: {;usb_device.c: 2091: inPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.
      +                          bDscIndex);
 44532  00FDFA  5132               	movf	50,w,b	;volatile
 44533  00FDFC  0D02               	mullw	2
 44534  00FDFE  0EE4               	movlw	low _USB_SD_Ptr
 44535  00FE00  24F3               	addwf	prodl,w,c
 44536  00FE02  6EF6               	movwf	tblptrl,c
 44537  00FE04  0E9D               	movlw	high _USB_SD_Ptr
 44538  00FE06  20F4               	addwfc	prodh,w,c
 44539  00FE08  6EF7               	movwf	tblptrh,c
 44540  00FE0A                     	if	1	;There are 3 active tblptr bytes
 44541  00FE0A  6AF8               	clrf	tblptru,c
 44542  00FE0C  0E00               	movlw	low (__mediumconst shr (0+16))
 44543  00FE0E  22F8               	addwfc	tblptru,f,c
 44544  00FE10                     	endif
 44545  00FE10  0009               	tblrd		*+
 44546  00FE12  CFF5 F00A          	movff	tablat,_inPipes	;volatile
 44547  00FE16  000A               	tblrd		*-
 44548  00FE18  CFF5 F00B          	movff	tablat,_inPipes+1	;volatile
 44549                           
 44550                           ; BSR set to: 13
 44551                           ;usb_device.c: 2093: inPipes[0].wCount.Val = *inPipes[0].pSrc.bRom;
 44552  00FE1C  C00A  FFF6         	movff	_inPipes,tblptrl	;volatile
 44553  00FE20  C00B  FFF7         	movff	_inPipes+1,tblptrh	;volatile
 44554  00FE24  0E00               	movlw	low (__mediumconst shr (0+16))
 44555  00FE26  6EF8               	movwf	tblptru,c
 44556  00FE28  0E0E               	movlw	(high __ramtop+-1)
 44557  00FE2A  64F7               	cpfsgt	tblptrh,c
 44558  00FE2C  D003               	bra	i2u1048_47
 44559  00FE2E  0008               	tblrd		*
 44560  00FE30  50F5               	movf	tablat,w,c
 44561  00FE32  D005               	bra	i2u1048_40
 44562  00FE34                     i2u1048_47:
 44563  00FE34  CFF6 FFE9          	movff	tblptrl,fsr0l
 44564  00FE38  CFF7 FFEA          	movff	tblptrh,fsr0h
 44565  00FE3C  50EF               	movf	indf0,w,c
 44566  00FE3E                     i2u1048_40:
 44567  00FE3E  6E2E               	movwf	??_USBStdGetDscHandler& (0+255),c
 44568  00FE40  502E               	movf	??_USBStdGetDscHandler,w,c
 44569  00FE42  6E0E               	movwf	_inPipes+4,c	;volatile
 44570  00FE44  6A0F               	clrf	_inPipes+5,c	;volatile
 44571                           
 44572                           ;usb_device.c: 2094: }
 44573  00FE46  0012               	return	
 44574  00FE48                     i2l287:
 44575                           
 44576                           ;usb_device.c: 2104: else;usb_device.c: 2105: {;usb_device.c: 2106: inPipes[0].info.Val 
      +                          = 0;
 44577  00FE48  0E00               	movlw	0
 44578  00FE4A  6E0D               	movwf	_inPipes+3,c	;volatile
 44579                           
 44580                           ;usb_device.c: 2107: };usb_device.c: 2108: break;
 44581  00FE4C  0012               	return	
 44582  00FE4E                     
 44583                           ;usb_device.c: 2110: inPipes[0].info.Val = 0;
 44584  00FE4E  0E00               	movlw	0
 44585  00FE50  6E0D               	movwf	_inPipes+3,c	;volatile
 44586                           
 44587                           ;usb_device.c: 2112: }
 44588                           
 44589                           ;usb_device.c: 2111: break;
 44590  00FE52  0012               	return	
 44591  00FE54                     i2l280:
 44592  00FE54  010D               	movlb	13	; () banked
 44593  00FE56  5133               	movf	51,w,b	;volatile
 44594                           
 44595                           ; Switch size 1, requested type "space"
 44596                           ; Number of cases is 3, Range of values is 1 to 3
 44597                           ; switch strategies available:
 44598                           ; Name         Instructions Cycles
 44599                           ; simple_byte           10     6 (average)
 44600                           ;	Chosen strategy is simple_byte
 44601  00FE58  0A01               	xorlw	1	; case 1
 44602  00FE5A  B4D8               	btfsc	status,2,c
 44603  00FE5C  D779               	goto	i2l281
 44604  00FE5E  0A03               	xorlw	3	; case 2
 44605  00FE60  B4D8               	btfsc	status,2,c
 44606  00FE62  D77F               	goto	i2l283
 44607  00FE64  0A01               	xorlw	1	; case 3
 44608  00FE66  B4D8               	btfsc	status,2,c
 44609  00FE68  D7C4               	goto	i2l286
 44610  00FE6A  D7F1               	goto	i2l289
 44611  00FE6C                     __end_of_USBStdGetDscHandler:
 44612                           	opt stack 0
 44613                           tosu	equ	0xFFF
 44614                           tosh	equ	0xFFE
 44615                           tosl	equ	0xFFD
 44616                           pclatu	equ	0xFFB
 44617                           pclath	equ	0xFFA
 44618                           tblptru	equ	0xFF8
 44619                           tblptrh	equ	0xFF7
 44620                           tblptrl	equ	0xFF6
 44621                           tablat	equ	0xFF5
 44622                           prodh	equ	0xFF4
 44623                           prodl	equ	0xFF3
 44624                           intcon	equ	0xFF2
 44625                           indf0	equ	0xFEF
 44626                           postinc0	equ	0xFEE
 44627                           fsr0h	equ	0xFEA
 44628                           fsr0l	equ	0xFE9
 44629                           wreg	equ	0xFE8
 44630                           indf1	equ	0xFE7
 44631                           postinc1	equ	0xFE6
 44632                           postdec1	equ	0xFE5
 44633                           plusw1	equ	0xFE3
 44634                           fsr1h	equ	0xFE2
 44635                           fsr1l	equ	0xFE1
 44636                           indf2	equ	0xFDF
 44637                           postinc2	equ	0xFDE
 44638                           postdec2	equ	0xFDD
 44639                           plusw2	equ	0xFDB
 44640                           fsr2h	equ	0xFDA
 44641                           fsr2l	equ	0xFD9
 44642                           status	equ	0xFD8
 44643                           
 44644 ;; *************** function _USBStdFeatureReqHandler *****************
 44645 ;; Defined at:
 44646 ;;		line 2756 in file "usb_device.c"
 44647 ;; Parameters:    Size  Location     Type
 44648 ;;		None
 44649 ;; Auto vars:     Size  Location     Type
 44650 ;;  p               2   27[COMRAM] PTR struct __BDT
 44651 ;;		 -> RAM(3759), NULL(0), BDT(48), 
 44652 ;;  pUEP            2   24[COMRAM] PTR unsigned char 
 44653 ;;		 -> UEP0(1), 
 44654 ;;  current_ep_d    1   26[COMRAM] struct .
 44655 ;; Return value:  Size  Location     Type
 44656 ;;                  1    wreg      void 
 44657 ;; Registers used:
 44658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 44659 ;; Tracked objects:
 44660 ;;		On entry : 0/0
 44661 ;;		On exit  : 0/0
 44662 ;;		Unchanged: 0/0
 44663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 44664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44665 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44666 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44667 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 44668 ;;Total ram usage:        6 bytes
 44669 ;; Hardware stack levels used:    1
 44670 ;; Hardware stack levels required when called:    4
 44671 ;; This function calls:
 44672 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 44673 ;; This function is called by:
 44674 ;;		_USBCheckStdRequest
 44675 ;; This function uses a non-reentrant model
 44676 ;;
 44677                           
 44678                           	psect	text176
 44679  00D6B4                     __ptext176:
 44680                           	opt stack 0
 44681  00D6B4                     _USBStdFeatureReqHandler:
 44682                           	opt stack 9
 44683                           
 44684                           ;usb_device.c: 2758: BDT_ENTRY *p;;usb_device.c: 2759: EP_STATUS current_ep_data;;usb_de
      +                          vice.c: 2763: unsigned char* pUEP;;usb_device.c: 2801: if((SetupPkt.bFeature == 1)&&;usb
      +                          _device.c: 2802: (SetupPkt.Recipient == (0x00)))
 44685                           
 44686                           ;incstack = 0
 44687  00D6B4  010D               	movlb	13	; () banked
 44688  00D6B6  0532               	decf	50,w,b	;volatile
 44689  00D6B8  A4D8               	btfss	status,2,c
 44690  00D6BA  D00E               	goto	i2l373
 44691                           
 44692                           ; BSR set to: 13
 44693  00D6BC  5130               	movf	48,w,b	;volatile
 44694  00D6BE  0B1F               	andlw	31
 44695  00D6C0  0900               	iorlw	0
 44696  00D6C2  A4D8               	btfss	status,2,c
 44697  00D6C4  D009               	goto	i2l373
 44698                           
 44699                           ; BSR set to: 13
 44700                           ;usb_device.c: 2803: {;usb_device.c: 2804: inPipes[0].info.bits.busy = 1;
 44701  00D6C6  8E0D               	bsf	_inPipes+3,7,c	;volatile
 44702                           
 44703                           ; BSR set to: 13
 44704                           ;usb_device.c: 2805: if(SetupPkt.bRequest == 3)
 44705  00D6C8  0E03               	movlw	3
 44706  00D6CA  1931               	xorwf	49,w,b	;volatile
 44707  00D6CC  A4D8               	btfss	status,2,c
 44708  00D6CE  D002               	goto	i2l372
 44709                           
 44710                           ; BSR set to: 13
 44711                           ;usb_device.c: 2806: RemoteWakeup = 1;
 44712  00D6D0  0E01               	movlw	1
 44713  00D6D2  D001               	goto	L73
 44714  00D6D4                     i2l372:
 44715                           
 44716                           ; BSR set to: 13
 44717                           ;usb_device.c: 2807: else;usb_device.c: 2808: RemoteWakeup = 0;
 44718                           
 44719                           ; BSR set to: 13
 44720  00D6D4  0E00               	movlw	0
 44721  00D6D6                     L73:
 44722  00D6D6  6E28               	movwf	_RemoteWakeup,c	;volatile
 44723  00D6D8                     i2l373:
 44724                           
 44725                           ; BSR set to: 13
 44726                           ;usb_device.c: 2809: };usb_device.c: 2812: if((SetupPkt.bFeature == 0)&&;usb_device.c: 2
      +                          813: (SetupPkt.Recipient == (0x02))&&;usb_device.c: 2814: (SetupPkt.EPNum != 0) && (Setu
      +                          pPkt.EPNum <= 2)&&;usb_device.c: 2815: (USBDeviceState == CONFIGURED_STATE))
 44727                           
 44728                           ; BSR set to: 13
 44729  00D6D8  5132               	movf	50,w,b	;volatile
 44730  00D6DA  A4D8               	btfss	status,2,c
 44731  00D6DC  0012               	return	
 44732                           
 44733                           ; BSR set to: 13
 44734  00D6DE  5130               	movf	48,w,b	;volatile
 44735  00D6E0  0B1F               	andlw	31
 44736  00D6E2  0A02               	xorlw	2
 44737  00D6E4  A4D8               	btfss	status,2,c
 44738  00D6E6  0012               	return	
 44739                           
 44740                           ; BSR set to: 13
 44741  00D6E8  5134               	movf	52,w,b	;volatile
 44742  00D6EA  0B0F               	andlw	15
 44743  00D6EC  0900               	iorlw	0
 44744  00D6EE  B4D8               	btfsc	status,2,c
 44745  00D6F0  0012               	return	
 44746                           
 44747                           ; BSR set to: 13
 44748  00D6F2  5134               	movf	52,w,b	;volatile
 44749  00D6F4  0B0F               	andlw	15
 44750  00D6F6  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44751  00D6F8  0E03               	movlw	3
 44752  00D6FA  6045               	cpfslt	??_USBStdFeatureReqHandler,c
 44753  00D6FC  0012               	return	
 44754                           
 44755                           ; BSR set to: 13
 44756  00D6FE  0E20               	movlw	32
 44757  00D700  182B               	xorwf	_USBDeviceState,w,c	;volatile
 44758  00D702  A4D8               	btfss	status,2,c
 44759  00D704  0012               	return	
 44760                           
 44761                           ; BSR set to: 13
 44762                           ;usb_device.c: 2816: {;usb_device.c: 2819: inPipes[0].info.bits.busy = 1;
 44763  00D706  8E0D               	bsf	_inPipes+3,7,c	;volatile
 44764                           
 44765                           ;usb_device.c: 2822: if(SetupPkt.EPDir == 0)
 44766  00D708  BF34               	btfsc	52,7,b	;volatile
 44767  00D70A  D019               	goto	i2l375
 44768                           
 44769                           ; BSR set to: 13
 44770                           ;usb_device.c: 2823: {;usb_device.c: 2824: p = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 44771  00D70C  5134               	movf	52,w,b	;volatile
 44772  00D70E  0B0F               	andlw	15
 44773  00D710  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44774  00D712  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44775  00D714  0D02               	mullw	2
 44776  00D716  0E38               	movlw	low _pBDTEntryOut
 44777  00D718  24F3               	addwf	prodl,w,c
 44778  00D71A  6ED9               	movwf	fsr2l,c
 44779  00D71C  0E01               	movlw	high _pBDTEntryOut
 44780  00D71E  20F4               	addwfc	prodh,w,c
 44781  00D720  6EDA               	movwf	fsr2h,c
 44782  00D722  CFDE F049          	movff	postinc2,USBStdFeatureReqHandler@p
 44783  00D726  CFDD F04A          	movff	postdec2,USBStdFeatureReqHandler@p+1
 44784                           
 44785                           ;usb_device.c: 2825: current_ep_data.Val = ep_data_out[SetupPkt.EPNum].Val;
 44786  00D72A  5134               	movf	52,w,b	;volatile
 44787  00D72C  0B0F               	andlw	15
 44788  00D72E  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44789  00D730  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44790  00D732  0D01               	mullw	1
 44791  00D734  0E5C               	movlw	low _ep_data_out
 44792  00D736  24F3               	addwf	prodl,w,c
 44793  00D738  6ED9               	movwf	fsr2l,c
 44794  00D73A  0E01               	movlw	high _ep_data_out
 44795  00D73C  D018               	goto	L74
 44796  00D73E                     i2l375:
 44797                           
 44798                           ; BSR set to: 13
 44799                           ;usb_device.c: 2827: else;usb_device.c: 2828: {;usb_device.c: 2829: p = (BDT_ENTRY*)pBDT
      +                          EntryIn[SetupPkt.EPNum];
 44800                           
 44801                           ; BSR set to: 13
 44802  00D73E  5134               	movf	52,w,b	;volatile
 44803  00D740  0B0F               	andlw	15
 44804  00D742  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44805  00D744  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44806  00D746  0D02               	mullw	2
 44807  00D748  0E10               	movlw	low _pBDTEntryIn
 44808  00D74A  24F3               	addwf	prodl,w,c
 44809  00D74C  6ED9               	movwf	fsr2l,c
 44810  00D74E  0E00               	movlw	high _pBDTEntryIn
 44811  00D750  20F4               	addwfc	prodh,w,c
 44812  00D752  6EDA               	movwf	fsr2h,c
 44813  00D754  CFDE F049          	movff	postinc2,USBStdFeatureReqHandler@p
 44814  00D758  CFDD F04A          	movff	postdec2,USBStdFeatureReqHandler@p+1
 44815                           
 44816                           ;usb_device.c: 2830: current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Val;
 44817  00D75C  5134               	movf	52,w,b	;volatile
 44818  00D75E  0B0F               	andlw	15
 44819  00D760  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44820  00D762  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44821  00D764  0D01               	mullw	1
 44822  00D766  0E5F               	movlw	low _ep_data_in
 44823  00D768  24F3               	addwf	prodl,w,c
 44824  00D76A  6ED9               	movwf	fsr2l,c
 44825  00D76C  0E01               	movlw	high _ep_data_in
 44826  00D76E                     L74:
 44827  00D76E  20F4               	addwfc	prodh,w,c
 44828  00D770  6EDA               	movwf	fsr2h,c
 44829  00D772  50DF               	movf	indf2,w,c
 44830  00D774  6E48               	movwf	USBStdFeatureReqHandler@current_ep_data,c
 44831                           
 44832                           ; BSR set to: 13
 44833                           ;usb_device.c: 2831: };usb_device.c: 2837: if(current_ep_data.bits.ping_pong_state == 0)
 44834                           
 44835                           ; BSR set to: 13
 44836  00D776  B048               	btfsc	USBStdFeatureReqHandler@current_ep_data,0,c
 44837  00D778  D006               	goto	i2l377
 44838                           
 44839                           ; BSR set to: 13
 44840                           ;usb_device.c: 2838: {;usb_device.c: 2839: p = (BDT_ENTRY*)(((uintptr_t)p) & (~0x0004));
 44841  00D77A  0EFB               	movlw	251
 44842  00D77C  1449               	andwf	USBStdFeatureReqHandler@p,w,c
 44843  00D77E  6E49               	movwf	USBStdFeatureReqHandler@p,c
 44844  00D780  0EFF               	movlw	255
 44845  00D782  144A               	andwf	USBStdFeatureReqHandler@p+1,w,c
 44846  00D784  D004               	goto	L75
 44847  00D786                     i2l377:
 44848                           
 44849                           ; BSR set to: 13
 44850                           ;usb_device.c: 2841: else;usb_device.c: 2842: {;usb_device.c: 2843: p = (BDT_ENTRY*)(((u
      +                          intptr_t)p) | 0x0004);
 44851                           
 44852                           ; BSR set to: 13
 44853  00D786  0E04               	movlw	4
 44854  00D788  1049               	iorwf	USBStdFeatureReqHandler@p,w,c
 44855  00D78A  6E49               	movwf	USBStdFeatureReqHandler@p,c
 44856  00D78C  504A               	movf	USBStdFeatureReqHandler@p+1,w,c
 44857  00D78E                     L75:
 44858  00D78E  6E4A               	movwf	USBStdFeatureReqHandler@p+1,c
 44859                           
 44860                           ; BSR set to: 13
 44861                           ;usb_device.c: 2844: };usb_device.c: 2849: if(SetupPkt.EPDir == 0)
 44862                           
 44863                           ; BSR set to: 13
 44864  00D790  BF34               	btfsc	52,7,b	;volatile
 44865  00D792  D00A               	goto	i2l379
 44866                           
 44867                           ; BSR set to: 13
 44868                           ;usb_device.c: 2850: {;usb_device.c: 2851: pBDTEntryOut[SetupPkt.EPNum] = (volatile BDT_
      +                          ENTRY *)p;
 44869  00D794  5134               	movf	52,w,b	;volatile
 44870  00D796  0B0F               	andlw	15
 44871  00D798  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44872  00D79A  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44873  00D79C  0D02               	mullw	2
 44874  00D79E  0E38               	movlw	low _pBDTEntryOut
 44875  00D7A0  24F3               	addwf	prodl,w,c
 44876  00D7A2  6ED9               	movwf	fsr2l,c
 44877  00D7A4  0E01               	movlw	high _pBDTEntryOut
 44878  00D7A6  D009               	goto	L76
 44879  00D7A8                     i2l379:
 44880                           
 44881                           ; BSR set to: 13
 44882                           ;usb_device.c: 2853: else;usb_device.c: 2854: {;usb_device.c: 2855: pBDTEntryIn[SetupPkt
      +                          .EPNum] = (volatile BDT_ENTRY *)p;
 44883                           
 44884                           ; BSR set to: 13
 44885  00D7A8  5134               	movf	52,w,b	;volatile
 44886  00D7AA  0B0F               	andlw	15
 44887  00D7AC  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44888  00D7AE  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44889  00D7B0  0D02               	mullw	2
 44890  00D7B2  0E10               	movlw	low _pBDTEntryIn
 44891  00D7B4  24F3               	addwf	prodl,w,c
 44892  00D7B6  6ED9               	movwf	fsr2l,c
 44893  00D7B8  0E00               	movlw	high _pBDTEntryIn
 44894  00D7BA                     L76:
 44895  00D7BA  20F4               	addwfc	prodh,w,c
 44896  00D7BC  6EDA               	movwf	fsr2h,c
 44897  00D7BE  C049  FFDE         	movff	USBStdFeatureReqHandler@p,postinc2
 44898  00D7C2  C04A  FFDD         	movff	USBStdFeatureReqHandler@p+1,postdec2
 44899                           
 44900                           ; BSR set to: 13
 44901                           ;usb_device.c: 2856: };usb_device.c: 2859: if(SetupPkt.bRequest == 3)
 44902                           
 44903                           ; BSR set to: 13
 44904  00D7C6  0E03               	movlw	3
 44905  00D7C8  1931               	xorwf	49,w,b	;volatile
 44906  00D7CA  A4D8               	btfss	status,2,c
 44907  00D7CC  D02D               	goto	i2l381
 44908                           
 44909                           ; BSR set to: 13
 44910                           ;usb_device.c: 2860: {;usb_device.c: 2861: if(p->STAT.UOWN == 1)
 44911  00D7CE  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 44912  00D7D2  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 44913  00D7D6  AEDF               	btfss	indf2,7,c
 44914  00D7D8  D01A               	goto	i2l384
 44915                           
 44916                           ; BSR set to: 13
 44917                           ;usb_device.c: 2862: {;usb_device.c: 2865: if(SetupPkt.EPDir == 0)
 44918  00D7DA  BF34               	btfsc	52,7,b	;volatile
 44919  00D7DC  D00A               	goto	i2l383
 44920                           
 44921                           ; BSR set to: 13
 44922                           ;usb_device.c: 2866: {;usb_device.c: 2867: ep_data_out[SetupPkt.EPNum].bits.transfer_ter
      +                          minated = 1;
 44923  00D7DE  5134               	movf	52,w,b	;volatile
 44924  00D7E0  0B0F               	andlw	15
 44925  00D7E2  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44926  00D7E4  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44927  00D7E6  0D01               	mullw	1
 44928  00D7E8  0E5C               	movlw	low _ep_data_out
 44929  00D7EA  24F3               	addwf	prodl,w,c
 44930  00D7EC  6ED9               	movwf	fsr2l,c
 44931  00D7EE  0E01               	movlw	high _ep_data_out
 44932  00D7F0  D00A               	goto	L77
 44933  00D7F2                     i2l383:
 44934                           
 44935                           ;usb_device.c: 2869: else;usb_device.c: 2870: {;usb_device.c: 2871: ep_data_in[SetupPkt.
      +                          EPNum].bits.transfer_terminated = 1;
 44936                           
 44937                           ; BSR set to: 1
 44938  00D7F2  010D               	movlb	13	; () banked
 44939  00D7F4  5134               	movf	52,w,b	;volatile
 44940  00D7F6  0B0F               	andlw	15
 44941  00D7F8  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 44942  00D7FA  5045               	movf	??_USBStdFeatureReqHandler,w,c
 44943  00D7FC  0D01               	mullw	1
 44944  00D7FE  0E5F               	movlw	low _ep_data_in
 44945  00D800  24F3               	addwf	prodl,w,c
 44946  00D802  6ED9               	movwf	fsr2l,c
 44947  00D804  0E01               	movlw	high _ep_data_in
 44948  00D806                     L77:
 44949  00D806  20F4               	addwfc	prodh,w,c
 44950  00D808  6EDA               	movwf	fsr2h,c
 44951  00D80A  0101               	movlb	1	; () banked
 44952  00D80C  82DF               	bsf	indf2,1,c
 44953  00D80E                     i2l384:
 44954                           
 44955                           ;usb_device.c: 2872: };usb_device.c: 2873: };usb_device.c: 2876: p->STAT.Val |= 0x04;
 44956                           
 44957                           ; BSR set to: 1
 44958                           
 44959                           ; BSR set to: 1
 44960  00D80E  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 44961  00D812  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 44962  00D816  0E00               	movlw	0
 44963  00D818  84DB               	bsf	plusw2,2,c
 44964                           
 44965                           ;usb_device.c: 2877: p->STAT.Val |= 0x80;
 44966  00D81A  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 44967  00D81E  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 44968  00D822  0E00               	movlw	0
 44969  00D824  8EDB               	bsf	plusw2,7,c
 44970                           
 44971                           ;usb_device.c: 2878: }
 44972  00D826  0012               	return	
 44973  00D828                     i2l381:
 44974                           
 44975                           ;usb_device.c: 2879: else;usb_device.c: 2880: {;usb_device.c: 2884: p = (BDT_ENTRY*)(((u
      +                          intptr_t)p) ^ 0x0004);
 44976  00D828  0E04               	movlw	4
 44977  00D82A  1849               	xorwf	USBStdFeatureReqHandler@p,w,c
 44978  00D82C  6E49               	movwf	USBStdFeatureReqHandler@p,c
 44979  00D82E  504A               	movf	USBStdFeatureReqHandler@p+1,w,c
 44980  00D830  6E4A               	movwf	USBStdFeatureReqHandler@p+1,c
 44981                           
 44982                           ;usb_device.c: 2886: if(p->STAT.UOWN == 1)
 44983  00D832  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 44984  00D836  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 44985  00D83A  AEDF               	btfss	indf2,7,c
 44986  00D83C  D01B               	goto	i2l386
 44987                           
 44988                           ;usb_device.c: 2887: {;usb_device.c: 2890: p->STAT.Val &= (~0x80);
 44989  00D83E  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 44990  00D842  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 44991  00D846  0E7F               	movlw	127
 44992  00D848  16DF               	andwf	indf2,f,c
 44993                           
 44994                           ;usb_device.c: 2891: p->STAT.Val |= 0x40;
 44995  00D84A  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 44996  00D84E  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 44997  00D852  0E00               	movlw	0
 44998  00D854  8CDB               	bsf	plusw2,6,c
 44999                           
 45000                           ;usb_device.c: 2892: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 45001  00D856  0E00               	movlw	0
 45002  00D858  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 45003  00D85A  0E05               	movlw	5
 45004  00D85C  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 45005  00D85E  C049  F03F         	movff	USBStdFeatureReqHandler@p,USER_USB_CALLBACK_EVENT_HANDLER@pdata
 45006  00D862  C04A  F040         	movff	USBStdFeatureReqHandler@p+1,USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 45007  00D866  0E00               	movlw	0
 45008  00D868  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 45009  00D86A  0E02               	movlw	2
 45010  00D86C  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 45011  00D86E  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 45012                           
 45013                           ;usb_device.c: 2893: }
 45014  00D872  D006               	goto	i2l387
 45015  00D874                     i2l386:
 45016                           
 45017                           ;usb_device.c: 2894: else;usb_device.c: 2895: {;usb_device.c: 2897: p->STAT.Val |= 0x40;
 45018  00D874  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 45019  00D878  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 45020  00D87C  0E00               	movlw	0
 45021  00D87E  8CDB               	bsf	plusw2,6,c
 45022  00D880                     i2l387:
 45023                           
 45024                           ;usb_device.c: 2898: };usb_device.c: 2902: p = (BDT_ENTRY*)(((uintptr_t)p) ^ 0x0004);
 45025  00D880  0E04               	movlw	4
 45026  00D882  1849               	xorwf	USBStdFeatureReqHandler@p,w,c
 45027  00D884  6E49               	movwf	USBStdFeatureReqHandler@p,c
 45028  00D886  504A               	movf	USBStdFeatureReqHandler@p+1,w,c
 45029  00D888  6E4A               	movwf	USBStdFeatureReqHandler@p+1,c
 45030                           
 45031                           ;usb_device.c: 2908: if((current_ep_data.bits.transfer_terminated != 0) || (p->STAT.UOWN
      +                           == 1))
 45032  00D88A  B248               	btfsc	USBStdFeatureReqHandler@current_ep_data,1,c
 45033  00D88C  D006               	goto	i2u1887_40
 45034  00D88E  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 45035  00D892  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 45036  00D896  AEDF               	btfss	indf2,7,c
 45037  00D898  D030               	goto	i2l388
 45038  00D89A                     i2u1887_40:
 45039                           
 45040                           ;usb_device.c: 2909: {;usb_device.c: 2910: if(SetupPkt.EPDir == 0)
 45041  00D89A  010D               	movlb	13	; () banked
 45042  00D89C  BF34               	btfsc	52,7,b	;volatile
 45043  00D89E  D00A               	goto	i2l391
 45044                           
 45045                           ; BSR set to: 13
 45046                           ;usb_device.c: 2911: {;usb_device.c: 2912: ep_data_out[SetupPkt.EPNum].bits.transfer_ter
      +                          minated = 0;
 45047  00D8A0  5134               	movf	52,w,b	;volatile
 45048  00D8A2  0B0F               	andlw	15
 45049  00D8A4  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 45050  00D8A6  5045               	movf	??_USBStdFeatureReqHandler,w,c
 45051  00D8A8  0D01               	mullw	1
 45052  00D8AA  0E5C               	movlw	low _ep_data_out
 45053  00D8AC  24F3               	addwf	prodl,w,c
 45054  00D8AE  6ED9               	movwf	fsr2l,c
 45055  00D8B0  0E01               	movlw	high _ep_data_out
 45056  00D8B2  D00A               	goto	L78
 45057  00D8B4                     i2l391:
 45058                           
 45059                           ;usb_device.c: 2914: else;usb_device.c: 2915: {;usb_device.c: 2916: ep_data_in[SetupPkt.
      +                          EPNum].bits.transfer_terminated = 0;
 45060                           
 45061                           ; BSR set to: 1
 45062  00D8B4  010D               	movlb	13	; () banked
 45063  00D8B6  5134               	movf	52,w,b	;volatile
 45064  00D8B8  0B0F               	andlw	15
 45065  00D8BA  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 45066  00D8BC  5045               	movf	??_USBStdFeatureReqHandler,w,c
 45067  00D8BE  0D01               	mullw	1
 45068  00D8C0  0E5F               	movlw	low _ep_data_in
 45069  00D8C2  24F3               	addwf	prodl,w,c
 45070  00D8C4  6ED9               	movwf	fsr2l,c
 45071  00D8C6  0E01               	movlw	high _ep_data_in
 45072  00D8C8                     L78:
 45073  00D8C8  20F4               	addwfc	prodh,w,c
 45074  00D8CA  6EDA               	movwf	fsr2h,c
 45075  00D8CC  0101               	movlb	1	; () banked
 45076  00D8CE  92DF               	bcf	indf2,1,c
 45077                           
 45078                           ; BSR set to: 1
 45079                           ;usb_device.c: 2917: };usb_device.c: 2919: p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 45080                           
 45081                           ; BSR set to: 1
 45082  00D8D0  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 45083  00D8D4  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 45084  00D8D8  0E3B               	movlw	59
 45085  00D8DA  16DF               	andwf	indf2,f,c
 45086                           
 45087                           ; BSR set to: 1
 45088                           ;usb_device.c: 2922: USER_USB_CALLBACK_EVENT_HANDLER(EVENT_TRANSFER_TERMINATED,p,sizeof(
      +                          p));
 45089  00D8DC  0E00               	movlw	0
 45090  00D8DE  6E3E               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,c
 45091  00D8E0  0E05               	movlw	5
 45092  00D8E2  6E3D               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event,c
 45093  00D8E4  C049  F03F         	movff	USBStdFeatureReqHandler@p,USER_USB_CALLBACK_EVENT_HANDLER@pdata
 45094  00D8E8  C04A  F040         	movff	USBStdFeatureReqHandler@p+1,USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 45095  00D8EC  0E00               	movlw	0
 45096  00D8EE  6E42               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1,c
 45097  00D8F0  0E02               	movlw	2
 45098  00D8F2  6E41               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size,c
 45099  00D8F4  ECCD  F093         	call	_USER_USB_CALLBACK_EVENT_HANDLER	;wreg free
 45100                           
 45101                           ;usb_device.c: 2923: }
 45102  00D8F8  D006               	goto	i2l393
 45103  00D8FA                     i2l388:
 45104                           
 45105                           ;usb_device.c: 2924: else;usb_device.c: 2925: {;usb_device.c: 2927: p->STAT.Val &= ~(0x8
      +                          0 | 0x40 | 0x04);
 45106  00D8FA  C049  FFD9         	movff	USBStdFeatureReqHandler@p,fsr2l
 45107  00D8FE  C04A  FFDA         	movff	USBStdFeatureReqHandler@p+1,fsr2h
 45108  00D902  0E3B               	movlw	59
 45109  00D904  16DF               	andwf	indf2,f,c
 45110  00D906                     i2l393:
 45111                           
 45112                           ;usb_device.c: 2928: };usb_device.c: 2975: pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum)
      +                          ;
 45113  00D906  010D               	movlb	13	; () banked
 45114  00D908  5134               	movf	52,w,b	;volatile
 45115  00D90A  0B0F               	andlw	15
 45116  00D90C  6E45               	movwf	??_USBStdFeatureReqHandler& (0+255),c
 45117  00D90E  5045               	movf	??_USBStdFeatureReqHandler,w,c
 45118  00D910  0D01               	mullw	1
 45119  00D912  0E26               	movlw	38
 45120  00D914  24F3               	addwf	prodl,w,c
 45121  00D916  6E46               	movwf	USBStdFeatureReqHandler@pUEP,c
 45122  00D918  0E0F               	movlw	15
 45123  00D91A  20F4               	addwfc	prodh,w,c
 45124  00D91C  6E47               	movwf	USBStdFeatureReqHandler@pUEP+1,c
 45125                           
 45126                           ; BSR set to: 13
 45127                           ;usb_device.c: 2979: *pUEP &= ~0x0001;
 45128  00D91E  C046  FFD9         	movff	USBStdFeatureReqHandler@pUEP,fsr2l
 45129  00D922  C047  FFDA         	movff	USBStdFeatureReqHandler@pUEP+1,fsr2h
 45130  00D926  0EFE               	movlw	254
 45131  00D928  16DF               	andwf	indf2,f,c
 45132                           
 45133                           ; BSR set to: 13
 45134  00D92A  0012               	return	
 45135  00D92C                     __end_of_USBStdFeatureReqHandler:
 45136                           	opt stack 0
 45137                           tosu	equ	0xFFF
 45138                           tosh	equ	0xFFE
 45139                           tosl	equ	0xFFD
 45140                           pclatu	equ	0xFFB
 45141                           pclath	equ	0xFFA
 45142                           tblptru	equ	0xFF8
 45143                           tblptrh	equ	0xFF7
 45144                           tblptrl	equ	0xFF6
 45145                           tablat	equ	0xFF5
 45146                           prodh	equ	0xFF4
 45147                           prodl	equ	0xFF3
 45148                           intcon	equ	0xFF2
 45149                           indf0	equ	0xFEF
 45150                           postinc0	equ	0xFEE
 45151                           fsr0h	equ	0xFEA
 45152                           fsr0l	equ	0xFE9
 45153                           wreg	equ	0xFE8
 45154                           indf1	equ	0xFE7
 45155                           postinc1	equ	0xFE6
 45156                           postdec1	equ	0xFE5
 45157                           plusw1	equ	0xFE3
 45158                           fsr1h	equ	0xFE2
 45159                           fsr1l	equ	0xFE1
 45160                           indf2	equ	0xFDF
 45161                           postinc2	equ	0xFDE
 45162                           postdec2	equ	0xFDD
 45163                           plusw2	equ	0xFDB
 45164                           fsr2h	equ	0xFDA
 45165                           fsr2l	equ	0xFD9
 45166                           status	equ	0xFD8
 45167                           
 45168 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 45169 ;; Defined at:
 45170 ;;		line 54 in file "usb_events.c"
 45171 ;; Parameters:    Size  Location     Type
 45172 ;;  event           2   15[COMRAM] enum E6832
 45173 ;;  pdata           2   17[COMRAM] PTR void 
 45174 ;;		 -> RAM(3759), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 45175 ;;		 -> BDT(48), 
 45176 ;;  size            2   19[COMRAM] unsigned int 
 45177 ;; Auto vars:     Size  Location     Type
 45178 ;;		None
 45179 ;; Return value:  Size  Location     Type
 45180 ;;                  1    wreg      unsigned char 
 45181 ;; Registers used:
 45182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 45183 ;; Tracked objects:
 45184 ;;		On entry : 0/0
 45185 ;;		On exit  : 0/0
 45186 ;;		Unchanged: 0/0
 45187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 45188 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45190 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45191 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45192 ;;Total ram usage:        8 bytes
 45193 ;; Hardware stack levels used:    1
 45194 ;; Hardware stack levels required when called:    3
 45195 ;; This function calls:
 45196 ;;		_APP_DeviceCustomHIDInitialize
 45197 ;;		_APP_DeviceMSDInitialize
 45198 ;;		_MSDTransferTerminated
 45199 ;;		_USBCheckHIDRequest
 45200 ;;		_USBCheckMSDRequest
 45201 ;;		i2_SYSTEM_Initialize
 45202 ;; This function is called by:
 45203 ;;		_USBDeviceTasks
 45204 ;;		_USBStdSetCfgHandler
 45205 ;;		_USBSuspend
 45206 ;;		_USBWakeFromSuspend
 45207 ;;		_USBCtrlTrfSetupHandler
 45208 ;;		_USBCheckStdRequest
 45209 ;;		_USBStdFeatureReqHandler
 45210 ;; This function uses a non-reentrant model
 45211 ;;
 45212                           
 45213                           	psect	text177
 45214  01279A                     __ptext177:
 45215                           	opt stack 0
 45216  01279A                     _USER_USB_CALLBACK_EVENT_HANDLER:
 45217                           	opt stack 13
 45218                           
 45219                           ;usb_events.c: 56: switch((int)event)
 45220                           
 45221                           ;incstack = 0
 45222  01279A  D019               	goto	i2l816
 45223  01279C                     
 45224                           ;usb_events.c: 78: SYSTEM_Initialize(SYSTEM_STATE_USB_SUSPEND);
 45225  01279C  0E01               	movlw	1
 45226  01279E  EC5B  F09B         	call	i2_SYSTEM_Initialize
 45227                           
 45228                           ;usb_events.c: 79: break;
 45229  0127A2  0012               	return	
 45230  0127A4                     
 45231                           ;usb_events.c: 89: SYSTEM_Initialize(SYSTEM_STATE_USB_RESUME);
 45232  0127A4  0E02               	movlw	2
 45233  0127A6  EC5B  F09B         	call	i2_SYSTEM_Initialize
 45234                           
 45235                           ;usb_events.c: 90: break;
 45236  0127AA  0012               	return	
 45237  0127AC                     
 45238                           ;usb_events.c: 95: APP_DeviceCustomHIDInitialize();
 45239  0127AC  EC13  F09F         	call	_APP_DeviceCustomHIDInitialize	;wreg free
 45240                           
 45241                           ;usb_events.c: 96: APP_DeviceMSDInitialize();
 45242  0127B0  EC6A  F0A1         	call	_APP_DeviceMSDInitialize	;wreg free
 45243                           
 45244                           ;usb_events.c: 100: break;
 45245                           
 45246                           ;usb_events.c: 99: case EVENT_SET_DESCRIPTOR:
 45247                           
 45248                           ;usb_events.c: 97: break;
 45249  0127B4  0012               	return	
 45250  0127B6                     
 45251                           ;usb_events.c: 105: USBCheckHIDRequest();
 45252  0127B6  EC48  F08B         	call	_USBCheckHIDRequest	;wreg free
 45253                           
 45254                           ;usb_events.c: 108: USBCheckMSDRequest();
 45255  0127BA  ECAD  F08D         	call	_USBCheckMSDRequest	;wreg free
 45256                           
 45257                           ;usb_events.c: 112: break;
 45258                           
 45259                           ;usb_events.c: 111: case EVENT_BUS_ERROR:
 45260                           
 45261                           ;usb_events.c: 109: break;
 45262  0127BE  0012               	return	
 45263  0127C0                     
 45264                           ;usb_events.c: 124: MSDTransferTerminated(pdata);
 45265  0127C0  C03F  F039         	movff	USER_USB_CALLBACK_EVENT_HANDLER@pdata,MSDTransferTerminated@handle
 45266  0127C4  C040  F03A         	movff	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1,MSDTransferTerminated@handle+1
 45267  0127C8  ECB2  F09A         	call	_MSDTransferTerminated	;wreg free
 45268                           
 45269                           ;usb_events.c: 129: }
 45270                           
 45271                           ;usb_events.c: 128: break;
 45272                           
 45273                           ;usb_events.c: 127: default:
 45274                           
 45275                           ;usb_events.c: 125: break;
 45276  0127CC  0012               	return	
 45277  0127CE                     i2l816:
 45278  0127CE  C03D  F043         	movff	USER_USB_CALLBACK_EVENT_HANDLER@event,??_USER_USB_CALLBACK_EVENT_HANDLER
 45279  0127D2  C03E  F044         	movff	USER_USB_CALLBACK_EVENT_HANDLER@event+1,??_USER_USB_CALLBACK_EVENT_HANDLER+1
 45280                           
 45281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 45282                           ; Switch size 1, requested type "space"
 45283                           ; Number of cases is 2, Range of values is 0 to 127
 45284                           ; switch strategies available:
 45285                           ; Name         Instructions Cycles
 45286                           ; simple_byte            7     4 (average)
 45287                           ;	Chosen strategy is simple_byte
 45288  0127D6  5044               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER+1,w,c
 45289  0127D8  0A00               	xorlw	0	; case 0
 45290  0127DA  B4D8               	btfsc	status,2,c
 45291  0127DC  D004               	goto	i2l24346
 45292  0127DE  0A7F               	xorlw	127	; case 127
 45293  0127E0  A4D8               	btfss	status,2,c
 45294  0127E2  0012               	return	
 45295  0127E4  D01A               	goto	i2l24348
 45296  0127E6                     i2l24346:
 45297                           
 45298                           ; Switch size 1, requested type "space"
 45299                           ; Number of cases is 8, Range of values is 1 to 117
 45300                           ; switch strategies available:
 45301                           ; Name         Instructions Cycles
 45302                           ; simple_byte           25    13 (average)
 45303                           ;	Chosen strategy is simple_byte
 45304  0127E6  5043               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER,w,c
 45305  0127E8  0A01               	xorlw	1	; case 1
 45306  0127EA  B4D8               	btfsc	status,2,c
 45307  0127EC  D7DF               	goto	i2l822
 45308  0127EE  0A03               	xorlw	3	; case 2
 45309  0127F0  B4D8               	btfsc	status,2,c
 45310  0127F2  0012               	return	
 45311  0127F4  0A01               	xorlw	1	; case 3
 45312  0127F6  B4D8               	btfsc	status,2,c
 45313  0127F8  D7DE               	goto	i2l824
 45314  0127FA  0A06               	xorlw	6	; case 5
 45315  0127FC  B4D8               	btfsc	status,2,c
 45316  0127FE  D7E0               	goto	i2l826
 45317  012800  0A77               	xorlw	119	; case 114
 45318  012802  B4D8               	btfsc	status,2,c
 45319  012804  0012               	return	
 45320  012806  0A01               	xorlw	1	; case 115
 45321  012808  B4D8               	btfsc	status,2,c
 45322  01280A  0012               	return	
 45323  01280C  0A07               	xorlw	7	; case 116
 45324  01280E  B4D8               	btfsc	status,2,c
 45325  012810  D7C9               	goto	i2l821
 45326  012812  0A01               	xorlw	1	; case 117
 45327  012814  A4D8               	btfss	status,2,c
 45328  012816  0012               	return	
 45329  012818  D7C1               	goto	i2l820
 45330  01281A                     i2l24348:
 45331                           
 45332                           ; Switch size 1, requested type "space"
 45333                           ; Number of cases is 1, Range of values is 255 to 255
 45334                           ; switch strategies available:
 45335                           ; Name         Instructions Cycles
 45336                           ; simple_byte            4     3 (average)
 45337                           ;	Chosen strategy is simple_byte
 45338  01281A  5043               	movf	??_USER_USB_CALLBACK_EVENT_HANDLER,w,c
 45339  01281C  0AFF               	xorlw	255	; case 255
 45340  01281E  0012               	return	
 45341  012820                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 45342                           	opt stack 0
 45343                           tosu	equ	0xFFF
 45344                           tosh	equ	0xFFE
 45345                           tosl	equ	0xFFD
 45346                           pclatu	equ	0xFFB
 45347                           pclath	equ	0xFFA
 45348                           tblptru	equ	0xFF8
 45349                           tblptrh	equ	0xFF7
 45350                           tblptrl	equ	0xFF6
 45351                           tablat	equ	0xFF5
 45352                           prodh	equ	0xFF4
 45353                           prodl	equ	0xFF3
 45354                           intcon	equ	0xFF2
 45355                           indf0	equ	0xFEF
 45356                           postinc0	equ	0xFEE
 45357                           fsr0h	equ	0xFEA
 45358                           fsr0l	equ	0xFE9
 45359                           wreg	equ	0xFE8
 45360                           indf1	equ	0xFE7
 45361                           postinc1	equ	0xFE6
 45362                           postdec1	equ	0xFE5
 45363                           plusw1	equ	0xFE3
 45364                           fsr1h	equ	0xFE2
 45365                           fsr1l	equ	0xFE1
 45366                           indf2	equ	0xFDF
 45367                           postinc2	equ	0xFDE
 45368                           postdec2	equ	0xFDD
 45369                           plusw2	equ	0xFDB
 45370                           fsr2h	equ	0xFDA
 45371                           fsr2l	equ	0xFD9
 45372                           status	equ	0xFD8
 45373                           
 45374 ;; *************** function i2_SYSTEM_Initialize *****************
 45375 ;; Defined at:
 45376 ;;		line 39 in file "system.c"
 45377 ;; Parameters:    Size  Location     Type
 45378 ;;  state           1    wreg     enum E6623
 45379 ;; Auto vars:     Size  Location     Type
 45380 ;;  state           1    4[COMRAM] enum E6623
 45381 ;;  SYSTEM_Initi    2    2[COMRAM] unsigned int 
 45382 ;;  SYSTEM_Initi    2    0[COMRAM] unsigned int 
 45383 ;; Return value:  Size  Location     Type
 45384 ;;                  1    wreg      void 
 45385 ;; Registers used:
 45386 ;;		wreg, status,2, status,0
 45387 ;; Tracked objects:
 45388 ;;		On entry : 0/0
 45389 ;;		On exit  : 0/0
 45390 ;;		Unchanged: 0/0
 45391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 45392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45393 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45395 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45396 ;;Total ram usage:        5 bytes
 45397 ;; Hardware stack levels used:    1
 45398 ;; This function calls:
 45399 ;;		Nothing
 45400 ;; This function is called by:
 45401 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 45402 ;; This function uses a non-reentrant model
 45403 ;;
 45404                           
 45405                           	psect	text178
 45406  0136B6                     __ptext178:
 45407                           	opt stack 0
 45408  0136B6                     i2_SYSTEM_Initialize:
 45409                           	opt stack 15
 45410                           
 45411                           ;incstack = 0
 45412                           ;i2SYSTEM_Initialize@state stored from wreg
 45413  0136B6  6E32               	movwf	i2SYSTEM_Initialize@state,c
 45414                           
 45415                           ;system.c: 41: switch(state)
 45416  0136B8  D01D               	goto	i2l892
 45417  0136BA                     
 45418                           ;system.c: 50: {;system.c: 51: unsigned int pll_startup_counter = 600;
 45419  0136BA  0E02               	movlw	2
 45420  0136BC  6E2F               	movwf	i2SYSTEM_Initialize@pll_startup_counter+1,c
 45421  0136BE  0E58               	movlw	88
 45422  0136C0  6E2E               	movwf	i2SYSTEM_Initialize@pll_startup_counter,c
 45423                           
 45424                           ;system.c: 52: OSCTUNEbits.PLLEN = 1;
 45425  0136C2  8C9B               	bsf	3995,6,c	;volatile
 45426  0136C4                     i2l11520:
 45427  0136C4  062E               	decf	i2SYSTEM_Initialize@pll_startup_counter,f,c
 45428  0136C6  A0D8               	btfss	status,0,c
 45429  0136C8  062F               	decf	i2SYSTEM_Initialize@pll_startup_counter+1,f,c
 45430  0136CA  282E               	incf	i2SYSTEM_Initialize@pll_startup_counter,w,c
 45431  0136CC  E1FB               	bnz	i2l11520
 45432  0136CE  282F               	incf	i2SYSTEM_Initialize@pll_startup_counter+1,w,c
 45433  0136D0  B4D8               	btfsc	status,2,c
 45434  0136D2  0012               	return	
 45435  0136D4  D7F7               	goto	i2l895
 45436  0136D6                     
 45437                           ;system.c: 78: OSCCON = 0x70;
 45438  0136D6  0E70               	movlw	112
 45439  0136D8  6ED3               	movwf	4051,c	;volatile
 45440                           
 45441                           ;system.c: 84: {;system.c: 85: unsigned int pll_startup_counter = 800;
 45442  0136DA  0E03               	movlw	3
 45443  0136DC  6E31               	movwf	i2SYSTEM_Initialize@pll_startup_counter_3117+1,c
 45444  0136DE  0E20               	movlw	32
 45445  0136E0  6E30               	movwf	i2SYSTEM_Initialize@pll_startup_counter_3117,c
 45446  0136E2                     i2l11524:
 45447  0136E2  0630               	decf	i2SYSTEM_Initialize@pll_startup_counter_3117,f,c
 45448  0136E4  A0D8               	btfss	status,0,c
 45449  0136E6  0631               	decf	i2SYSTEM_Initialize@pll_startup_counter_3117+1,f,c
 45450  0136E8  2830               	incf	i2SYSTEM_Initialize@pll_startup_counter_3117,w,c
 45451  0136EA  E1FB               	bnz	i2l11524
 45452  0136EC  2831               	incf	i2SYSTEM_Initialize@pll_startup_counter_3117+1,w,c
 45453  0136EE  B4D8               	btfsc	status,2,c
 45454  0136F0  0012               	return	
 45455  0136F2  D7F7               	goto	i2l901
 45456  0136F4                     i2l892:
 45457  0136F4  5032               	movf	i2SYSTEM_Initialize@state,w,c
 45458                           
 45459                           ; Switch size 1, requested type "space"
 45460                           ; Number of cases is 3, Range of values is 0 to 2
 45461                           ; switch strategies available:
 45462                           ; Name         Instructions Cycles
 45463                           ; simple_byte           10     6 (average)
 45464                           ;	Chosen strategy is simple_byte
 45465  0136F6  0A00               	xorlw	0	; case 0
 45466  0136F8  B4D8               	btfsc	status,2,c
 45467  0136FA  D7DF               	goto	i2l893
 45468  0136FC  0A01               	xorlw	1	; case 1
 45469  0136FE  B4D8               	btfsc	status,2,c
 45470  013700  0012               	return	
 45471  013702  0A03               	xorlw	3	; case 2
 45472  013704  A4D8               	btfss	status,2,c
 45473  013706  0012               	return	
 45474  013708  D7E6               	goto	i2l899
 45475  01370A                     __end_ofi2_SYSTEM_Initialize:
 45476                           	opt stack 0
 45477                           tosu	equ	0xFFF
 45478                           tosh	equ	0xFFE
 45479                           tosl	equ	0xFFD
 45480                           pclatu	equ	0xFFB
 45481                           pclath	equ	0xFFA
 45482                           tblptru	equ	0xFF8
 45483                           tblptrh	equ	0xFF7
 45484                           tblptrl	equ	0xFF6
 45485                           tablat	equ	0xFF5
 45486                           prodh	equ	0xFF4
 45487                           prodl	equ	0xFF3
 45488                           intcon	equ	0xFF2
 45489                           indf0	equ	0xFEF
 45490                           postinc0	equ	0xFEE
 45491                           fsr0h	equ	0xFEA
 45492                           fsr0l	equ	0xFE9
 45493                           wreg	equ	0xFE8
 45494                           indf1	equ	0xFE7
 45495                           postinc1	equ	0xFE6
 45496                           postdec1	equ	0xFE5
 45497                           plusw1	equ	0xFE3
 45498                           fsr1h	equ	0xFE2
 45499                           fsr1l	equ	0xFE1
 45500                           indf2	equ	0xFDF
 45501                           postinc2	equ	0xFDE
 45502                           postdec2	equ	0xFDD
 45503                           plusw2	equ	0xFDB
 45504                           fsr2h	equ	0xFDA
 45505                           fsr2l	equ	0xFD9
 45506                           status	equ	0xFD8
 45507                           
 45508 ;; *************** function _USBCheckMSDRequest *****************
 45509 ;; Defined at:
 45510 ;;		line 218 in file "usb_device_msd.c"
 45511 ;; Parameters:    Size  Location     Type
 45512 ;;		None
 45513 ;; Auto vars:     Size  Location     Type
 45514 ;;		None
 45515 ;; Return value:  Size  Location     Type
 45516 ;;                  1    wreg      void 
 45517 ;; Registers used:
 45518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 45519 ;; Tracked objects:
 45520 ;;		On entry : 0/0
 45521 ;;		On exit  : 0/0
 45522 ;;		Unchanged: 0/0
 45523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 45524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45525 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45527 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45528 ;;Total ram usage:        4 bytes
 45529 ;; Hardware stack levels used:    1
 45530 ;; Hardware stack levels required when called:    1
 45531 ;; This function calls:
 45532 ;;		i2_USBTransferOnePacket
 45533 ;; This function is called by:
 45534 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 45535 ;; This function uses a non-reentrant model
 45536 ;;
 45537                           
 45538                           	psect	text179
 45539  011B5A                     __ptext179:
 45540                           	opt stack 0
 45541  011B5A                     _USBCheckMSDRequest:
 45542                           	opt stack 14
 45543                           
 45544                           ;usb_device_msd.c: 220: if(SetupPkt.Recipient != (0x01))
 45545                           
 45546                           ;incstack = 0
 45547  011B5A  010D               	movlb	13	; () banked
 45548  011B5C  5130               	movf	48,w,b	;volatile
 45549  011B5E  0B1F               	andlw	31
 45550  011B60  06E8               	decf	wreg,f,c
 45551  011B62  A4D8               	btfss	status,2,c
 45552  011B64  0012               	return	
 45553                           
 45554                           ; BSR set to: 13
 45555                           ;usb_device_msd.c: 223: };usb_device_msd.c: 225: if(SetupPkt.bIntfID != 0x00)
 45556                           
 45557                           ; BSR set to: 13
 45558                           
 45559                           ; BSR set to: 13
 45560                           ;usb_device_msd.c: 221: {;usb_device_msd.c: 222: return;
 45561  011B66  5134               	movf	52,w,b	;volatile
 45562  011B68  A4D8               	btfss	status,2,c
 45563  011B6A  0012               	return	
 45564  011B6C  D04D               	goto	i2l545
 45565  011B6E                     
 45566                           ; BSR set to: 13
 45567                           ;usb_device_msd.c: 235: if((SetupPkt.wValue != 0) || (SetupPkt.wLength != 0))
 45568                           
 45569                           ; BSR set to: 13
 45570  011B6E  5132               	movf	50,w,b	;volatile
 45571  011B70  1133               	iorwf	51,w,b	;volatile
 45572  011B72  A4D8               	btfss	status,2,c
 45573  011B74  0012               	return	
 45574                           
 45575                           ; BSR set to: 13
 45576  011B76  5136               	movf	54,w,b	;volatile
 45577  011B78  1137               	iorwf	55,w,b	;volatile
 45578  011B7A  A4D8               	btfss	status,2,c
 45579  011B7C  0012               	return	
 45580                           
 45581                           ; BSR set to: 13
 45582                           ;usb_device_msd.c: 238: };usb_device_msd.c: 246: MSD_State = 0x00;
 45583                           
 45584                           ; BSR set to: 13
 45585                           
 45586                           ; BSR set to: 13
 45587                           ;usb_device_msd.c: 236: {;usb_device_msd.c: 237: return;
 45588  011B7E  0E00               	movlw	0
 45589  011B80  0100               	movlb	0	; () banked
 45590  011B82  6FFA               	movwf	_MSD_State& (0+255),b
 45591                           
 45592                           ; BSR set to: 0
 45593                           ;usb_device_msd.c: 247: MSDCommandState = 0xFF;
 45594  011B84  69F9               	setf	_MSDCommandState& (0+255),b
 45595                           
 45596                           ;usb_device_msd.c: 248: MSDReadState = 0x00;
 45597  011B86  0E00               	movlw	0
 45598  011B88  6FF8               	movwf	_MSDReadState& (0+255),b
 45599                           
 45600                           ;usb_device_msd.c: 249: MSDWriteState = 0x00;
 45601  011B8A  0E00               	movlw	0
 45602  011B8C  6E21               	movwf	_MSDWriteState,c
 45603                           
 45604                           ;usb_device_msd.c: 250: MSDCBWValid = 1;
 45605  011B8E  0E01               	movlw	1
 45606  011B90  0101               	movlb	1	; () banked
 45607  011B92  6F71               	movwf	_MSDCBWValid& (0+255),b
 45608                           
 45609                           ; BSR set to: 1
 45610                           
 45611                           ; BSR set to: 1
 45612                           
 45613                           ; BSR set to: 1
 45614                           
 45615                           ;usb_device_msd.c: 255: if(!((((0 == 0)?((void*)pBDTEntryOut[2u]):((void*)pBDTEntryIn[2u
      +                          ])) != 0x0000) && ((*(volatile uint8_t*)((0 == 0)?((void*)pBDTEntryOut[2u]):((void*)pBDT
      +                          EntryIn[2u])) & 0x80) != 0x00)))
 45616  011B94  C13C  F039         	movff	_pBDTEntryOut+4,_USBCheckMSDRequest$2534
 45617  011B98  C13D  F03A         	movff	_pBDTEntryOut+5,_USBCheckMSDRequest$2534+1
 45618                           
 45619                           ; BSR set to: 1
 45620  011B9C  5039               	movf	_USBCheckMSDRequest$2534,w,c
 45621  011B9E  103A               	iorwf	_USBCheckMSDRequest$2534+1,w,c
 45622  011BA0  B4D8               	btfsc	status,2,c
 45623  011BA2  D00A               	goto	i2u928_40
 45624                           
 45625                           ; BSR set to: 1
 45626                           
 45627                           ; BSR set to: 1
 45628                           
 45629                           ; BSR set to: 1
 45630                           
 45631                           ; BSR set to: 1
 45632  011BA4  C13C  F03B         	movff	_pBDTEntryOut+4,_USBCheckMSDRequest$2535
 45633  011BA8  C13D  F03C         	movff	_pBDTEntryOut+5,_USBCheckMSDRequest$2535+1
 45634                           
 45635                           ; BSR set to: 1
 45636                           
 45637                           ; BSR set to: 1
 45638  011BAC  C03B  FFD9         	movff	_USBCheckMSDRequest$2535,fsr2l
 45639  011BB0  C03C  FFDA         	movff	_USBCheckMSDRequest$2535+1,fsr2h
 45640  011BB4  BEDF               	btfsc	indf2,7,c
 45641  011BB6  D00F               	goto	i2l550
 45642  011BB8                     i2u928_40:
 45643                           
 45644                           ; BSR set to: 1
 45645                           ;usb_device_msd.c: 256: {;usb_device_msd.c: 257: USBMSDOutHandle = USBTransferOnePacket(
      +                          2u,0,(uint8_t*)&msd_cbw,64u);
 45646                           
 45647                           ; BSR set to: 1
 45648  011BB8  0E00               	movlw	0
 45649  011BBA  6E2E               	movwf	i2USBTransferOnePacket@dir,c
 45650  011BBC  0E40               	movlw	64
 45651  011BBE  6E2F               	movwf	i2USBTransferOnePacket@data,c
 45652  011BC0  0E0D               	movlw	13
 45653  011BC2  6E30               	movwf	i2USBTransferOnePacket@data+1,c
 45654  011BC4  0E40               	movlw	64
 45655  011BC6  6E31               	movwf	i2USBTransferOnePacket@len,c
 45656  011BC8  0E02               	movlw	2
 45657  011BCA  ECF7  F083         	call	i2_USBTransferOnePacket
 45658  011BCE  C02E  F0EF         	movff	?i2_USBTransferOnePacket,_USBMSDOutHandle
 45659  011BD2  C02F  F0F0         	movff	?i2_USBTransferOnePacket+1,_USBMSDOutHandle+1
 45660  011BD6                     i2l550:
 45661                           
 45662                           ;usb_device_msd.c: 258: };usb_device_msd.c: 262: inPipes[0].info.Val = 0x00 | 0x80;
 45663  011BD6  0E80               	movlw	128
 45664  011BD8  6E0D               	movwf	_inPipes+3,c	;volatile
 45665                           
 45666                           ;usb_device_msd.c: 263: break;
 45667  011BDA  0012               	return	
 45668  011BDC                     
 45669                           ;usb_device_msd.c: 268: if((SetupPkt.wValue != 0) || (SetupPkt.wLength != 1))
 45670  011BDC  010D               	movlb	13	; () banked
 45671  011BDE  5132               	movf	50,w,b	;volatile
 45672  011BE0  1133               	iorwf	51,w,b	;volatile
 45673  011BE2  A4D8               	btfss	status,2,c
 45674  011BE4  0012               	return	
 45675                           
 45676                           ; BSR set to: 13
 45677  011BE6  0536               	decf	54,w,b	;volatile
 45678  011BE8  1137               	iorwf	55,w,b	;volatile
 45679  011BEA  A4D8               	btfss	status,2,c
 45680  011BEC  0012               	return	
 45681                           
 45682                           ; BSR set to: 13
 45683                           ;usb_device_msd.c: 271: };usb_device_msd.c: 275: CtrlTrfData[0] = 0u;
 45684                           
 45685                           ; BSR set to: 13
 45686                           
 45687                           ; BSR set to: 13
 45688                           ;usb_device_msd.c: 269: {;usb_device_msd.c: 270: break;
 45689  011BEE  0E00               	movlw	0
 45690  011BF0  6F38               	movwf	56,b	;volatile
 45691                           
 45692                           ; BSR set to: 13
 45693                           ;usb_device_msd.c: 276: { inPipes[0].pSrc.bRam = (uint8_t*)&CtrlTrfData[0]; inPipes[0].w
      +                          Count.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 45694  011BF2  0E38               	movlw	56
 45695  011BF4  6E0A               	movwf	_inPipes,c	;volatile
 45696  011BF6  0E0D               	movlw	13
 45697  011BF8  6E0B               	movwf	_inPipes+1,c	;volatile
 45698                           
 45699                           ; BSR set to: 13
 45700  011BFA  0E00               	movlw	0
 45701  011BFC  6E0F               	movwf	_inPipes+5,c	;volatile
 45702  011BFE  0E01               	movlw	1
 45703  011C00  6E0E               	movwf	_inPipes+4,c	;volatile
 45704                           
 45705                           ; BSR set to: 13
 45706  011C02  0EC1               	movlw	193
 45707  011C04  6E0D               	movwf	_inPipes+3,c	;volatile
 45708                           
 45709                           ; BSR set to: 13
 45710                           ;usb_device_msd.c: 278: }
 45711                           
 45712                           ;usb_device_msd.c: 277: break;
 45713  011C06  0012               	return	
 45714  011C08                     i2l545:
 45715                           
 45716                           ; BSR set to: 13
 45717                           
 45718                           ; BSR set to: 13
 45719  011C08  5131               	movf	49,w,b	;volatile
 45720                           
 45721                           ; Switch size 1, requested type "space"
 45722                           ; Number of cases is 2, Range of values is 254 to 255
 45723                           ; switch strategies available:
 45724                           ; Name         Instructions Cycles
 45725                           ; simple_byte            7     4 (average)
 45726                           ;	Chosen strategy is simple_byte
 45727  011C0A  0AFE               	xorlw	254	; case 254
 45728  011C0C  B4D8               	btfsc	status,2,c
 45729  011C0E  D7E6               	goto	i2l562
 45730  011C10  0A01               	xorlw	1	; case 255
 45731  011C12  A4D8               	btfss	status,2,c
 45732  011C14  0012               	return	
 45733  011C16  D7AB               	goto	i2l546
 45734  011C18                     __end_of_USBCheckMSDRequest:
 45735                           	opt stack 0
 45736                           tosu	equ	0xFFF
 45737                           tosh	equ	0xFFE
 45738                           tosl	equ	0xFFD
 45739                           pclatu	equ	0xFFB
 45740                           pclath	equ	0xFFA
 45741                           tblptru	equ	0xFF8
 45742                           tblptrh	equ	0xFF7
 45743                           tblptrl	equ	0xFF6
 45744                           tablat	equ	0xFF5
 45745                           prodh	equ	0xFF4
 45746                           prodl	equ	0xFF3
 45747                           intcon	equ	0xFF2
 45748                           indf0	equ	0xFEF
 45749                           postinc0	equ	0xFEE
 45750                           fsr0h	equ	0xFEA
 45751                           fsr0l	equ	0xFE9
 45752                           wreg	equ	0xFE8
 45753                           indf1	equ	0xFE7
 45754                           postinc1	equ	0xFE6
 45755                           postdec1	equ	0xFE5
 45756                           plusw1	equ	0xFE3
 45757                           fsr1h	equ	0xFE2
 45758                           fsr1l	equ	0xFE1
 45759                           indf2	equ	0xFDF
 45760                           postinc2	equ	0xFDE
 45761                           postdec2	equ	0xFDD
 45762                           plusw2	equ	0xFDB
 45763                           fsr2h	equ	0xFDA
 45764                           fsr2l	equ	0xFD9
 45765                           status	equ	0xFD8
 45766                           
 45767 ;; *************** function _USBCheckHIDRequest *****************
 45768 ;; Defined at:
 45769 ;;		line 153 in file "usb_device_hid.c"
 45770 ;; Parameters:    Size  Location     Type
 45771 ;;		None
 45772 ;; Auto vars:     Size  Location     Type
 45773 ;;		None
 45774 ;; Return value:  Size  Location     Type
 45775 ;;                  1    wreg      void 
 45776 ;; Registers used:
 45777 ;;		wreg, status,2, status,0
 45778 ;; Tracked objects:
 45779 ;;		On entry : 0/0
 45780 ;;		On exit  : 0/0
 45781 ;;		Unchanged: 0/0
 45782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 45783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 45787 ;;Total ram usage:        0 bytes
 45788 ;; Hardware stack levels used:    1
 45789 ;; This function calls:
 45790 ;;		Nothing
 45791 ;; This function is called by:
 45792 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 45793 ;; This function uses a non-reentrant model
 45794 ;;
 45795                           
 45796                           	psect	text180
 45797  011690                     __ptext180:
 45798                           	opt stack 0
 45799  011690                     _USBCheckHIDRequest:
 45800                           	opt stack 15
 45801                           
 45802                           ;usb_device_hid.c: 155: if(SetupPkt.Recipient != (0x01)) return;
 45803                           
 45804                           ;incstack = 0
 45805  011690  010D               	movlb	13	; () banked
 45806  011692  5130               	movf	48,w,b	;volatile
 45807  011694  0B1F               	andlw	31
 45808  011696  06E8               	decf	wreg,f,c
 45809  011698  A4D8               	btfss	status,2,c
 45810  01169A  0012               	return	
 45811                           
 45812                           ; BSR set to: 13
 45813                           ;usb_device_hid.c: 156: if(SetupPkt.bIntfID != 0x00) return;
 45814                           
 45815                           ; BSR set to: 13
 45816                           
 45817                           ; BSR set to: 13
 45818  01169C  5134               	movf	52,w,b	;volatile
 45819  01169E  A4D8               	btfss	status,2,c
 45820  0116A0  0012               	return	
 45821                           
 45822                           ; BSR set to: 13
 45823                           ;usb_device_hid.c: 163: if(SetupPkt.bRequest == 6)
 45824                           
 45825                           ; BSR set to: 13
 45826                           
 45827                           ; BSR set to: 13
 45828  0116A2  0E06               	movlw	6
 45829  0116A4  1931               	xorwf	49,w,b	;volatile
 45830  0116A6  B4D8               	btfsc	status,2,c
 45831  0116A8  D018               	goto	i2l425
 45832  0116AA  D01F               	goto	i2l428
 45833  0116AC                     
 45834                           ; BSR set to: 13
 45835                           ;usb_device_hid.c: 168: if(USBActiveConfiguration == 1)
 45836                           
 45837                           ; BSR set to: 13
 45838  0116AC  042D               	decf	_USBActiveConfiguration,w,c	;volatile
 45839  0116AE  A4D8               	btfss	status,2,c
 45840  0116B0  D01C               	goto	i2l428
 45841                           
 45842                           ; BSR set to: 13
 45843                           ;usb_device_hid.c: 169: {;usb_device_hid.c: 170: { inPipes[0].pSrc.bRom = (const uint8_t
      +                          *)&configDescriptor1 + 18; inPipes[0].wCount.Val = sizeof(USB_HID_DSC)+3; inPipes[0].inf
      +                          o.Val = 0x40 | 0x80 | 0x00; };
 45844  0116B2  0ED0               	movlw	low (_configDescriptor1+18)
 45845  0116B4  6E0A               	movwf	_inPipes,c	;volatile
 45846  0116B6  0EA0               	movlw	high (_configDescriptor1+18)
 45847  0116B8  6E0B               	movwf	_inPipes+1,c	;volatile
 45848                           
 45849                           ; BSR set to: 13
 45850  0116BA  0E00               	movlw	0
 45851  0116BC  6E0F               	movwf	_inPipes+5,c	;volatile
 45852  0116BE  0E09               	movlw	9
 45853  0116C0  D00A               	goto	L79
 45854  0116C2                     i2l11292:
 45855                           
 45856                           ; BSR set to: 13
 45857  0116C2  0EC0               	movlw	192
 45858  0116C4  6E0D               	movwf	_inPipes+3,c	;volatile
 45859                           
 45860                           ; BSR set to: 13
 45861                           ;usb_device_hid.c: 174: };usb_device_hid.c: 175: break;
 45862  0116C6  D011               	goto	i2l428
 45863  0116C8                     
 45864                           ; BSR set to: 13
 45865                           ;usb_device_hid.c: 178: {;usb_device_hid.c: 179: { inPipes[0].pSrc.bRom = (const uint8_t
      +                          *)&hid_rpt01; inPipes[0].wCount.Val = 29; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 45866                           
 45867                           ; BSR set to: 13
 45868  0116C8  0E84               	movlw	low _hid_rpt01
 45869  0116CA  6E0A               	movwf	_inPipes,c	;volatile
 45870  0116CC  0EA1               	movlw	high _hid_rpt01
 45871  0116CE  6E0B               	movwf	_inPipes+1,c	;volatile
 45872                           
 45873                           ; BSR set to: 13
 45874  0116D0  0E00               	movlw	0
 45875  0116D2  6E0F               	movwf	_inPipes+5,c	;volatile
 45876  0116D4  0E1D               	movlw	29
 45877  0116D6                     L79:
 45878  0116D6  6E0E               	movwf	_inPipes+4,c	;volatile
 45879  0116D8  D7F4               	goto	i2l11292
 45880  0116DA                     i2l425:
 45881                           
 45882                           ; BSR set to: 13
 45883                           
 45884                           ; BSR set to: 13
 45885  0116DA  5133               	movf	51,w,b	;volatile
 45886                           
 45887                           ; Switch size 1, requested type "space"
 45888                           ; Number of cases is 3, Range of values is 33 to 35
 45889                           ; switch strategies available:
 45890                           ; Name         Instructions Cycles
 45891                           ; simple_byte           10     6 (average)
 45892                           ;	Chosen strategy is simple_byte
 45893  0116DC  0A21               	xorlw	33	; case 33
 45894  0116DE  B4D8               	btfsc	status,2,c
 45895  0116E0  D7E5               	goto	i2l426
 45896  0116E2  0A03               	xorlw	3	; case 34
 45897  0116E4  B4D8               	btfsc	status,2,c
 45898  0116E6  D7F0               	goto	i2l429
 45899  0116E8  0A01               	xorlw	1	; case 35
 45900  0116EA                     i2l428:
 45901                           
 45902                           ; BSR set to: 13
 45903                           ;usb_device_hid.c: 199: };usb_device_hid.c: 201: if(SetupPkt.RequestType != (0x20>>5))
 45904                           
 45905                           ; BSR set to: 13
 45906                           
 45907                           ; BSR set to: 13
 45908  0116EA  3930               	swapf	48,w,b	;volatile
 45909  0116EC  32E8               	rrcf	wreg,f,c
 45910  0116EE  0B03               	andlw	3
 45911  0116F0  06E8               	decf	wreg,f,c
 45912  0116F2  A4D8               	btfss	status,2,c
 45913  0116F4  0012               	return	
 45914  0116F6  D020               	goto	i2l432
 45915  0116F8                     
 45916                           ; BSR set to: 13
 45917                           ;usb_device_hid.c: 219: { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; inPipes[0].wCount
      +                          .Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 45918                           
 45919                           ; BSR set to: 13
 45920  0116F8  0EFF               	movlw	low _idle_rate
 45921  0116FA  6E0A               	movwf	_inPipes,c	;volatile
 45922  0116FC  0E00               	movlw	high _idle_rate
 45923  0116FE  6E0B               	movwf	_inPipes+1,c	;volatile
 45924                           
 45925                           ; BSR set to: 13
 45926  011700  0E00               	movlw	0
 45927  011702  6E0F               	movwf	_inPipes+5,c	;volatile
 45928  011704  0E01               	movlw	1
 45929  011706  6E0E               	movwf	_inPipes+4,c	;volatile
 45930                           
 45931                           ; BSR set to: 13
 45932  011708  0EC1               	movlw	193
 45933  01170A  6E0D               	movwf	_inPipes+3,c	;volatile
 45934                           
 45935                           ;usb_device_hid.c: 223: break;
 45936  01170C  0012               	return	
 45937  01170E                     
 45938                           ; BSR set to: 13
 45939                           ;usb_device_hid.c: 225: inPipes[0].info.Val = 0x00 | 0x80;
 45940                           
 45941                           ; BSR set to: 13
 45942  01170E  0E80               	movlw	128
 45943  011710  6E0D               	movwf	_inPipes+3,c	;volatile
 45944                           
 45945                           ; BSR set to: 13
 45946                           ;usb_device_hid.c: 226: idle_rate = SetupPkt.W_Value.byte.HB;
 45947  011712  CD33 F0FF          	movff	3379,_idle_rate	;volatile
 45948                           
 45949                           ;usb_device_hid.c: 227: ;;usb_device_hid.c: 228: break;
 45950  011716  0012               	return	
 45951  011718                     
 45952                           ; BSR set to: 13
 45953                           ;usb_device_hid.c: 230: { inPipes[0].pSrc.bRam = (uint8_t*)&active_protocol; inPipes[0].
      +                          wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 45954                           
 45955                           ; BSR set to: 13
 45956  011718  0EC0               	movlw	low _active_protocol
 45957  01171A  6E0A               	movwf	_inPipes,c	;volatile
 45958  01171C  0E01               	movlw	high _active_protocol
 45959  01171E  6E0B               	movwf	_inPipes+1,c	;volatile
 45960                           
 45961                           ; BSR set to: 13
 45962  011720  0E00               	movlw	0
 45963  011722  6E0F               	movwf	_inPipes+5,c	;volatile
 45964  011724  0E01               	movlw	1
 45965  011726  6E0E               	movwf	_inPipes+4,c	;volatile
 45966                           
 45967                           ; BSR set to: 13
 45968  011728  0E81               	movlw	129
 45969  01172A  6E0D               	movwf	_inPipes+3,c	;volatile
 45970                           
 45971                           ;usb_device_hid.c: 234: break;
 45972  01172C  0012               	return	
 45973  01172E                     
 45974                           ; BSR set to: 13
 45975                           ;usb_device_hid.c: 236: inPipes[0].info.Val = 0x00 | 0x80;
 45976                           
 45977                           ; BSR set to: 13
 45978  01172E  0E80               	movlw	128
 45979  011730  6E0D               	movwf	_inPipes+3,c	;volatile
 45980                           
 45981                           ; BSR set to: 13
 45982                           ;usb_device_hid.c: 237: active_protocol = SetupPkt.W_Value.byte.LB;
 45983  011732  CD32 F1C0          	movff	3378,_active_protocol	;volatile
 45984                           
 45985                           ; BSR set to: 13
 45986                           ;usb_device_hid.c: 239: }
 45987                           
 45988                           ;usb_device_hid.c: 238: break;
 45989  011736  0012               	return	
 45990  011738                     i2l432:
 45991                           
 45992                           ; BSR set to: 13
 45993                           
 45994                           ; BSR set to: 13
 45995  011738  5131               	movf	49,w,b	;volatile
 45996                           
 45997                           ; Switch size 1, requested type "space"
 45998                           ; Number of cases is 6, Range of values is 1 to 11
 45999                           ; switch strategies available:
 46000                           ; Name         Instructions Cycles
 46001                           ; simple_byte           19    10 (average)
 46002                           ;	Chosen strategy is simple_byte
 46003  01173A  0A01               	xorlw	1	; case 1
 46004  01173C  B4D8               	btfsc	status,2,c
 46005  01173E  0012               	return	
 46006  011740  0A03               	xorlw	3	; case 2
 46007  011742  B4D8               	btfsc	status,2,c
 46008  011744  D7D9               	goto	i2l436
 46009  011746  0A01               	xorlw	1	; case 3
 46010  011748  B4D8               	btfsc	status,2,c
 46011  01174A  D7E6               	goto	i2l438
 46012  01174C  0A0A               	xorlw	10	; case 9
 46013  01174E  B4D8               	btfsc	status,2,c
 46014  011750  0012               	return	
 46015  011752  0A03               	xorlw	3	; case 10
 46016  011754  B4D8               	btfsc	status,2,c
 46017  011756  D7DB               	goto	i2l437
 46018  011758  0A01               	xorlw	1	; case 11
 46019  01175A  A4D8               	btfss	status,2,c
 46020  01175C  0012               	return	
 46021  01175E  D7E7               	goto	i2l439
 46022  011760                     __end_of_USBCheckHIDRequest:
 46023                           	opt stack 0
 46024                           tosu	equ	0xFFF
 46025                           tosh	equ	0xFFE
 46026                           tosl	equ	0xFFD
 46027                           pclatu	equ	0xFFB
 46028                           pclath	equ	0xFFA
 46029                           tblptru	equ	0xFF8
 46030                           tblptrh	equ	0xFF7
 46031                           tblptrl	equ	0xFF6
 46032                           tablat	equ	0xFF5
 46033                           prodh	equ	0xFF4
 46034                           prodl	equ	0xFF3
 46035                           intcon	equ	0xFF2
 46036                           indf0	equ	0xFEF
 46037                           postinc0	equ	0xFEE
 46038                           fsr0h	equ	0xFEA
 46039                           fsr0l	equ	0xFE9
 46040                           wreg	equ	0xFE8
 46041                           indf1	equ	0xFE7
 46042                           postinc1	equ	0xFE6
 46043                           postdec1	equ	0xFE5
 46044                           plusw1	equ	0xFE3
 46045                           fsr1h	equ	0xFE2
 46046                           fsr1l	equ	0xFE1
 46047                           indf2	equ	0xFDF
 46048                           postinc2	equ	0xFDE
 46049                           postdec2	equ	0xFDD
 46050                           plusw2	equ	0xFDB
 46051                           fsr2h	equ	0xFDA
 46052                           fsr2l	equ	0xFD9
 46053                           status	equ	0xFD8
 46054                           
 46055 ;; *************** function _MSDTransferTerminated *****************
 46056 ;; Defined at:
 46057 ;;		line 1674 in file "usb_device_msd.c"
 46058 ;; Parameters:    Size  Location     Type
 46059 ;;  handle          2   11[COMRAM] PTR void 
 46060 ;;		 -> RAM(3759), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 46061 ;;		 -> BDT(48), 
 46062 ;; Auto vars:     Size  Location     Type
 46063 ;;		None
 46064 ;; Return value:  Size  Location     Type
 46065 ;;                  1    wreg      void 
 46066 ;; Registers used:
 46067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 46068 ;; Tracked objects:
 46069 ;;		On entry : 0/0
 46070 ;;		On exit  : 0/0
 46071 ;;		Unchanged: 0/0
 46072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 46073 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46076 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46077 ;;Total ram usage:        4 bytes
 46078 ;; Hardware stack levels used:    1
 46079 ;; Hardware stack levels required when called:    1
 46080 ;; This function calls:
 46081 ;;		i2_USBStallEndpoint
 46082 ;;		i2_USBTransferOnePacket
 46083 ;; This function is called by:
 46084 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 46085 ;; This function uses a non-reentrant model
 46086 ;;
 46087                           
 46088                           	psect	text181
 46089  013564                     __ptext181:
 46090                           	opt stack 0
 46091  013564                     _MSDTransferTerminated:
 46092                           	opt stack 14
 46093                           
 46094                           ;usb_device_msd.c: 1676: if((MSDCBWValid) == 0)
 46095                           
 46096                           ; BSR set to: 13
 46097                           ;incstack = 0
 46098  013564  0101               	movlb	1	; () banked
 46099  013566  5171               	movf	_MSDCBWValid& (0+255),w,b
 46100  013568  A4D8               	btfss	status,2,c
 46101  01356A  D00B               	goto	i2l780
 46102                           
 46103                           ; BSR set to: 1
 46104                           ;usb_device_msd.c: 1677: {;usb_device_msd.c: 1679: USBStallEndpoint(2u, 1);
 46105  01356C  0E01               	movlw	1
 46106  01356E  6E2E               	movwf	i2USBStallEndpoint@dir,c
 46107  013570  0E02               	movlw	2
 46108  013572  ECF2  F082         	call	i2_USBStallEndpoint
 46109                           
 46110                           ;usb_device_msd.c: 1680: USBStallEndpoint(2u, 0);
 46111  013576  0E00               	movlw	0
 46112  013578  6E2E               	movwf	i2USBStallEndpoint@dir,c
 46113  01357A  0E02               	movlw	2
 46114  01357C  ECF2  F082         	call	i2_USBStallEndpoint
 46115                           
 46116                           ;usb_device_msd.c: 1681: }
 46117  013580  0012               	return	
 46118  013582                     i2l780:
 46119  013582  C13C  F03B         	movff	_pBDTEntryOut+4,_MSDTransferTerminated$2623
 46120  013586  C13D  F03C         	movff	_pBDTEntryOut+5,_MSDTransferTerminated$2623+1
 46121  01358A  503B               	movf	_MSDTransferTerminated$2623,w,c
 46122  01358C  1839               	xorwf	MSDTransferTerminated@handle,w,c
 46123  01358E  E114               	bnz	i2l783
 46124  013590  503C               	movf	_MSDTransferTerminated$2623+1,w,c
 46125  013592  183A               	xorwf	MSDTransferTerminated@handle+1,w,c
 46126  013594  A4D8               	btfss	status,2,c
 46127  013596  0012               	return	
 46128                           
 46129                           ;usb_device_msd.c: 1687: {;usb_device_msd.c: 1688: USBMSDOutHandle = USBTransferOnePacke
      +                          t(2u,0,(uint8_t*)&msd_cbw,64u);
 46130  013598  0E00               	movlw	0
 46131  01359A  6E2E               	movwf	i2USBTransferOnePacket@dir,c
 46132  01359C  0E40               	movlw	64
 46133  01359E  6E2F               	movwf	i2USBTransferOnePacket@data,c
 46134  0135A0  0E0D               	movlw	13
 46135  0135A2  6E30               	movwf	i2USBTransferOnePacket@data+1,c
 46136  0135A4  0E40               	movlw	64
 46137  0135A6  6E31               	movwf	i2USBTransferOnePacket@len,c
 46138  0135A8  0E02               	movlw	2
 46139  0135AA  ECF7  F083         	call	i2_USBTransferOnePacket
 46140  0135AE  C02E  F0EF         	movff	?i2_USBTransferOnePacket,_USBMSDOutHandle
 46141  0135B2  C02F  F0F0         	movff	?i2_USBTransferOnePacket+1,_USBMSDOutHandle+1
 46142  0135B6  0012               	return	
 46143  0135B8                     i2l783:
 46144  0135B8  0012               	return		;funcret
 46145  0135BA                     __end_of_MSDTransferTerminated:
 46146                           	opt stack 0
 46147                           tosu	equ	0xFFF
 46148                           tosh	equ	0xFFE
 46149                           tosl	equ	0xFFD
 46150                           pclatu	equ	0xFFB
 46151                           pclath	equ	0xFFA
 46152                           tblptru	equ	0xFF8
 46153                           tblptrh	equ	0xFF7
 46154                           tblptrl	equ	0xFF6
 46155                           tablat	equ	0xFF5
 46156                           prodh	equ	0xFF4
 46157                           prodl	equ	0xFF3
 46158                           intcon	equ	0xFF2
 46159                           indf0	equ	0xFEF
 46160                           postinc0	equ	0xFEE
 46161                           fsr0h	equ	0xFEA
 46162                           fsr0l	equ	0xFE9
 46163                           wreg	equ	0xFE8
 46164                           indf1	equ	0xFE7
 46165                           postinc1	equ	0xFE6
 46166                           postdec1	equ	0xFE5
 46167                           plusw1	equ	0xFE3
 46168                           fsr1h	equ	0xFE2
 46169                           fsr1l	equ	0xFE1
 46170                           indf2	equ	0xFDF
 46171                           postinc2	equ	0xFDE
 46172                           postdec2	equ	0xFDD
 46173                           plusw2	equ	0xFDB
 46174                           fsr2h	equ	0xFDA
 46175                           fsr2l	equ	0xFD9
 46176                           status	equ	0xFD8
 46177                           
 46178 ;; *************** function i2_USBStallEndpoint *****************
 46179 ;; Defined at:
 46180 ;;		line 1073 in file "usb_device.c"
 46181 ;; Parameters:    Size  Location     Type
 46182 ;;  ep              1    wreg     unsigned char 
 46183 ;;  dir             1    0[COMRAM] unsigned char 
 46184 ;; Auto vars:     Size  Location     Type
 46185 ;;  ep              1    5[COMRAM] unsigned char 
 46186 ;;  USBStallEndp    2    6[COMRAM] PTR struct __BDT
 46187 ;;		 -> BDT(48), 
 46188 ;; Return value:  Size  Location     Type
 46189 ;;                  1    wreg      void 
 46190 ;; Registers used:
 46191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46192 ;; Tracked objects:
 46193 ;;		On entry : 0/0
 46194 ;;		On exit  : 0/0
 46195 ;;		Unchanged: 0/0
 46196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 46197 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46198 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46199 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46200 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46201 ;;Total ram usage:        8 bytes
 46202 ;; Hardware stack levels used:    1
 46203 ;; This function calls:
 46204 ;;		Nothing
 46205 ;; This function is called by:
 46206 ;;		_MSDTransferTerminated
 46207 ;; This function uses a non-reentrant model
 46208 ;;
 46209                           
 46210                           	psect	text182
 46211  0105E4                     __ptext182:
 46212                           	opt stack 0
 46213  0105E4                     i2_USBStallEndpoint:
 46214                           	opt stack 14
 46215                           
 46216                           ;incstack = 0
 46217                           ;i2USBStallEndpoint@ep stored from wreg
 46218  0105E4  6E33               	movwf	i2USBStallEndpoint@ep,c
 46219                           
 46220                           ;usb_device.c: 1075: BDT_ENTRY *p;;usb_device.c: 1077: if(ep == 0)
 46221  0105E6  5033               	movf	i2USBStallEndpoint@ep,w,c
 46222  0105E8  A4D8               	btfss	status,2,c
 46223  0105EA  D02B               	goto	i2l192
 46224                           
 46225                           ;usb_device.c: 1078: {;usb_device.c: 1082: pBDTEntryEP0OutNext->CNT = 8;
 46226  0105EC  EE20 F001          	lfsr	2,1
 46227  0105F0  501A               	movf	_pBDTEntryEP0OutNext,w,c
 46228  0105F2  26D9               	addwf	fsr2l,f,c
 46229  0105F4  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 46230  0105F6  22DA               	addwfc	fsr2h,f,c
 46231  0105F8  0E08               	movlw	8
 46232  0105FA  6EDF               	movwf	indf2,c
 46233                           
 46234                           ;usb_device.c: 1083: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 46235  0105FC  EE20 F002          	lfsr	2,2
 46236  010600  501A               	movf	_pBDTEntryEP0OutNext,w,c
 46237  010602  26D9               	addwf	fsr2l,f,c
 46238  010604  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 46239  010606  22DA               	addwfc	fsr2h,f,c
 46240  010608  0E30               	movlw	48
 46241  01060A  6EDE               	movwf	postinc2,c
 46242  01060C  0E0D               	movlw	13
 46243  01060E  6EDD               	movwf	postdec2,c
 46244                           
 46245                           ;usb_device.c: 1084: pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 46246  010610  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 46247  010614  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 46248  010618  0E0C               	movlw	12
 46249  01061A  6EDF               	movwf	indf2,c
 46250                           
 46251                           ;usb_device.c: 1085: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 46252  01061C  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 46253  010620  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 46254  010624  0E00               	movlw	0
 46255  010626  8EDB               	bsf	plusw2,7,c
 46256                           
 46257                           ;usb_device.c: 1086: pBDTEntryIn[0]->STAT.Val = 0x04;
 46258  010628  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 46259  01062C  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 46260  010630  0E04               	movlw	4
 46261  010632  6EDF               	movwf	indf2,c
 46262                           
 46263                           ;usb_device.c: 1087: pBDTEntryIn[0]->STAT.Val |= 0x80;
 46264  010634  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 46265  010638  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 46266  01063C  0E00               	movlw	0
 46267  01063E  8EDB               	bsf	plusw2,7,c
 46268                           
 46269                           ;usb_device.c: 1089: }
 46270  010640  0012               	return	
 46271  010642                     i2l192:
 46272                           
 46273                           ;usb_device.c: 1090: else;usb_device.c: 1091: {;usb_device.c: 1092: p = (BDT_ENTRY*)(&BD
      +                          T[(4*ep+2*dir+0)]);
 46274  010642  502E               	movf	i2USBStallEndpoint@dir,w,c
 46275  010644  6E2F               	movwf	??i2_USBStallEndpoint& (0+255),c
 46276  010646  6A30               	clrf	(??i2_USBStallEndpoint+1)& (0+255),c
 46277  010648  90D8               	bcf	status,0,c
 46278  01064A  362F               	rlcf	??i2_USBStallEndpoint,f,c
 46279  01064C  3630               	rlcf	??i2_USBStallEndpoint+1,f,c
 46280  01064E  5033               	movf	i2USBStallEndpoint@ep,w,c
 46281  010650  6E31               	movwf	(??i2_USBStallEndpoint+2)& (0+255),c
 46282  010652  6A32               	clrf	(??i2_USBStallEndpoint+3)& (0+255),c
 46283  010654  90D8               	bcf	status,0,c
 46284  010656  3631               	rlcf	??i2_USBStallEndpoint+2,f,c
 46285  010658  3632               	rlcf	??i2_USBStallEndpoint+3,f,c
 46286  01065A  90D8               	bcf	status,0,c
 46287  01065C  3631               	rlcf	??i2_USBStallEndpoint+2,f,c
 46288  01065E  3632               	rlcf	??i2_USBStallEndpoint+3,f,c
 46289  010660  502F               	movf	??i2_USBStallEndpoint,w,c
 46290  010662  2631               	addwf	??i2_USBStallEndpoint+2,f,c
 46291  010664  5030               	movf	??i2_USBStallEndpoint+1,w,c
 46292  010666  2232               	addwfc	??i2_USBStallEndpoint+3,f,c
 46293  010668  90D8               	bcf	status,0,c
 46294  01066A  3631               	rlcf	??i2_USBStallEndpoint+2,f,c
 46295  01066C  3632               	rlcf	??i2_USBStallEndpoint+3,f,c
 46296  01066E  90D8               	bcf	status,0,c
 46297  010670  3631               	rlcf	??i2_USBStallEndpoint+2,f,c
 46298  010672  3632               	rlcf	??i2_USBStallEndpoint+3,f,c
 46299  010674  0E00               	movlw	0
 46300  010676  2431               	addwf	??i2_USBStallEndpoint+2,w,c
 46301  010678  6E34               	movwf	i2USBStallEndpoint@p,c
 46302  01067A  0E0D               	movlw	13
 46303  01067C  2032               	addwfc	??i2_USBStallEndpoint+3,w,c
 46304  01067E  6E35               	movwf	i2USBStallEndpoint@p+1,c
 46305                           
 46306                           ;usb_device.c: 1093: p->STAT.Val |= 0x04;
 46307  010680  C034  FFD9         	movff	i2USBStallEndpoint@p,fsr2l
 46308  010684  C035  FFDA         	movff	i2USBStallEndpoint@p+1,fsr2h
 46309  010688  0E00               	movlw	0
 46310  01068A  84DB               	bsf	plusw2,2,c
 46311                           
 46312                           ;usb_device.c: 1094: p->STAT.Val |= 0x80;
 46313  01068C  C034  FFD9         	movff	i2USBStallEndpoint@p,fsr2l
 46314  010690  C035  FFDA         	movff	i2USBStallEndpoint@p+1,fsr2h
 46315  010694  0E00               	movlw	0
 46316  010696  8EDB               	bsf	plusw2,7,c
 46317                           
 46318                           ;usb_device.c: 1099: p = (BDT_ENTRY*)(&BDT[(4*ep+2*dir+1)]);
 46319  010698  5033               	movf	i2USBStallEndpoint@ep,w,c
 46320  01069A  0D04               	mullw	4
 46321  01069C  CFF3 F02F          	movff	prodl,??i2_USBStallEndpoint
 46322  0106A0  CFF4 F030          	movff	prodh,??i2_USBStallEndpoint+1
 46323  0106A4  502E               	movf	i2USBStallEndpoint@dir,w,c
 46324  0106A6  0D02               	mullw	2
 46325  0106A8  50F3               	movf	prodl,w,c
 46326  0106AA  262F               	addwf	??i2_USBStallEndpoint,f,c
 46327  0106AC  50F4               	movf	prodh,w,c
 46328  0106AE  2230               	addwfc	??i2_USBStallEndpoint+1,f,c
 46329  0106B0  90D8               	bcf	status,0,c
 46330  0106B2  362F               	rlcf	??i2_USBStallEndpoint,f,c
 46331  0106B4  3630               	rlcf	??i2_USBStallEndpoint+1,f,c
 46332  0106B6  90D8               	bcf	status,0,c
 46333  0106B8  362F               	rlcf	??i2_USBStallEndpoint,f,c
 46334  0106BA  3630               	rlcf	??i2_USBStallEndpoint+1,f,c
 46335  0106BC  0E04               	movlw	4
 46336  0106BE  262F               	addwf	??i2_USBStallEndpoint,f,c
 46337  0106C0  0E00               	movlw	0
 46338  0106C2  2230               	addwfc	??i2_USBStallEndpoint+1,f,c
 46339  0106C4  0E00               	movlw	0
 46340  0106C6  242F               	addwf	??i2_USBStallEndpoint,w,c
 46341  0106C8  6E34               	movwf	i2USBStallEndpoint@p,c
 46342  0106CA  0E0D               	movlw	13
 46343  0106CC  2030               	addwfc	??i2_USBStallEndpoint+1,w,c
 46344  0106CE  6E35               	movwf	i2USBStallEndpoint@p+1,c
 46345                           
 46346                           ;usb_device.c: 1100: p->STAT.Val |= 0x04;
 46347  0106D0  C034  FFD9         	movff	i2USBStallEndpoint@p,fsr2l
 46348  0106D4  C035  FFDA         	movff	i2USBStallEndpoint@p+1,fsr2h
 46349  0106D8  0E00               	movlw	0
 46350  0106DA  84DB               	bsf	plusw2,2,c
 46351                           
 46352                           ;usb_device.c: 1101: p->STAT.Val |= 0x80;
 46353  0106DC  C034  FFD9         	movff	i2USBStallEndpoint@p,fsr2l
 46354  0106E0  C035  FFDA         	movff	i2USBStallEndpoint@p+1,fsr2h
 46355  0106E4  0E00               	movlw	0
 46356  0106E6  8EDB               	bsf	plusw2,7,c
 46357  0106E8  0012               	return	
 46358  0106EA                     __end_ofi2_USBStallEndpoint:
 46359                           	opt stack 0
 46360                           tosu	equ	0xFFF
 46361                           tosh	equ	0xFFE
 46362                           tosl	equ	0xFFD
 46363                           pclatu	equ	0xFFB
 46364                           pclath	equ	0xFFA
 46365                           tblptru	equ	0xFF8
 46366                           tblptrh	equ	0xFF7
 46367                           tblptrl	equ	0xFF6
 46368                           tablat	equ	0xFF5
 46369                           prodh	equ	0xFF4
 46370                           prodl	equ	0xFF3
 46371                           intcon	equ	0xFF2
 46372                           indf0	equ	0xFEF
 46373                           postinc0	equ	0xFEE
 46374                           fsr0h	equ	0xFEA
 46375                           fsr0l	equ	0xFE9
 46376                           wreg	equ	0xFE8
 46377                           indf1	equ	0xFE7
 46378                           postinc1	equ	0xFE6
 46379                           postdec1	equ	0xFE5
 46380                           plusw1	equ	0xFE3
 46381                           fsr1h	equ	0xFE2
 46382                           fsr1l	equ	0xFE1
 46383                           indf2	equ	0xFDF
 46384                           postinc2	equ	0xFDE
 46385                           postdec2	equ	0xFDD
 46386                           plusw2	equ	0xFDB
 46387                           fsr2h	equ	0xFDA
 46388                           fsr2l	equ	0xFD9
 46389                           status	equ	0xFD8
 46390                           
 46391 ;; *************** function _APP_DeviceMSDInitialize *****************
 46392 ;; Defined at:
 46393 ;;		line 84 in file "app_device_msd.c"
 46394 ;; Parameters:    Size  Location     Type
 46395 ;;		None
 46396 ;; Auto vars:     Size  Location     Type
 46397 ;;		None
 46398 ;; Return value:  Size  Location     Type
 46399 ;;                  1    wreg      void 
 46400 ;; Registers used:
 46401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 46402 ;; Tracked objects:
 46403 ;;		On entry : 0/0
 46404 ;;		On exit  : 0/0
 46405 ;;		Unchanged: 0/0
 46406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 46407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46411 ;;Total ram usage:        0 bytes
 46412 ;; Hardware stack levels used:    1
 46413 ;; Hardware stack levels required when called:    2
 46414 ;; This function calls:
 46415 ;;		_USBEnableEndpoint
 46416 ;;		_USBMSDInit
 46417 ;; This function is called by:
 46418 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 46419 ;; This function uses a non-reentrant model
 46420 ;;
 46421                           
 46422                           	psect	text183
 46423  0142D4                     __ptext183:
 46424                           	opt stack 0
 46425  0142D4                     _APP_DeviceMSDInitialize:
 46426                           	opt stack 13
 46427                           
 46428                           ;app_device_msd.c: 87: USBEnableEndpoint(2u,0x02|0x04|0x10|0x08);
 46429                           
 46430                           ;incstack = 0
 46431  0142D4  0E1E               	movlw	30
 46432  0142D6  6E36               	movwf	USBEnableEndpoint@options,c
 46433  0142D8  0E02               	movlw	2
 46434  0142DA  ECE4  F09D         	call	_USBEnableEndpoint
 46435                           
 46436                           ;app_device_msd.c: 93: USBMSDInit();
 46437  0142DE  ECEA  F081         	call	_USBMSDInit	;wreg free
 46438  0142E2  0012               	return		;funcret
 46439  0142E4                     __end_of_APP_DeviceMSDInitialize:
 46440                           	opt stack 0
 46441                           tosu	equ	0xFFF
 46442                           tosh	equ	0xFFE
 46443                           tosl	equ	0xFFD
 46444                           pclatu	equ	0xFFB
 46445                           pclath	equ	0xFFA
 46446                           tblptru	equ	0xFF8
 46447                           tblptrh	equ	0xFF7
 46448                           tblptrl	equ	0xFF6
 46449                           tablat	equ	0xFF5
 46450                           prodh	equ	0xFF4
 46451                           prodl	equ	0xFF3
 46452                           intcon	equ	0xFF2
 46453                           indf0	equ	0xFEF
 46454                           postinc0	equ	0xFEE
 46455                           fsr0h	equ	0xFEA
 46456                           fsr0l	equ	0xFE9
 46457                           wreg	equ	0xFE8
 46458                           indf1	equ	0xFE7
 46459                           postinc1	equ	0xFE6
 46460                           postdec1	equ	0xFE5
 46461                           plusw1	equ	0xFE3
 46462                           fsr1h	equ	0xFE2
 46463                           fsr1l	equ	0xFE1
 46464                           indf2	equ	0xFDF
 46465                           postinc2	equ	0xFDE
 46466                           postdec2	equ	0xFDD
 46467                           plusw2	equ	0xFDB
 46468                           fsr2h	equ	0xFDA
 46469                           fsr2l	equ	0xFD9
 46470                           status	equ	0xFD8
 46471                           
 46472 ;; *************** function _USBMSDInit *****************
 46473 ;; Defined at:
 46474 ;;		line 142 in file "usb_device_msd.c"
 46475 ;; Parameters:    Size  Location     Type
 46476 ;;		None
 46477 ;; Auto vars:     Size  Location     Type
 46478 ;;		None
 46479 ;; Return value:  Size  Location     Type
 46480 ;;                  1    wreg      void 
 46481 ;; Registers used:
 46482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 46483 ;; Tracked objects:
 46484 ;;		On entry : 0/0
 46485 ;;		On exit  : 0/0
 46486 ;;		Unchanged: 0/0
 46487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 46488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46490 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46491 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46492 ;;Total ram usage:        3 bytes
 46493 ;; Hardware stack levels used:    1
 46494 ;; Hardware stack levels required when called:    1
 46495 ;; This function calls:
 46496 ;;		i2_ExternalFlash_MediaDetect
 46497 ;;		i2_ExternalFlash_MediaInitialize
 46498 ;;		i2_ResetSenseData
 46499 ;;		i2_USBTransferOnePacket
 46500 ;; This function is called by:
 46501 ;;		_APP_DeviceMSDInitialize
 46502 ;; This function uses a non-reentrant model
 46503 ;;
 46504                           
 46505                           	psect	text184
 46506  0103D4                     __ptext184:
 46507                           	opt stack 0
 46508  0103D4                     _USBMSDInit:
 46509                           	opt stack 13
 46510                           
 46511                           ;usb_device_msd.c: 147: USBMSDInHandle = ((1 == 0)?((void*)pBDTEntryOut[2u]):((void*)pBD
      +                          TEntryIn[2u]));
 46512                           
 46513                           ;incstack = 0
 46514  0103D4  0E00               	movlw	0
 46515  0103D6  6E2E               	movwf	i2USBTransferOnePacket@dir,c
 46516  0103D8  0E40               	movlw	64
 46517  0103DA  6E2F               	movwf	i2USBTransferOnePacket@data,c
 46518  0103DC  0E0D               	movlw	13
 46519  0103DE  6E30               	movwf	i2USBTransferOnePacket@data+1,c
 46520  0103E0  0E40               	movlw	64
 46521  0103E2  6E31               	movwf	i2USBTransferOnePacket@len,c
 46522  0103E4  0E02               	movlw	2
 46523  0103E6  ECF7  F083         	call	i2_USBTransferOnePacket
 46524  0103EA  C02E  F0EF         	movff	?i2_USBTransferOnePacket,_USBMSDOutHandle
 46525  0103EE  C02F  F0F0         	movff	?i2_USBTransferOnePacket+1,_USBMSDOutHandle+1
 46526  0103F2  C014  F0ED         	movff	_pBDTEntryIn+4,_USBMSDInHandle
 46527  0103F6  C015  F0EE         	movff	_pBDTEntryIn+5,_USBMSDInHandle+1
 46528                           
 46529                           ;usb_device_msd.c: 148: MSD_State = 0x00;
 46530  0103FA  0E00               	movlw	0
 46531  0103FC  0100               	movlb	0	; () banked
 46532  0103FE  6FFA               	movwf	_MSD_State& (0+255),b
 46533                           
 46534                           ; BSR set to: 0
 46535                           ;usb_device_msd.c: 149: MSDCommandState = 0xFF;
 46536  010400  69F9               	setf	_MSDCommandState& (0+255),b
 46537                           
 46538                           ; BSR set to: 0
 46539                           ;usb_device_msd.c: 150: MSDReadState = 0x00;
 46540  010402  0E00               	movlw	0
 46541  010404  6FF8               	movwf	_MSDReadState& (0+255),b
 46542                           
 46543                           ; BSR set to: 0
 46544                           ;usb_device_msd.c: 151: MSDWriteState = 0x00;
 46545  010406  0E00               	movlw	0
 46546  010408  6E21               	movwf	_MSDWriteState,c
 46547                           
 46548                           ; BSR set to: 0
 46549                           ;usb_device_msd.c: 152: MSDHostNoData = 0;
 46550  01040A  0E00               	movlw	0
 46551  01040C  6FF5               	movwf	_MSDHostNoData& (0+255),b
 46552                           
 46553                           ; BSR set to: 0
 46554                           ;usb_device_msd.c: 153: gblNumBLKS.Val = 0;
 46555  01040E  0E00               	movlw	0
 46556  010410  0101               	movlb	1	; () banked
 46557  010412  6F4A               	movwf	_gblNumBLKS& (0+255),b
 46558  010414  0E00               	movlw	0
 46559  010416  6F4B               	movwf	(_gblNumBLKS+1)& (0+255),b
 46560  010418  0E00               	movlw	0
 46561  01041A  6F4C               	movwf	(_gblNumBLKS+2)& (0+255),b
 46562  01041C  0E00               	movlw	0
 46563  01041E  6F4D               	movwf	(_gblNumBLKS+3)& (0+255),b
 46564                           
 46565                           ; BSR set to: 1
 46566                           ;usb_device_msd.c: 154: gblBLKLen.Val = 0;
 46567  010420  0E00               	movlw	0
 46568  010422  6F46               	movwf	_gblBLKLen& (0+255),b
 46569  010424  0E00               	movlw	0
 46570  010426  6F47               	movwf	(_gblBLKLen+1)& (0+255),b
 46571  010428  0E00               	movlw	0
 46572  01042A  6F48               	movwf	(_gblBLKLen+2)& (0+255),b
 46573  01042C  0E00               	movlw	0
 46574  01042E  6F49               	movwf	(_gblBLKLen+3)& (0+255),b
 46575                           
 46576                           ; BSR set to: 1
 46577                           ;usb_device_msd.c: 155: MSDCBWValid = 1;
 46578  010430  0E01               	movlw	1
 46579  010432  6F71               	movwf	_MSDCBWValid& (0+255),b
 46580                           
 46581                           ; BSR set to: 1
 46582                           ;usb_device_msd.c: 157: gblMediaPresent = 0;
 46583  010434  0E00               	movlw	0
 46584  010436  6F69               	movwf	(_gblMediaPresent+1)& (0+255),b
 46585  010438  0E00               	movlw	0
 46586  01043A  6F68               	movwf	_gblMediaPresent& (0+255),b
 46587                           
 46588                           ; BSR set to: 1
 46589                           ;usb_device_msd.c: 160: for(gblCBW.bCBWLUN=0;gblCBW.bCBWLUN<(0u + 1);gblCBW.bCBWLUN++)
 46590  01043C  0E00               	movlw	0
 46591  01043E  6F0D               	movwf	(_gblCBW+13)& (0+255),b
 46592  010440  D04A               	goto	i2l534
 46593  010442                     
 46594                           ; BSR set to: 1
 46595                           ;usb_device_msd.c: 161: {;usb_device_msd.c: 163: SoftDetach[gblCBW.bCBWLUN] = 0;
 46596                           
 46597                           ; BSR set to: 1
 46598  010442  510D               	movf	(_gblCBW+13)& (0+255),w,b
 46599  010444  0D01               	mullw	1
 46600  010446  0EF6               	movlw	low _SoftDetach
 46601  010448  24F3               	addwf	prodl,w,c
 46602  01044A  6ED9               	movwf	fsr2l,c
 46603  01044C  0E00               	movlw	high _SoftDetach
 46604  01044E  20F4               	addwfc	prodh,w,c
 46605  010450  6EDA               	movwf	fsr2h,c
 46606  010452  0E00               	movlw	0
 46607  010454  6EDF               	movwf	indf2,c
 46608                           
 46609                           ; BSR set to: 1
 46610                           ;usb_device_msd.c: 166: if(LUN[0].MediaDetect(LUN[0].mediaParameters))
 46611  010456  C1D6  F02E         	movff	_LUN+21,i2ExternalFlash_MediaDetect@config
 46612  01045A  C1D7  F02F         	movff	_LUN+22,i2ExternalFlash_MediaDetect@config+1
 46613  01045E  EE21  F0CA         	lfsr	2,_LUN+9
 46614  010462  D801               	call	i2u1762_48
 46615  010464  D00A               	goto	i2u1762_49
 46616  010466                     i2u1762_48:
 46617  010466  0005               	push	
 46618  010468  6EFA               	movwf	pclath,c
 46619  01046A  50DE               	movf	postinc2,w,c
 46620  01046C  6EFD               	movwf	tosl,c
 46621  01046E  50DE               	movf	postinc2,w,c
 46622  010470  6EFE               	movwf	tosh,c
 46623  010472  50DE               	movf	postinc2,w,c
 46624  010474  6EFF               	movwf	tosu,c
 46625  010476  50FA               	movf	pclath,w,c
 46626  010478  0012               	return		;indir
 46627  01047A                     i2u1762_49:
 46628  01047A  0900               	iorlw	0
 46629  01047C  B4D8               	btfsc	status,2,c
 46630  01047E  D027               	goto	i2l537
 46631                           
 46632                           ;usb_device_msd.c: 167: {;usb_device_msd.c: 169: if(LUN[0].MediaInitialize(LUN[0].mediaP
      +                          arameters))
 46633  010480  C1D6  F02E         	movff	_LUN+21,i2ExternalFlash_MediaInitialize@config
 46634  010484  C1D7  F02F         	movff	_LUN+22,i2ExternalFlash_MediaInitialize@config+1
 46635  010488  D801               	call	i2u1764_48
 46636  01048A  D00B               	goto	i2u1764_49
 46637  01048C                     i2u1764_48:
 46638  01048C  0005               	push	
 46639  01048E  6EFA               	movwf	pclath,c
 46640  010490  0101               	movlb	1	; () banked
 46641  010492  51C1               	movf	_LUN& (0+255),w,b
 46642  010494  6EFD               	movwf	tosl,c
 46643  010496  51C2               	movf	(_LUN+1)& (0+255),w,b
 46644  010498  6EFE               	movwf	tosh,c
 46645  01049A  51C3               	movf	(_LUN+2)& (0+255),w,b
 46646  01049C  6EFF               	movwf	tosu,c
 46647  01049E  50FA               	movf	pclath,w,c
 46648  0104A0  0012               	return		;indir
 46649  0104A2                     i2u1764_49:
 46650  0104A2  502E               	movf	?i2_ExternalFlash_MediaInitialize,w,c
 46651  0104A4  102F               	iorwf	?i2_ExternalFlash_MediaInitialize+1,w,c
 46652  0104A6  B4D8               	btfsc	status,2,c
 46653  0104A8  D012               	goto	i2l537
 46654                           
 46655                           ;usb_device_msd.c: 170: {;usb_device_msd.c: 173: gblMediaPresent |= ((uint16_t)1<<gblCBW
      +                          .bCBWLUN);
 46656  0104AA  C10D  F039         	movff	_gblCBW+13,??_USBMSDInit
 46657  0104AE  0E01               	movlw	1
 46658  0104B0  6E3A               	movwf	(??_USBMSDInit+1)& (0+255),c
 46659  0104B2  0E00               	movlw	0
 46660  0104B4  6E3B               	movwf	(??_USBMSDInit+2)& (0+255),c
 46661  0104B6  2A39               	incf	??_USBMSDInit,f,c
 46662  0104B8  D003               	goto	i2u1766_44
 46663  0104BA                     i2u1766_45:
 46664  0104BA  90D8               	bcf	status,0,c
 46665  0104BC  363A               	rlcf	??_USBMSDInit+1,f,c
 46666  0104BE  363B               	rlcf	??_USBMSDInit+2,f,c
 46667  0104C0                     i2u1766_44:
 46668  0104C0  2E39               	decfsz	??_USBMSDInit,f,c
 46669  0104C2  D7FB               	goto	i2u1766_45
 46670  0104C4  503A               	movf	??_USBMSDInit+1,w,c
 46671  0104C6  0101               	movlb	1	; () banked
 46672  0104C8  1368               	iorwf	_gblMediaPresent& (0+255),f,b
 46673  0104CA  503B               	movf	??_USBMSDInit+2,w,c
 46674  0104CC  1369               	iorwf	(_gblMediaPresent+1)& (0+255),f,b
 46675  0104CE                     i2l537:
 46676                           
 46677                           ;usb_device_msd.c: 174: };usb_device_msd.c: 175: };usb_device_msd.c: 176: ResetSenseData
      +                          ();
 46678                           
 46679                           ; BSR set to: 1
 46680                           
 46681                           ; BSR set to: 1
 46682  0104CE  EC0B  F098         	call	i2_ResetSenseData	;wreg free
 46683  0104D2  0101               	movlb	1	; () banked
 46684  0104D4  2B0D               	incf	(_gblCBW+13)& (0+255),f,b
 46685  0104D6                     i2l534:
 46686                           
 46687                           ; BSR set to: 1
 46688                           
 46689                           ; BSR set to: 1
 46690  0104D6  510D               	movf	(_gblCBW+13)& (0+255),w,b
 46691  0104D8  A4D8               	btfss	status,2,c
 46692  0104DA  0012               	return	
 46693  0104DC  D7B2               	goto	i2l535
 46694  0104DE                     __end_of_USBMSDInit:
 46695                           	opt stack 0
 46696                           tosu	equ	0xFFF
 46697                           tosh	equ	0xFFE
 46698                           tosl	equ	0xFFD
 46699                           pclatu	equ	0xFFB
 46700                           pclath	equ	0xFFA
 46701                           tblptru	equ	0xFF8
 46702                           tblptrh	equ	0xFF7
 46703                           tblptrl	equ	0xFF6
 46704                           tablat	equ	0xFF5
 46705                           prodh	equ	0xFF4
 46706                           prodl	equ	0xFF3
 46707                           intcon	equ	0xFF2
 46708                           indf0	equ	0xFEF
 46709                           postinc0	equ	0xFEE
 46710                           fsr0h	equ	0xFEA
 46711                           fsr0l	equ	0xFE9
 46712                           wreg	equ	0xFE8
 46713                           indf1	equ	0xFE7
 46714                           postinc1	equ	0xFE6
 46715                           postdec1	equ	0xFE5
 46716                           plusw1	equ	0xFE3
 46717                           fsr1h	equ	0xFE2
 46718                           fsr1l	equ	0xFE1
 46719                           indf2	equ	0xFDF
 46720                           postinc2	equ	0xFDE
 46721                           postdec2	equ	0xFDD
 46722                           plusw2	equ	0xFDB
 46723                           fsr2h	equ	0xFDA
 46724                           fsr2l	equ	0xFD9
 46725                           status	equ	0xFD8
 46726                           
 46727 ;; *************** function i2_ResetSenseData *****************
 46728 ;; Defined at:
 46729 ;;		line 1373 in file "usb_device_msd.c"
 46730 ;; Parameters:    Size  Location     Type
 46731 ;;		None
 46732 ;; Auto vars:     Size  Location     Type
 46733 ;;		None
 46734 ;; Return value:  Size  Location     Type
 46735 ;;                  1    wreg      void 
 46736 ;; Registers used:
 46737 ;;		wreg, status,2
 46738 ;; Tracked objects:
 46739 ;;		On entry : 0/0
 46740 ;;		On exit  : 0/0
 46741 ;;		Unchanged: 0/0
 46742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 46743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46747 ;;Total ram usage:        0 bytes
 46748 ;; Hardware stack levels used:    1
 46749 ;; This function calls:
 46750 ;;		Nothing
 46751 ;; This function is called by:
 46752 ;;		_USBMSDInit
 46753 ;; This function uses a non-reentrant model
 46754 ;;
 46755                           
 46756                           	psect	text185
 46757  013016                     __ptext185:
 46758                           	opt stack 0
 46759  013016                     i2_ResetSenseData:
 46760                           	opt stack 13
 46761                           
 46762                           ;usb_device_msd.c: 1375: gblSenseData[0].ResponseCode=0x70;
 46763                           
 46764                           ; BSR set to: 1
 46765                           ;incstack = 0
 46766  013016  0101               	movlb	1	; () banked
 46767  013018  911F               	bcf	_gblSenseData& (0+255),0,b
 46768  01301A  931F               	bcf	_gblSenseData& (0+255),1,b
 46769  01301C  951F               	bcf	_gblSenseData& (0+255),2,b
 46770  01301E  971F               	bcf	_gblSenseData& (0+255),3,b
 46771  013020  891F               	bsf	_gblSenseData& (0+255),4,b
 46772  013022  8B1F               	bsf	_gblSenseData& (0+255),5,b
 46773  013024  8D1F               	bsf	_gblSenseData& (0+255),6,b
 46774                           
 46775                           ;usb_device_msd.c: 1376: gblSenseData[0].VALID=0;
 46776  013026  9F1F               	bcf	_gblSenseData& (0+255),7,b
 46777                           
 46778                           ; BSR set to: 1
 46779                           ;usb_device_msd.c: 1377: gblSenseData[0].Obsolete=0x0;
 46780  013028  0E00               	movlw	0
 46781  01302A  6F20               	movwf	(_gblSenseData+1)& (0+255),b
 46782                           
 46783                           ; BSR set to: 1
 46784                           ;usb_device_msd.c: 1378: gblSenseData[0].SenseKey=0x0;
 46785  01302C  9121               	bcf	(_gblSenseData+2)& (0+255),0,b
 46786  01302E  9321               	bcf	(_gblSenseData+2)& (0+255),1,b
 46787  013030  9521               	bcf	(_gblSenseData+2)& (0+255),2,b
 46788  013032  9721               	bcf	(_gblSenseData+2)& (0+255),3,b
 46789                           
 46790                           ; BSR set to: 1
 46791                           ;usb_device_msd.c: 1380: gblSenseData[0].ILI=0;
 46792  013034  9B21               	bcf	(_gblSenseData+2)& (0+255),5,b
 46793                           
 46794                           ; BSR set to: 1
 46795                           ;usb_device_msd.c: 1381: gblSenseData[0].EOM=0;
 46796  013036  9D21               	bcf	(_gblSenseData+2)& (0+255),6,b
 46797                           
 46798                           ; BSR set to: 1
 46799                           ;usb_device_msd.c: 1382: gblSenseData[0].FILEMARK=0;
 46800  013038  9F21               	bcf	(_gblSenseData+2)& (0+255),7,b
 46801                           
 46802                           ;usb_device_msd.c: 1383: gblSenseData[0].InformationB0=0x00;
 46803  01303A  0E00               	movlw	0
 46804  01303C  6F22               	movwf	(_gblSenseData+3)& (0+255),b
 46805                           
 46806                           ;usb_device_msd.c: 1384: gblSenseData[0].InformationB1=0x00;
 46807  01303E  0E00               	movlw	0
 46808  013040  6F23               	movwf	(_gblSenseData+4)& (0+255),b
 46809                           
 46810                           ;usb_device_msd.c: 1385: gblSenseData[0].InformationB2=0x00;
 46811  013042  0E00               	movlw	0
 46812  013044  6F24               	movwf	(_gblSenseData+5)& (0+255),b
 46813                           
 46814                           ;usb_device_msd.c: 1386: gblSenseData[0].InformationB3=0x00;
 46815  013046  0E00               	movlw	0
 46816  013048  6F25               	movwf	(_gblSenseData+6)& (0+255),b
 46817                           
 46818                           ;usb_device_msd.c: 1387: gblSenseData[0].AddSenseLen=0x0a;
 46819  01304A  0E0A               	movlw	10
 46820  01304C  6F26               	movwf	(_gblSenseData+7)& (0+255),b
 46821                           
 46822                           ;usb_device_msd.c: 1388: gblSenseData[0].CmdSpecificInfo.Val=0x0;
 46823  01304E  0E00               	movlw	0
 46824  013050  6F27               	movwf	(_gblSenseData+8)& (0+255),b
 46825  013052  0E00               	movlw	0
 46826  013054  6F28               	movwf	(_gblSenseData+9)& (0+255),b
 46827  013056  0E00               	movlw	0
 46828  013058  6F29               	movwf	(_gblSenseData+10)& (0+255),b
 46829  01305A  0E00               	movlw	0
 46830  01305C  6F2A               	movwf	(_gblSenseData+11)& (0+255),b
 46831                           
 46832                           ;usb_device_msd.c: 1389: gblSenseData[0].ASC=0x0;
 46833  01305E  0E00               	movlw	0
 46834  013060  6F2B               	movwf	(_gblSenseData+12)& (0+255),b
 46835                           
 46836                           ;usb_device_msd.c: 1390: gblSenseData[0].ASCQ=0x0;
 46837  013062  0E00               	movlw	0
 46838  013064  6F2C               	movwf	(_gblSenseData+13)& (0+255),b
 46839                           
 46840                           ;usb_device_msd.c: 1391: gblSenseData[0].FRUC=0x0;
 46841  013066  0E00               	movlw	0
 46842  013068  6F2D               	movwf	(_gblSenseData+14)& (0+255),b
 46843                           
 46844                           ;usb_device_msd.c: 1392: gblSenseData[0].SenseKeySpecific[0]=0x0;
 46845  01306A  0E00               	movlw	0
 46846  01306C  6F2E               	movwf	(_gblSenseData+15)& (0+255),b
 46847                           
 46848                           ;usb_device_msd.c: 1393: gblSenseData[0].SenseKeySpecific[1]=0x0;
 46849  01306E  0E00               	movlw	0
 46850  013070  6F2F               	movwf	(_gblSenseData+16)& (0+255),b
 46851                           
 46852                           ;usb_device_msd.c: 1394: gblSenseData[0].SenseKeySpecific[2]=0x0;
 46853  013072  0E00               	movlw	0
 46854  013074  6F30               	movwf	(_gblSenseData+17)& (0+255),b
 46855                           
 46856                           ; BSR set to: 1
 46857  013076  0012               	return		;funcret
 46858  013078                     __end_ofi2_ResetSenseData:
 46859                           	opt stack 0
 46860                           tosu	equ	0xFFF
 46861                           tosh	equ	0xFFE
 46862                           tosl	equ	0xFFD
 46863                           pclatu	equ	0xFFB
 46864                           pclath	equ	0xFFA
 46865                           tblptru	equ	0xFF8
 46866                           tblptrh	equ	0xFF7
 46867                           tblptrl	equ	0xFF6
 46868                           tablat	equ	0xFF5
 46869                           prodh	equ	0xFF4
 46870                           prodl	equ	0xFF3
 46871                           intcon	equ	0xFF2
 46872                           indf0	equ	0xFEF
 46873                           postinc0	equ	0xFEE
 46874                           fsr0h	equ	0xFEA
 46875                           fsr0l	equ	0xFE9
 46876                           wreg	equ	0xFE8
 46877                           indf1	equ	0xFE7
 46878                           postinc1	equ	0xFE6
 46879                           postdec1	equ	0xFE5
 46880                           plusw1	equ	0xFE3
 46881                           fsr1h	equ	0xFE2
 46882                           fsr1l	equ	0xFE1
 46883                           indf2	equ	0xFDF
 46884                           postinc2	equ	0xFDE
 46885                           postdec2	equ	0xFDD
 46886                           plusw2	equ	0xFDB
 46887                           fsr2h	equ	0xFDA
 46888                           fsr2l	equ	0xFD9
 46889                           status	equ	0xFD8
 46890                           
 46891 ;; *************** function i2_ExternalFlash_MediaInitialize *****************
 46892 ;; Defined at:
 46893 ;;		line 10 in file "external_flash.c"
 46894 ;; Parameters:    Size  Location     Type
 46895 ;;  config          2    0[COMRAM] PTR void 
 46896 ;;		 -> NULL(0), 
 46897 ;; Auto vars:     Size  Location     Type
 46898 ;;		None
 46899 ;; Return value:  Size  Location     Type
 46900 ;;                  2    0[COMRAM] PTR struct .
 46901 ;; Registers used:
 46902 ;;		wreg, status,2, status,0
 46903 ;; Tracked objects:
 46904 ;;		On entry : 0/0
 46905 ;;		On exit  : 0/0
 46906 ;;		Unchanged: 0/0
 46907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 46908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46911 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 46912 ;;Total ram usage:        2 bytes
 46913 ;; Hardware stack levels used:    1
 46914 ;; This function calls:
 46915 ;;		Nothing
 46916 ;; This function is called by:
 46917 ;;		_USBMSDInit
 46918 ;;		_MSDProcessCommand
 46919 ;; This function uses a non-reentrant model
 46920 ;;
 46921                           
 46922                           	psect	text186
 46923  01425E                     __ptext186:
 46924                           	opt stack 0
 46925  01425E                     i2_ExternalFlash_MediaInitialize:
 46926                           	opt stack 13
 46927                           
 46928                           ;external_flash.c: 12: mediaInformation.validityFlags.bits.sectorSize = 1;
 46929                           
 46930                           ; BSR set to: 1
 46931                           ;incstack = 0
 46932  01425E  0101               	movlb	1	; () banked
 46933  014260  81BA               	bsf	(_mediaInformation+1)& (0+255),0,b
 46934                           
 46935                           ; BSR set to: 1
 46936                           ;external_flash.c: 13: mediaInformation.sectorSize = 512;
 46937  014262  0E02               	movlw	2
 46938  014264  6FBC               	movwf	(_mediaInformation+3)& (0+255),b
 46939  014266  0E00               	movlw	0
 46940  014268  6FBB               	movwf	(_mediaInformation+2)& (0+255),b
 46941                           
 46942                           ;external_flash.c: 14: mediaInformation.errorCode = MEDIA_NO_ERROR;
 46943  01426A  0E00               	movlw	0
 46944  01426C  6FB9               	movwf	_mediaInformation& (0+255),b
 46945                           
 46946                           ; BSR set to: 1
 46947                           ;external_flash.c: 15: return &mediaInformation;
 46948  01426E  0EB9               	movlw	low _mediaInformation
 46949  014270  6E2E               	movwf	?i2_ExternalFlash_MediaInitialize,c
 46950  014272  0E01               	movlw	high _mediaInformation
 46951  014274  6E2F               	movwf	?i2_ExternalFlash_MediaInitialize+1,c
 46952  014276  0012               	return	
 46953  014278                     __end_ofi2_ExternalFlash_MediaInitialize:
 46954                           	opt stack 0
 46955                           tosu	equ	0xFFF
 46956                           tosh	equ	0xFFE
 46957                           tosl	equ	0xFFD
 46958                           pclatu	equ	0xFFB
 46959                           pclath	equ	0xFFA
 46960                           tblptru	equ	0xFF8
 46961                           tblptrh	equ	0xFF7
 46962                           tblptrl	equ	0xFF6
 46963                           tablat	equ	0xFF5
 46964                           prodh	equ	0xFF4
 46965                           prodl	equ	0xFF3
 46966                           intcon	equ	0xFF2
 46967                           indf0	equ	0xFEF
 46968                           postinc0	equ	0xFEE
 46969                           fsr0h	equ	0xFEA
 46970                           fsr0l	equ	0xFE9
 46971                           wreg	equ	0xFE8
 46972                           indf1	equ	0xFE7
 46973                           postinc1	equ	0xFE6
 46974                           postdec1	equ	0xFE5
 46975                           plusw1	equ	0xFE3
 46976                           fsr1h	equ	0xFE2
 46977                           fsr1l	equ	0xFE1
 46978                           indf2	equ	0xFDF
 46979                           postinc2	equ	0xFDE
 46980                           postdec2	equ	0xFDD
 46981                           plusw2	equ	0xFDB
 46982                           fsr2h	equ	0xFDA
 46983                           fsr2l	equ	0xFD9
 46984                           status	equ	0xFD8
 46985                           
 46986 ;; *************** function i2_ExternalFlash_MediaDetect *****************
 46987 ;; Defined at:
 46988 ;;		line 29 in file "external_flash.c"
 46989 ;; Parameters:    Size  Location     Type
 46990 ;;  config          2    0[COMRAM] PTR void 
 46991 ;;		 -> NULL(0), 
 46992 ;; Auto vars:     Size  Location     Type
 46993 ;;		None
 46994 ;; Return value:  Size  Location     Type
 46995 ;;                  1    wreg      unsigned char 
 46996 ;; Registers used:
 46997 ;;		wreg
 46998 ;; Tracked objects:
 46999 ;;		On entry : 0/0
 47000 ;;		On exit  : 0/0
 47001 ;;		Unchanged: 0/0
 47002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 47003 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47006 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47007 ;;Total ram usage:        2 bytes
 47008 ;; Hardware stack levels used:    1
 47009 ;; This function calls:
 47010 ;;		Nothing
 47011 ;; This function is called by:
 47012 ;;		_USBMSDInit
 47013 ;;		_MSDProcessCommand
 47014 ;; This function uses a non-reentrant model
 47015 ;;
 47016                           
 47017                           	psect	text187
 47018  014358                     __ptext187:
 47019                           	opt stack 0
 47020  014358                     i2_ExternalFlash_MediaDetect:
 47021                           	opt stack 13
 47022                           
 47023                           ;external_flash.c: 31: return 1;
 47024                           
 47025                           ; BSR set to: 1
 47026                           ;incstack = 0
 47027  014358  0E01               	movlw	1
 47028  01435A  0012               	return	
 47029  01435C                     __end_ofi2_ExternalFlash_MediaDetect:
 47030                           	opt stack 0
 47031                           tosu	equ	0xFFF
 47032                           tosh	equ	0xFFE
 47033                           tosl	equ	0xFFD
 47034                           pclatu	equ	0xFFB
 47035                           pclath	equ	0xFFA
 47036                           tblptru	equ	0xFF8
 47037                           tblptrh	equ	0xFF7
 47038                           tblptrl	equ	0xFF6
 47039                           tablat	equ	0xFF5
 47040                           prodh	equ	0xFF4
 47041                           prodl	equ	0xFF3
 47042                           intcon	equ	0xFF2
 47043                           indf0	equ	0xFEF
 47044                           postinc0	equ	0xFEE
 47045                           fsr0h	equ	0xFEA
 47046                           fsr0l	equ	0xFE9
 47047                           wreg	equ	0xFE8
 47048                           indf1	equ	0xFE7
 47049                           postinc1	equ	0xFE6
 47050                           postdec1	equ	0xFE5
 47051                           plusw1	equ	0xFE3
 47052                           fsr1h	equ	0xFE2
 47053                           fsr1l	equ	0xFE1
 47054                           indf2	equ	0xFDF
 47055                           postinc2	equ	0xFDE
 47056                           postdec2	equ	0xFDD
 47057                           plusw2	equ	0xFDB
 47058                           fsr2h	equ	0xFDA
 47059                           fsr2l	equ	0xFD9
 47060                           status	equ	0xFD8
 47061                           
 47062 ;; *************** function _APP_DeviceCustomHIDInitialize *****************
 47063 ;; Defined at:
 47064 ;;		line 46 in file "app_device_custom_hid.c"
 47065 ;; Parameters:    Size  Location     Type
 47066 ;;		None
 47067 ;; Auto vars:     Size  Location     Type
 47068 ;;		None
 47069 ;; Return value:  Size  Location     Type
 47070 ;;                  1    wreg      void 
 47071 ;; Registers used:
 47072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 47073 ;; Tracked objects:
 47074 ;;		On entry : 0/0
 47075 ;;		On exit  : 0/0
 47076 ;;		Unchanged: 0/0
 47077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 47078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47082 ;;Total ram usage:        0 bytes
 47083 ;; Hardware stack levels used:    1
 47084 ;; Hardware stack levels required when called:    2
 47085 ;; This function calls:
 47086 ;;		_USBEnableEndpoint
 47087 ;;		i2_USBTransferOnePacket
 47088 ;; This function is called by:
 47089 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 47090 ;; This function uses a non-reentrant model
 47091 ;;
 47092                           
 47093                           	psect	text188
 47094  013E26                     __ptext188:
 47095                           	opt stack 0
 47096  013E26                     _APP_DeviceCustomHIDInitialize:
 47097                           	opt stack 13
 47098                           
 47099                           ;app_device_custom_hid.c: 50: USBInHandle = 0;
 47100                           
 47101                           ;incstack = 0
 47102  013E26  0E00               	movlw	0
 47103  013E28  0101               	movlb	1	; () banked
 47104  013E2A  6F64               	movwf	_USBInHandle& (0+255),b
 47105  013E2C  0E00               	movlw	0
 47106  013E2E  6F65               	movwf	(_USBInHandle+1)& (0+255),b
 47107                           
 47108                           ; BSR set to: 1
 47109                           ;app_device_custom_hid.c: 53: USBEnableEndpoint(1, 0x02|0x04|0x10|0x08);
 47110  013E30  0E1E               	movlw	30
 47111  013E32  6E36               	movwf	USBEnableEndpoint@options,c
 47112  013E34  0E01               	movlw	1
 47113  013E36  ECE4  F09D         	call	_USBEnableEndpoint
 47114                           
 47115                           ;app_device_custom_hid.c: 56: USBOutHandle = (volatile void*)USBTransferOnePacket(1,0,(u
      +                          int8_t*)&ReceivedDataBuffer,64);
 47116  013E3A  0E00               	movlw	0
 47117  013E3C  6E2E               	movwf	i2USBTransferOnePacket@dir,c
 47118  013E3E  0E38               	movlw	low _ReceivedDataBuffer
 47119  013E40  6E2F               	movwf	i2USBTransferOnePacket@data,c
 47120  013E42  0E02               	movlw	high _ReceivedDataBuffer
 47121  013E44  6E30               	movwf	i2USBTransferOnePacket@data+1,c
 47122  013E46  0E40               	movlw	64
 47123  013E48  6E31               	movwf	i2USBTransferOnePacket@len,c
 47124  013E4A  0E01               	movlw	1
 47125  013E4C  ECF7  F083         	call	i2_USBTransferOnePacket
 47126  013E50  C02E  F166         	movff	?i2_USBTransferOnePacket,_USBOutHandle
 47127  013E54  C02F  F167         	movff	?i2_USBTransferOnePacket+1,_USBOutHandle+1
 47128  013E58  0012               	return		;funcret
 47129  013E5A                     __end_of_APP_DeviceCustomHIDInitialize:
 47130                           	opt stack 0
 47131                           tosu	equ	0xFFF
 47132                           tosh	equ	0xFFE
 47133                           tosl	equ	0xFFD
 47134                           pclatu	equ	0xFFB
 47135                           pclath	equ	0xFFA
 47136                           tblptru	equ	0xFF8
 47137                           tblptrh	equ	0xFF7
 47138                           tblptrl	equ	0xFF6
 47139                           tablat	equ	0xFF5
 47140                           prodh	equ	0xFF4
 47141                           prodl	equ	0xFF3
 47142                           intcon	equ	0xFF2
 47143                           indf0	equ	0xFEF
 47144                           postinc0	equ	0xFEE
 47145                           fsr0h	equ	0xFEA
 47146                           fsr0l	equ	0xFE9
 47147                           wreg	equ	0xFE8
 47148                           indf1	equ	0xFE7
 47149                           postinc1	equ	0xFE6
 47150                           postdec1	equ	0xFE5
 47151                           plusw1	equ	0xFE3
 47152                           fsr1h	equ	0xFE2
 47153                           fsr1l	equ	0xFE1
 47154                           indf2	equ	0xFDF
 47155                           postinc2	equ	0xFDE
 47156                           postdec2	equ	0xFDD
 47157                           plusw2	equ	0xFDB
 47158                           fsr2h	equ	0xFDA
 47159                           fsr2l	equ	0xFD9
 47160                           status	equ	0xFD8
 47161                           
 47162 ;; *************** function i2_USBTransferOnePacket *****************
 47163 ;; Defined at:
 47164 ;;		line 995 in file "usb_device.c"
 47165 ;; Parameters:    Size  Location     Type
 47166 ;;  ep              1    wreg     unsigned char 
 47167 ;;  dir             1    0[COMRAM] unsigned char 
 47168 ;;  data            2    1[COMRAM] PTR unsigned char 
 47169 ;;		 -> ToSendDataBuffer(64), ReceivedDataBuffer(64), msd_buffer(512), msd_csw(13), 
 47170 ;;		 -> msd_cbw(31), NULL(0), 
 47171 ;;  len             1    3[COMRAM] unsigned char 
 47172 ;; Auto vars:     Size  Location     Type
 47173 ;;  ep              1    8[COMRAM] unsigned char 
 47174 ;;  USBTransferO    2    9[COMRAM] PTR volatile struct __BD
 47175 ;;		 -> RAM(3759), NULL(0), BDT(48), 
 47176 ;; Return value:  Size  Location     Type
 47177 ;;                  2    0[COMRAM] PTR void 
 47178 ;; Registers used:
 47179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 47180 ;; Tracked objects:
 47181 ;;		On entry : 0/0
 47182 ;;		On exit  : 0/0
 47183 ;;		Unchanged: 0/0
 47184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 47185 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47186 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47187 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47188 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47189 ;;Total ram usage:       11 bytes
 47190 ;; Hardware stack levels used:    1
 47191 ;; This function calls:
 47192 ;;		Nothing
 47193 ;; This function is called by:
 47194 ;;		_USBMSDInit
 47195 ;;		_USBCheckMSDRequest
 47196 ;;		_MSDTransferTerminated
 47197 ;;		_APP_DeviceCustomHIDInitialize
 47198 ;; This function uses a non-reentrant model
 47199 ;;
 47200                           
 47201                           	psect	text189
 47202  0107EE                     __ptext189:
 47203                           	opt stack 0
 47204  0107EE                     i2_USBTransferOnePacket:
 47205                           	opt stack 14
 47206                           
 47207                           ;incstack = 0
 47208                           ;i2USBTransferOnePacket@ep stored from wreg
 47209  0107EE  6E36               	movwf	i2USBTransferOnePacket@ep,c
 47210                           
 47211                           ;usb_device.c: 997: volatile BDT_ENTRY* handle;;usb_device.c: 1000: if(dir != 0)
 47212  0107F0  502E               	movf	i2USBTransferOnePacket@dir,w,c
 47213  0107F2  B4D8               	btfsc	status,2,c
 47214  0107F4  D007               	goto	i2l184
 47215                           
 47216                           ;usb_device.c: 1001: {;usb_device.c: 1003: handle = pBDTEntryIn[ep];
 47217  0107F6  5036               	movf	i2USBTransferOnePacket@ep,w,c
 47218  0107F8  0D02               	mullw	2
 47219  0107FA  0E10               	movlw	low _pBDTEntryIn
 47220  0107FC  24F3               	addwf	prodl,w,c
 47221  0107FE  6ED9               	movwf	fsr2l,c
 47222  010800  0E00               	movlw	high _pBDTEntryIn
 47223  010802  D006               	goto	L80
 47224  010804                     i2l184:
 47225                           
 47226                           ;usb_device.c: 1005: else;usb_device.c: 1006: {;usb_device.c: 1008: handle = pBDTEntryOu
      +                          t[ep];
 47227  010804  5036               	movf	i2USBTransferOnePacket@ep,w,c
 47228  010806  0D02               	mullw	2
 47229  010808  0E38               	movlw	low _pBDTEntryOut
 47230  01080A  24F3               	addwf	prodl,w,c
 47231  01080C  6ED9               	movwf	fsr2l,c
 47232  01080E  0E01               	movlw	high _pBDTEntryOut
 47233  010810                     L80:
 47234  010810  20F4               	addwfc	prodh,w,c
 47235  010812  6EDA               	movwf	fsr2h,c
 47236  010814  CFDE F037          	movff	postinc2,i2USBTransferOnePacket@handle
 47237  010818  CFDD F038          	movff	postdec2,i2USBTransferOnePacket@handle+1
 47238                           
 47239                           ;usb_device.c: 1009: };usb_device.c: 1013: if(handle == 0)
 47240  01081C  5037               	movf	i2USBTransferOnePacket@handle,w,c
 47241  01081E  1038               	iorwf	i2USBTransferOnePacket@handle+1,w,c
 47242  010820  A4D8               	btfss	status,2,c
 47243  010822  D005               	goto	i2l186
 47244                           
 47245                           ;usb_device.c: 1014: {;usb_device.c: 1015: return 0;
 47246  010824  0E00               	movlw	0
 47247  010826  6E2E               	movwf	?i2_USBTransferOnePacket,c
 47248  010828  0E00               	movlw	0
 47249  01082A  6E2F               	movwf	?i2_USBTransferOnePacket+1,c
 47250  01082C  0012               	return	
 47251  01082E                     i2l186:
 47252                           
 47253                           ;usb_device.c: 1016: };usb_device.c: 1029: handle->ADR = ((uint16_t)(data));
 47254  01082E  EE20 F002          	lfsr	2,2
 47255  010832  5037               	movf	i2USBTransferOnePacket@handle,w,c
 47256  010834  26D9               	addwf	fsr2l,f,c
 47257  010836  5038               	movf	i2USBTransferOnePacket@handle+1,w,c
 47258  010838  22DA               	addwfc	fsr2h,f,c
 47259  01083A  C02F  FFDE         	movff	i2USBTransferOnePacket@data,postinc2
 47260  01083E  C030  FFDD         	movff	i2USBTransferOnePacket@data+1,postdec2
 47261                           
 47262                           ;usb_device.c: 1030: handle->CNT = len;
 47263  010842  EE20 F001          	lfsr	2,1
 47264  010846  5037               	movf	i2USBTransferOnePacket@handle,w,c
 47265  010848  26D9               	addwf	fsr2l,f,c
 47266  01084A  5038               	movf	i2USBTransferOnePacket@handle+1,w,c
 47267  01084C  22DA               	addwfc	fsr2h,f,c
 47268  01084E  C031  FFDF         	movff	i2USBTransferOnePacket@len,indf2
 47269                           
 47270                           ;usb_device.c: 1031: handle->STAT.Val &= 0x40;
 47271  010852  C037  FFD9         	movff	i2USBTransferOnePacket@handle,fsr2l
 47272  010856  C038  FFDA         	movff	i2USBTransferOnePacket@handle+1,fsr2h
 47273  01085A  0E40               	movlw	64
 47274  01085C  16DF               	andwf	indf2,f,c
 47275                           
 47276                           ;usb_device.c: 1032: handle->STAT.Val |= (0x08 & 0x08);
 47277  01085E  C037  FFD9         	movff	i2USBTransferOnePacket@handle,fsr2l
 47278  010862  C038  FFDA         	movff	i2USBTransferOnePacket@handle+1,fsr2h
 47279  010866  0E00               	movlw	0
 47280  010868  86DB               	bsf	plusw2,3,c
 47281                           
 47282                           ;usb_device.c: 1033: handle->STAT.Val |= 0x80;
 47283  01086A  C037  FFD9         	movff	i2USBTransferOnePacket@handle,fsr2l
 47284  01086E  C038  FFDA         	movff	i2USBTransferOnePacket@handle+1,fsr2h
 47285  010872  0E00               	movlw	0
 47286  010874  8EDB               	bsf	plusw2,7,c
 47287                           
 47288                           ;usb_device.c: 1036: if(dir != 0)
 47289  010876  502E               	movf	i2USBTransferOnePacket@dir,w,c
 47290  010878  B4D8               	btfsc	status,2,c
 47291  01087A  D018               	goto	i2l188
 47292                           
 47293                           ;usb_device.c: 1037: {;usb_device.c: 1039: pBDTEntryIn[ep] = (BDT_ENTRY*)(((uintptr_t)pB
      +                          DTEntryIn[ep]) ^ 0x0004);
 47294  01087C  5036               	movf	i2USBTransferOnePacket@ep,w,c
 47295  01087E  0D02               	mullw	2
 47296  010880  0E10               	movlw	low _pBDTEntryIn
 47297  010882  24F3               	addwf	prodl,w,c
 47298  010884  6ED9               	movwf	fsr2l,c
 47299  010886  0E00               	movlw	high _pBDTEntryIn
 47300  010888  20F4               	addwfc	prodh,w,c
 47301  01088A  6EDA               	movwf	fsr2h,c
 47302  01088C  CFDE F032          	movff	postinc2,??i2_USBTransferOnePacket
 47303  010890  CFDD F033          	movff	postdec2,??i2_USBTransferOnePacket+1
 47304  010894  0E04               	movlw	4
 47305  010896  1832               	xorwf	??i2_USBTransferOnePacket,w,c
 47306  010898  6E34               	movwf	(??i2_USBTransferOnePacket+2)& (0+255),c
 47307  01089A  5033               	movf	??i2_USBTransferOnePacket+1,w,c
 47308  01089C  6E35               	movwf	(??i2_USBTransferOnePacket+3)& (0+255),c
 47309  01089E  5036               	movf	i2USBTransferOnePacket@ep,w,c
 47310  0108A0  0D02               	mullw	2
 47311  0108A2  0E10               	movlw	low _pBDTEntryIn
 47312  0108A4  24F3               	addwf	prodl,w,c
 47313  0108A6  6ED9               	movwf	fsr2l,c
 47314  0108A8  0E00               	movlw	high _pBDTEntryIn
 47315  0108AA  D017               	goto	L81
 47316  0108AC                     i2l188:
 47317                           
 47318                           ;usb_device.c: 1041: else;usb_device.c: 1042: {;usb_device.c: 1044: pBDTEntryOut[ep] = (
      +                          BDT_ENTRY*)(((uintptr_t)pBDTEntryOut[ep]) ^ 0x0004);
 47319  0108AC  5036               	movf	i2USBTransferOnePacket@ep,w,c
 47320  0108AE  0D02               	mullw	2
 47321  0108B0  0E38               	movlw	low _pBDTEntryOut
 47322  0108B2  24F3               	addwf	prodl,w,c
 47323  0108B4  6ED9               	movwf	fsr2l,c
 47324  0108B6  0E01               	movlw	high _pBDTEntryOut
 47325  0108B8  20F4               	addwfc	prodh,w,c
 47326  0108BA  6EDA               	movwf	fsr2h,c
 47327  0108BC  CFDE F032          	movff	postinc2,??i2_USBTransferOnePacket
 47328  0108C0  CFDD F033          	movff	postdec2,??i2_USBTransferOnePacket+1
 47329  0108C4  0E04               	movlw	4
 47330  0108C6  1832               	xorwf	??i2_USBTransferOnePacket,w,c
 47331  0108C8  6E34               	movwf	(??i2_USBTransferOnePacket+2)& (0+255),c
 47332  0108CA  5033               	movf	??i2_USBTransferOnePacket+1,w,c
 47333  0108CC  6E35               	movwf	(??i2_USBTransferOnePacket+3)& (0+255),c
 47334  0108CE  5036               	movf	i2USBTransferOnePacket@ep,w,c
 47335  0108D0  0D02               	mullw	2
 47336  0108D2  0E38               	movlw	low _pBDTEntryOut
 47337  0108D4  24F3               	addwf	prodl,w,c
 47338  0108D6  6ED9               	movwf	fsr2l,c
 47339  0108D8  0E01               	movlw	high _pBDTEntryOut
 47340  0108DA                     L81:
 47341  0108DA  20F4               	addwfc	prodh,w,c
 47342  0108DC  6EDA               	movwf	fsr2h,c
 47343  0108DE  C034  FFDE         	movff	??i2_USBTransferOnePacket+2,postinc2
 47344  0108E2  C035  FFDD         	movff	??i2_USBTransferOnePacket+3,postdec2
 47345                           
 47346                           ;usb_device.c: 1045: };usb_device.c: 1046: return (void*)handle;
 47347  0108E6  C037  F02E         	movff	i2USBTransferOnePacket@handle,?i2_USBTransferOnePacket
 47348  0108EA  C038  F02F         	movff	i2USBTransferOnePacket@handle+1,?i2_USBTransferOnePacket+1
 47349  0108EE  0012               	return	
 47350  0108F0                     __end_ofi2_USBTransferOnePacket:
 47351                           	opt stack 0
 47352                           tosu	equ	0xFFF
 47353                           tosh	equ	0xFFE
 47354                           tosl	equ	0xFFD
 47355                           pclatu	equ	0xFFB
 47356                           pclath	equ	0xFFA
 47357                           tblptru	equ	0xFF8
 47358                           tblptrh	equ	0xFF7
 47359                           tblptrl	equ	0xFF6
 47360                           tablat	equ	0xFF5
 47361                           prodh	equ	0xFF4
 47362                           prodl	equ	0xFF3
 47363                           intcon	equ	0xFF2
 47364                           indf0	equ	0xFEF
 47365                           postinc0	equ	0xFEE
 47366                           fsr0h	equ	0xFEA
 47367                           fsr0l	equ	0xFE9
 47368                           wreg	equ	0xFE8
 47369                           indf1	equ	0xFE7
 47370                           postinc1	equ	0xFE6
 47371                           postdec1	equ	0xFE5
 47372                           plusw1	equ	0xFE3
 47373                           fsr1h	equ	0xFE2
 47374                           fsr1l	equ	0xFE1
 47375                           indf2	equ	0xFDF
 47376                           postinc2	equ	0xFDE
 47377                           postdec2	equ	0xFDD
 47378                           plusw2	equ	0xFDB
 47379                           fsr2h	equ	0xFDA
 47380                           fsr2l	equ	0xFD9
 47381                           status	equ	0xFD8
 47382                           
 47383 ;; *************** function _USBEnableEndpoint *****************
 47384 ;; Defined at:
 47385 ;;		line 878 in file "usb_device.c"
 47386 ;; Parameters:    Size  Location     Type
 47387 ;;  ep              1    wreg     unsigned char 
 47388 ;;  options         1    8[COMRAM] unsigned char 
 47389 ;; Auto vars:     Size  Location     Type
 47390 ;;  ep              1   11[COMRAM] unsigned char 
 47391 ;;  p               2    9[COMRAM] PTR unsigned char 
 47392 ;;		 -> UEP0(1), 
 47393 ;; Return value:  Size  Location     Type
 47394 ;;                  1    wreg      void 
 47395 ;; Registers used:
 47396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 47397 ;; Tracked objects:
 47398 ;;		On entry : 0/0
 47399 ;;		On exit  : 0/0
 47400 ;;		Unchanged: 0/0
 47401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 47402 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47403 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47405 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47406 ;;Total ram usage:        4 bytes
 47407 ;; Hardware stack levels used:    1
 47408 ;; Hardware stack levels required when called:    1
 47409 ;; This function calls:
 47410 ;;		_USBConfigureEndpoint
 47411 ;; This function is called by:
 47412 ;;		_APP_DeviceCustomHIDInitialize
 47413 ;;		_APP_DeviceMSDInitialize
 47414 ;; This function uses a non-reentrant model
 47415 ;;
 47416                           
 47417                           	psect	text190
 47418  013BC8                     __ptext190:
 47419                           	opt stack 0
 47420  013BC8                     _USBEnableEndpoint:
 47421                           	opt stack 13
 47422                           
 47423                           ;incstack = 0
 47424                           ;USBEnableEndpoint@ep stored from wreg
 47425  013BC8  6E39               	movwf	USBEnableEndpoint@ep,c
 47426                           
 47427                           ;usb_device.c: 880: unsigned char* p;;usb_device.c: 884: if(options & 0x04)
 47428  013BCA  A436               	btfss	USBEnableEndpoint@options,2,c
 47429  013BCC  D005               	goto	i2l179
 47430                           
 47431                           ;usb_device.c: 885: {;usb_device.c: 886: USBConfigureEndpoint(ep, 0);
 47432  013BCE  0E00               	movlw	0
 47433  013BD0  6E2E               	movwf	USBConfigureEndpoint@direction,c
 47434  013BD2  5039               	movf	USBEnableEndpoint@ep,w,c
 47435  013BD4  ECF3  F092         	call	_USBConfigureEndpoint
 47436  013BD8                     i2l179:
 47437                           
 47438                           ;usb_device.c: 887: };usb_device.c: 888: if(options & 0x02)
 47439  013BD8  A236               	btfss	USBEnableEndpoint@options,1,c
 47440  013BDA  D005               	goto	i2l180
 47441                           
 47442                           ;usb_device.c: 889: {;usb_device.c: 890: USBConfigureEndpoint(ep, 1);
 47443  013BDC  0E01               	movlw	1
 47444  013BDE  6E2E               	movwf	USBConfigureEndpoint@direction,c
 47445  013BE0  5039               	movf	USBEnableEndpoint@ep,w,c
 47446  013BE2  ECF3  F092         	call	_USBConfigureEndpoint
 47447  013BE6                     i2l180:
 47448                           
 47449                           ;usb_device.c: 891: };usb_device.c: 899: p = (unsigned char*)(&UEP0+ep);
 47450  013BE6  5039               	movf	USBEnableEndpoint@ep,w,c
 47451  013BE8  0D01               	mullw	1
 47452  013BEA  0E26               	movlw	38
 47453  013BEC  24F3               	addwf	prodl,w,c
 47454  013BEE  6E37               	movwf	USBEnableEndpoint@p,c
 47455  013BF0  0E0F               	movlw	15
 47456  013BF2  20F4               	addwfc	prodh,w,c
 47457  013BF4  6E38               	movwf	USBEnableEndpoint@p+1,c
 47458                           
 47459                           ;usb_device.c: 901: *p = options;
 47460  013BF6  C037  FFD9         	movff	USBEnableEndpoint@p,fsr2l
 47461  013BFA  C038  FFDA         	movff	USBEnableEndpoint@p+1,fsr2h
 47462  013BFE  C036  FFDF         	movff	USBEnableEndpoint@options,indf2
 47463  013C02  0012               	return		;funcret
 47464  013C04                     __end_of_USBEnableEndpoint:
 47465                           	opt stack 0
 47466                           tosu	equ	0xFFF
 47467                           tosh	equ	0xFFE
 47468                           tosl	equ	0xFFD
 47469                           pclatu	equ	0xFFB
 47470                           pclath	equ	0xFFA
 47471                           tblptru	equ	0xFF8
 47472                           tblptrh	equ	0xFF7
 47473                           tblptrl	equ	0xFF6
 47474                           tablat	equ	0xFF5
 47475                           prodh	equ	0xFF4
 47476                           prodl	equ	0xFF3
 47477                           intcon	equ	0xFF2
 47478                           indf0	equ	0xFEF
 47479                           postinc0	equ	0xFEE
 47480                           fsr0h	equ	0xFEA
 47481                           fsr0l	equ	0xFE9
 47482                           wreg	equ	0xFE8
 47483                           indf1	equ	0xFE7
 47484                           postinc1	equ	0xFE6
 47485                           postdec1	equ	0xFE5
 47486                           plusw1	equ	0xFE3
 47487                           fsr1h	equ	0xFE2
 47488                           fsr1l	equ	0xFE1
 47489                           indf2	equ	0xFDF
 47490                           postinc2	equ	0xFDE
 47491                           postdec2	equ	0xFDD
 47492                           plusw2	equ	0xFDB
 47493                           fsr2h	equ	0xFDA
 47494                           fsr2l	equ	0xFD9
 47495                           status	equ	0xFD8
 47496                           
 47497 ;; *************** function _USBConfigureEndpoint *****************
 47498 ;; Defined at:
 47499 ;;		line 1545 in file "usb_device.c"
 47500 ;; Parameters:    Size  Location     Type
 47501 ;;  EPNum           1    wreg     unsigned char 
 47502 ;;  direction       1    0[COMRAM] unsigned char 
 47503 ;; Auto vars:     Size  Location     Type
 47504 ;;  EPNum           1    5[COMRAM] unsigned char 
 47505 ;;  handle          2    6[COMRAM] PTR volatile struct __BD
 47506 ;;		 -> BDT(48), 
 47507 ;; Return value:  Size  Location     Type
 47508 ;;                  1    wreg      void 
 47509 ;; Registers used:
 47510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 47511 ;; Tracked objects:
 47512 ;;		On entry : 0/0
 47513 ;;		On exit  : 0/0
 47514 ;;		Unchanged: 0/0
 47515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 47516 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47517 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47518 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47519 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47520 ;;Total ram usage:        8 bytes
 47521 ;; Hardware stack levels used:    1
 47522 ;; This function calls:
 47523 ;;		Nothing
 47524 ;; This function is called by:
 47525 ;;		_USBEnableEndpoint
 47526 ;; This function uses a non-reentrant model
 47527 ;;
 47528                           
 47529                           	psect	text191
 47530  0125E6                     __ptext191:
 47531                           	opt stack 0
 47532  0125E6                     _USBConfigureEndpoint:
 47533                           	opt stack 13
 47534                           
 47535                           ;incstack = 0
 47536                           ;USBConfigureEndpoint@EPNum stored from wreg
 47537  0125E6  6E33               	movwf	USBConfigureEndpoint@EPNum,c
 47538                           
 47539                           ;usb_device.c: 1547: volatile BDT_ENTRY* handle;;usb_device.c: 1551: handle = (volatile 
      +                          BDT_ENTRY*)&BDT[0];
 47540  0125E8  0E00               	movlw	0
 47541  0125EA  6E34               	movwf	USBConfigureEndpoint@handle,c
 47542  0125EC  0E0D               	movlw	13
 47543  0125EE  6E35               	movwf	USBConfigureEndpoint@handle+1,c
 47544                           
 47545                           ;usb_device.c: 1552: handle += (4*EPNum+2*direction+0u);
 47546  0125F0  502E               	movf	USBConfigureEndpoint@direction,w,c
 47547  0125F2  6E2F               	movwf	??_USBConfigureEndpoint& (0+255),c
 47548  0125F4  6A30               	clrf	(??_USBConfigureEndpoint+1)& (0+255),c
 47549  0125F6  90D8               	bcf	status,0,c
 47550  0125F8  362F               	rlcf	??_USBConfigureEndpoint,f,c
 47551  0125FA  3630               	rlcf	??_USBConfigureEndpoint+1,f,c
 47552  0125FC  5033               	movf	USBConfigureEndpoint@EPNum,w,c
 47553  0125FE  6E31               	movwf	(??_USBConfigureEndpoint+2)& (0+255),c
 47554  012600  6A32               	clrf	(??_USBConfigureEndpoint+3)& (0+255),c
 47555  012602  90D8               	bcf	status,0,c
 47556  012604  3631               	rlcf	??_USBConfigureEndpoint+2,f,c
 47557  012606  3632               	rlcf	??_USBConfigureEndpoint+3,f,c
 47558  012608  90D8               	bcf	status,0,c
 47559  01260A  3631               	rlcf	??_USBConfigureEndpoint+2,f,c
 47560  01260C  3632               	rlcf	??_USBConfigureEndpoint+3,f,c
 47561  01260E  502F               	movf	??_USBConfigureEndpoint,w,c
 47562  012610  2631               	addwf	??_USBConfigureEndpoint+2,f,c
 47563  012612  5030               	movf	??_USBConfigureEndpoint+1,w,c
 47564  012614  2232               	addwfc	??_USBConfigureEndpoint+3,f,c
 47565  012616  90D8               	bcf	status,0,c
 47566  012618  3631               	rlcf	??_USBConfigureEndpoint+2,f,c
 47567  01261A  3632               	rlcf	??_USBConfigureEndpoint+3,f,c
 47568  01261C  90D8               	bcf	status,0,c
 47569  01261E  3631               	rlcf	??_USBConfigureEndpoint+2,f,c
 47570  012620  3632               	rlcf	??_USBConfigureEndpoint+3,f,c
 47571  012622  5031               	movf	??_USBConfigureEndpoint+2,w,c
 47572  012624  2634               	addwf	USBConfigureEndpoint@handle,f,c
 47573  012626  5032               	movf	??_USBConfigureEndpoint+3,w,c
 47574  012628  2235               	addwfc	USBConfigureEndpoint@handle+1,f,c
 47575                           
 47576                           ;usb_device.c: 1554: handle->STAT.UOWN = 0;
 47577  01262A  C034  FFD9         	movff	USBConfigureEndpoint@handle,fsr2l
 47578  01262E  C035  FFDA         	movff	USBConfigureEndpoint@handle+1,fsr2h
 47579  012632  9EDF               	bcf	indf2,7,c
 47580                           
 47581                           ;usb_device.c: 1559: if(direction == 0)
 47582  012634  502E               	movf	USBConfigureEndpoint@direction,w,c
 47583  012636  A4D8               	btfss	status,2,c
 47584  012638  D007               	goto	i2l226
 47585                           
 47586                           ;usb_device.c: 1560: {;usb_device.c: 1561: pBDTEntryOut[EPNum] = handle;
 47587  01263A  5033               	movf	USBConfigureEndpoint@EPNum,w,c
 47588  01263C  0D02               	mullw	2
 47589  01263E  0E38               	movlw	low _pBDTEntryOut
 47590  012640  24F3               	addwf	prodl,w,c
 47591  012642  6ED9               	movwf	fsr2l,c
 47592  012644  0E01               	movlw	high _pBDTEntryOut
 47593  012646  D006               	goto	L82
 47594  012648                     i2l226:
 47595                           
 47596                           ;usb_device.c: 1563: else;usb_device.c: 1564: {;usb_device.c: 1565: pBDTEntryIn[EPNum] =
      +                           handle;
 47597  012648  5033               	movf	USBConfigureEndpoint@EPNum,w,c
 47598  01264A  0D02               	mullw	2
 47599  01264C  0E10               	movlw	low _pBDTEntryIn
 47600  01264E  24F3               	addwf	prodl,w,c
 47601  012650  6ED9               	movwf	fsr2l,c
 47602  012652  0E00               	movlw	high _pBDTEntryIn
 47603  012654                     L82:
 47604  012654  20F4               	addwfc	prodh,w,c
 47605  012656  6EDA               	movwf	fsr2h,c
 47606  012658  C034  FFDE         	movff	USBConfigureEndpoint@handle,postinc2
 47607  01265C  C035  FFDD         	movff	USBConfigureEndpoint@handle+1,postdec2
 47608                           
 47609                           ;usb_device.c: 1566: };usb_device.c: 1569: handle->STAT.DTS = 0;
 47610  012660  C034  FFD9         	movff	USBConfigureEndpoint@handle,fsr2l
 47611  012664  C035  FFDA         	movff	USBConfigureEndpoint@handle+1,fsr2h
 47612  012668  9CDF               	bcf	indf2,6,c
 47613                           
 47614                           ;usb_device.c: 1570: (handle+1)->STAT.DTS = 1;
 47615  01266A  EE20 F004          	lfsr	2,4
 47616  01266E  5034               	movf	USBConfigureEndpoint@handle,w,c
 47617  012670  26D9               	addwf	fsr2l,f,c
 47618  012672  5035               	movf	USBConfigureEndpoint@handle+1,w,c
 47619  012674  22DA               	addwfc	fsr2h,f,c
 47620  012676  8CDF               	bsf	indf2,6,c
 47621  012678  0012               	return		;funcret
 47622  01267A                     __end_of_USBConfigureEndpoint:
 47623                           	opt stack 0
 47624                           tosu	equ	0xFFF
 47625                           tosh	equ	0xFFE
 47626                           tosl	equ	0xFFD
 47627                           pclatu	equ	0xFFB
 47628                           pclath	equ	0xFFA
 47629                           tblptru	equ	0xFF8
 47630                           tblptrh	equ	0xFF7
 47631                           tblptrl	equ	0xFF6
 47632                           tablat	equ	0xFF5
 47633                           prodh	equ	0xFF4
 47634                           prodl	equ	0xFF3
 47635                           intcon	equ	0xFF2
 47636                           indf0	equ	0xFEF
 47637                           postinc0	equ	0xFEE
 47638                           fsr0h	equ	0xFEA
 47639                           fsr0l	equ	0xFE9
 47640                           wreg	equ	0xFE8
 47641                           indf1	equ	0xFE7
 47642                           postinc1	equ	0xFE6
 47643                           postdec1	equ	0xFE5
 47644                           plusw1	equ	0xFE3
 47645                           fsr1h	equ	0xFE2
 47646                           fsr1l	equ	0xFE1
 47647                           indf2	equ	0xFDF
 47648                           postinc2	equ	0xFDE
 47649                           postdec2	equ	0xFDD
 47650                           plusw2	equ	0xFDB
 47651                           fsr2h	equ	0xFDA
 47652                           fsr2l	equ	0xFD9
 47653                           status	equ	0xFD8
 47654                           
 47655 ;; *************** function _USBCtrlTrfOutHandler *****************
 47656 ;; Defined at:
 47657 ;;		line 2540 in file "usb_device.c"
 47658 ;; Parameters:    Size  Location     Type
 47659 ;;		None
 47660 ;; Auto vars:     Size  Location     Type
 47661 ;;		None
 47662 ;; Return value:  Size  Location     Type
 47663 ;;                  1    wreg      void 
 47664 ;; Registers used:
 47665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 47666 ;; Tracked objects:
 47667 ;;		On entry : 0/0
 47668 ;;		On exit  : 0/0
 47669 ;;		Unchanged: 0/0
 47670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 47671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47675 ;;Total ram usage:        0 bytes
 47676 ;; Hardware stack levels used:    1
 47677 ;; Hardware stack levels required when called:    2
 47678 ;; This function calls:
 47679 ;;		_USBCtrlTrfRxService
 47680 ;; This function is called by:
 47681 ;;		_USBCtrlEPService
 47682 ;; This function uses a non-reentrant model
 47683 ;;
 47684                           
 47685                           	psect	text192
 47686  013192                     __ptext192:
 47687                           	opt stack 0
 47688  013192                     _USBCtrlTrfOutHandler:
 47689                           	opt stack 13
 47690                           
 47691                           ;usb_device.c: 2542: if(controlTransferState == 2)
 47692                           
 47693                           ;incstack = 0
 47694  013192  0E02               	movlw	2
 47695  013194  1829               	xorwf	_controlTransferState,w,c	;volatile
 47696  013196  A4D8               	btfss	status,2,c
 47697  013198  D003               	goto	i2l332
 47698                           
 47699                           ;usb_device.c: 2543: {;usb_device.c: 2544: USBCtrlTrfRxService();
 47700  01319A  ECDF  F080         	call	_USBCtrlTrfRxService	;wreg free
 47701                           
 47702                           ;usb_device.c: 2545: }
 47703  01319E  0012               	return	
 47704  0131A0                     i2l332:
 47705                           
 47706                           ;usb_device.c: 2546: else;usb_device.c: 2547: {;usb_device.c: 2550: controlTransferState
      +                           = 0;
 47707  0131A0  0E00               	movlw	0
 47708  0131A2  6E29               	movwf	_controlTransferState,c	;volatile
 47709                           
 47710                           ;usb_device.c: 2557: if(BothEP0OutUOWNsSet == 0)
 47711  0131A4  5025               	movf	_BothEP0OutUOWNsSet,w,c	;volatile
 47712  0131A6  A4D8               	btfss	status,2,c
 47713  0131A8  D01F               	goto	i2l334
 47714                           
 47715                           ;usb_device.c: 2558: {;usb_device.c: 2559: pBDTEntryEP0OutNext->CNT = 8;
 47716  0131AA  EE20 F001          	lfsr	2,1
 47717  0131AE  501A               	movf	_pBDTEntryEP0OutNext,w,c
 47718  0131B0  26D9               	addwf	fsr2l,f,c
 47719  0131B2  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 47720  0131B4  22DA               	addwfc	fsr2h,f,c
 47721  0131B6  0E08               	movlw	8
 47722  0131B8  6EDF               	movwf	indf2,c
 47723                           
 47724                           ;usb_device.c: 2560: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 47725  0131BA  EE20 F002          	lfsr	2,2
 47726  0131BE  501A               	movf	_pBDTEntryEP0OutNext,w,c
 47727  0131C0  26D9               	addwf	fsr2l,f,c
 47728  0131C2  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 47729  0131C4  22DA               	addwfc	fsr2h,f,c
 47730  0131C6  0E30               	movlw	48
 47731  0131C8  6EDE               	movwf	postinc2,c
 47732  0131CA  0E0D               	movlw	13
 47733  0131CC  6EDD               	movwf	postdec2,c
 47734                           
 47735                           ;usb_device.c: 2561: pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 47736  0131CE  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47737  0131D2  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47738  0131D6  0E0C               	movlw	12
 47739  0131D8  6EDF               	movwf	indf2,c
 47740                           
 47741                           ;usb_device.c: 2562: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 47742  0131DA  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47743  0131DE  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47744  0131E2  0E00               	movlw	0
 47745  0131E4  8EDB               	bsf	plusw2,7,c
 47746                           
 47747                           ;usb_device.c: 2563: }
 47748  0131E6  0012               	return	
 47749  0131E8                     i2l334:
 47750                           
 47751                           ;usb_device.c: 2564: else;usb_device.c: 2565: {;usb_device.c: 2566: BothEP0OutUOWNsSet =
      +                           0;
 47752  0131E8  0E00               	movlw	0
 47753  0131EA  6E25               	movwf	_BothEP0OutUOWNsSet,c	;volatile
 47754  0131EC  0012               	return	
 47755  0131EE                     __end_of_USBCtrlTrfOutHandler:
 47756                           	opt stack 0
 47757                           tosu	equ	0xFFF
 47758                           tosh	equ	0xFFE
 47759                           tosl	equ	0xFFD
 47760                           pclatu	equ	0xFFB
 47761                           pclath	equ	0xFFA
 47762                           tblptru	equ	0xFF8
 47763                           tblptrh	equ	0xFF7
 47764                           tblptrl	equ	0xFF6
 47765                           tablat	equ	0xFF5
 47766                           prodh	equ	0xFF4
 47767                           prodl	equ	0xFF3
 47768                           intcon	equ	0xFF2
 47769                           indf0	equ	0xFEF
 47770                           postinc0	equ	0xFEE
 47771                           fsr0h	equ	0xFEA
 47772                           fsr0l	equ	0xFE9
 47773                           wreg	equ	0xFE8
 47774                           indf1	equ	0xFE7
 47775                           postinc1	equ	0xFE6
 47776                           postdec1	equ	0xFE5
 47777                           plusw1	equ	0xFE3
 47778                           fsr1h	equ	0xFE2
 47779                           fsr1l	equ	0xFE1
 47780                           indf2	equ	0xFDF
 47781                           postinc2	equ	0xFDE
 47782                           postdec2	equ	0xFDD
 47783                           plusw2	equ	0xFDB
 47784                           fsr2h	equ	0xFDA
 47785                           fsr2l	equ	0xFD9
 47786                           status	equ	0xFD8
 47787                           
 47788 ;; *************** function _USBCtrlTrfRxService *****************
 47789 ;; Defined at:
 47790 ;;		line 1854 in file "usb_device.c"
 47791 ;; Parameters:    Size  Location     Type
 47792 ;;		None
 47793 ;; Auto vars:     Size  Location     Type
 47794 ;;  byteToRead      1    1[COMRAM] unsigned char 
 47795 ;;  i               1    0[COMRAM] unsigned char 
 47796 ;; Return value:  Size  Location     Type
 47797 ;;                  1    wreg      void 
 47798 ;; Registers used:
 47799 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 47800 ;; Tracked objects:
 47801 ;;		On entry : 0/0
 47802 ;;		On exit  : 0/0
 47803 ;;		Unchanged: 0/0
 47804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 47805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47806 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47808 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 47809 ;;Total ram usage:        2 bytes
 47810 ;; Hardware stack levels used:    1
 47811 ;; Hardware stack levels required when called:    1
 47812 ;; This function calls:
 47813 ;;		_USBCtrlEPAllowStatusStage
 47814 ;; This function is called by:
 47815 ;;		_USBCtrlTrfOutHandler
 47816 ;; This function uses a non-reentrant model
 47817 ;;
 47818                           
 47819                           	psect	text193
 47820  0101BE                     __ptext193:
 47821                           	opt stack 0
 47822  0101BE                     _USBCtrlTrfRxService:
 47823                           	opt stack 13
 47824                           
 47825                           ;usb_device.c: 1856: uint8_t byteToRead;;usb_device.c: 1857: uint8_t i;;usb_device.c: 18
      +                          61: byteToRead = pBDTEntryEP0OutCurrent->CNT;
 47826                           
 47827                           ;incstack = 0
 47828  0101BE  EE20 F001          	lfsr	2,1
 47829  0101C2  501C               	movf	_pBDTEntryEP0OutCurrent,w,c
 47830  0101C4  26D9               	addwf	fsr2l,f,c
 47831  0101C6  501D               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 47832  0101C8  22DA               	addwfc	fsr2h,f,c
 47833  0101CA  50DF               	movf	indf2,w,c
 47834  0101CC  6E2F               	movwf	USBCtrlTrfRxService@byteToRead,c
 47835                           
 47836                           ;usb_device.c: 1867: if(byteToRead > outPipes[0].wCount.Val)
 47837  0101CE  502F               	movf	USBCtrlTrfRxService@byteToRead,w,c
 47838  0101D0  5C05               	subwf	_outPipes+4,w,c	;volatile
 47839  0101D2  0E00               	movlw	0
 47840  0101D4  5806               	subwfb	_outPipes+5,w,c	;volatile
 47841  0101D6  A0D8               	btfss	status,0,c
 47842                           
 47843                           ;usb_device.c: 1868: {;usb_device.c: 1869: byteToRead = outPipes[0].wCount.Val;
 47844  0101D8  C005  F02F         	movff	_outPipes+4,USBCtrlTrfRxService@byteToRead	;volatile
 47845                           
 47846                           ;usb_device.c: 1870: };usb_device.c: 1872: outPipes[0].wCount.Val -= byteToRead;
 47847  0101DC  502F               	movf	USBCtrlTrfRxService@byteToRead,w,c
 47848  0101DE  5E05               	subwf	_outPipes+4,f,c	;volatile
 47849  0101E0  0E00               	movlw	0
 47850  0101E2  5A06               	subwfb	_outPipes+5,f,c	;volatile
 47851                           
 47852                           ;usb_device.c: 1876: for(i=0;i<byteToRead;i++)
 47853  0101E4  0E00               	movlw	0
 47854  0101E6  6E2E               	movwf	USBCtrlTrfRxService@i,c
 47855  0101E8  D011               	goto	i2l260
 47856  0101EA                     
 47857                           ;usb_device.c: 1877: {;usb_device.c: 1878: *outPipes[0].pDst.bRam++ = CtrlTrfData[i];
 47858  0101EA  502E               	movf	USBCtrlTrfRxService@i,w,c
 47859  0101EC  0D01               	mullw	1
 47860  0101EE  0E38               	movlw	56
 47861  0101F0  24F3               	addwf	prodl,w,c
 47862  0101F2  6ED9               	movwf	fsr2l,c
 47863  0101F4  0E0D               	movlw	13
 47864  0101F6  20F4               	addwfc	prodh,w,c
 47865  0101F8  6EDA               	movwf	fsr2h,c
 47866  0101FA  C001  FFE1         	movff	_outPipes,fsr1l	;volatile
 47867  0101FE  C002  FFE2         	movff	_outPipes+1,fsr1h	;volatile
 47868  010202  CFDF FFE7          	movff	indf2,indf1
 47869  010206  4A01               	infsnz	_outPipes,f,c	;volatile
 47870  010208  2A02               	incf	_outPipes+1,f,c	;volatile
 47871  01020A  2A2E               	incf	USBCtrlTrfRxService@i,f,c
 47872  01020C                     i2l260:
 47873  01020C  502F               	movf	USBCtrlTrfRxService@byteToRead,w,c
 47874  01020E  5C2E               	subwf	USBCtrlTrfRxService@i,w,c
 47875  010210  A0D8               	btfss	status,0,c
 47876  010212  D7EB               	goto	i2l261
 47877                           
 47878                           ;usb_device.c: 1879: };usb_device.c: 1883: if(outPipes[0].wCount.Val > 0)
 47879  010214  5005               	movf	_outPipes+4,w,c	;volatile
 47880  010216  1006               	iorwf	_outPipes+5,w,c	;volatile
 47881  010218  B4D8               	btfsc	status,2,c
 47882  01021A  D032               	goto	i2l263
 47883                           
 47884                           ;usb_device.c: 1884: {;usb_device.c: 1885: pBDTEntryEP0OutNext->CNT = 8;
 47885  01021C  EE20 F001          	lfsr	2,1
 47886  010220  501A               	movf	_pBDTEntryEP0OutNext,w,c
 47887  010222  26D9               	addwf	fsr2l,f,c
 47888  010224  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 47889  010226  22DA               	addwfc	fsr2h,f,c
 47890  010228  0E08               	movlw	8
 47891  01022A  6EDF               	movwf	indf2,c
 47892                           
 47893                           ;usb_device.c: 1886: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&CtrlTrfData));
 47894  01022C  EE20 F002          	lfsr	2,2
 47895  010230  501A               	movf	_pBDTEntryEP0OutNext,w,c
 47896  010232  26D9               	addwf	fsr2l,f,c
 47897  010234  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 47898  010236  22DA               	addwfc	fsr2h,f,c
 47899  010238  0E38               	movlw	56
 47900  01023A  6EDE               	movwf	postinc2,c
 47901  01023C  0E0D               	movlw	13
 47902  01023E  6EDD               	movwf	postdec2,c
 47903                           
 47904                           ;usb_device.c: 1887: if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 47905  010240  C01C  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 47906  010244  C01D  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 47907  010248  BCDF               	btfsc	indf2,6,c
 47908  01024A  D00D               	goto	i2l264
 47909                           
 47910                           ;usb_device.c: 1888: {;usb_device.c: 1889: pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 
      +                          0x08);
 47911  01024C  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47912  010250  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47913  010254  0E48               	movlw	72
 47914  010256  6EDF               	movwf	indf2,c
 47915                           
 47916                           ;usb_device.c: 1890: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 47917  010258  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47918  01025C  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47919  010260  0E00               	movlw	0
 47920  010262  8EDB               	bsf	plusw2,7,c
 47921                           
 47922                           ;usb_device.c: 1891: }
 47923  010264  0012               	return	
 47924  010266                     i2l264:
 47925                           
 47926                           ;usb_device.c: 1892: else;usb_device.c: 1893: {;usb_device.c: 1894: pBDTEntryEP0OutNext-
      +                          >STAT.Val = 0x00|(0x08 & 0x08);
 47927  010266  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47928  01026A  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47929  01026E  0E08               	movlw	8
 47930  010270  6EDF               	movwf	indf2,c
 47931                           
 47932                           ;usb_device.c: 1895: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 47933  010272  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47934  010276  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47935  01027A  0E00               	movlw	0
 47936  01027C  8EDB               	bsf	plusw2,7,c
 47937                           
 47938                           ;usb_device.c: 1896: };usb_device.c: 1897: }
 47939  01027E  0012               	return	
 47940  010280                     i2l263:
 47941                           
 47942                           ;usb_device.c: 1898: else;usb_device.c: 1899: {;usb_device.c: 1903: pBDTEntryEP0OutNext-
      +                          >CNT = 8;
 47943  010280  EE20 F001          	lfsr	2,1
 47944  010284  501A               	movf	_pBDTEntryEP0OutNext,w,c
 47945  010286  26D9               	addwf	fsr2l,f,c
 47946  010288  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 47947  01028A  22DA               	addwfc	fsr2h,f,c
 47948  01028C  0E08               	movlw	8
 47949  01028E  6EDF               	movwf	indf2,c
 47950                           
 47951                           ;usb_device.c: 1904: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 47952  010290  EE20 F002          	lfsr	2,2
 47953  010294  501A               	movf	_pBDTEntryEP0OutNext,w,c
 47954  010296  26D9               	addwf	fsr2l,f,c
 47955  010298  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 47956  01029A  22DA               	addwfc	fsr2h,f,c
 47957  01029C  0E30               	movlw	48
 47958  01029E  6EDE               	movwf	postinc2,c
 47959  0102A0  0E0D               	movlw	13
 47960  0102A2  6EDD               	movwf	postdec2,c
 47961                           
 47962                           ;usb_device.c: 1908: pBDTEntryEP0OutNext->STAT.Val = 0x04;
 47963  0102A4  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47964  0102A8  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47965  0102AC  0E04               	movlw	4
 47966  0102AE  6EDF               	movwf	indf2,c
 47967                           
 47968                           ;usb_device.c: 1909: pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 47969  0102B0  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 47970  0102B4  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 47971  0102B8  0E00               	movlw	0
 47972  0102BA  8EDB               	bsf	plusw2,7,c
 47973                           
 47974                           ;usb_device.c: 1928: };usb_device.c: 1929: outPipes[0].info.bits.busy = 0;
 47975                           
 47976                           ;usb_device.c: 1917: {;usb_device.c: 1923: outPipes[0].pFunc();
 47977  0102BC  9E04               	bcf	_outPipes+3,7,c	;volatile
 47978                           
 47979                           ;usb_device.c: 1943: if(USBDeferStatusStagePacket == 0)
 47980  0102BE  5023               	movf	_USBDeferStatusStagePacket,w,c	;volatile
 47981  0102C0  A4D8               	btfss	status,2,c
 47982  0102C2  0012               	return	
 47983                           
 47984                           ;usb_device.c: 1944: {;usb_device.c: 1945: USBCtrlEPAllowStatusStage();
 47985  0102C4  EC4B  F08D         	call	_USBCtrlEPAllowStatusStage	;wreg free
 47986  0102C8  0012               	return	
 47987  0102CA                     __end_of_USBCtrlTrfRxService:
 47988                           	opt stack 0
 47989                           tosu	equ	0xFFF
 47990                           tosh	equ	0xFFE
 47991                           tosl	equ	0xFFD
 47992                           pclatu	equ	0xFFB
 47993                           pclath	equ	0xFFA
 47994                           tblptru	equ	0xFF8
 47995                           tblptrh	equ	0xFF7
 47996                           tblptrl	equ	0xFF6
 47997                           tablat	equ	0xFF5
 47998                           prodh	equ	0xFF4
 47999                           prodl	equ	0xFF3
 48000                           intcon	equ	0xFF2
 48001                           indf0	equ	0xFEF
 48002                           postinc0	equ	0xFEE
 48003                           fsr0h	equ	0xFEA
 48004                           fsr0l	equ	0xFE9
 48005                           wreg	equ	0xFE8
 48006                           indf1	equ	0xFE7
 48007                           postinc1	equ	0xFE6
 48008                           postdec1	equ	0xFE5
 48009                           plusw1	equ	0xFE3
 48010                           fsr1h	equ	0xFE2
 48011                           fsr1l	equ	0xFE1
 48012                           indf2	equ	0xFDF
 48013                           postinc2	equ	0xFDE
 48014                           postdec2	equ	0xFDD
 48015                           plusw2	equ	0xFDB
 48016                           fsr2h	equ	0xFDA
 48017                           fsr2l	equ	0xFD9
 48018                           status	equ	0xFD8
 48019                           
 48020 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 48021 ;; Defined at:
 48022 ;;		line 1418 in file "usb_device.c"
 48023 ;; Parameters:    Size  Location     Type
 48024 ;;		None
 48025 ;; Auto vars:     Size  Location     Type
 48026 ;;		None
 48027 ;; Return value:  Size  Location     Type
 48028 ;;                  1    wreg      void 
 48029 ;; Registers used:
 48030 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 48031 ;; Tracked objects:
 48032 ;;		On entry : 0/0
 48033 ;;		On exit  : 0/0
 48034 ;;		Unchanged: 0/0
 48035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 48036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48040 ;;Total ram usage:        0 bytes
 48041 ;; Hardware stack levels used:    1
 48042 ;; This function calls:
 48043 ;;		Nothing
 48044 ;; This function is called by:
 48045 ;;		_USBDeviceTasks
 48046 ;;		_USBCtrlEPServiceComplete
 48047 ;;		_USBCtrlTrfRxService
 48048 ;; This function uses a non-reentrant model
 48049 ;;
 48050                           
 48051                           	psect	text194
 48052  011A96                     __ptext194:
 48053                           	opt stack 0
 48054  011A96                     _USBCtrlEPAllowStatusStage:
 48055                           	opt stack 13
 48056                           
 48057                           ;usb_device.c: 1425: if(USBStatusStageEnabledFlag1 == 0)
 48058                           
 48059                           ;incstack = 0
 48060  011A96  5022               	movf	_USBStatusStageEnabledFlag1,w,c	;volatile
 48061  011A98  A4D8               	btfss	status,2,c
 48062  011A9A  0012               	return	
 48063                           
 48064                           ;usb_device.c: 1426: {;usb_device.c: 1427: USBStatusStageEnabledFlag1 = 1;
 48065  011A9C  0E01               	movlw	1
 48066  011A9E  6E22               	movwf	_USBStatusStageEnabledFlag1,c	;volatile
 48067                           
 48068                           ;usb_device.c: 1428: if(USBStatusStageEnabledFlag2 == 0)
 48069  011AA0  0100               	movlb	0	; () banked
 48070  011AA2  51FE               	movf	_USBStatusStageEnabledFlag2& (0+255),w,b	;volatile
 48071  011AA4  A4D8               	btfss	status,2,c
 48072  011AA6  0012               	return	
 48073                           
 48074                           ; BSR set to: 0
 48075                           ;usb_device.c: 1429: {;usb_device.c: 1430: USBStatusStageEnabledFlag2 = 1;
 48076  011AA8  0E01               	movlw	1
 48077  011AAA  6FFE               	movwf	_USBStatusStageEnabledFlag2& (0+255),b	;volatile
 48078                           
 48079                           ; BSR set to: 0
 48080                           ;usb_device.c: 1434: if(controlTransferState == 2)
 48081  011AAC  0E02               	movlw	2
 48082  011AAE  1829               	xorwf	_controlTransferState,w,c	;volatile
 48083  011AB0  A4D8               	btfss	status,2,c
 48084  011AB2  D015               	goto	i2l214
 48085                           
 48086                           ; BSR set to: 0
 48087                           ;usb_device.c: 1435: {;usb_device.c: 1436: pBDTEntryIn[0]->CNT = 0;
 48088  011AB4  EE20 F001          	lfsr	2,1
 48089  011AB8  5010               	movf	_pBDTEntryIn,w,c
 48090  011ABA  26D9               	addwf	fsr2l,f,c
 48091  011ABC  5011               	movf	_pBDTEntryIn+1,w,c
 48092  011ABE  22DA               	addwfc	fsr2h,f,c
 48093  011AC0  0E00               	movlw	0
 48094  011AC2  6EDF               	movwf	indf2,c
 48095                           
 48096                           ; BSR set to: 0
 48097                           ;usb_device.c: 1437: pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 48098  011AC4  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48099  011AC8  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48100  011ACC  0E48               	movlw	72
 48101  011ACE  6EDF               	movwf	indf2,c
 48102                           
 48103                           ; BSR set to: 0
 48104                           ;usb_device.c: 1438: pBDTEntryIn[0]->STAT.Val |= 0x80;
 48105  011AD0  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48106  011AD4  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48107  011AD8  0E00               	movlw	0
 48108  011ADA  8EDB               	bsf	plusw2,7,c
 48109                           
 48110                           ;usb_device.c: 1439: }
 48111  011ADC  0012               	return	
 48112  011ADE                     i2l214:
 48113                           
 48114                           ; BSR set to: 0
 48115                           ;usb_device.c: 1440: else if(controlTransferState == 1)
 48116                           
 48117                           ; BSR set to: 0
 48118  011ADE  0429               	decf	_controlTransferState,w,c	;volatile
 48119  011AE0  A4D8               	btfss	status,2,c
 48120  011AE2  0012               	return	
 48121                           
 48122                           ; BSR set to: 0
 48123                           ;usb_device.c: 1441: {;usb_device.c: 1442: BothEP0OutUOWNsSet = 0;
 48124  011AE4  0E00               	movlw	0
 48125  011AE6  6E25               	movwf	_BothEP0OutUOWNsSet,c	;volatile
 48126                           
 48127                           ; BSR set to: 0
 48128                           ;usb_device.c: 1447: pBDTEntryEP0OutCurrent->CNT = 8;
 48129  011AE8  EE20 F001          	lfsr	2,1
 48130  011AEC  501C               	movf	_pBDTEntryEP0OutCurrent,w,c
 48131  011AEE  26D9               	addwf	fsr2l,f,c
 48132  011AF0  501D               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 48133  011AF2  22DA               	addwfc	fsr2h,f,c
 48134  011AF4  0E08               	movlw	8
 48135  011AF6  6EDF               	movwf	indf2,c
 48136                           
 48137                           ; BSR set to: 0
 48138                           ;usb_device.c: 1448: pBDTEntryEP0OutCurrent->ADR = ((uint16_t)(&SetupPkt));
 48139  011AF8  EE20 F002          	lfsr	2,2
 48140  011AFC  501C               	movf	_pBDTEntryEP0OutCurrent,w,c
 48141  011AFE  26D9               	addwf	fsr2l,f,c
 48142  011B00  501D               	movf	_pBDTEntryEP0OutCurrent+1,w,c
 48143  011B02  22DA               	addwfc	fsr2h,f,c
 48144  011B04  0E30               	movlw	48
 48145  011B06  6EDE               	movwf	postinc2,c
 48146  011B08  0E0D               	movlw	13
 48147  011B0A  6EDD               	movwf	postdec2,c
 48148                           
 48149                           ; BSR set to: 0
 48150                           ;usb_device.c: 1449: pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 48151  011B0C  C01C  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 48152  011B10  C01D  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 48153  011B14  0E04               	movlw	4
 48154  011B16  6EDF               	movwf	indf2,c
 48155                           
 48156                           ; BSR set to: 0
 48157                           ;usb_device.c: 1450: pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 48158  011B18  C01C  FFD9         	movff	_pBDTEntryEP0OutCurrent,fsr2l
 48159  011B1C  C01D  FFDA         	movff	_pBDTEntryEP0OutCurrent+1,fsr2h
 48160  011B20  0E00               	movlw	0
 48161  011B22  8EDB               	bsf	plusw2,7,c
 48162                           
 48163                           ; BSR set to: 0
 48164                           ;usb_device.c: 1451: BothEP0OutUOWNsSet = 1;
 48165  011B24  0E01               	movlw	1
 48166  011B26  6E25               	movwf	_BothEP0OutUOWNsSet,c	;volatile
 48167                           
 48168                           ; BSR set to: 0
 48169                           ;usb_device.c: 1455: pBDTEntryEP0OutNext->CNT = 8;
 48170  011B28  EE20 F001          	lfsr	2,1
 48171  011B2C  501A               	movf	_pBDTEntryEP0OutNext,w,c
 48172  011B2E  26D9               	addwf	fsr2l,f,c
 48173  011B30  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 48174  011B32  22DA               	addwfc	fsr2h,f,c
 48175  011B34  0E08               	movlw	8
 48176  011B36  6EDF               	movwf	indf2,c
 48177                           
 48178                           ; BSR set to: 0
 48179                           ;usb_device.c: 1456: pBDTEntryEP0OutNext->ADR = ((uint16_t)(&SetupPkt));
 48180  011B38  EE20 F002          	lfsr	2,2
 48181  011B3C  501A               	movf	_pBDTEntryEP0OutNext,w,c
 48182  011B3E  26D9               	addwf	fsr2l,f,c
 48183  011B40  501B               	movf	_pBDTEntryEP0OutNext+1,w,c
 48184  011B42  22DA               	addwfc	fsr2h,f,c
 48185  011B44  0E30               	movlw	48
 48186  011B46  6EDE               	movwf	postinc2,c
 48187  011B48  0E0D               	movlw	13
 48188  011B4A  6EDD               	movwf	postdec2,c
 48189                           
 48190                           ; BSR set to: 0
 48191                           ;usb_device.c: 1457: pBDTEntryEP0OutNext->STAT.Val = 0x80;
 48192  011B4C  C01A  FFD9         	movff	_pBDTEntryEP0OutNext,fsr2l
 48193  011B50  C01B  FFDA         	movff	_pBDTEntryEP0OutNext+1,fsr2h
 48194  011B54  0E80               	movlw	128
 48195  011B56  6EDF               	movwf	indf2,c
 48196                           
 48197                           ; BSR set to: 0
 48198                           
 48199                           ; BSR set to: 0
 48200                           
 48201                           ; BSR set to: 0
 48202  011B58  0012               	return	
 48203  011B5A                     __end_of_USBCtrlEPAllowStatusStage:
 48204                           	opt stack 0
 48205                           tosu	equ	0xFFF
 48206                           tosh	equ	0xFFE
 48207                           tosl	equ	0xFFD
 48208                           pclatu	equ	0xFFB
 48209                           pclath	equ	0xFFA
 48210                           tblptru	equ	0xFF8
 48211                           tblptrh	equ	0xFF7
 48212                           tblptrl	equ	0xFF6
 48213                           tablat	equ	0xFF5
 48214                           prodh	equ	0xFF4
 48215                           prodl	equ	0xFF3
 48216                           intcon	equ	0xFF2
 48217                           indf0	equ	0xFEF
 48218                           postinc0	equ	0xFEE
 48219                           fsr0h	equ	0xFEA
 48220                           fsr0l	equ	0xFE9
 48221                           wreg	equ	0xFE8
 48222                           indf1	equ	0xFE7
 48223                           postinc1	equ	0xFE6
 48224                           postdec1	equ	0xFE5
 48225                           plusw1	equ	0xFE3
 48226                           fsr1h	equ	0xFE2
 48227                           fsr1l	equ	0xFE1
 48228                           indf2	equ	0xFDF
 48229                           postinc2	equ	0xFDE
 48230                           postdec2	equ	0xFDD
 48231                           plusw2	equ	0xFDB
 48232                           fsr2h	equ	0xFDA
 48233                           fsr2l	equ	0xFD9
 48234                           status	equ	0xFD8
 48235                           
 48236 ;; *************** function _USBCtrlTrfInHandler *****************
 48237 ;; Defined at:
 48238 ;;		line 2594 in file "usb_device.c"
 48239 ;; Parameters:    Size  Location     Type
 48240 ;;		None
 48241 ;; Auto vars:     Size  Location     Type
 48242 ;;  lastDTS         1    1[COMRAM] unsigned char 
 48243 ;; Return value:  Size  Location     Type
 48244 ;;                  1    wreg      void 
 48245 ;; Registers used:
 48246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 48247 ;; Tracked objects:
 48248 ;;		On entry : 0/0
 48249 ;;		On exit  : 0/0
 48250 ;;		Unchanged: 0/0
 48251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 48252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48255 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48256 ;;Total ram usage:        1 bytes
 48257 ;; Hardware stack levels used:    1
 48258 ;; Hardware stack levels required when called:    1
 48259 ;; This function calls:
 48260 ;;		_USBCtrlTrfTxService
 48261 ;; This function is called by:
 48262 ;;		_USBCtrlEPService
 48263 ;; This function uses a non-reentrant model
 48264 ;;
 48265                           
 48266                           	psect	text195
 48267  011C18                     __ptext195:
 48268                           	opt stack 0
 48269  011C18                     _USBCtrlTrfInHandler:
 48270                           	opt stack 14
 48271                           
 48272                           ;usb_device.c: 2596: uint8_t lastDTS;;usb_device.c: 2598: lastDTS = pBDTEntryIn[0]->STAT
      +                          .DTS;
 48273                           
 48274                           ;incstack = 0
 48275  011C18  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48276  011C1C  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48277  011C20  0E00               	movlw	0
 48278  011C22  BCDF               	btfsc	indf2,6,c
 48279  011C24  0E01               	movlw	1
 48280  011C26  6E2F               	movwf	USBCtrlTrfInHandler@lastDTS,c
 48281                           
 48282                           ;usb_device.c: 2601: pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uintptr_t)pBDTEntryIn[0]) 
      +                          ^ 0x0004);
 48283  011C28  0E04               	movlw	4
 48284  011C2A  1810               	xorwf	_pBDTEntryIn,w,c
 48285  011C2C  6E10               	movwf	_pBDTEntryIn,c
 48286  011C2E  5011               	movf	_pBDTEntryIn+1,w,c
 48287  011C30  6E11               	movwf	_pBDTEntryIn+1,c
 48288                           
 48289                           ;usb_device.c: 2606: if(USBDeviceState == ADR_PENDING_STATE)
 48290  011C32  0E08               	movlw	8
 48291  011C34  182B               	xorwf	_USBDeviceState,w,c	;volatile
 48292  011C36  A4D8               	btfss	status,2,c
 48293  011C38  D00C               	goto	i2l341
 48294                           
 48295                           ;usb_device.c: 2607: {;usb_device.c: 2608: UADDR = (SetupPkt.bDevADR & 0x7F);
 48296  011C3A  010D               	movlb	13	; () banked
 48297  011C3C  5132               	movf	50,w,b	;volatile
 48298  011C3E  0B7F               	andlw	127
 48299  011C40  010F               	movlb	15	; () banked
 48300  011C42  6F38               	movwf	56,b	;volatile
 48301                           
 48302                           ; BSR set to: 15
 48303                           ;usb_device.c: 2609: if(UADDR != 0u)
 48304  011C44  5138               	movf	56,w,b	;volatile
 48305  011C46  B4D8               	btfsc	status,2,c
 48306  011C48  D002               	goto	i2l340
 48307                           
 48308                           ; BSR set to: 15
 48309                           ;usb_device.c: 2610: {;usb_device.c: 2611: USBDeviceState=ADDRESS_STATE;
 48310  011C4A  0E10               	movlw	16
 48311  011C4C  D001               	goto	L83
 48312  011C4E                     i2l340:
 48313                           
 48314                           ; BSR set to: 15
 48315                           ;usb_device.c: 2613: else;usb_device.c: 2614: {;usb_device.c: 2615: USBDeviceState=DEFAU
      +                          LT_STATE;
 48316                           
 48317                           ; BSR set to: 15
 48318  011C4E  0E04               	movlw	4
 48319  011C50                     L83:
 48320  011C50  6E2B               	movwf	_USBDeviceState,c	;volatile
 48321  011C52                     i2l341:
 48322                           
 48323                           ;usb_device.c: 2616: };usb_device.c: 2617: };usb_device.c: 2620: if(controlTransferState
      +                           == 1)
 48324                           
 48325                           ; BSR set to: 15
 48326                           
 48327                           ; BSR set to: 15
 48328  011C52  0429               	decf	_controlTransferState,w,c	;volatile
 48329  011C54  A4D8               	btfss	status,2,c
 48330  011C56  D03A               	goto	i2l342
 48331                           
 48332                           ;usb_device.c: 2621: {;usb_device.c: 2622: pBDTEntryIn[0]->ADR = ((uint16_t)(CtrlTrfData
      +                          ));
 48333  011C58  EE20 F002          	lfsr	2,2
 48334  011C5C  5010               	movf	_pBDTEntryIn,w,c
 48335  011C5E  26D9               	addwf	fsr2l,f,c
 48336  011C60  5011               	movf	_pBDTEntryIn+1,w,c
 48337  011C62  22DA               	addwfc	fsr2h,f,c
 48338  011C64  0E38               	movlw	56
 48339  011C66  6EDE               	movwf	postinc2,c
 48340  011C68  0E0D               	movlw	13
 48341  011C6A  6EDD               	movwf	postdec2,c
 48342                           
 48343                           ;usb_device.c: 2623: USBCtrlTrfTxService();
 48344  011C6C  ECB0  F08B         	call	_USBCtrlTrfTxService	;wreg free
 48345                           
 48346                           ;usb_device.c: 2629: if(shortPacketStatus == 2)
 48347  011C70  0E02               	movlw	2
 48348  011C72  182A               	xorwf	_shortPacketStatus,w,c	;volatile
 48349  011C74  A4D8               	btfss	status,2,c
 48350  011C76  D00D               	goto	i2l343
 48351                           
 48352                           ;usb_device.c: 2630: {;usb_device.c: 2633: pBDTEntryIn[0]->STAT.Val = 0x04;
 48353  011C78  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48354  011C7C  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48355  011C80  0E04               	movlw	4
 48356  011C82  6EDF               	movwf	indf2,c
 48357                           
 48358                           ;usb_device.c: 2634: pBDTEntryIn[0]->STAT.Val |= 0x80;
 48359  011C84  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48360  011C88  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48361  011C8C  0E00               	movlw	0
 48362  011C8E  8EDB               	bsf	plusw2,7,c
 48363                           
 48364                           ;usb_device.c: 2635: }
 48365  011C90  0012               	return	
 48366  011C92                     i2l343:
 48367                           
 48368                           ;usb_device.c: 2636: else;usb_device.c: 2637: {;usb_device.c: 2638: if(lastDTS == 0)
 48369  011C92  502F               	movf	USBCtrlTrfInHandler@lastDTS,w,c
 48370  011C94  A4D8               	btfss	status,2,c
 48371  011C96  D00D               	goto	i2l345
 48372                           
 48373                           ;usb_device.c: 2639: {;usb_device.c: 2640: pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08)
      +                          ;
 48374  011C98  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48375  011C9C  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48376  011CA0  0E48               	movlw	72
 48377  011CA2  6EDF               	movwf	indf2,c
 48378                           
 48379                           ;usb_device.c: 2641: pBDTEntryIn[0]->STAT.Val |= 0x80;
 48380  011CA4  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48381  011CA8  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48382  011CAC  0E00               	movlw	0
 48383  011CAE  8EDB               	bsf	plusw2,7,c
 48384                           
 48385                           ;usb_device.c: 2642: }
 48386  011CB0  0012               	return	
 48387  011CB2                     i2l345:
 48388                           
 48389                           ;usb_device.c: 2643: else;usb_device.c: 2644: {;usb_device.c: 2645: pBDTEntryIn[0]->STAT
      +                          .Val = 0x00|(0x08 & 0x08);
 48390  011CB2  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48391  011CB6  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48392  011CBA  0E08               	movlw	8
 48393  011CBC  6EDF               	movwf	indf2,c
 48394                           
 48395                           ;usb_device.c: 2646: pBDTEntryIn[0]->STAT.Val |= 0x80;
 48396  011CBE  C010  FFD9         	movff	_pBDTEntryIn,fsr2l
 48397  011CC2  C011  FFDA         	movff	_pBDTEntryIn+1,fsr2h
 48398  011CC6  0E00               	movlw	0
 48399  011CC8  8EDB               	bsf	plusw2,7,c
 48400                           
 48401                           ;usb_device.c: 2647: };usb_device.c: 2648: };usb_device.c: 2649: }
 48402  011CCA  0012               	return	
 48403  011CCC                     i2l342:
 48404                           
 48405                           ;usb_device.c: 2650: else;usb_device.c: 2651: {;usb_device.c: 2655: if(outPipes[0].info.
      +                          bits.busy == 1)
 48406  011CCC  BE04               	btfsc	_outPipes+3,7,c	;volatile
 48407                           
 48408                           ;usb_device.c: 2660: };usb_device.c: 2661: outPipes[0].info.bits.busy = 0;
 48409                           
 48410                           ;usb_device.c: 2658: {;usb_device.c: 2659: outPipes[0].pFunc();
 48411  011CCE  9E04               	bcf	_outPipes+3,7,c	;volatile
 48412                           
 48413                           ;usb_device.c: 2662: };usb_device.c: 2664: controlTransferState = 0;
 48414  011CD0  0E00               	movlw	0
 48415  011CD2  6E29               	movwf	_controlTransferState,c	;volatile
 48416  011CD4  0012               	return	
 48417  011CD6                     __end_of_USBCtrlTrfInHandler:
 48418                           	opt stack 0
 48419                           tosu	equ	0xFFF
 48420                           tosh	equ	0xFFE
 48421                           tosl	equ	0xFFD
 48422                           pclatu	equ	0xFFB
 48423                           pclath	equ	0xFFA
 48424                           tblptru	equ	0xFF8
 48425                           tblptrh	equ	0xFF7
 48426                           tblptrl	equ	0xFF6
 48427                           tablat	equ	0xFF5
 48428                           prodh	equ	0xFF4
 48429                           prodl	equ	0xFF3
 48430                           intcon	equ	0xFF2
 48431                           indf0	equ	0xFEF
 48432                           postinc0	equ	0xFEE
 48433                           fsr0h	equ	0xFEA
 48434                           fsr0l	equ	0xFE9
 48435                           wreg	equ	0xFE8
 48436                           indf1	equ	0xFE7
 48437                           postinc1	equ	0xFE6
 48438                           postdec1	equ	0xFE5
 48439                           plusw1	equ	0xFE3
 48440                           fsr1h	equ	0xFE2
 48441                           fsr1l	equ	0xFE1
 48442                           indf2	equ	0xFDF
 48443                           postinc2	equ	0xFDE
 48444                           postdec2	equ	0xFDD
 48445                           plusw2	equ	0xFDB
 48446                           fsr2h	equ	0xFDA
 48447                           fsr2l	equ	0xFD9
 48448                           status	equ	0xFD8
 48449                           
 48450 ;; *************** function _USBCtrlTrfTxService *****************
 48451 ;; Defined at:
 48452 ;;		line 1773 in file "usb_device.c"
 48453 ;; Parameters:    Size  Location     Type
 48454 ;;		None
 48455 ;; Auto vars:     Size  Location     Type
 48456 ;;  byteToSend      1    0[COMRAM] unsigned char 
 48457 ;; Return value:  Size  Location     Type
 48458 ;;                  1    wreg      void 
 48459 ;; Registers used:
 48460 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 48461 ;; Tracked objects:
 48462 ;;		On entry : 0/0
 48463 ;;		On exit  : 0/0
 48464 ;;		Unchanged: 0/0
 48465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK8   BANK9  BANK10  BANK11  BANK12 BANK13
      +h BANK13l  BANK14
 48466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48469 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 48470 ;;Total ram usage:        1 bytes
 48471 ;; Hardware stack levels used:    1
 48472 ;; This function calls:
 48473 ;;		Nothing
 48474 ;; This function is called by:
 48475 ;;		_USBCtrlEPAllowDataStage
 48476 ;;		_USBCtrlTrfInHandler
 48477 ;; This function uses a non-reentrant model
 48478 ;;
 48479                           
 48480                           	psect	text196
 48481  011760                     __ptext196:
 48482                           	opt stack 0
 48483  011760                     _USBCtrlTrfTxService:
 48484                           	opt stack 12
 48485                           
 48486                           ;usb_device.c: 1775: uint8_t byteToSend;;usb_device.c: 1779: byteToSend = 8;
 48487                           
 48488                           ;incstack = 0
 48489  011760  0E08               	movlw	8
 48490  011762  6E2E               	movwf	USBCtrlTrfTxService@byteToSend,c
 48491                           
 48492                           ;usb_device.c: 1780: if(inPipes[0].wCount.Val < (uint8_t)8)
 48493  011764  500F               	movf	_inPipes+5,w,c	;volatile
 48494  011766  E110               	bnz	i2l11572
 48495  011768  0E08               	movlw	8
 48496  01176A  5C0E               	subwf	_inPipes+4,w,c	;volatile
 48497  01176C  B0D8               	btfsc	status,0,c
 48498  01176E  D00C               	goto	i2l247
 48499                           
 48500                           ;usb_device.c: 1781: {;usb_device.c: 1782: byteToSend = inPipes[0].wCount.Val;
 48501  011770  C00E  F02E         	movff	_inPipes+4,USBCtrlTrfTxService@byteToSend	;volatile
 48502                           
 48503                           ;usb_device.c: 1789: if(shortPacketStatus == 0)
 48504  011774  502A               	movf	_shortPacketStatus,w,c	;volatile
 48505  011776  A4D8               	btfss	status,2,c
 48506  011778  D002               	goto	i2l245
 48507                           
 48508                           ;usb_device.c: 1790: {;usb_device.c: 1791: shortPacketStatus = 1;
 48509  01177A  0E01               	movlw	1
 48510  01177C  D004               	goto	L84
 48511  01177E                     i2l245:
 48512                           
 48513                           ;usb_device.c: 1793: else if(shortPacketStatus == 1)
 48514  01177E  042A               	decf	_shortPacketStatus,w,c	;volatile
 48515  011780  A4D8               	btfss	status,2,c
 48516  011782  D002               	goto	i2l247
 48517                           
 48518                           ;usb_device.c: 1794: {;usb_device.c: 1795: shortPacketStatus = 2;
 48519  011784  0E02               	movlw	2
 48520  011786                     L84:
 48521  011786  6E2A               	movwf	_shortPacketStatus,c	;volatile
 48522  011788                     i2l247:
 48523  011788                     i2l11572:
 48524                           
 48525                           ;usb_device.c: 1796: };usb_device.c: 1797: };usb_device.c: 1801: inPipes[0].wCount.Val -
      +                          = byteToSend;
 48526  011788  502E               	movf	USBCtrlTrfTxService@byteToSend,w,c
 48527  01178A  5E0E               	subwf	_inPipes+4,f,c	;volatile
 48528  01178C  0E00               	movlw	0
 48529  01178E  5A0F               	subwfb	_inPipes+5,f,c	;volatile
 48530                           
 48531                           ;usb_device.c: 1806: pBDTEntryIn[0]->CNT = byteToSend;
 48532  011790  EE20 F001          	lfsr	2,1
 48533  011794  5010               	movf	_pBDTEntryIn,w,c
 48534  011796  26D9               	addwf	fsr2l,f,c
 48535  011798  5011               	movf	_pBDTEntryIn+1,w,c
 48536  01179A  22DA               	addwfc	fsr2h,f,c
 48537  01179C  C02E  FFDF         	movff	USBCtrlTrfTxService@byteToSend,indf2
 48538                           
 48539                           ;usb_device.c: 1810: pDst = (volatile uint8_t*)CtrlTrfData;
 48540  0117A0  0E38               	movlw	56
 48541  0117A2  0101               	movlb	1	; () banked
 48542  0117A4  6F6E               	movwf	_pDst& (0+255),b
 48543  0117A6  0E0D               	movlw	13
 48544  0117A8  6F6F               	movwf	(_pDst+1)& (0+255),b
 48545                           
 48546                           ; BSR set to: 1
 48547                           ;usb_device.c: 1811: if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 48548  0117AA  A00D               	btfss	_inPipes+3,0,c	;volatile
 48549  0117AC  D01D               	goto	i2l249
 48550  0117AE  D03C               	goto	i2l253
 48551  0117B0                     
 48552                           ; BSR set to: 1
 48553                           ;usb_device.c: 1814: {;usb_device.c: 1815: *pDst++ = *inPipes[0].pSrc.bRom++;
 48554                           
 48555                           ; BSR set to: 1
 48556  0117B0  C00A  FFF6         	movff	_inPipes,tblptrl	;volatile
 48557  0117B4  C00B  FFF7         	movff	_inPipes+1,tblptrh	;volatile
 48558  0117B8  0E00               	movlw	low (__mediumconst shr (0+16))
 48559  0117BA  6EF8               	movwf	tblptru,c
 48560  0117BC  C16E  FFD9         	movff	_pDst,fsr2l
 48561  0117C0  C16F  FFDA         	movff	_pDst+1,fsr2h
 48562  0117C4  0E0E               	movlw	(high __ramtop+-1)
 48563  0117C6  64F7               	cpfsgt	tblptrh,c
 48564  0117C8  D003               	bra	i2u959_47
 48565  0117CA  0008               	tblrd		*
 48566  0117CC  50F5               	movf	tablat,w,c
 48567  0117CE  D005               	bra	i2u959_40
 48568  0117D0                     i2u959_47:
 48569  0117D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 48570  0117D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 48571  0117D8  50EF               	movf	indf0,w,c
 48572  0117DA                     i2u959_40:
 48573  0117DA  6EDF               	movwf	indf2,c
 48574  0117DC  4A0A               	infsnz	_inPipes,f,c	;volatile
 48575  0117DE  2A0B               	incf	_inPipes+1,f,c	;volatile
 48576  0117E0  0101               	movlb	1	; () banked
 48577  0117E2  4B6E               	infsnz	_pDst& (0+255),f,b
 48578  0117E4  2B6F               	incf	(_pDst+1)& (0+255),f,b
 48579                           
 48580                           ; BSR set to: 1
 48581                           ;usb_device.c: 1816: byteToSend--;
 48582  0117E6  062E               	decf	USBCtrlTrfTxService@byteToSend,f,c
 48583  0117E8                     i2l249:
 48584                           
 48585                           ; BSR set to: 1
 48586                           
 48587                           ; BSR set to: 1
 48588  0117E8  502E               	movf	USBCtrlTrfTxService@byteToSend,w,c
 48589  0117EA  B4D8               	btfsc	status,2,c
 48590  0117EC  0012               	return	
 48591  0117EE  D7E0               	goto	i2l250
 48592  0117F0                     
 48593                           ; BSR set to: 1
 48594                           ;usb_device.c: 1822: {;usb_device.c: 1823: *pDst++ = *inPipes[0].pSrc.bRam++;
 48595                           
 48596                           ; BSR set to: 1
 48597  0117F0  C00A  FFF6         	movff	_inPipes,tblptrl	;volatile
 48598  0117F4  C00B  FFF7         	movff	_inPipes+1,tblptrh	;volatile
 48599  0117F8  0E00               	movlw	low (__mediumconst shr (0+16))
 48600  0117FA  6EF8               	movwf	tblptru,c
 48601  0117FC  C16E  FFD9         	movff	_pDst,fsr2l
 48602  011800  C16F  FFDA         	movff	_pDst+1,fsr2h
 48603  011804  0E0E               	movlw	(high __ramtop+-1)
 48604  011806  64F7               	cpfsgt	tblptrh,c
 48605  011808  D003               	bra	i2u961_47
 48606  01180A  0008               	tblrd		*
 48607  01180C  50F5               	movf	tablat,w,c
 48608  01180E  D005               	bra	i2u961_40
 48609  011810                     i2u961_47:
 48610  011810  CFF6 FFE9          	movff	tblptrl,fsr0l
 48611  011814  CFF7 FFEA          	movff	tblptrh,fsr0h
 48612  011818  50EF               	movf	indf0,w,c
 48613  01181A                     i2u961_40:
 48614  01181A  6EDF               	movwf	indf2,c
 48615  01181C  4A0A               	infsnz	_inPipes,f,c	;volatile
 48616  01181E  2A0B               	incf	_inPipes+1,f,c	;volatile
 48617  011820  0101               	movlb	1	; () banked
 48618  011822  4B6E               	infsnz	_pDst& (0+255),f,b
 48619  011824  2B6F               	incf	(_pDst+1)& (0+255),f,b
 48620                           
 48621                           ; BSR set to: 1
 48622                           ;usb_device.c: 1824: byteToSend--;
 48623  011826  062E               	decf	USBCtrlTrfTxService@byteToSend,f,c
 48624  011828                     i2l253:
 48625                           
 48626                           ; BSR set to: 1
 48627                           
 48628                           ; BSR set to: 1
 48629  011828  502E               	movf	USBCtrlTrfTxService@byteToSend,w,c
 48630  01182A  B4D8               	btfsc	status,2,c
 48631  01182C  0012               	return	
 48632  01182E  D7E0               	goto	i2l254
 48633  011830                     __end_of_USBCtrlTrfTxService:
 48634                           	opt stack 0
 48635                           tosu	equ	0xFFF
 48636                           tosh	equ	0xFFE
 48637                           tosl	equ	0xFFD
 48638                           pclatu	equ	0xFFB
 48639                           pclath	equ	0xFFA
 48640                           tblptru	equ	0xFF8
 48641                           tblptrh	equ	0xFF7
 48642                           tblptrl	equ	0xFF6
 48643                           tablat	equ	0xFF5
 48644                           prodh	equ	0xFF4
 48645                           prodl	equ	0xFF3
 48646                           intcon	equ	0xFF2
 48647                           indf0	equ	0xFEF
 48648                           postinc0	equ	0xFEE
 48649                           fsr0h	equ	0xFEA
 48650                           fsr0l	equ	0xFE9
 48651                           wreg	equ	0xFE8
 48652                           indf1	equ	0xFE7
 48653                           postinc1	equ	0xFE6
 48654                           postdec1	equ	0xFE5
 48655                           plusw1	equ	0xFE3
 48656                           fsr1h	equ	0xFE2
 48657                           fsr1l	equ	0xFE1
 48658                           indf2	equ	0xFDF
 48659                           postinc2	equ	0xFDE
 48660                           postdec2	equ	0xFDD
 48661                           plusw2	equ	0xFDB
 48662                           fsr2h	equ	0xFDA
 48663                           fsr2l	equ	0xFD9
 48664                           status	equ	0xFD8
 48665                           tosu	equ	0xFFF
 48666                           tosh	equ	0xFFE
 48667                           tosl	equ	0xFFD
 48668                           pclatu	equ	0xFFB
 48669                           pclath	equ	0xFFA
 48670                           tblptru	equ	0xFF8
 48671                           tblptrh	equ	0xFF7
 48672                           tblptrl	equ	0xFF6
 48673                           tablat	equ	0xFF5
 48674                           prodh	equ	0xFF4
 48675                           prodl	equ	0xFF3
 48676                           intcon	equ	0xFF2
 48677                           indf0	equ	0xFEF
 48678                           postinc0	equ	0xFEE
 48679                           fsr0h	equ	0xFEA
 48680                           fsr0l	equ	0xFE9
 48681                           wreg	equ	0xFE8
 48682                           indf1	equ	0xFE7
 48683                           postinc1	equ	0xFE6
 48684                           postdec1	equ	0xFE5
 48685                           plusw1	equ	0xFE3
 48686                           fsr1h	equ	0xFE2
 48687                           fsr1l	equ	0xFE1
 48688                           indf2	equ	0xFDF
 48689                           postinc2	equ	0xFDE
 48690                           postdec2	equ	0xFDD
 48691                           plusw2	equ	0xFDB
 48692                           fsr2h	equ	0xFDA
 48693                           fsr2l	equ	0xFD9
 48694                           status	equ	0xFD8
 48695                           
 48696                           	psect	text197
 48697  000000                     __ptext197:
 48698                           	opt stack 0
 48699                           tosu	equ	0xFFF
 48700                           tosh	equ	0xFFE
 48701                           tosl	equ	0xFFD
 48702                           pclatu	equ	0xFFB
 48703                           pclath	equ	0xFFA
 48704                           tblptru	equ	0xFF8
 48705                           tblptrh	equ	0xFF7
 48706                           tblptrl	equ	0xFF6
 48707                           tablat	equ	0xFF5
 48708                           prodh	equ	0xFF4
 48709                           prodl	equ	0xFF3
 48710                           intcon	equ	0xFF2
 48711                           indf0	equ	0xFEF
 48712                           postinc0	equ	0xFEE
 48713                           fsr0h	equ	0xFEA
 48714                           fsr0l	equ	0xFE9
 48715                           wreg	equ	0xFE8
 48716                           indf1	equ	0xFE7
 48717                           postinc1	equ	0xFE6
 48718                           postdec1	equ	0xFE5
 48719                           plusw1	equ	0xFE3
 48720                           fsr1h	equ	0xFE2
 48721                           fsr1l	equ	0xFE1
 48722                           indf2	equ	0xFDF
 48723                           postinc2	equ	0xFDE
 48724                           postdec2	equ	0xFDD
 48725                           plusw2	equ	0xFDB
 48726                           fsr2h	equ	0xFDA
 48727                           fsr2l	equ	0xFD9
 48728                           status	equ	0xFD8
 48729                           
 48730                           	psect	rparam
 48731  0000                     tosu	equ	0xFFF
 48732                           tosh	equ	0xFFE
 48733                           tosl	equ	0xFFD
 48734                           pclatu	equ	0xFFB
 48735                           pclath	equ	0xFFA
 48736                           tblptru	equ	0xFF8
 48737                           tblptrh	equ	0xFF7
 48738                           tblptrl	equ	0xFF6
 48739                           tablat	equ	0xFF5
 48740                           prodh	equ	0xFF4
 48741                           prodl	equ	0xFF3
 48742                           intcon	equ	0xFF2
 48743                           indf0	equ	0xFEF
 48744                           postinc0	equ	0xFEE
 48745                           fsr0h	equ	0xFEA
 48746                           fsr0l	equ	0xFE9
 48747                           wreg	equ	0xFE8
 48748                           indf1	equ	0xFE7
 48749                           postinc1	equ	0xFE6
 48750                           postdec1	equ	0xFE5
 48751                           plusw1	equ	0xFE3
 48752                           fsr1h	equ	0xFE2
 48753                           fsr1l	equ	0xFE1
 48754                           indf2	equ	0xFDF
 48755                           postinc2	equ	0xFDE
 48756                           postdec2	equ	0xFDD
 48757                           plusw2	equ	0xFDB
 48758                           fsr2h	equ	0xFDA
 48759                           fsr2l	equ	0xFD9
 48760                           status	equ	0xFD8
 48761                           
 48762                           	psect	temp
 48763  00005B                     btemp:
 48764                           	opt stack 0
 48765  00005B                     	ds	1
 48766  0000                     int$flags	set	btemp
 48767  0000                     wtemp8	set	btemp+1
 48768  0000                     ttemp5	set	btemp+1
 48769  0000                     ttemp6	set	btemp+4
 48770  0000                     ttemp7	set	btemp+8
 48771                           tosu	equ	0xFFF
 48772                           tosh	equ	0xFFE
 48773                           tosl	equ	0xFFD
 48774                           pclatu	equ	0xFFB
 48775                           pclath	equ	0xFFA
 48776                           tblptru	equ	0xFF8
 48777                           tblptrh	equ	0xFF7
 48778                           tblptrl	equ	0xFF6
 48779                           tablat	equ	0xFF5
 48780                           prodh	equ	0xFF4
 48781                           prodl	equ	0xFF3
 48782                           intcon	equ	0xFF2
 48783                           indf0	equ	0xFEF
 48784                           postinc0	equ	0xFEE
 48785                           fsr0h	equ	0xFEA
 48786                           fsr0l	equ	0xFE9
 48787                           wreg	equ	0xFE8
 48788                           indf1	equ	0xFE7
 48789                           postinc1	equ	0xFE6
 48790                           postdec1	equ	0xFE5
 48791                           plusw1	equ	0xFE3
 48792                           fsr1h	equ	0xFE2
 48793                           fsr1l	equ	0xFE1
 48794                           indf2	equ	0xFDF
 48795                           postinc2	equ	0xFDE
 48796                           postdec2	equ	0xFDD
 48797                           plusw2	equ	0xFDB
 48798                           fsr2h	equ	0xFDA
 48799                           fsr2l	equ	0xFD9
 48800                           status	equ	0xFD8


Data Sizes:
    Strings     69
    Constant    4648
    Data        146
    BSS         1469
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      90
    BANK0           160    137     160
    BANK1           256      4     255
    BANK2           256      0     208
    BANK3           256      0      64
    BANK4           256      0       0
    BANK5           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13h         115      0       0
    BANK13l          33      0       0
    BANK14          176      0       0

Pointer List with Targets:

    ExternalFlash_MediaInitialize@config	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ExternalFlash_CapacityRead@config	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ExternalFlash_SectorSizeRead@config	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ExternalFlash_MediaDetect@config	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ExternalFlash_SectorRead@config	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ExternalFlash_WriteProtectStateGet@config	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ExternalFlash_SectorWrite@config	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$6$2	PTR unsigned char  size(2) Largest target is 512
		 -> msd_buffer(BIGRAMll[512]), 

    S2167$6$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$4$2	PTR unsigned char  size(2) Largest target is 512
		 -> msd_buffer(BIGRAMll[512]), 

    S2167$4$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$5$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$2$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$1$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$0$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$3$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAMll[512]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 8
		 -> configFile_extention(BANK1[3]), configFile_name(BANK1[8]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 10
		 -> display_prepare@temp(BANK0[10]), _display_itoa@tmp(BANK0[10]), _display_padded_itoa@tmp(BANK0[10]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 10
		 -> display_prepare@temp(BANK0[10]), _display_itoa@tmp(BANK0[10]), _display_padded_itoa@tmp(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK1[2]), BDT(BIGRAMll[48]), UEP1(SFR_1[1]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK1[2]), BDT(BIGRAMll[48]), UEP1(SFR_1[1]), 

    memcpy@d1	PTR void  size(2) Largest target is 512
		 -> fat_create_file@root_entry(BANK0[32]), _flash_set_page_size@command(BANK0[4]), display_content(BANK2[80]), ToSendDataBuffer(BANK3[64]), 
		 -> msd_buffer(BIGRAMll[512]), SetupPkt(BIGRAMhl[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 512
		 -> fat_create_file@root_entry(BANK0[32]), _flash_set_page_size@command(BANK0[4]), display_content(BANK2[80]), ToSendDataBuffer(BANK3[64]), 
		 -> msd_buffer(BIGRAMll[512]), SetupPkt(BIGRAMhl[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 3759
		 -> configFile_extention(BANK1[3]), configFile_name(BANK1[8]), flash_command_pagesize_528(CODE[4]), flash_command_pagesize_512(CODE[4]), 
		 -> STR_6(CODE[6]), STR_5(CODE[9]), STR_4(CODE[7]), STR_3(CODE[9]), 
		 -> dc_manual(CODE[80]), dc_zero(CODE[80]), STR_2(CODE[7]), STR_1(CODE[9]), 
		 -> dc_arc2(CODE[80]), dc_arc1(CODE[80]), dc_divide2(CODE[80]), dc_divide1(CODE[80]), 
		 -> dc_setup2(CODE[80]), dc_setup1(CODE[80]), dc_main(CODE[80]), ReceivedDataBuffer(BANK2[64]), 
		 -> os.current_position_in_degrees(BANK1[2]), config(BANK1[22]), os.current_position_in_steps(BANK1[4]), os(BANK1[48]), 
		 -> inq_resp(CODE[36]), RAM(DATA[3759]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 3759
		 -> configFile_extention(BANK1[3]), configFile_name(BANK1[8]), flash_command_pagesize_528(CODE[4]), flash_command_pagesize_512(CODE[4]), 
		 -> STR_6(CODE[6]), STR_5(CODE[9]), STR_4(CODE[7]), STR_3(CODE[9]), 
		 -> dc_manual(CODE[80]), dc_zero(CODE[80]), STR_2(CODE[7]), STR_1(CODE[9]), 
		 -> dc_arc2(CODE[80]), dc_arc1(CODE[80]), dc_divide2(CODE[80]), dc_divide1(CODE[80]), 
		 -> dc_setup2(CODE[80]), dc_setup1(CODE[80]), dc_main(CODE[80]), ReceivedDataBuffer(BANK2[64]), 
		 -> os.current_position_in_degrees(BANK1[2]), config(BANK1[22]), os.current_position_in_steps(BANK1[4]), os(BANK1[48]), 
		 -> inq_resp(CODE[36]), RAM(DATA[3759]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), 

    utoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> _display_itoa@tmp(BANK0[10]), _display_padded_itoa@tmp(BANK0[10]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 10
		 -> _display_itoa@tmp(BANK0[10]), _display_padded_itoa@tmp(BANK0[10]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> _display_itoa@tmp(BANK0[10]), _display_padded_itoa@tmp(BANK0[10]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> _display_itoa@tmp(BANK0[10]), _display_padded_itoa@tmp(BANK0[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), 

    _add_item@item_string	PTR unsigned char  size(2) Largest target is 24
		 -> beep_duration_string(CODE[14]), maximum_speed_manual_string(CODE[21]), initial_speed_manual_string(CODE[21]), maximum_speed_arc_string(CODE[18]), 
		 -> initial_speed_arc_string(CODE[18]), maximum_speed_string(CODE[14]), minimum_speed_string(CODE[14]), overshoot_cost_in_steps_string(CODE[24]), 
		 -> overshoot_in_steps_string(CODE[19]), inverse_direction_string(CODE[18]), full_circle_in_steps_string(CODE[21]), 

    _add_item@buffer	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), 

    _parse_jump_steps@out_buffer	PTR unsigned char  size(2) Largest target is 64
		 -> ToSendDataBuffer(BANK3[64]), 

    _parse_jump_steps@out_idx_ptr	PTR unsigned char  size(2) Largest target is 1
		 -> api_parse@out_idx(BANK0[1]), 

    _parse_jump_steps@data	PTR unsigned char  size(2) Largest target is 64
		 -> ReceivedDataBuffer(BANK2[64]), 

    _parse_command_long@out_idx_ptr	PTR unsigned char  size(2) Largest target is 1
		 -> api_parse@out_idx(BANK0[1]), 

    _parse_command_long@out_buffer	PTR unsigned char  size(2) Largest target is 64
		 -> ToSendDataBuffer(BANK3[64]), 

    _parse_command_long@data	PTR unsigned char  size(2) Largest target is 64
		 -> ReceivedDataBuffer(BANK2[64]), 

    _fill_buffer_get_mode_details@outBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> ToSendDataBuffer(BANK3[64]), 

    _fill_buffer_get_display@outBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> ToSendDataBuffer(BANK3[64]), 

    _fill_buffer_get_status@outBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> ToSendDataBuffer(BANK3[64]), 

    api_parse@outBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> ToSendDataBuffer(BANK3[64]), 

    api_parse@inBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> ReceivedDataBuffer(BANK2[64]), 

    api_parse@out_idx_ptr	PTR unsigned char  size(2) Largest target is 1
		 -> api_parse@out_idx(BANK0[1]), 

    api_prepare@outBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> ToSendDataBuffer(BANK3[64]), 

    api_prepare@inBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> ReceivedDataBuffer(BANK2[64]), 

    spi_tx_rx@data	PTR unsigned char  size(2) Largest target is 512
		 -> fat_modify_file@root(BANK0[32]), fat_resize_file@root(BANK0[32]), fat_read_from_file@root(COMRAM[32]), fat_rename_file@root(COMRAM[32]), 
		 -> fat_get_file_size@file_size(COMRAM[4]), _get_first_cluster@first_cluster(COMRAM[2]), _read_fat@value(BANK0[2]), _root_is_available@first_byte(BANK0[1]), 
		 -> buffer(BIGRAMll[512]), _flash_get_status@status(BANK0[2]), msd_buffer(BIGRAMll[512]), 

    spi_tx_rx@command	PTR unsigned char  size(2) Largest target is 4
		 -> _flash_buffer_read@command(COMRAM[4]), _flash_partial_read@command(BANK0[4]), _flash_get_status@command(BANK0[1]), 

    spi_tx_tx@data	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), fat_resize_file@root(BANK0[32]), fat_rename_file@root(COMRAM[32]), fat_create_file@root_entry(BANK0[32]), 
		 -> _delete_root@deleted_value(COMRAM[1]), buffer(BIGRAMll[512]), msd_buffer(BIGRAMll[512]), 

    spi_tx_tx@command	PTR unsigned char  size(2) Largest target is 4
		 -> _flash_write_to_buffer@command(BANK0[4]), 

    spi_tx@data	PTR unsigned char  size(2) Largest target is 4
		 -> flash_set_power_state@command(COMRAM[1]), _flash_write_page_from_buffer@command(BANK0[4]), _flash_erase_page@command(COMRAM[4]), _flash_compare_page_to_buffer@command(BANK0[4]), 
		 -> _flash_copy_page_to_buffer@command(BANK0[4]), _flash_wakeup@command(BANK0[1]), _flash_set_page_size@command(BANK0[4]), 

    fat_get_file_information@data	PTR struct . size(2) Largest target is 32
		 -> fat_modify_file@root(BANK0[32]), fat_resize_file@root(BANK0[32]), fat_read_from_file@root(COMRAM[32]), fat_rename_file@root(COMRAM[32]), 

    fat_modify_file@data	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), 

    fat_create_file@extension	PTR unsigned char  size(2) Largest target is 3
		 -> configFile_extention(BANK1[3]), 

    fat_create_file@name	PTR unsigned char  size(2) Largest target is 8
		 -> configFile_name(BANK1[8]), 

    fat_find_file@extension	PTR unsigned char  size(2) Largest target is 3
		 -> configFile_extention(BANK1[3]), 

    fat_find_file@name	PTR unsigned char  size(2) Largest target is 8
		 -> configFile_name(BANK1[8]), 

    _write_root@data	PTR struct . size(2) Largest target is 32
		 -> fat_resize_file@root(BANK0[32]), fat_rename_file@root(COMRAM[32]), fat_create_file@root_entry(BANK0[32]), 

    _write_value_to_offset@buffer	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAMll[512]), 

    _read_value_from_offset@buffer	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAMll[512]), 

    _get_available_offset_from_buffer@buffer	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAMll[512]), 

    ExternalFlash_SectorWrite@buffer	PTR unsigned char  size(2) Largest target is 512
		 -> msd_buffer(BIGRAMll[512]), 

    ExternalFlash_SectorRead@buffer	PTR unsigned char  size(2) Largest target is 512
		 -> msd_buffer(BIGRAMll[512]), 

    sp__ExternalFlash_MediaInitialize	PTR struct . size(2) Largest target is 5
		 -> mediaInformation(BANK1[5]), 

    flash_partial_write@data	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), fat_resize_file@root(BANK0[32]), fat_rename_file@root(COMRAM[32]), fat_create_file@root_entry(BANK0[32]), 
		 -> _delete_root@deleted_value(COMRAM[1]), 

    flash_partial_read@data	PTR unsigned char  size(2) Largest target is 32
		 -> fat_modify_file@root(BANK0[32]), fat_resize_file@root(BANK0[32]), fat_read_from_file@root(COMRAM[32]), fat_rename_file@root(COMRAM[32]), 
		 -> fat_get_file_size@file_size(COMRAM[4]), _get_first_cluster@first_cluster(COMRAM[2]), _read_fat@value(BANK0[2]), _root_is_available@first_byte(BANK0[1]), 

    flash_sector_write@data	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAMll[512]), msd_buffer(BIGRAMll[512]), 

    flash_sector_read@data	PTR unsigned char  size(2) Largest target is 512
		 -> buffer(BIGRAMll[512]), msd_buffer(BIGRAMll[512]), 

    _flash_partial_read@data	PTR unsigned char  size(2) Largest target is 512
		 -> fat_modify_file@root(BANK0[32]), fat_resize_file@root(BANK0[32]), fat_read_from_file@root(COMRAM[32]), fat_rename_file@root(COMRAM[32]), 
		 -> fat_get_file_size@file_size(COMRAM[4]), _get_first_cluster@first_cluster(COMRAM[2]), _read_fat@value(BANK0[2]), _root_is_available@first_byte(BANK0[1]), 
		 -> buffer(BIGRAMll[512]), msd_buffer(BIGRAMll[512]), 

    _flash_write_to_buffer@data	PTR unsigned char  size(2) Largest target is 512
		 -> ConfigFile_buffer(BIGRAMll[512]), fat_resize_file@root(BANK0[32]), fat_rename_file@root(COMRAM[32]), fat_create_file@root_entry(BANK0[32]), 
		 -> _delete_root@deleted_value(COMRAM[1]), buffer(BIGRAMll[512]), msd_buffer(BIGRAMll[512]), 

    _display_itoa_long@text	PTR unsigned char  size(2) Largest target is 10
		 -> display_prepare@temp(BANK0[10]), 

    _display_itoa@text	PTR unsigned char  size(2) Largest target is 80
		 -> display_prepare@temp(BANK0[10]), display_content(BANK2[80]), 

    _display_signed_itoa@text	PTR unsigned char  size(2) Largest target is 10
		 -> display_prepare@temp(BANK0[10]), 

    _display_padded_itoa@text	PTR unsigned char  size(2) Largest target is 10
		 -> display_prepare@temp(BANK0[10]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 10
		 -> _display_itoa@tmp(BANK0[10]), _display_padded_itoa@tmp(BANK0[10]), 

    i2c_display_program_custom_character@bit_pattern	PTR unsigned char  size(2) Largest target is 8
		 -> bit_pattern_ae(CODE[8]), bit_pattern_degree(CODE[8]), bit_pattern_verticalbar(CODE[8]), 

    i2c_display_write_fixed@data	PTR unsigned char  size(2) Largest target is 80
		 -> display_content(BANK2[80]), 

    _i2c_write@data	PTR unsigned char  size(2) Largest target is 17
		 -> i2c_display_program_custom_character@data_array(BANK0[11]), _ic2_display_set_cgram_address@data_array(BANK0[3]), _ic2_display_set_ddram_address@data_array(BANK0[2]), i2c_display_init@init_sequence(BANK0[9]), 
		 -> _i2c_display_send_init_sequence@init_sequence(COMRAM[9]), i2c_eeprom_read@addr(COMRAM[1]), i2c_eeprom_write@dat(COMRAM[17]), i2c_eeprom_readByte@addr(COMRAM[1]), 
		 -> i2c_eeprom_writeByte@dat(COMRAM[2]), i2c_adc_start@configuration_byte(COMRAM[1]), 

    USBOutHandle	PTR volatile void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBInHandle	PTR volatile void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), USTATcopy(COMRAM[1]), USBActiveConfiguration(COMRAM[1]), NULL(NULL[0]), 
		 -> BDT(BIGRAMll[48]), 

    MSDTransferTerminated$2623	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    MSDTransferTerminated@handle	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), USTATcopy(COMRAM[1]), USBActiveConfiguration(COMRAM[1]), NULL(NULL[0]), 
		 -> BDT(BIGRAMll[48]), 

    ptrNextData	PTR unsigned char  size(2) Largest target is 512
		 -> msd_buffer(BIGRAMll[512]), NULL(NULL[0]), 

    MSDTasks$2589	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    MSDTasks$2588	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBCheckMSDRequest$2535	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBCheckMSDRequest$2534	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    sp_S2167$0	PTR struct . size(2) Largest target is 5
		 -> mediaInformation(BANK1[5]), 

    S2167$AsyncReadTasks	PTR FTN(PTR void ,PTR void ,)unsigned char  size(3) Largest target is 0

    LUN.AsyncReadTasks	PTR FTN(PTR void ,PTR void ,)unsigned char  size(3) Largest target is 0

    S2167$AsyncWriteTasks	PTR FTN(PTR void ,PTR void ,)unsigned char  size(3) Largest target is 0

    LUN.AsyncWriteTasks	PTR FTN(PTR void ,PTR void ,)unsigned char  size(3) Largest target is 0

    S2167$mediaParameters	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    LUN.mediaParameters	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S2167$SectorWrite	PTR FTN(PTR void ,unsigned long ,PTR unsigned char ,unsigned char ,)unsigned char  size(3) Largest target is 1
		 -> ExternalFlash_SectorWrite(), 

    LUN.SectorWrite	PTR FTN(PTR void ,unsigned long ,PTR unsigned char ,unsigned char ,)unsigned char  size(3) Largest target is 1
		 -> ExternalFlash_SectorWrite(), 

    S2167$WriteProtectState	PTR FTN(PTR void ,)unsigned char  size(3) Largest target is 1
		 -> ExternalFlash_WriteProtectStateGet(), 

    LUN.WriteProtectState	PTR FTN(PTR void ,)unsigned char  size(3) Largest target is 1
		 -> ExternalFlash_WriteProtectStateGet(), 

    S2167$SectorRead	PTR FTN(PTR void ,unsigned long ,PTR unsigned char ,)unsigned char  size(3) Largest target is 1
		 -> ExternalFlash_SectorRead(), 

    LUN.SectorRead	PTR FTN(PTR void ,unsigned long ,PTR unsigned char ,)unsigned char  size(3) Largest target is 1
		 -> ExternalFlash_SectorRead(), 

    S2167$MediaDetect	PTR FTN(PTR void ,)unsigned char  size(3) Largest target is 1
		 -> ExternalFlash_MediaDetect(), 

    LUN.MediaDetect	PTR FTN(PTR void ,)unsigned char  size(3) Largest target is 1
		 -> i2_ExternalFlash_MediaDetect(), ExternalFlash_MediaDetect(), 

    S2167$ReadSectorSize	PTR FTN(PTR void ,)unsigned int  size(3) Largest target is 2
		 -> ExternalFlash_SectorSizeRead(), 

    LUN.ReadSectorSize	PTR FTN(PTR void ,)unsigned int  size(3) Largest target is 2
		 -> ExternalFlash_SectorSizeRead(), 

    S2167$ReadCapacity	PTR FTN(PTR void ,)unsigned long  size(3) Largest target is 4
		 -> ExternalFlash_CapacityRead(), 

    LUN.ReadCapacity	PTR FTN(PTR void ,)unsigned long  size(3) Largest target is 4
		 -> ExternalFlash_CapacityRead(), 

    S2167$MediaInitialize	PTR FTN(PTR void ,)PTR struct . size(3) Largest target is 3
		 -> ExternalFlash_MediaInitialize(), 

    LUN.MediaInitialize	PTR FTN(PTR void ,)PTR struct . size(3) Largest target is 3
		 -> i2_ExternalFlash_MediaInitialize(), ExternalFlash_MediaInitialize(), 

    USBMSDInHandle	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBMSDOutHandle	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR_1[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    sp__memcpy	PTR void  size(2) Largest target is 512
		 -> fat_create_file@root_entry(BANK0[32]), _flash_set_page_size@command(BANK0[4]), display_content(BANK2[80]), ToSendDataBuffer(BANK3[64]), 
		 -> msd_buffer(BIGRAMll[512]), SetupPkt(BIGRAMhl[8]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USB_SD_Ptr	const PTR const unsigned char [4] size(2) Largest target is 52
		 -> sd003(CODE[26]), sd002(CODE[46]), sd001(CODE[52]), sd000(CODE[4]), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 64
		 -> configDescriptor1(CODE[64]), 

    pDst	PTR volatile unsigned char  size(2) Largest target is 8
		 -> CtrlTrfData(BIGRAMhl[8]), NULL(NULL[0]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(2) Largest target is 48
		 -> BDT(BIGRAMll[48]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(2) Largest target is 48
		 -> NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBStallEndpoint@p	PTR struct __BDT size(2) Largest target is 48
		 -> BDT(BIGRAMll[48]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 512
		 -> ToSendDataBuffer(BANK3[64]), ReceivedDataBuffer(BANK2[64]), msd_buffer(BIGRAMll[512]), msd_csw(BIGRAMhl[13]), 
		 -> msd_cbw(BIGRAMhl[31]), NULL(NULL[0]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR_1[1]), 

    pBDTEntryOut	PTR volatile struct __BDT[3] size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    pBDTEntryIn	PTR volatile struct __BDT[3] size(2) Largest target is 3759
		 -> RAM(DATA[3759]), NULL(NULL[0]), BDT(BIGRAMll[48]), 

    S105$pFunc	PTR FTN()void  size(3) Largest target is 0

    outPipes.pFunc	PTR FTN()void  size(3) Largest target is 0

    S95$wRam	PTR unsigned int  size(2) Largest target is 0

    outPipes.pDst.wRam	PTR unsigned int  size(2) Largest target is 0

    S95$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes.pDst.bRam	PTR unsigned char  size(2) Largest target is 0

    S71$wRom	PTR const unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRom	PTR const unsigned int  size(2) Largest target is 0

    S71$wRam	PTR unsigned int  size(2) Largest target is 0

    inPipes.pSrc.wRam	PTR unsigned int  size(2) Largest target is 0

    S71$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRom	PTR const unsigned char  size(2) Largest target is 0

    S71$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes.pSrc.bRam	PTR unsigned char  size(2) Largest target is 0

    sp__memset	PTR void  size(2) Largest target is 48
		 -> USBAlternateInterface(BANK1[2]), BDT(BIGRAMll[48]), UEP1(SFR_1[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _SYS_InterruptHigh in COMRAM

    _SYS_InterruptHigh->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    i2_USBDeviceInit->i2_memset
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USER_USB_CALLBACK_EVENT_HANDLER->_MSDTransferTerminated
    _USER_USB_CALLBACK_EVENT_HANDLER->_USBCheckMSDRequest
    _USBCheckMSDRequest->i2_USBTransferOnePacket
    _MSDTransferTerminated->i2_USBTransferOnePacket
    _APP_DeviceMSDInitialize->_USBMSDInit
    _USBMSDInit->i2_USBTransferOnePacket
    _APP_DeviceCustomHIDInitialize->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService

Critical Paths under _main in BANK0

    _system_init->_configFile_write
    _flash_init->__flash_set_page_size
    _spi_init->__spi_init
    __flash_set_page_size->__flash_is_busy
    _fat_init->_fat_get_format_status
    _fat_get_format_status->_flash_sector_read
    _fat_format->_flash_sector_write
    _display_update->_i2c_display_cursor
    _i2c_display_write_fixed->__i2c_wait_idle
    _i2c_display_cursor->__ic2_display_set_ddram_address
    __ic2_display_set_ddram_address->__i2c_write
    _display_init->_i2c_display_program_custom_character
    _i2c_display_program_custom_character->__ic2_display_set_cgram_address
    __ic2_display_set_cgram_address->__i2c_write
    _i2c_display_init->__i2c_write
    __i2c_write->__i2c_wait_idle
    _configFile_write->_fat_modify_file
    _fat_resize_file->__make_cluster_chain
    _fat_modify_file->__find_nth_cluster
    _fat_get_file_information->_flash_partial_read
    __find_nth_cluster->__read_fat
    __read_fat->_flash_partial_read
    _fat_create_file->__make_cluster_chain
    _fat_find_file->_flash_sector_read
    __write_root->_flash_partial_write
    _flash_partial_write->__flash_compare_page_to_buffer
    __flash_copy_page_to_buffer->__flash_is_busy
    __make_cluster_chain->__get_available_cluster
    __get_available_cluster->_flash_sector_read
    __get_available_root_entry->__root_is_available
    __root_is_available->_flash_partial_read
    _flash_partial_read->__flash_partial_read
    __add_item->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _motor_process_cue->__motor_run
    _encoder_statemachine->_motor_divide_jump_to_nearest
    _motor_nonzero_steps_from_degrees->_motor_steps_from_degrees
    _motor_steps_from_degrees->___fldiv
    _motor_steps_from_degrees->___flmul
    _motor_divide_jump_to_nearest->_motor_go_to_steps_position
    _motor_divide_jump->_motor_go_to_steps_position
    __step_position_from_divide_position->___fldiv
    __step_position_from_divide_position->___flmul
    _motor_arc_move->_motor_schedule_command
    _display_prepare->__display_itoa_long
    _motor_speed_from_index->__motor_get_speed_in_degrees
    __motor_get_speed_in_degrees->___fldiv
    ___fldiv->___xxtofl
    __display_signed_itoa->__display_padded_itoa
    __display_padded_itoa->_itoa
    __display_itoa_long->__display_itoa
    __display_itoa->_motor_speed_from_index
    _itoa->_utoa
    _utoa->___lwdiv
    _adc_read_temperature->___flmul
    ___flneg->___xxtofl
    ___flmul->___xxtofl
    ___fladd->___flneg
    _USBDeviceInit->_memset
    _APP_DeviceMSDTasks->_MSDTasks
    _MSDTasks->_MSDProcessCommand
    _MSDProcessCommand->_MSDProcessCommandMediaPresent
    _MSDProcessCommandMediaAbsent->_MSDProcessCommandMediaPresent
    _MSDProcessCommandMediaPresent->_MSDReadHandler
    _MSDWriteHandler->_ExternalFlash_SectorWrite
    _ExternalFlash_SectorWrite->_flash_sector_write
    _flash_sector_write->__flash_compare_page_to_buffer
    __flash_write_to_buffer->__flash_is_busy
    __flash_write_page_from_buffer->__flash_is_busy
    __flash_compare_page_to_buffer->__flash_is_busy
    _MSDReadHandler->_ExternalFlash_SectorRead
    _MSDCheckForErrorCases->_MSDErrorHandler
    _MSDErrorHandler->_USBStallEndpoint
    _ExternalFlash_SectorRead->_flash_sector_read
    _flash_sector_read->__flash_partial_read
    __flash_partial_read->__flash_is_busy
    __flash_is_busy->__flash_get_status
    __flash_wakeup->_spi_tx
    __flash_get_status->_spi_tx_rx
    _APP_DeviceCustomHIDTasks->_api_parse
    _api_prepare->__fill_buffer_get_display
    __fill_buffer_get_status->_memcpy
    __fill_buffer_get_display->_display_get_character
    _api_parse->__parse_command_short
    __parse_command_short->_motor_go_to_steps_position
    _motor_go_to_steps_position->_motor_schedule_command
    __parse_command_long->__parse_jump_steps
    __parse_jump_steps->_motor_schedule_command
    _motor_schedule_command->_motor_nonzero_steps_from_degrees

Critical Paths under _SYS_InterruptHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _SYS_InterruptHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _SYS_InterruptHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _SYS_InterruptHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _SYS_InterruptHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _SYS_InterruptHigh in BANK5

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _SYS_InterruptHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _SYS_InterruptHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _SYS_InterruptHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _SYS_InterruptHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _SYS_InterruptHigh in BANK12

    None.

Critical Paths under _main in BANK13h

    None.

Critical Paths under _SYS_InterruptHigh in BANK13h

    None.

Critical Paths under _main in BANK13l

    None.

Critical Paths under _SYS_InterruptHigh in BANK13l

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _SYS_InterruptHigh in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  676634
                                              0 BANK1      4     4      0
           _APP_DeviceCustomHIDTasks
                 _APP_DeviceMSDTasks
                  _SYSTEM_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
               _adc_read_temperature
                    _display_prepare
                     _display_update
               _encoder_statemachine
                  _motor_process_cue
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0  332837
                    __backlight_init
                  __system_pin_setup
                __system_timer0_init
                           _adc_init
                   _configFile_write
                       _display_init
                     _display_update
                       _encoder_init
                           _fat_init
                         _flash_init
                           _i2c_init
                         _motor_init
 ---------------------------------------------------------------------------------
 (2) _motor_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _flash_init                                           0     0      0   13160
               __flash_set_page_size
                           _spi_init
 ---------------------------------------------------------------------------------
 (3) _spi_init                                             1     1      0     270
                                              3 BANK0      1     1      0
                          __spi_init
 ---------------------------------------------------------------------------------
 (4) __spi_init                                            3     0      3     208
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) __flash_set_page_size                                 5     5      0   12890
                                             19 BANK0      5     5      0
                     __flash_is_busy
                             _memcpy
                             _spi_tx
 ---------------------------------------------------------------------------------
 (2) _fat_init                                             0     0      0   30980
                         _fat_format
              _fat_get_format_status
 ---------------------------------------------------------------------------------
 (3) _fat_get_format_status                                4     4      0    8195
                                             43 BANK0      4     4      0
                           __get_fbr
                           __get_mbr
                  _flash_sector_read
 ---------------------------------------------------------------------------------
 (3) _fat_format                                           2     2      0   22785
                                             36 BANK0      2     2      0
                          __get_data
                           __get_fat
                           __get_fbr
                           __get_mbr
                          __get_root
                 _flash_sector_write
 ---------------------------------------------------------------------------------
 (4) __get_root                                            6     4      2     417
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) __get_mbr                                             4     2      2     239
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) __get_fbr                                             4     2      2     239
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) __get_fat                                             4     2      2     135
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (4) __get_data                                            2     0      2     166
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _encoder_init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _display_update                                       1     1      0    3085
                                             16 BANK0      1     1      0
                 _i2c_display_cursor
            _i2c_display_write_fixed
 ---------------------------------------------------------------------------------
 (3) _i2c_display_write_fixed                              4     1      3     369
                                              5 BANK0      4     1      3
                          __i2c_send
                         __i2c_start
                          __i2c_stop
                     __i2c_wait_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_display_cursor                                   3     2      1    2586
                                             13 BANK0      3     2      1
     __ic2_display_set_ddram_address
 ---------------------------------------------------------------------------------
 (4) __ic2_display_set_ddram_address                       3     3      0    2377
                                             10 BANK0      3     3      0
                         __i2c_write
 ---------------------------------------------------------------------------------
 (2) _display_init                                         0     0      0    7576
                   _i2c_display_init
_i2c_display_program_custom_characte
 ---------------------------------------------------------------------------------
 (3) _i2c_display_program_custom_character                19    17      2    5267
                                             14 BANK0     19    17      2
                         __i2c_write
     __ic2_display_set_cgram_address
 ---------------------------------------------------------------------------------
 (4) __ic2_display_set_cgram_address                       4     4      0    2417
                                             10 BANK0      4     4      0
                         __i2c_write
 ---------------------------------------------------------------------------------
 (3) _i2c_display_init                                    10    10      0    2309
                                             10 BANK0     10    10      0
                         __i2c_write
 ---------------------------------------------------------------------------------
 (5) __i2c_write                                           5     2      3    2272
                                              5 BANK0      5     2      3
                          __i2c_send
                         __i2c_start
                          __i2c_stop
                     __i2c_wait_idle
 ---------------------------------------------------------------------------------
 (4) __i2c_wait_idle                                       5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (4) __i2c_stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) __i2c_start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) __i2c_send                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _configFile_write                                     6     6      0  278036
                                            131 BANK0      6     6      0
                          __add_item
                    _fat_create_file
                      _fat_find_file
                    _fat_modify_file
                    _fat_resize_file
 ---------------------------------------------------------------------------------
 (3) _fat_resize_file                                     47    43      4   91621
                                             76 BANK0     47    43      4
                __make_cluster_chain
                 __root_is_available
                        __write_root
           _fat_get_file_information
 ---------------------------------------------------------------------------------
 (3) _fat_modify_file                                     66    58      8   70220
                                             65 BANK0     66    58      8
          __data_sector_from_cluster
                  __find_nth_cluster
                          __read_fat
           _fat_get_file_information
                _flash_partial_write
 ---------------------------------------------------------------------------------
 (4) _fat_get_file_information                             8     6      2    9371
                                             47 BANK0      8     6      2
           __offset_from_file_number
           __sector_from_file_number
                 _flash_partial_read
 ---------------------------------------------------------------------------------
 (4) __find_nth_cluster                                   10     6      4   20274
                                             55 BANK0     10     6      4
           __fat_offset_from_cluster
           __fat_sector_from_cluster
                          __read_fat
            __read_value_from_offset
                  _flash_sector_read
 ---------------------------------------------------------------------------------
 (4) __read_fat                                            8     6      2    9969
                                             47 BANK0      8     6      2
           __fat_offset_from_cluster
           __fat_sector_from_cluster
                 _flash_partial_read
 ---------------------------------------------------------------------------------
 (4) __data_sector_from_cluster                            2     0      2     343
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _fat_create_file                                     49    41      8  100213
                                             76 BANK0     49    41      8
          __get_available_root_entry
                          __get_date
                          __get_time
                __make_cluster_chain
                        __write_root
                      _fat_find_file
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _fat_find_file                                       11     7      4    9079
                                             43 BANK0     11     7      4
                  _flash_sector_read
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              9     3      6     816
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (4) __write_root                                          7     5      2   29167
                                             40 BANK0      7     5      2
           __offset_from_file_number
           __sector_from_file_number
                _flash_partial_write
 ---------------------------------------------------------------------------------
 (5) _flash_partial_write                                  9     1      8   28552
                                             31 BANK0      9     1      8
      __flash_compare_page_to_buffer
         __flash_copy_page_to_buffer
                     __flash_is_busy
      __flash_write_page_from_buffer
             __flash_write_to_buffer
 ---------------------------------------------------------------------------------
 (6) __flash_copy_page_to_buffer                          10     7      3    5508
                                             19 BANK0     10     7      3
                     __flash_is_busy
                             _spi_tx
 ---------------------------------------------------------------------------------
 (4) __make_cluster_chain                                 23    19      4   43360
                                             53 BANK0     23    19      4
           __fat_offset_from_cluster
           __fat_sector_from_cluster
             __get_available_cluster
  __get_available_offset_from_buffer
            __read_value_from_offset
             __write_value_to_offset
                  _flash_sector_read
                 _flash_sector_write
 ---------------------------------------------------------------------------------
 (5) __write_value_to_offset                               8     2      6    1125
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (5) __read_value_from_offset                              9     5      4     996
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (5) __get_available_cluster                              10     6      4    9420
                                             43 BANK0     10     6      4
    __cluster_from_sector_and_offset
  __get_available_offset_from_buffer
                  _flash_sector_read
 ---------------------------------------------------------------------------------
 (5) __get_available_offset_from_buffer                    8     4      4     878
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) __cluster_from_sector_and_offset                      4     0      4     282
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) __fat_sector_from_cluster                             2     0      2     557
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) __fat_offset_from_cluster                             2     0      2     349
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) __get_time                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) __get_date                                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) __get_available_root_entry                            1     1      0    9085
                                             53 BANK0      1     1      0
                 __root_is_available
 ---------------------------------------------------------------------------------
 (4) __root_is_available                                   6     6      0    8955
                                             47 BANK0      6     6      0
           __offset_from_file_number
           __sector_from_file_number
                 _flash_partial_read
 ---------------------------------------------------------------------------------
 (5) _flash_partial_read                                   8     0      8    8559
                                             39 BANK0      8     0      8
                __flash_partial_read
 ---------------------------------------------------------------------------------
 (5) __sector_from_file_number                             5     3      2      71
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (5) __offset_from_file_number                             5     3      2      71
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) __add_item                                           11     3      8    6334
                                             36 BANK0     11     3      8
                               _ltoa
 ---------------------------------------------------------------------------------
 (4) _ltoa                                                10     2      8    2391
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (5) _ultoa                                               13     5      8    1846
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     440
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             13     5      8     657
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __system_timer0_init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __system_pin_setup                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __backlight_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motor_process_cue                                    0     0      0     602
                         __motor_run
                 _motor_items_in_cue
 ---------------------------------------------------------------------------------
 (1) _encoder_statemachine                                 4     4      0   87028
                                            100 BANK0      4     4      0
        __divide_jump_size_decrement
        __divide_jump_size_increment
        __encoder_next_arc_step_size
     __encoder_next_divide_step_size
       __encoder_next_setup_stepsize
                     _motor_arc_move
                 _motor_change_speed
                  _motor_divide_jump
       _motor_divide_jump_to_nearest
         _motor_go_to_steps_position
   _motor_nonzero_steps_from_degrees
             _motor_schedule_command
                         _motor_stop
 ---------------------------------------------------------------------------------
 (2) _motor_stop                                           2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _motor_nonzero_steps_from_degrees                     8     4      4   10977
                                             47 BANK0      8     4      4
           _motor_steps_from_degrees
 ---------------------------------------------------------------------------------
 (3) _motor_steps_from_degrees                             8     4      4   10670
                                             39 BANK0      8     4      4
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _motor_divide_jump_to_nearest                        10    10      0   31251
                                             90 BANK0     10    10      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
__step_position_from_divide_position
         _motor_go_to_steps_position
 ---------------------------------------------------------------------------------
 (2) _motor_divide_jump                                    7     7      0   17059
                                             90 BANK0      7     7      0
__step_position_from_divide_position
         _motor_go_to_steps_position
 ---------------------------------------------------------------------------------
 (3) __step_position_from_divide_position                  8     4      4   10774
                                             39 BANK0      8     4      4
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _motor_change_speed                                   2     0      2     447
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _motor_arc_move                                       5     5      0   15722
                                             62 BANK0      5     5      0
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
             _motor_schedule_command
 ---------------------------------------------------------------------------------
 (2) __encoder_next_setup_stepsize                         4     2      2     135
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) __encoder_next_divide_step_size                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) __encoder_next_arc_step_size                          4     2      2     135
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) __divide_jump_size_increment                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) __divide_jump_size_decrement                          3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _display_prepare                                     14    14      0   53297
                                             92 BANK0     14    14      0
                     __display_clear
                      __display_itoa
                 __display_itoa_long
               __display_padded_itoa
               __display_signed_itoa
                             _memcpy
             _motor_speed_from_index
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _motor_speed_from_index                               2     0      2    8091
                                             51 BANK0      2     0      2
        __motor_get_speed_in_degrees
 ---------------------------------------------------------------------------------
 (3) __motor_get_speed_in_degrees                         12    10      2    7852
                                             39 BANK0     12    10      2
                            ___fldiv
                            ___fltol
                             ___lmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     720
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    3307
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) __display_signed_itoa                                 4     0      4    5913
                                             47 BANK0      4     0      4
               __display_padded_itoa
 ---------------------------------------------------------------------------------
 (3) __display_padded_itoa                                23    18      5    5516
                                             24 BANK0     23    18      5
                               _itoa
                             _strlen
 ---------------------------------------------------------------------------------
 (2) __display_itoa_long                                  15     8      7   12731
                                             77 BANK0     15     8      7
                            ___aldiv
                            ___almod
                      __display_itoa
                             _strlen
 ---------------------------------------------------------------------------------
 (3) __display_itoa                                       24    19      5    8311
                                             53 BANK0     24    19      5
                               _itoa
             _motor_speed_from_index (ARG)
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     650
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 8     2      6    2706
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     3      6    1849
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     440
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     657
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___almod                                             10     2      8     641
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     653
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) __display_clear                                       4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _adc_read_temperature                                 8     8      0   11097
                                             39 BANK0      8     8      0
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4    2140
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4    1169
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     169
                                             14 BANK0      4     0      4
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3817
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    3694
                                             18 BANK0     20    12      8
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _USBDeviceInit                                        1     1      0    1361
                                              8 BANK0      1     1      0
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6    1070
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    5     5      0      99
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _APP_DeviceMSDTasks                                   0     0      0  135314
                           _MSDTasks
 ---------------------------------------------------------------------------------
 (2) _MSDTasks                                             6     6      0  135314
                                             76 BANK0      6     6      0
                  _MSDProcessCommand
                   _USBStallEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (3) _MSDProcessCommand                                    5     5      0  129582
                                             71 BANK0      5     5      0
          _ExternalFlash_MediaDetect *
      _ExternalFlash_MediaInitialize *
       _MSDProcessCommandMediaAbsent
      _MSDProcessCommandMediaPresent
 ---------------------------------------------------------------------------------
 (4) _MSDProcessCommandMediaAbsent                         0     0      0   65696
                    _MSDErrorHandler
      _MSDProcessCommandMediaPresent
                     _ResetSenseData
 ---------------------------------------------------------------------------------
 (4) _MSDProcessCommandMediaPresent                       14    14      0   63648
                                             57 BANK0     14    14      0
         _ExternalFlash_CapacityRead *
       _ExternalFlash_SectorSizeRead *
 _ExternalFlash_WriteProtectStateGet *
              _MSDCheckForErrorCases
       _MSDComputeDeviceInAndResidue
                    _MSDErrorHandler
                     _MSDReadHandler
                    _MSDWriteHandler
                     _ResetSenseData
               _USBTransferOnePacket
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _MSDWriteHandler                                      5     5      0   29584
                                             47 BANK0      5     5      0
          _ExternalFlash_SectorWrite *
 _ExternalFlash_WriteProtectStateGet *
              _MSDCheckForErrorCases
                   _USBStallEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (6) _ExternalFlash_WriteProtectStateGet                   2     0      2     231
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExternalFlash_SectorWrite                           11     2      9   20978
                                             36 BANK0     11     2      9
                 _flash_sector_write
 ---------------------------------------------------------------------------------
 (4) _flash_sector_write                                   5     1      4   20543
                                             31 BANK0      5     1      4
      __flash_compare_page_to_buffer
      __flash_write_page_from_buffer
             __flash_write_to_buffer
 ---------------------------------------------------------------------------------
 (5) __flash_write_to_buffer                              11     4      7    5486
                                             19 BANK0     11     4      7
                     __flash_is_busy
                          _spi_tx_tx
 ---------------------------------------------------------------------------------
 (6) _spi_tx_tx                                           12     4      8     664
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) __flash_write_page_from_buffer                       10     7      3    5716
                                             19 BANK0     10     7      3
                     __flash_is_busy
                             _spi_tx
 ---------------------------------------------------------------------------------
 (5) __flash_compare_page_to_buffer                       12     9      3    7134
                                             19 BANK0     12     9      3
                  __flash_get_status
                     __flash_is_busy
                             _spi_tx
 ---------------------------------------------------------------------------------
 (5) _MSDReadHandler                                       4     4      0   16190
                                             53 BANK0      4     4      0
           _ExternalFlash_SectorRead *
              _MSDCheckForErrorCases
                   _USBStallEndpoint
               _USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (6) _MSDCheckForErrorCases                                7     3      4    2847
                                             10 BANK0      7     3      4
                    _MSDErrorHandler
 ---------------------------------------------------------------------------------
 (7) _MSDErrorHandler                                      2     2      0    2048
                                              8 BANK0      2     2      0
                     _ResetSenseData
                   _USBStallEndpoint
 ---------------------------------------------------------------------------------
 (3) _USBStallEndpoint                                     8     7      1    1983
                                              0 BANK0      8     7      1
 ---------------------------------------------------------------------------------
 (5) _ResetSenseData                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ExternalFlash_SectorRead                            10     2      8    7815
                                             43 BANK0     10     2      8
                  _flash_sector_read
 ---------------------------------------------------------------------------------
 (4) _flash_sector_read                                    4     0      4    7457
                                             39 BANK0      4     0      4
                __flash_partial_read
 ---------------------------------------------------------------------------------
 (5) __flash_partial_read                                 20    12      8    5939
                                             19 BANK0     20    12      8
                     __flash_is_busy
                          _spi_tx_rx
 ---------------------------------------------------------------------------------
 (4) __flash_is_busy                                       2     2      0    3240
                                             17 BANK0      2     2      0
                  __flash_get_status
                      __flash_wakeup
 ---------------------------------------------------------------------------------
 (5) __flash_wakeup                                        1     1      0    1614
                                              8 BANK0      1     1      0
                             _spi_tx
 ---------------------------------------------------------------------------------
 (4) _spi_tx                                               8     4      4    1580
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) __flash_get_status                                    5     3      2    1592
                                             12 BANK0      5     3      2
                          _spi_tx_rx
 ---------------------------------------------------------------------------------
 (6) _spi_tx_rx                                           12     4      8    1496
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) _MSDComputeDeviceInAndResidue                         6     4      2     509
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _ExternalFlash_SectorSizeRead                         2     0      2      77
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _ExternalFlash_CapacityRead                           4     0      4      77
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ExternalFlash_MediaInitialize                        2     0      2     119
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ExternalFlash_MediaDetect                            2     0      2     119
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _APP_DeviceCustomHIDTasks                             1     1      0   41379
               _USBTransferOnePacket
                          _api_parse
                        _api_prepare
 ---------------------------------------------------------------------------------
 (2) _api_prepare                                          5     1      4   19094
                                             16 BANK0      5     1      4
           __fill_buffer_get_display
      __fill_buffer_get_mode_details
            __fill_buffer_get_status
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) __fill_buffer_get_status                              2     0      2    8782
                                             11 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6    7903
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) __fill_buffer_get_mode_details                        4     2      2     724
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) __fill_buffer_get_display                            12     9      3    1071
                                              4 BANK0     12     9      3
              _display_get_character
 ---------------------------------------------------------------------------------
 (4) _display_get_character                                4     3      1     166
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _api_parse                                           11     6      5   18740
                                             91 BANK0     11     6      5
                __parse_command_long
               __parse_command_short
 ---------------------------------------------------------------------------------
 (3) __parse_command_short                                 1     1      0   11302
                                             90 BANK0      1     1      0
         _motor_go_to_steps_position
             _motor_schedule_command
 ---------------------------------------------------------------------------------
 (2) _motor_go_to_steps_position                          28    24      4    6115
                                             62 BANK0     28    24      4
             _motor_schedule_command
 ---------------------------------------------------------------------------------
 (3) __parse_command_long                                  7     1      6    6436
                                             74 BANK0      7     1      6
                  __parse_jump_steps
 ---------------------------------------------------------------------------------
 (4) __parse_jump_steps                                   12     6      6    5963
                                             62 BANK0     12     6      6
             _motor_schedule_command
 ---------------------------------------------------------------------------------
 (2) _motor_schedule_command                               7     1      6    5156
                                             55 BANK0      7     1      6
                            ___fltol (ARG)
                         __motor_run
                 _motor_items_in_cue
   _motor_nonzero_steps_from_degrees (ARG)
 ---------------------------------------------------------------------------------
 (2) _motor_items_in_cue                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) __motor_run                                          11     5      6     602
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _USBTransferOnePacket                                11     7      4    3545
                                              0 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _SYS_InterruptHigh                                  14    14      0   58258
                                             31 COMRAM    14    14      0
                     _USBDeviceTasks
                          _motor_isr
                           _tmr0_isr
 ---------------------------------------------------------------------------------
 (14) _tmr0_isr                                            0     0      0       0
                        _encoder_run
 ---------------------------------------------------------------------------------
 (15) _encoder_run                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _motor_isr                                          24    24      0      91
                                              0 COMRAM    24    24      0
 ---------------------------------------------------------------------------------
 (14) _USBDeviceTasks                                      1     1      0   58167
                                             30 COMRAM     1     1      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i2_USBDeviceInit
 ---------------------------------------------------------------------------------
 (15) i2_USBDeviceInit                                     1     1      0     610
                                              8 COMRAM     1     1      0
                           i2_memset
 ---------------------------------------------------------------------------------
 (15) _USBWakeFromSuspend                                  0     0      0    7955
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (15) _USBSuspend                                          0     0      0    7955
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (15) _USBStallHandler                                     1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (15) _USBIncrement1msInternalTimers                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _USBCtrlEPService                                    1     1      0   33624
                                             29 COMRAM     1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i2_memcpy
 ---------------------------------------------------------------------------------
 (16) i2_memcpy                                           11     5      6     221
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (16) _USBCtrlTrfSetupHandler                              0     0      0   33174
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (17) _USBCtrlEPServiceComplete                            0     0      0      92
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (18) _USBCtrlEPAllowDataStage                             0     0      0      92
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (17) _USBCheckStdRequest                                  0     0      0   25127
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (18) _USBStdSetCfgHandler                                 1     1      0    8493
                                             23 COMRAM     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i2_memset
 ---------------------------------------------------------------------------------
 (16) i2_memset                                            8     2      6     408
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (18) _USBStdGetStatusHandler                              3     3      0      46
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (18) _USBStdGetDscHandler                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (18) _USBStdFeatureReqHandler                             6     6      0    8633
                                             23 COMRAM     6     6      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (15) _USER_USB_CALLBACK_EVENT_HANDLER                     8     2      6    7955
                                             15 COMRAM     8     2      6
      _APP_DeviceCustomHIDInitialize
            _APP_DeviceMSDInitialize
              _MSDTransferTerminated
                 _USBCheckHIDRequest
                 _USBCheckMSDRequest
                i2_SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (16) i2_SYSTEM_Initialize                                 5     5      0      68
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (16) _USBCheckMSDRequest                                  4     4      0     736
                                             11 COMRAM     4     4      0
             i2_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (16) _USBCheckHIDRequest                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _MSDTransferTerminated                               4     2      2    1075
                                             11 COMRAM     4     2      2
                 i2_USBStallEndpoint
             i2_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (17) i2_USBStallEndpoint                                  8     7      1     252
                                              0 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (16) _APP_DeviceMSDInitialize                             0     0      0    1473
                  _USBEnableEndpoint
                         _USBMSDInit
 ---------------------------------------------------------------------------------
 (17) _USBMSDInit                                          3     3      0     740
                                             11 COMRAM     3     3      0
        i2_ExternalFlash_MediaDetect *
    i2_ExternalFlash_MediaInitialize *
                   i2_ResetSenseData
             i2_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (18) i2_ResetSenseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_ExternalFlash_MediaInitialize                     2     0      2      26
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (18) i2_ExternalFlash_MediaDetect                         2     0      2      26
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (16) _APP_DeviceCustomHIDInitialize                       0     0      0    1421
                  _USBEnableEndpoint
             i2_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (17) i2_USBTransferOnePacket                             11     7      4     688
                                              0 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (17) _USBEnableEndpoint                                   4     3      1     733
                                              8 COMRAM     4     3      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (18) _USBConfigureEndpoint                                8     7      1     400
                                              0 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (16) _USBCtrlTrfOutHandler                                0     0      0     114
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (17) _USBCtrlTrfRxService                                 2     2      0     114
                                              0 COMRAM     2     2      0
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (18) _USBCtrlEPAllowStatusStage                           0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _USBCtrlTrfInHandler                                 1     1      0     115
                                              1 COMRAM     1     1      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (19) _USBCtrlTrfTxService                                 1     1      0      92
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 19
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_DeviceCustomHIDTasks
     _USBTransferOnePacket
     _api_parse
       __parse_command_long
         __parse_jump_steps
           _motor_schedule_command
             ___fltol (ARG)
             __motor_run (ARG)
             _motor_items_in_cue (ARG)
             _motor_nonzero_steps_from_degrees (ARG)
               _motor_steps_from_degrees
                 ___fldiv
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___fltol
                 ___xxtofl
       __parse_command_short
         _motor_go_to_steps_position
           _motor_schedule_command
             ___fltol (ARG)
             __motor_run (ARG)
             _motor_items_in_cue (ARG)
             _motor_nonzero_steps_from_degrees (ARG)
               _motor_steps_from_degrees
                 ___fldiv
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___fltol
                 ___xxtofl
         _motor_schedule_command
           ___fltol (ARG)
           __motor_run (ARG)
           _motor_items_in_cue (ARG)
           _motor_nonzero_steps_from_degrees (ARG)
             _motor_steps_from_degrees
               ___fldiv
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___fltol
               ___xxtofl
     _api_prepare
       __fill_buffer_get_display
         _display_get_character
       __fill_buffer_get_mode_details
       __fill_buffer_get_status
         _memcpy
       _memcpy
   _APP_DeviceMSDTasks
     _MSDTasks
       _MSDProcessCommand
         _ExternalFlash_MediaDetect *
         _ExternalFlash_MediaInitialize *
         _MSDProcessCommandMediaAbsent *
           _MSDErrorHandler
             _ResetSenseData
             _USBStallEndpoint
           _MSDProcessCommandMediaPresent
             _ExternalFlash_CapacityRead *
             _ExternalFlash_SectorSizeRead *
             _ExternalFlash_WriteProtectStateGet *
             _MSDCheckForErrorCases *
               _MSDErrorHandler
                 _ResetSenseData
                 _USBStallEndpoint
             _MSDComputeDeviceInAndResidue *
             _MSDErrorHandler *
               _ResetSenseData
               _USBStallEndpoint
             _MSDReadHandler *
               _ExternalFlash_SectorRead *
                 _flash_sector_read
                   __flash_partial_read
                     __flash_is_busy
                       __flash_get_status
                         _spi_tx_rx
                       __flash_wakeup
                         _spi_tx
                     _spi_tx_rx
               _MSDCheckForErrorCases *
                 _MSDErrorHandler
                   _ResetSenseData
                   _USBStallEndpoint
               _USBStallEndpoint *
               _USBTransferOnePacket *
             _MSDWriteHandler *
               _ExternalFlash_SectorWrite *
                 _flash_sector_write
                   __flash_compare_page_to_buffer
                     __flash_get_status
                       _spi_tx_rx
                     __flash_is_busy
                       __flash_get_status
                         _spi_tx_rx
                       __flash_wakeup
                         _spi_tx
                     _spi_tx
                   __flash_write_page_from_buffer
                     __flash_is_busy
                       __flash_get_status
                         _spi_tx_rx
                       __flash_wakeup
                         _spi_tx
                     _spi_tx
                   __flash_write_to_buffer
                     __flash_is_busy
                       __flash_get_status
                         _spi_tx_rx
                       __flash_wakeup
                         _spi_tx
                     _spi_tx_tx
               _ExternalFlash_WriteProtectStateGet *
               _MSDCheckForErrorCases *
                 _MSDErrorHandler
                   _ResetSenseData
                   _USBStallEndpoint
               _USBStallEndpoint *
               _USBTransferOnePacket *
             _ResetSenseData *
             _USBTransferOnePacket *
             _memcpy *
           _ResetSenseData
         _MSDProcessCommandMediaPresent *
           _ExternalFlash_CapacityRead *
           _ExternalFlash_SectorSizeRead *
           _ExternalFlash_WriteProtectStateGet *
           _MSDCheckForErrorCases *
             _MSDErrorHandler
               _ResetSenseData
               _USBStallEndpoint
           _MSDComputeDeviceInAndResidue *
           _MSDErrorHandler *
             _ResetSenseData
             _USBStallEndpoint
           _MSDReadHandler *
             _ExternalFlash_SectorRead *
               _flash_sector_read
                 __flash_partial_read
                   __flash_is_busy
                     __flash_get_status
                       _spi_tx_rx
                     __flash_wakeup
                       _spi_tx
                   _spi_tx_rx
             _MSDCheckForErrorCases *
               _MSDErrorHandler
                 _ResetSenseData
                 _USBStallEndpoint
             _USBStallEndpoint *
             _USBTransferOnePacket *
           _MSDWriteHandler *
             _ExternalFlash_SectorWrite *
               _flash_sector_write
                 __flash_compare_page_to_buffer
                   __flash_get_status
                     _spi_tx_rx
                   __flash_is_busy
                     __flash_get_status
                       _spi_tx_rx
                     __flash_wakeup
                       _spi_tx
                   _spi_tx
                 __flash_write_page_from_buffer
                   __flash_is_busy
                     __flash_get_status
                       _spi_tx_rx
                     __flash_wakeup
                       _spi_tx
                   _spi_tx
                 __flash_write_to_buffer
                   __flash_is_busy
                     __flash_get_status
                       _spi_tx_rx
                     __flash_wakeup
                       _spi_tx
                   _spi_tx_tx
             _ExternalFlash_WriteProtectStateGet *
             _MSDCheckForErrorCases *
               _MSDErrorHandler
                 _ResetSenseData
                 _USBStallEndpoint
             _USBStallEndpoint *
             _USBTransferOnePacket *
           _ResetSenseData *
           _USBTransferOnePacket *
           _memcpy *
       _USBStallEndpoint
       _USBTransferOnePacket
   _SYSTEM_Initialize
   _USBDeviceAttach
   _USBDeviceInit
     _memset
   ___fldiv
     ___xxtofl (ARG)
   ___flmul
     ___xxtofl (ARG)
   ___fltol
   ___xxtofl
   _adc_read_temperature
     ___fladd
       ___flneg (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___xxtofl (ARG)
     ___fltol
     ___xxtofl
   _display_prepare
     __display_clear
     __display_itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _motor_speed_from_index (ARG)
         __motor_get_speed_in_degrees
           ___fldiv
             ___xxtofl (ARG)
           ___fltol
           ___lmul
           ___xxtofl
       _strlen (ARG)
     __display_itoa_long
       ___aldiv
       ___almod
       __display_itoa
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _motor_speed_from_index (ARG)
           __motor_get_speed_in_degrees
             ___fldiv
               ___xxtofl (ARG)
             ___fltol
             ___lmul
             ___xxtofl
         _strlen (ARG)
       _strlen
     __display_padded_itoa
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _strlen
     __display_signed_itoa
       __display_padded_itoa
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _strlen
     _memcpy
     _motor_speed_from_index
       __motor_get_speed_in_degrees
         ___fldiv
           ___xxtofl (ARG)
         ___fltol
         ___lmul
         ___xxtofl
     _strlen
   _display_update
     _i2c_display_cursor
       __ic2_display_set_ddram_address
         __i2c_write
           __i2c_send
           __i2c_start
           __i2c_stop
           __i2c_wait_idle
     _i2c_display_write_fixed
       __i2c_send
       __i2c_start
       __i2c_stop
       __i2c_wait_idle
   _encoder_statemachine
     __divide_jump_size_decrement
     __divide_jump_size_increment
     __encoder_next_arc_step_size
     __encoder_next_divide_step_size
     __encoder_next_setup_stepsize
     _motor_arc_move
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___fltol
       ___xxtofl
       _motor_schedule_command
         ___fltol (ARG)
         __motor_run (ARG)
         _motor_items_in_cue (ARG)
         _motor_nonzero_steps_from_degrees (ARG)
           _motor_steps_from_degrees
             ___fldiv
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___fltol
             ___xxtofl
     _motor_change_speed
     _motor_divide_jump
       __step_position_from_divide_position
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___fltol
         ___xxtofl
       _motor_go_to_steps_position
         _motor_schedule_command
           ___fltol (ARG)
           __motor_run (ARG)
           _motor_items_in_cue (ARG)
           _motor_nonzero_steps_from_degrees (ARG)
             _motor_steps_from_degrees
               ___fldiv
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___fltol
               ___xxtofl
     _motor_divide_jump_to_nearest
       ___fladd
         ___flneg (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___fltol
       ___xxtofl
       __step_position_from_divide_position
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___fltol
         ___xxtofl
       _motor_go_to_steps_position
         _motor_schedule_command
           ___fltol (ARG)
           __motor_run (ARG)
           _motor_items_in_cue (ARG)
           _motor_nonzero_steps_from_degrees (ARG)
             _motor_steps_from_degrees
               ___fldiv
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___fltol
               ___xxtofl
     _motor_go_to_steps_position
       _motor_schedule_command
         ___fltol (ARG)
         __motor_run (ARG)
         _motor_items_in_cue (ARG)
         _motor_nonzero_steps_from_degrees (ARG)
           _motor_steps_from_degrees
             ___fldiv
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___fltol
             ___xxtofl
     _motor_nonzero_steps_from_degrees
       _motor_steps_from_degrees
         ___fldiv
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___fltol
         ___xxtofl
     _motor_schedule_command
       ___fltol (ARG)
       __motor_run (ARG)
       _motor_items_in_cue (ARG)
       _motor_nonzero_steps_from_degrees (ARG)
         _motor_steps_from_degrees
           ___fldiv
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___fltol
           ___xxtofl
     _motor_stop
   _motor_process_cue
     __motor_run
     _motor_items_in_cue
   _system_init
     __backlight_init
     __system_pin_setup
     __system_timer0_init
     _adc_init
     _configFile_write
       __add_item
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _fat_create_file
         __get_available_root_entry
           __root_is_available
             __offset_from_file_number
             __sector_from_file_number
             _flash_partial_read
               __flash_partial_read
                 __flash_is_busy
                   __flash_get_status
                     _spi_tx_rx
                   __flash_wakeup
                     _spi_tx
                 _spi_tx_rx
         __get_date
         __get_time
         __make_cluster_chain
           __fat_offset_from_cluster
           __fat_sector_from_cluster
           __get_available_cluster
             __cluster_from_sector_and_offset
             __get_available_offset_from_buffer
             _flash_sector_read
               __flash_partial_read
                 __flash_is_busy
                   __flash_get_status
                     _spi_tx_rx
                   __flash_wakeup
                     _spi_tx
                 _spi_tx_rx
           __get_available_offset_from_buffer
           __read_value_from_offset
           __write_value_to_offset
           _flash_sector_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
           _flash_sector_write
             __flash_compare_page_to_buffer
               __flash_get_status
                 _spi_tx_rx
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_write_page_from_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_write_to_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_tx
         __write_root
           __offset_from_file_number
           __sector_from_file_number
           _flash_partial_write
             __flash_compare_page_to_buffer
               __flash_get_status
                 _spi_tx_rx
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_copy_page_to_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             __flash_write_page_from_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_write_to_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_tx
         _fat_find_file
           _flash_sector_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
           _strncmp
         _memcpy
       _fat_find_file
         _flash_sector_read
           __flash_partial_read
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx_rx
         _strncmp
       _fat_modify_file
         __data_sector_from_cluster
         __find_nth_cluster
           __fat_offset_from_cluster
           __fat_sector_from_cluster
           __read_fat
             __fat_offset_from_cluster
             __fat_sector_from_cluster
             _flash_partial_read
               __flash_partial_read
                 __flash_is_busy
                   __flash_get_status
                     _spi_tx_rx
                   __flash_wakeup
                     _spi_tx
                 _spi_tx_rx
           __read_value_from_offset
           _flash_sector_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
         __read_fat
           __fat_offset_from_cluster
           __fat_sector_from_cluster
           _flash_partial_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
         _fat_get_file_information
           __offset_from_file_number
           __sector_from_file_number
           _flash_partial_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
         _flash_partial_write
           __flash_compare_page_to_buffer
             __flash_get_status
               _spi_tx_rx
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx
           __flash_copy_page_to_buffer
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx
           __flash_is_busy
             __flash_get_status
               _spi_tx_rx
             __flash_wakeup
               _spi_tx
           __flash_write_page_from_buffer
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx
           __flash_write_to_buffer
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx_tx
       _fat_resize_file
         __make_cluster_chain
           __fat_offset_from_cluster
           __fat_sector_from_cluster
           __get_available_cluster
             __cluster_from_sector_and_offset
             __get_available_offset_from_buffer
             _flash_sector_read
               __flash_partial_read
                 __flash_is_busy
                   __flash_get_status
                     _spi_tx_rx
                   __flash_wakeup
                     _spi_tx
                 _spi_tx_rx
           __get_available_offset_from_buffer
           __read_value_from_offset
           __write_value_to_offset
           _flash_sector_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
           _flash_sector_write
             __flash_compare_page_to_buffer
               __flash_get_status
                 _spi_tx_rx
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_write_page_from_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_write_to_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_tx
         __root_is_available
           __offset_from_file_number
           __sector_from_file_number
           _flash_partial_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
         __write_root
           __offset_from_file_number
           __sector_from_file_number
           _flash_partial_write
             __flash_compare_page_to_buffer
               __flash_get_status
                 _spi_tx_rx
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_copy_page_to_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             __flash_write_page_from_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx
             __flash_write_to_buffer
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_tx
         _fat_get_file_information
           __offset_from_file_number
           __sector_from_file_number
           _flash_partial_read
             __flash_partial_read
               __flash_is_busy
                 __flash_get_status
                   _spi_tx_rx
                 __flash_wakeup
                   _spi_tx
               _spi_tx_rx
     _display_init
       _i2c_display_init
         __i2c_write
           __i2c_send
           __i2c_start
           __i2c_stop
           __i2c_wait_idle
       _i2c_display_program_custom_character
         __i2c_write
           __i2c_send
           __i2c_start
           __i2c_stop
           __i2c_wait_idle
         __ic2_display_set_cgram_address
           __i2c_write
             __i2c_send
             __i2c_start
             __i2c_stop
             __i2c_wait_idle
     _display_update
       _i2c_display_cursor
         __ic2_display_set_ddram_address
           __i2c_write
             __i2c_send
             __i2c_start
             __i2c_stop
             __i2c_wait_idle
       _i2c_display_write_fixed
         __i2c_send
         __i2c_start
         __i2c_stop
         __i2c_wait_idle
     _encoder_init
     _fat_init
       _fat_format
         __get_data
         __get_fat
         __get_fbr
         __get_mbr
         __get_root
         _flash_sector_write
           __flash_compare_page_to_buffer
             __flash_get_status
               _spi_tx_rx
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx
           __flash_write_page_from_buffer
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx
           __flash_write_to_buffer
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx_tx
       _fat_get_format_status
         __get_fbr
         __get_mbr
         _flash_sector_read
           __flash_partial_read
             __flash_is_busy
               __flash_get_status
                 _spi_tx_rx
               __flash_wakeup
                 _spi_tx
             _spi_tx_rx
     _flash_init
       __flash_set_page_size
         __flash_is_busy
           __flash_get_status
             _spi_tx_rx
           __flash_wakeup
             _spi_tx
         _memcpy
         _spi_tx
       _spi_init
         __spi_init
     _i2c_init
     _motor_init

 _SYS_InterruptHigh (ROOT)
   _USBDeviceTasks
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_DeviceCustomHIDInitialize
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i2_USBTransferOnePacket
               _APP_DeviceMSDInitialize
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBMSDInit
                   i2_ExternalFlash_MediaDetect *
                   i2_ExternalFlash_MediaInitialize *
                   i2_ResetSenseData *
                   i2_USBTransferOnePacket *
               _MSDTransferTerminated
                 i2_USBStallEndpoint
                 i2_USBTransferOnePacket
               _USBCheckHIDRequest
               _USBCheckMSDRequest
                 i2_USBTransferOnePacket
               i2_SYSTEM_Initialize
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_DeviceCustomHIDInitialize
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i2_USBTransferOnePacket
               _APP_DeviceMSDInitialize
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 _USBMSDInit
                   i2_ExternalFlash_MediaDetect *
                   i2_ExternalFlash_MediaInitialize *
                   i2_ResetSenseData *
                   i2_USBTransferOnePacket *
               _MSDTransferTerminated
                 i2_USBStallEndpoint
                 i2_USBTransferOnePacket
               _USBCheckHIDRequest
               _USBCheckMSDRequest
                 i2_USBTransferOnePacket
               i2_SYSTEM_Initialize
             i2_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
             _APP_DeviceCustomHIDInitialize
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               i2_USBTransferOnePacket
             _APP_DeviceMSDInitialize
               _USBEnableEndpoint
                 _USBConfigureEndpoint
               _USBMSDInit
                 i2_ExternalFlash_MediaDetect *
                 i2_ExternalFlash_MediaInitialize *
                 i2_ResetSenseData *
                 i2_USBTransferOnePacket *
             _MSDTransferTerminated
               i2_USBStallEndpoint
               i2_USBTransferOnePacket
             _USBCheckHIDRequest
             _USBCheckMSDRequest
               i2_USBTransferOnePacket
             i2_SYSTEM_Initialize
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
           _APP_DeviceCustomHIDInitialize
             _USBEnableEndpoint
               _USBConfigureEndpoint
             i2_USBTransferOnePacket
           _APP_DeviceMSDInitialize
             _USBEnableEndpoint
               _USBConfigureEndpoint
             _USBMSDInit
               i2_ExternalFlash_MediaDetect *
               i2_ExternalFlash_MediaInitialize *
               i2_ResetSenseData *
               i2_USBTransferOnePacket *
           _MSDTransferTerminated
             i2_USBStallEndpoint
             i2_USBTransferOnePacket
           _USBCheckHIDRequest
           _USBCheckMSDRequest
             i2_USBTransferOnePacket
           i2_SYSTEM_Initialize
       i2_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _APP_DeviceCustomHIDInitialize
           _USBEnableEndpoint
             _USBConfigureEndpoint
           i2_USBTransferOnePacket
         _APP_DeviceMSDInitialize
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBMSDInit
             i2_ExternalFlash_MediaDetect *
             i2_ExternalFlash_MediaInitialize *
             i2_ResetSenseData *
             i2_USBTransferOnePacket *
         _MSDTransferTerminated
           i2_USBStallEndpoint
           i2_USBTransferOnePacket
         _USBCheckHIDRequest
         _USBCheckMSDRequest
           i2_USBTransferOnePacket
         i2_SYSTEM_Initialize
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
         _APP_DeviceCustomHIDInitialize
           _USBEnableEndpoint
             _USBConfigureEndpoint
           i2_USBTransferOnePacket
         _APP_DeviceMSDInitialize
           _USBEnableEndpoint
             _USBConfigureEndpoint
           _USBMSDInit
             i2_ExternalFlash_MediaDetect *
             i2_ExternalFlash_MediaInitialize *
             i2_ResetSenseData *
             i2_USBTransferOnePacket *
         _MSDTransferTerminated
           i2_USBStallEndpoint
           i2_USBTransferOnePacket
         _USBCheckHIDRequest
         _USBCheckMSDRequest
           i2_USBTransferOnePacket
         i2_SYSTEM_Initialize
     _USER_USB_CALLBACK_EVENT_HANDLER
       _APP_DeviceCustomHIDInitialize
         _USBEnableEndpoint
           _USBConfigureEndpoint
         i2_USBTransferOnePacket
       _APP_DeviceMSDInitialize
         _USBEnableEndpoint
           _USBConfigureEndpoint
         _USBMSDInit
           i2_ExternalFlash_MediaDetect *
           i2_ExternalFlash_MediaInitialize *
           i2_ResetSenseData *
           i2_USBTransferOnePacket *
       _MSDTransferTerminated
         i2_USBStallEndpoint
         i2_USBTransferOnePacket
       _USBCheckHIDRequest
       _USBCheckMSDRequest
         i2_USBTransferOnePacket
       i2_SYSTEM_Initialize
     i2_USBDeviceInit
       i2_memset
   _motor_isr
   _tmr0_isr
     _encoder_run

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMll           5FF      0     400      36       66.7%
BIGRAMlh           500      0       0      35        0.0%
BIGRAMhh           123      0       0      33        0.0%
BITBANK12          100      0       0      24        0.0%
BANK12             100      0       0      25        0.0%
BITBANK11          100      0       0      22        0.0%
BANK11             100      0       0      23        0.0%
BITBANK10          100      0       0      20        0.0%
BANK10             100      0       0      21        0.0%
BITBANK9           100      0       0      18        0.0%
BANK9              100      0       0      19        0.0%
BITBANK8           100      0       0      16        0.0%
BANK8              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      40      11       25.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      D0       9       81.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4      FF       7       99.6%
BITBANK14           B0      0       0      32        0.0%
BANK14              B0      0       0      30        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     89      A0       5      100.0%
BANK13h             73      0       0      28        0.0%
BITBANK13h          73      0       0      26        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      5A       1       95.7%
BIGRAMhl            21      0       0      34        0.0%
BITBANK13l          21      0       0      27        0.0%
BANK13l             21      0       0      29        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     309      31        0.0%
DATA                 0      0     709       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Feb 24 23:26:01 2019

                               _motor_next_speed_check 013E  
                      __size_of__write_value_to_offset 0036  
                                           _USB_SD_Ptr 9DE4  
                                         ___fldiv@aexp 0086  
                                         ___fldiv@bexp 0085  
                             fat_create_file@extension 00AE  
                                         ___fldiv@sign 007E  
                                  __system_timer0_init 3FA8  
                            __end_of_motor_divide_jump 20F2  
                                                   _os 0173  
                                        _USBDeviceInit F33E  
                                   _USBCheckHIDRequest 1690  
                          ??__data_sector_from_cluster 0062  
               __end_of__encoder_next_divide_step_size 3F7A  
              __size_of__encoder_next_divide_step_size 002E  
                       __encoder_next_divide_step_size 3F4C  
                                     ??__flash_is_busy 0071  
                           ??__sector_from_file_number 0062  
                                         __CFG_CP0$OFF 000000  
                       __root_is_available@root_sector 008F  
                                  __end_of_system_init 0DD6  
                             ?_i2c_display_write_fixed 0065  
                              fat_modify_file@position 00BF  
                                      _fat_resize_file 08F0  
                 USER_USB_CALLBACK_EVENT_HANDLER@event 003D  
                 USER_USB_CALLBACK_EVENT_HANDLER@pdata 003F  
                                                  l206 3E82  
                                                  l207 3E80  
                                                  l145 F388  
                                                  l147 F3B0  
                                                  l149 F3E8  
                          __end_of_USBStdGetDscHandler FE6C  
                                                  l184 04F8  
                                                  l192 032C  
                                                  l186 0522  
                                                  l602 DDB8  
                                                  l188 05A0  
                                                  l700 D0FE  
                                                  l620 2F54  
                                                  l612 FD36  
                                                  l701 CE4A  
                                                  l613 FD30  
                                                  l605 DDC0  
                                                  l710 CF44  
                                                  l630 C186  
                                                  l622 2F70  
                                                  l703 D120  
                                                  l711 CFAE  
                                                  l631 BE08  
                                                  l615 FD3A  
                                                  l720 D0E6  
                                                  l712 CFAA  
                                                  l704 CEF0  
                                                  l640 BF46  
                                                  l624 2F7C  
                                                  l608 FC8A  
                                                  l641 BF50  
                                                  l625 2F82  
                                                  l714 CFC4  
                                                  l706 CEF6  
                                                  l650 C042  
                                                  l642 BF72  
                                                  l634 BE18  
                                                  l626 2F88  
                                                  l570 DDD8  
                                                  l731 0B4E  
                                                  l715 D044  
                                                  l619 2F90  
                                                  l571 DBAC  
                                                  l708 CF20  
                                                  l660 C0E6  
                                                  l652 C076  
                                                  l644 BFA0  
                                                  l636 BE28  
                                                  l580 DCB2  
                                                  l709 CF68  
                                                  l661 C0FA  
                                                  l637 BE32  
                                                  l901 3278  
                                                  l734 0B5A  
                                                  l726 0AFE  
                                                  l718 D0B4  
                                                  l670 C17E  
                                                  l662 C118  
                                                  l654 C092  
                                                  l646 BFE0  
                                                  l582 DCCA  
                                                  l735 0B82  
                                                  l719 D0CC  
                                                  l639 BE84  
                                                  l591 DD3E  
                                                  l575 DBCE  
                                                  l728 0B12  
                                                  l664 C144  
                                                  l656 C0AA  
                                                  l592 DD42  
                                                  l753 0BD8  
                                                  l737 0BB6  
                                                  l681 E80A  
                                                  l665 C11E  
                                                  l649 C014  
                                                  l593 DD66  
                                                  l577 DCF0  
                                                  l770 003C  
                                                  l738 0BA0  
                                                  l690 E720  
                                                  l682 E654  
                                                  l666 C12E  
                                                  l578 DCD6  
                                                  l586 DDF6  
                                                  l675 1DDA  
                                                  l763 0086  
                                                  l771 0078  
                                                  l691 E74A  
                                                  l667 C142  
                                                  l587 DD10  
                                                  l579 DCAA  
                                                  l764 FFF0  
                                                  l684 E82E  
                                                  l692 E77A  
                                                  _BDT 000D00  
                                                  l677 1DF0  
                                                  l757 FFC4  
                                                  l749 0BC8  
                                                  l693 E78C  
                                                  l685 E6A8  
                                                  l589 DD1C  
                                                  l861 F96E  
                                                  l766 FFF8  
                                                  l694 E792  
                                                  l686 E6B4  
                                                  l767 0006  
                                                  l695 E7A6  
                                                  l687 E6BE  
                                                  l863 F990  
                                                  l768 001A  
                                                  l696 E7F2  
                                                  l688 E6D2  
                                                  l945 2208  
                                                  l769 0028  
                                                  l865 F888  
                                                  l866 F962  
                                                  l939 21A4  
                                                  l859 F868  
                                                  l892 328A  
                                                  l868 F968  
                                                  l981 42AA  
                                                  l893 324E  
                                                  l895 325A  
                                                  l899 326C  
                                                  _LBA 014E  
                                        ?_display_init 002E  
                                                  _PR2 000FCB  
                                                  _LUN 01C1  
                                                  _UIE 000F36  
                                                  _UIR 000F62  
                                   api_prepare@command 0074  
                                           _USBSuspend 3F1C  
                               __end_of_display_update 3CE8  
                                 USBStdSetCfgHandler@i 0045  
                                                  prod 000FF3  
                                                  tosl 000FFD  
                                                  wreg 000FE8  
                                       _USBDeviceTasks F712  
                                  ?_USBCheckHIDRequest 002E  
                                         __CFG_IESO$ON 000000  
                                       _USBDeviceState 002B  
                                         ___flmul@aexp 007B  
                                         ___flmul@bexp 0080  
                                         ?__write_root 0088  
                                         ___flmul@sign 007A  
                                         ___flmul@temp 0085  
                                         ___flmul@prod 0081  
                            __size_of_i2c_display_init 0050  
                                ??_USBCtrlTrfRxService 002E  
                             __size_ofi2_USBDeviceInit 0146  
                             USBEnableEndpoint@options 0036  
                                    __find_nth_cluster 2244  
                                    ??_MSDErrorHandler 0068  
                                 ?__system_timer0_init 002E  
                                  api_prepare@inBuffer 0070  
                                         ___fltol@exp1 0069  
                    __size_of__offset_from_file_number 002A  
                          __flash_write_to_buffer@data 0075  
                                                 l2002 1EE4  
                                                 l1123 4342  
                                                 l1108 434A  
                                                 l1140 37EE  
                                                 l1301 E0E4  
                                                 l1141 37D0  
                                                 l1213 3600  
                                                 l1310 E1AA  
                                                 l1302 E102  
                                                 l2030 2A2C  
                                                 l1214 35E2  
                                                 l1311 E1EE  
                                                 l1304 E198  
                                                 l2032 2A92  
                                                 l1313 E22A  
                                                 l1401 AB52  
                                                 l2130 26CC  
                                                 l1314 E1FA  
                                                 l1410 AC28  
                                                 l1402 AB22  
                                                 l1330 A344  
                                                 l2211 1D64  
                                                 l1307 E17C  
                                                 l1411 ACC6  
                                                 l1331 A326  
                                                 l1219 2946  
                                                 l2212 1D2E  
                                                 l2124 334E  
                                                 l1500 29B6  
                                                 l1308 E190  
                                                 l1420 AE20  
                                                 l1412 AC34  
                                                 l1404 AB6A  
                                                 l2116 3AF6  
                                                 l2213 1D3A  
                                                 l1501 29C0  
                                                 l2133 2702  
                                                 l1309 E1F0  
                                                 l1421 AE4A  
                                                 l1413 AC72  
                                                 l1405 ABDC  
                                                 l1341 A3EA  
                                                 l1333 A330  
                                                 l2117 3AD2  
                                                 l2222 EC1A  
                                                 l2142 24B0  
                                                 l1414 AD3A  
                                                 l1406 ABAC  
                                                 l1350 A428  
                                                 l1342 A3BA  
                                                 l2118 3B06  
                                                 l2207 1CEA  
                                                 l1503 29F8  
                                                 l1319 0100  
                                                 l1431 AEE6  
                                                 l1423 AE58  
                                                 l1415 AD02  
                                                 l1335 A33A  
                                                 l2119 3AE4  
                                                 l2240 EF4E  
                                                 l2224 EC2C  
                                                 l1520 372A  
                                                 l1328 AEEE  
                                                 l1408 AC0A  
                                                 l1352 A432  
                                                 l2233 F042  
                                                 l2241 EF56  
                                                 l2209 1D24  
                                                 l1505 2A18  
                                                 l1425 AE82  
                                                 l1417 ADAE  
                                                 l1409 ACB0  
                                                 l1361 A514  
                                                 l1353 A450  
                                                 l1337 AF4A  
                                                 l1329 A306  
                                                 l3201 2ECE  
                                                 l2242 EFAE  
                                                 l2234 EF26  
                                                 l2226 ECAA  
                                                 l1418 AD7E  
                                                 l1362 A532  
                                                 l1354 A494  
                                                 l1338 A364  
                                                 l3202 2EDC  
                                                 l2243 F008  
                                                 l2219 ED3A  
                                                 l2139 2472  
                                                 l1283 10DC  
                                                 l1427 AEAE  
                                                 l1371 A742  
                                                 l1363 A5A2  
                                                 l1339 A3AE  
                                                 l2331 38D2  
                                                 l2420 C96A  
                                                 l2244 F01E  
                                                 l2236 EF2E  
                                                 l2180 136E  
                                                 l1276 38F2  
                                                 l1284 10C6  
                                                 l1292 39D6  
                                                 l1380 A83E  
                                                 l1372 A712  
                                                 l1364 A572  
                                                 l1356 A4E2  
                                                 l1348 A408  
                                                 l2500 2C2E  
                                                 l2261 F33A  
                                                 l2253 3BB4  
                                                 l2421 CA06  
                                                 l2245 F024  
                                                 l2237 EF36  
                                                 l2229 ED04  
                                                 l2181 1382  
                                                 l1533 4186  
                                                 l3301 C5F8  
                                                 l3053 3EDA  
                                                 l1429 AEBC  
                                                 l1381 A826  
                                                 l1349 A43C  
                                                 l2501 2BFA  
                                                 l1437 3CBE  
                                                 l2254 3B92  
                                                 l2422 CA54  
                                                 l2246 F02A  
                                                 l2238 EF3E  
                                                 l2182 1396  
                                                 l3302 C5BC  
                                                 l1278 38FE  
                                                 l1286 113A  
                                                 l1390 A966  
                                                 l1382 A898  
                                                 l1374 A7E8  
                                                 l1366 A626  
                                                 l1358 A51E  
                                                 l2510 3B22  
                                                 l2255 3BC4  
                                                 l2423 CB02  
                                                 l2247 F030  
                                                 l2239 EF46  
                                                 l2191 FED8  
                                                 l2183 13A4  
                                                 l1527 32B8  
                                                 l1519 3720  
                                                 l3311 C6D0  
                                                 l1287 110A  
                                                 l1391 A9CE  
                                                 l1383 A868  
                                                 l1375 A7B8  
                                                 l1359 A50A  
                                                 l2503 2C06  
                                                 l2424 CAC4  
                                                 l2248 F036  
                                                 l2176 13E4  
                                                 l2184 13C4  
                                                 l1528 32C2  
                                                 l3312 C698  
                                                 l1392 A984  
                                                 l1368 A6B4  
                                                 l2504 2C10  
                                                 l1712 18E4  
                                                 l1720 226C  
                                                 l2353 1FD6  
                                                 l2249 F03C  
                                                 l2193 FEDE  
                                                 l1633 3DA6  
                                                 l3321 C768  
                                                 l3305 C674  
                                                 l1297 E10C  
                                                 l1393 A9DE  
                                                 l1385 A8F6  
                                                 l1377 A800  
                                                 l1369 A684  
                                                 l2505 2C1A  
                                                 l1801 F9B6  
                                                 l1721 22B8  
                                                 l2370 E4A2  
                                                 l1482 34FC  
                                                 l3306 C652  
                                                 l3402 C468  
                                                 l1394 A990  
                                                 l1378 A82E  
                                                 l2506 2C24  
                                                 l2434 2094  
                                                 l1714 18EE  
                                                 l1730 D242  
                                                 l1474 2C9A  
                                                 l2371 E4B6  
                                                 l2355 1FE4  
                                                 l2259 F2A4  
                                                 l2427 CB2C  
                                                 l2419 C91C  
                                                 l2195 FF56  
                                                 l2179 1360  
                                                 l1483 34B8  
                                                 l3315 C6BA  
                                                 l3307 C660  
                                                 l1395 AA38  
                                                 l1387 A932  
                                                 l1379 A81E  
                                                 l2515 2CEA  
                                                 l2603 B406  
                                                 l2611 B360  
                                                 l1731 D1EE  
                                                 l1803 F9C8  
                                                 l1475 2CBE  
                                                 l2380 E5B8  
                                                 l2372 E4BE  
                                                 l2196 FEF8  
                                                 l2188 FE8A  
                                                 l3340 C838  
                                                 l3324 C78C  
                                                 l3316 C6BE  
                                                 l3308 C664  
                                                 l3404 C4AC  
                                                 l3084 1300  
                                                 l3076 1270  
                                                 l1396 AA08  
                                                 l1388 A902  
                                                 l2620 B428  
                                                 l2612 B3AE  
                                                 l2604 B2BA  
                                                 l1732 D30A  
                                                 l1492 3204  
                                                 l1804 FA26  
                                                 l1900 D94C  
                           USBConfigureEndpoint@handle 0034  
                                                 l2373 E518  
                                                 l2197 FF8C  
                                                 l1485 34E2  
                                                 l1629 3DDA  
                                                 l3341 C840  
                                                 l3333 C7CC  
                                                 l3405 C4CA  
                                                 l3085 12F4  
                                                 l2437 20B8  
                                                 l2621 B436  
                                                 l2605 B308  
                                                 l1709 188A  
                                                 l1741 D362  
                                                 l1493 320E  
                                                 l1901 D95E  
                                                 l2198 FF10  
                                                 l3342 C842  
                                                 l3326 C7A2  
                                                 l3078 12DC  
                                                 l3350 D42C  
                                                 l1398 AADE  
                                                 l2550 B826  
                                                 l1742 D35A  
                                                 l1726 D192  
                                                 l1910 D9D6  
                                                 l1902 D970  
                                                 l2199 FF2C  
                                                 l3319 C758  
                                                 l3407 C4EE  
                                                 l3087 131C  
                                                 l3079 12CC  
                                                 l3431 F610  
                                                 l3351 D428  
                                                 l1399 AAA6  
                                                 l2631 B4C6  
                                                 l2623 B470  
                                                 l2615 B3E0  
                                                 l1743 D3A2  
                                                 l1719 22D6  
                                                 l1911 D9DA  
                                                 l1903 D982  
                                                 l3336 C812  
                                                 l3328 C7AC  
                                                 l3408 C50C  
                                                 l3432 F620  
                                                 l3272 36A2  
                                                 l3360 D58C  
                                                 l2640 B500  
                                                 l2624 B43E  
                                                 l2608 B33A  
                                                 l2552 B198  
                                                 l2560 AFF6  
                                                 l1760 2E18  
                                                 l1736 D2D6  
                                                 l1920 D9FE  
                                                 l1912 D9DE  
                                                 l1904 D994  
                                                 l2377 E524  
                                                 l2369 E492  
                                                 l3441 F6C0  
                                                 l3433 F63E  
                                                 l2721 E9EC  
                                                 l3273 36AC  
                                                 l3361 D53C  
                                                 l2481 2BBE  
                                                 l2641 B50C  
                                                 l2633 B4D2  
                                                 l2625 B448  
                                                 l2561 B006  
                                                 l2553 AF8A  
                                                 l1729 D19C  
                                                 l1921 DA02  
                                                 l1913 D9E2  
                                                 l1905 D9A6  
                                                 l2378 E526  
                                                 l3442 F6B4  
                                                 l3282 3A74  
                                                 l3362 D564  
                                                 l3354 D46C  
                                                 l2482 2B8A  
                                                 l2642 B51A  
                                                 l2634 B4DE  
                                                 l2618 B460  
                                                 l2626 B456  
                                                 l2570 B0A2  
                                                 l2554 AF9A  
                                                 l1738 D2E4  
                                                 l1930 DA26  
                                                 l1922 DA06  
                                                 l1914 D9E6  
                                                 l1906 D9B8  
                                                 l2379 E58E  
                                                 l3435 F650  
                                                 l3283 3A7E  
                                                 l3355 D468  
                                                 l2491 3F62  
                                                 l2651 B5B2  
                                                 l2619 B418  
                                                 l1747 D3DC  
                                                 l1739 D2EC  
                                                 l1931 DA2A  
                                                 l1923 DA0A  
                                                 l1915 D9EA  
                                                 l1907 D9CA  
                                                 l3436 F644  
                                                 l2724 EA00  
                                                 l3268 3682  
                                                 l3452 3A26  
                                                 l3380 D698  
                                                 l3364 D58A  
                                                 l2492 3F52  
                                                 l2484 2B96  
                                                 l2644 B554  
                                                 l2628 B480  
                                                 l2572 B0C8  
                                                 l2564 B038  
                                                 l2820 2884  
                                                 l1748 D3F0  
                                                 l1852 0900  
                                                 l1940 DA4A  
                                                 l1932 DA2E  
                                                 l1924 DA0E  
                                                 l1916 D9EE  
                                                 l1908 D9CE  
                                                 l3293 C554  
                                                 l3269 367A  
                                                 l3357 D4B6  
                                                 l2485 2BA0  
                                                 l2661 B6CA  
                                                 l2645 B522  
                                                 l2629 B492  
                                                 l2573 B0D8  
                                                 l2557 AFCC  
                                                 l2821 2892  
                                                 l3197 2EA6  
                                                 l1693 30E6  
                                                 l1941 DA4E  
                                                 l1925 DA12  
                                                 l1917 D9F2  
                                                 l1909 D9D2  
                                                 l3294 C550  
                                                 l3390 C252  
                                                 l3438 F68E  
                                                 l2718 E9C6  
                                                 l3278 3A5C  
                                                 l3374 D5F8  
                                                 l2494 3F56  
                                                 l2486 2BAA  
                                                 l2662 B664  
                                                 l2654 B60A  
                                                 l2646 B52C  
                                                 l2590 B1EE  
                                                 l2582 B172  
                                                 l2566 B060  
                                                 l3198 2E9A  
                                                 l3470 09FE  
                                                 l2750 0FB2  
                                                 l1758 2DC0  
                                                 l1766 4062  
                                                 l1862 DE74  
                                                 l1854 0910  
                                                 l1942 DA52  
                                                 l1934 DA32  
                                                 l1926 DA16  
                                                 l1918 D9F6  
                                                 l1870 160E  
                                                 l3391 C270  
                                                 l3447 F700  
                                                 l3439 F676  
                                                 l3279 3A54  
                                                 l3367 D5C0  
                                                 l3359 D4DE  
                                                 l2495 3F5A  
                                                 l2487 2BB4  
                                                 l2671 B6B0  
                                                 l2663 B678  
                                                 l2639 B544  
                                                 l2647 B53A  
                                                 l2567 B070  
                                                 l1695 3120  
                                                 l1863 E00C  
                                                 l1855 09CC  
                                                 l1951 33B4  
                                                 l1943 DA56  
                                                 l1935 DA36  
                                                 l1927 DA1A  
                                                 l1919 D9FA  
                                                 l1871 15C2  
                                                 l3384 C202  
                                                 l3456 20FA  
                                                 l3376 D63C  
                                                 l3368 D5A2  
                                                 l2496 3F5E  
                                                 l2672 B6C2  
                                                 l2656 B626  
                                                 l2592 B228  
                                                 l2576 B10A  
                                                 l2816 2850  
                                                 l3472 0A5A  
                                                 l2752 105C  
                                                 l1768 4074  
                                                 l1864 DEFA  
                                                 l1856 09C4  
                                                 l1952 33B8  
                                                 l1944 DA5A  
                                                 l1936 DA3A  
                                                 l1928 DA1E  
                                                 l1880 15E2  
                                                 l3385 C1FE  
                                                 l3377 D660  
                                                 l2585 B870  
                                                 l2657 B638  
                                                 l2649 B56E  
                                                 l2593 B1F6  
                                                 l2817 2844  
                                                 l3473 0AC8  
                                                 l2753 1058  
                                                 l1785 0FA6  
                                                 l1865 DF22  
                                                 l1953 33BC  
                                                 l1937 DA3E  
                                                 l1929 DA22  
                                                 l1881 15E6  
                                                 l1873 15C6  
                                                 l1961 EDBA  
                                                 l3298 C59C  
                                                 l3386 C212  
                                                 l3458 2136  
                                                 l3490 3B5C  
                                                 l3378 D68A  
                                                 l2682 B808  
                                                 l2674 B6E2  
                                                 l2666 B686  
                                                 l2594 B200  
                                                 l2578 B130  
                                                 l3466 363C  
                                                 l1794 0F90  
                                                 l1866 DFCA  
                                                 l1954 33C0  
                                                 l1938 DA42  
                                                 l1890 160A  
                                                 l1882 15EA  
                                                 l1874 15CA  
                                                 l1970 EE44  
                                                 l3299 C598  
                                                 l3395 C430  
                                                 l3459 2178  
                                                 l3491 3B56  
                                                 l3379 D696  
                                                 l2691 B7C2  
                                                 l2683 B766  
                                                 l2675 B70E  
                                                 l2667 B69A  
                                                 l2659 B650  
                                                 l2587 B218  
                                                 l2595 B20E  
                                                 l2579 B140  
                                                 l1955 33C4  
                                                 l1939 DA46  
                                                 l1883 15EE  
                                                 l1875 15CE  
                                                 l1971 EE48  
                                                 l1963 EDC8  
                                                 l3484 3F08  
                                                 l3396 C412  
                                                 l3388 C242  
                                                 l2860 1962  
                                                 l2692 B7EC  
                                                 l2684 B794  
                                                 l2588 B1BE  
                                                 l1788 0F18  
                                                 l2780 CE08  
                                                 l1948 33CC  
                                                 l1956 33C8  
                                                 l1884 15F2  
                                                 l1876 15D2  
                                                 l1980 EE6C  
                                                 l1972 EE4C  
                                                 l3485 3EF6  
                                                 l3389 C23E  
                                                 l2861 1956  
                                                 l2677 B718  
                                                 l2669 B6A8  
                                                 l2597 B242  
                                                 l2589 B1E0  
                                                 l2749 0FEA  
                                                 l2781 CE1E  
                                                 l1949 33B0  
                                                 l1885 15F6  
                                                 l1877 15D6  
                                                 l1981 EE70  
                                                 l1973 EE50  
                                                 l1965 EE00  
                                                 l3478 30C4  
                                                 l2870 1F0C  
                                                 l2694 B7F6  
                                                 l1894 DA5E  
                                                 l1886 15FA  
                                                 l1878 15DA  
                                                 l1982 EE74  
                                                 l1974 EE54  
                                                 l3479 308A  
                                                 l2871 1F20  
                                                 l2687 B7A2  
                                                 l2679 B740  
                                                 l2599 B280  
                                                 l1895 D92E  
                                                 l1887 15FE  
                                                 l1879 15DE  
                                                 l1967 EE90  
                                                 l1983 EE78  
                                                 l1975 EE58  
                                                 l2864 1996  
                                                 l2688 B7AC  
                                                 l3496 2908  
                                                 l1992 4026  
                                                 l1888 1602  
                                                 l1984 EE7C  
                                                 l1976 EE5C  
                                                 l1968 EE3C  
                                                 l2865 19A4  
                                                 l2857 191C  
                                                 l2873 1F3E  
                                                 l2689 B7BA  
                                                 l3497 28A6  
                                                 l1897 D932  
                                                 l1889 1606  
                                                 l1985 EE80  
                                                 l1977 EE60  
                                                 l1969 EE40  
                                                 l2866 19BA  
                                                 l2858 1934  
                                                 l2874 1F32  
                                                 l3498 28FE  
                                                 l1898 D936  
                                                 l1986 EE84  
                                                 l1978 EE64  
                                                 l1899 D93A  
                                                 l1987 EE88  
                                                 l1979 EE68  
                                                 l1988 EE8C  
                                                 l2877 1F66  
                                                 l2797 3470  
                                                 l1989 EF1C  
                            ?__offset_from_file_number 0060  
                                                 l2878 1F74  
                                                 l2798 3484  
                                                 l1998 1E90  
                                                 l2879 1F8A  
                  __end_of__encoder_next_arc_step_size 2C68  
                          __encoder_next_arc_step_size 2BF8  
                        __size_of_encoder_statemachine 091E  
                                ??i2_SYSTEM_Initialize 002E  
                                                 STR_1 A2E6  
                                                 STR_2 A2EF  
                                                 STR_3 A2E6  
                                                 STR_4 A2EF  
                                                 STR_5 A2E6  
                                                 STR_6 A2F6  
                                                 STR_7 A2DD  
                                                 STR_8 A2DD  
                                                 STR_9 A2DD  
                                ??_USBCtrlTrfTxService 002E  
                                                 _UCFG 000F39  
                                 _configFile_extention 01F8  
                                                 _UEP0 000F26  
                                                 _UEP1 000F27  
                                     ?_fat_create_file 00AC  
                                                 _UEIE 000F37  
                                                 _UEIR 000F63  
                                                 _UCON 000F65  
                                                 _TMR2 000FCC  
                          __size_ofi2_USBStallEndpoint 0106  
                                   ?__find_nth_cluster 0097  
                                       ??_encoder_init 0060  
                              ??_fat_get_format_status 008B  
                                 api_parse@out_idx_ptr 00C2  
                                       _ResetSenseData 2FB4  
                                                 _enc1 001F  
                                                 _enc2 001E  
               USBStdFeatureReqHandler@current_ep_data 0048  
                                                 _pDst 016E  
                                                 _main F856  
                              _bit_pattern_verticalbar A2A7  
                                                 _itoa 3A00  
                             ??i2_USBTransferOnePacket 0032  
                                                 _ltoa 360E  
                          __size_of_APP_DeviceMSDTasks 0012  
                                                 fsr0h 000FEA  
                                                 fsr1h 000FE2  
                              __end_of_display_prepare AF66  
                                                 indf0 000FEF  
                                                 fsr2h 000FDA  
                                                 fsr0l 000FE9  
                                                 indf1 000FE7  
                                                 indf2 000FDF  
                                                 fsr1l 000FE1  
                                                 fsr2l 000FD9  
                                      _USBDeviceAttach 3E5A  
                                                 btemp 005B  
                                                 _utoa 20F2  
                               __CFG_DSWDTOSC$T1OSCREF 000000  
                           ??_ExternalFlash_SectorRead 0093  
                      __size_of_motor_schedule_command 00AC  
                         ?i2_ExternalFlash_MediaDetect 002E  
                            _ExternalFlash_MediaDetect 4336  
                                                 prodh 000FF4  
                                                 prodl 000FF3  
     __get_available_offset_from_buffer@minimum_offset 0060  
                       fat_modify_file@number_of_bytes 00BD  
                                                 start 908E  
                      __end_of_APP_DeviceMSDInitialize 42E4  
                         ?__motor_get_speed_in_degrees 0087  
                                      ___fldiv@new_exp 007F  
                                _display_get_character 3F7A  
                        motor_steps_from_degrees@steps 008B  
                                 ??_USBCheckHIDRequest 002E  
                                     ?_MSDWriteHandler 002E  
                              __end_of_fat_modify_file E02E  
                        ??__encoder_next_arc_step_size 0062  
                                  ??__find_nth_cluster 009B  
                       ??_MSDProcessCommandMediaAbsent 00A7  
                           __end_of_USBCheckStdRequest 15C0  
                               ??_USBCtrlTrfOutHandler 0030  
                         ??__flash_copy_page_to_buffer 0076  
                       ?__flash_write_page_from_buffer 0073  
                                         ___param_bank 000000  
                            ??_USBStdFeatureReqHandler 0045  
                                         _USBOutHandle 0166  
                     __end_of__fat_sector_from_cluster 4244  
                               __get_available_cluster 1830  
                        __write_value_to_offset@buffer 0062  
                        __size_of__display_padded_itoa 00E2  
                      __size_of__flash_write_to_buffer 0052  
                             ??_USBStdGetStatusHandler 002E  
                        __write_value_to_offset@offset 0060  
                                       ?_USBDeviceInit 002E  
                                    __flash_get_status 3DF2  
                 __make_cluster_chain@sector_in_buffer 00A6  
                     __fat_offset_from_cluster@cluster 0060  
                    motor_speed_from_index@speed_index 0093  
                             _motor_steps_from_degrees 19CC  
                                        __CFG_PLLDIV$2 000000  
                           __end_of_motor_speed_lookup 9461  
                        i2c_display_write_fixed@length 0067  
                                                l20112 EDBA  
                                                l20126 EE00  
                                                l20118 EDC8  
                                                l21200 E3F8  
                                                l20218 EE90  
                                                l21210 E420  
                                                l21122 E2A4  
                                                l20236 4026  
                                                l21212 E428  
                                                l21108 E25C  
                                                l21150 E334  
                                                l21070 1E60  
                                                l20264 C890  
                                                l21136 E2EC  
                                                l21162 E35A  
                                                l21172 E382  
                                                l22134 38F6  
                                                l20470 D68A  
                                                l21174 E38A  
                                                l22128 38EA  
                                                l21088 1EB4  
                                                l23210 A48C  
                                                l22412 F3E0  
                                                l22164 0100  
                                                l20812 293E  
                                                l21188 E3D2  
                                                l20910 2C6C  
                                                l23224 A4DA  
                                                l21298 1D32  
                                                l20852 E07C  
                                                l21806 DBC6  
                                                l21742 3EF6  
                                                l21902 3CB6  
                                                l22384 F380  
                                                l20872 E126  
                                                l22564 325A  
                                                l24332 2BD8  
                                                l24324 DA78  
                                                l24334 2BEE  
                                                l20958 FA26  
                                                l24326 DB90  
                                                l22568 3278  
                                                l24336 2C48  
                                         spi_tx@length 0062  
                                                l24338 2C5E  
                                                l21972 FF26  
                                                l19132 BF6A  
                                                l23598 F962  
                                                l18514 308A  
                                                l19306 18F4  
                                                l19340 28A6  
                                                l19282 1854  
                                                l18396 0B5A  
                                                l18592 E804  
                                                l18680 D0F8  
                                                l18842 E5B8  
                                                l19716 0EFA  
                                                l18838 E58E  
                                                l19750 0FA6  
                                        ___fltol@sign1 0068  
                                      __end_of___aldiv 19CC  
                                                l19686 405A  
                                   ?__flash_get_status 006C  
                                       ??_display_init 0081  
                                      __end_of___almod 1F9C  
                                      __end_of___fladd C85E  
                                                ?_main 002E  
                  __end_of_initial_speed_manual_string A1FD  
                          _initial_speed_manual_string A1E8  
                                      __end_of___fldiv D6B4  
                                                ?_itoa 0070  
                                      __end_of___flneg 3EEC  
                                                STR_10 A2DD  
                                                ?_ltoa 007A  
                                                STR_11 A2DD  
                                                STR_12 A2DD  
                                                STR_13 A2DD  
                                                STR_14 A2DD  
                                                STR_15 A2C8  
                                                STR_16 A2D4  
                                                STR_17 A2FC  
                                                STR_18 A2BB  
                                      __end_of___flmul C522  
                                     ??__display_clear 0060  
                    __size_of_USBCtrlEPServiceComplete 00FA  
                                      __end_of___fltol 132E  
                                      __end_of___lldiv 28A4  
                                                ?_utoa 0067  
                     MSDCheckForErrorCases@DeviceBytes 006A  
                                                u20100 D5F4  
                                                u20130 D64A  
                                                u21010 1E96  
                                                u20140 D66E  
                                                u21100 E316  
                                                u20230 C25E  
                                                u20320 C4BA  
                                                u20240 C3D4  
                                                u20400 1306  
                                                u21200 E420  
                                                u21120 E352  
                                                u21040 1EEA  
                                      __end_of___llmod 2EEE  
                               __end_of_USBDeviceTasks F856  
                                                u20330 C4D8  
                                                u21220 E452  
                                                u21140 E382  
                                                u21060 E286  
                                                u20245 C3CA  
                                                u20360 128E  
                                                u21400 1F42  
                                                u23000 B13C  
                                                u21160 E3B4  
                                                u21080 E2CE  
                                                u20290 C464  
                                                u22210 392A  
                                                u23010 B16C  
                                                u20611 3766  
                                                u21260 1D62  
                                                u20604 FD00  
                                                u20540 FC50  
                                                u21340 1966  
                                                u20700 E090  
                                                u22300 2058  
                                                u21180 E3F0  
                                                u20605 FCFA  
                                                u20365 1284  
                                                u20710 E106  
                                                u20528 FC1E  
                                                u22080 DD9A  
                                                u21520 C628  
                                                u20480 F6CA  
                                                u23200 B3DA  
                                                u20640 298C  
                                                u20529 FC32  
                                                u20554 FC68  
                                                u21530 C638  
                                                u20555 FC62  
                                                u20564 FCA2  
                                                u22420 F444  
                                                u21700 C7B0  
                                                u21540 C63A  
                                                u20740 E13A  
                                                u20900 0998  
                                                u20565 FC9C  
                                                u21285 FB08  
                                                u20750 E194  
                                                u23150 B2C8  
                                                u23160 B334  
                                                u20840 F9EE  
                                                u21730 C7C8  
                                                u21570 C67C  
                            ?_USBCtrlEPServiceComplete 002E  
                                                u20588 FCCA  
                                                u20589 FCE0  
                                                u20845 F9E4  
                                                u21910 DBF6  
                                                u22390 F3A4  
                                                u23190 B36C  
                                                u20950 DE9A  
                                                u23440 B5A2  
                                                u20880 094C  
                                                u20890 097E  
                                                u20955 DE90  
                                                u21780 C81E  
                                                u23460 B5F8  
                                                u18005 E67A  
                                                u23461 B5F6  
                                                u20885 0942  
                                                u20895 0974  
                                                u22760 21BE  
                                                u23800 E9C0  
                                                u22920 B06C  
                                                u22840 AF96  
                                                u21890 DBC2  
                                                u23810 E9D6  
                                                u22930 B09C  
                                                u22850 AFC6  
                                                u18115 CE72  
                                                u22780 21D2  
                                                u23820 E9E6  
                                                u18310 2EFA  
                                                u18240 D080  
                                                u19040 C0BE  
                                                u22960 B0D4  
                                                u22880 B002  
                                                u18320 2F08  
                                                u17505 29CC  
                                                u18058 E6FA  
                                                u18250 D082  
                                                u18138 CEAA  
                                                u19050 C0D0  
                                                u22970 B104  
                                                u22890 B032  
                                                u19210 2E14  
                                                u18330 2F16  
                                                u24707 34F0  
                                                u18059 E70E  
                                                u18139 CEBE  
                                                u18340 2F24  
                                                u23790 E9B0  
                                                u23870 A4BC  
                                                u19230 28CC  
                                                u18350 2F32  
                                                u18318 2EFE  
                                                u17615 2AB0  
                                                u19080 C14C  
                                                u18600 2EAA  
                                                u19160 18B4  
                                                u18360 2F3E  
                                                u18328 2F0C  
                                                u18530 E520  
                                                u18338 2F1A  
                                      __end_of___lwdiv 36B6  
                                                u18435 321A  
                                                u24667 3778  
                                                u18268 D08E  
                                                u19180 18F4  
                                                u18348 2F28  
                                                u18269 D0A2  
                                                u18445 4094  
                                                u24677 378C  
                                                u17910 0BB2  
                                                u18198 CF78  
                                                u18630 3686  
                                                u19510 D33A  
                                                u19430 D1D4  
                                                u18366 2F40  
                                                u18358 2F36  
                                                u24687 34D4  
                                                u18199 CF8C  
                                                u24697 34E6  
                                                u17690 FFB0  
                                                u17930 0BC4  
                                                u18570 2854  
                                                u19530 D3B6  
                                                u19450 D24E  
                         __flash_write_to_buffer@start 0073  
                                                u17595 32CE  
                                                u18660 3A60  
                                                u19540 D3C2  
                                                u19460 D278  
                                                u19380 22A4  
                                                u19700 2A8E  
                                                u17950 0BD4  
                                                u19470 D284  
                                                u17960 3DD6  
                                                u17880 0B9C  
                                                u19480 D2B0  
                                                u17970 3DA2  
                                                u17980 30AC  
                                                u19660 0F9C  
                                                u19741 EDD2  
                                                u19590 407A  
                                                u19670 0FA6  
                          __size_of_motor_change_speed 000A  
                                                u18970 BF9A  
                                                u18938 BE94  
                                                u17987 30A2  
                                                u18939 BEA8  
                                                u18948 BEC8  
                                                u18949 BEDC  
                                                u19870 F284  
                                      __end_of___lwmod 3A88  
                                                i2l300 2320  
                                                i2l220 2508  
                                                u18988 BFBC  
                                                u18989 BFD0  
                                                i2l214 1ADE  
                                                i2l222 251E  
                                                i2l231 0C62  
                                                i2l232 0C0C  
                                                i2l160 F762  
                                                i2l321 25D6  
                                                i2l145 F4CE  
                                                i2l250 17B0  
                                                i2l226 2648  
                                                i2l322 25D0  
                                                i2l162 F788  
                                      __end_of_dc_arc1 9F2E  
                                                i2l307 3AC8  
                                                i2l315 3D7E  
                                                i2l147 F4F6  
                                                i2l155 F728  
                                      __end_of_dc_arc2 9EDE  
                                                i2l340 1C4E  
                                                i2l260 020C  
                                                i2l332 31A0  
                                                i2l180 3BE6  
                                                i2l236 0C8C  
                                                i2l308 3AC6  
                                                i2l316 3D7C  
                                                i2l172 F812  
                                                i2l164 F79C  
                                                i2l156 F738  
                                        __CFG_WDTEN$ON 000000  
                                                i2l253 1828  
                                                i2l245 177E  
                                                i2l341 1C52  
                                                i2l261 01EA  
                                                i2l149 F52E  
                                                i2l165 F7A8  
                                                i2l157 F740  
                                                i2l254 17F0  
                                                i2l342 1CCC  
                                                i2l334 31E8  
                                                i2l174 F832  
                                                i2l166 F7D0  
                                                i2l247 1788  
                                                i2l343 1C92  
                                                i2l263 0280  
                                                i2l167 F7DA  
                                                i2l159 F756  
                                                i2l264 0266  
                                                i2l184 0804  
                                                i2l192 0642  
                                                i2l432 1738  
                                                i2l280 FE54  
                                                i2l272 1454  
                                                i2l360 150C  
                                                i2l176 F84E  
                                                i2l249 17E8  
                                                i2l345 1CB2  
                                                i2l425 16DA  
                                                i2l281 FD50  
                                                i2l361 151E  
                                                i2l169 F7EC  
                                                i2l186 082E  
                                                i2l426 16AC  
                                                i2l274 14C6  
                                                i2l362 1524  
                                                i2l179 3BD8  
                                                i2l283 FD62  
                                                i2l355 157C  
                                                i2l188 08AC  
                                                i2l436 16F8  
                                                i2l428 16EA  
                                                i2l372 D6D4  
                                                i2l284 FDEC  
                                                i2l364 152A  
                                                i2l356 14F8  
                                                i2l437 170E  
                                                i2l429 16C8  
                                                i2l381 D828  
                                                i2l373 D6D8  
                                                i2l293 235C  
                                                i2l365 1546  
                                                i2l534 04D6  
                                                i2l438 1718  
                                                i2l550 1BD6  
                                                i2l286 FDF2  
                                                i2l294 22F6  
                                                i2l366 155E  
                                                i2l358 1500  
                                                i2l535 0442  
                                                i2l439 172E  
                                                i2l391 D8B4  
                                                i2l383 D7F2  
                                                i2l375 D73E  
                                                i2l287 FE48  
                                                i2l359 1506  
                                                i2l384 D80E  
                                                i2l537 04CE  
                                                i2l545 1C08  
                                                i2l393 D906  
                                                i2l377 D786  
                                                i2l289 FE4E  
                                                i2l297 2372  
                                                i2l562 1BDC  
                                                i2l546 1B6E  
                                                i2l386 D874  
                                                i2l298 2302  
                                                i2l387 D880  
                                                i2l379 D7A8  
                                                i2l299 2306  
                                                i2l820 279C  
                                                i2l388 D8FA  
                                                i2l901 36E2  
                                                i2l821 27A4  
                                                i2l822 27AC  
                                                i2l816 27CE  
                                                i2l824 27B6  
                                                i2l826 27C0  
                                                i2l780 3582  
                                                i2l783 35B8  
                                                _UADDR 000F38  
                                                i2l892 36F4  
                                                i2l893 36BA  
                                                i2l895 36C4  
                                                i2l899 36D6  
                                      __end_of_dc_main A0BE  
                                                _TMR0H 000FD7  
                                                _TMR0L 000FD6  
                                                _PORTA 000F80  
                                                _PORTE 000F84  
                                                _RPOR4 000EC4  
                                                _USTAT 000F64  
                                      __end_of_dc_zero 9E8E  
                                 _beep_duration_string A26D  
                          ?_ExternalFlash_CapacityRead 0060  
                                      ?_display_update 002E  
                             __find_nth_cluster@offset 009B  
                   __size_of_USBCtrlEPAllowStatusStage 00C4  
                                  ___lmul@multiplicand 0064  
                            __end_of__find_nth_cluster 22EA  
                             __find_nth_cluster@sector 009F  
                                     __end_of_MSDTasks DDFA  
                                           i2memcpy@d1 002E  
                                       __CFG_FCMEN$OFF 000000  
                                      __read_fat@value 0095  
                                   _USBCheckMSDRequest 1B5A  
                                           i2memcpy@s1 0030  
                      __end_of_USBCtrlEPAllowDataStage 2550  
            motor_divide_jump@target_position_in_steps 00BB  
                                                _sd000 A2B7  
                               __write_value_to_offset 3D1E  
                                                _sd001 A0FE  
                                                _sd002 A132  
                                                _sd003 A1A1  
                       ?_USBIncrement1msInternalTimers 002E  
                       __size_of_MSDTransferTerminated 0056  
                                  ??__flash_get_status 006E  
                        __end_of_MSDTransferTerminated 35BA  
                __i2c_display_send_init_sequence@F6905 01E7  
                                         _gblCBWLength 0172  
                                           i2memset@p1 002E  
                               ?_MSDCheckForErrorCases 006A  
                                ??__system_timer0_init 0060  
                                i2USBStallEndpoint@dir 002E  
                               __end_of_ResetSenseData 3016  
                              __end_of__backlight_init 4354  
                                                _ultoa 09EE  
                             __parse_command_long@data 00AA  
                            __data_sector_from_cluster 42C4  
                            fat_get_format_status@cntr 008D  
                      __end_of_motor_postscaler_lookup 9A16  
                       __end_of_motor_prescaler_lookup 9DE4  
                                                pclath 000FFA  
                           __end_of__display_itoa_long 01BE  
                                                tablat 000FF5  
                            __size_of_USBStallEndpoint 010A  
                                  ?_USBCheckMSDRequest 002E  
                                      _MSDCommandState 00F9  
                          ??_ExternalFlash_SectorWrite 008D  
                                                plusw1 000FE3  
                                                plusw2 000FDB  
                                          ?_USBMSDInit 002E  
             ExternalFlash_WriteProtectStateGet@config 0060  
                                                ttemp5 005C  
                                                ttemp6 005F  
                                                ttemp7 0063  
                                                utoa@c 006F  
                                                utoa@v 006D  
                                                status 000FD8  
                          ?__flash_copy_page_to_buffer 0073  
                                    __CFG_DSWDTPS$8192 000000  
                                                wtemp8 005C  
                             __end_ofi2_ResetSenseData 3078  
                motor_go_to_steps_position@overhead_cw 00AA  
                                      __end_of_strncmp 2924  
                                     __end_ofi2_memcpy 3192  
                                     __end_ofi2_memset 4000  
                       ??_MSDComputeDeviceInAndResidue 0062  
                                       _MSDReadHandler E652  
          i2c_display_program_custom_character@address 007F  
                         __size_of_USBStdSetCfgHandler 00DC  
                    fat_create_file@number_of_clusters 00B8  
                        ??i2_ExternalFlash_MediaDetect 0030  
                          __end_of__make_cluster_chain D3FA  
                    __make_cluster_chain@first_cluster 0095  
                                      __initialization 2386  
                            __end_of__flash_get_status 3E26  
                         fat_get_file_information@data 008F  
              __end_ofi2_ExternalFlash_MediaInitialize 4278  
             __size_ofi2_ExternalFlash_MediaInitialize 001A  
                __end_of_ExternalFlash_MediaInitialize 41CE  
               __size_of_ExternalFlash_MediaInitialize 0022  
                    ??i2_ExternalFlash_MediaInitialize 0030  
                     ?i2_ExternalFlash_MediaInitialize 002E  
                      i2_ExternalFlash_MediaInitialize 425E  
                        _ExternalFlash_MediaInitialize 41AC  
                 __offset_from_file_number@file_number 0062  
                                          _system_init 0CE2  
                              __end_of_fat_resize_file 09EE  
                                         __end_of_main F998  
                                         __end_of_itoa 3A44  
               __end_of__ic2_display_set_ddram_address 4166  
              __size_of__ic2_display_set_ddram_address 0024  
                       __ic2_display_set_ddram_address 4142  
                                         __end_of_ltoa 3662  
                      __end_of_i2c_display_write_fixed 360E  
                                         __end_of_utoa 219C  
                             __parse_command_short@cmd 00BA  
                                     __end_of_i2c_init 422A  
                           __display_signed_itoa@value 008F  
                          configFile_write@file_number 00E4  
                           __size_of_motor_divide_jump 00AA  
                         __motor_run@distance_in_steps 0060  
                       ??__encoder_next_setup_stepsize 0062  
                                 ??_USBCheckMSDRequest 0039  
                    __fill_buffer_get_status@outBuffer 006B  
                                 _adc_read_temperature E834  
                                       __CFG_OSC$HSPLL 000000  
               MSDComputeDeviceInAndResidue@DiExpected 0060  
                              _USBCheckMSDRequest$2534 0039  
                              _USBCheckMSDRequest$2535 003B  
                            __size_of_USBCtrlEPService 0096  
                 __end_of_motor_divide_jump_to_nearest F1F0  
                __size_of_motor_divide_jump_to_nearest 014E  
                         _motor_divide_jump_to_nearest F0A2  
                                         __get_fat@idx 0060  
                                         __get_fbr@idx 0060  
                                 api_prepare@outBuffer 0072  
                                               ??_main 00E9  
                                               ??_itoa 0076  
                                               ??_ltoa 0082  
                               _motor_schedule_command 1F9C  
                                   USBStallEndpoint@ep 0065  
                                               ??_utoa 006D  
                                        __activetblptr 000003  
                                      ?_USBDeviceTasks 002E  
                             _fat_get_file_information 2A1C  
                                   __write_root@offset 008C  
                                         __get_mbr@idx 0060  
           __end_of_ExternalFlash_WriteProtectStateGet 4358  
          __size_of_ExternalFlash_WriteProtectStateGet 0004  
                 ??_ExternalFlash_WriteProtectStateGet 0062  
                  ?_ExternalFlash_WriteProtectStateGet 0060  
                   _ExternalFlash_WriteProtectStateGet 4354  
                                  __find_nth_cluster@n 0099  
                                          ?_USBSuspend 002E  
                                   __write_root@sector 008A  
                                 __size_of_api_prepare 00DE  
                                _motor_final_stepcount 0142  
                        __get_available_cluster@offset 0091  
                                   _motor_items_in_cue 4316  
                        __get_available_cluster@sector 0093  
                        __flash_write_to_buffer@buffer 0079  
                              __end_of_USBDeviceAttach 3E8C  
                               __flash_write_to_buffer 370A  
               __end_of__ic2_display_set_cgram_address 4054  
              __size_of__ic2_display_set_cgram_address 002A  
                       __ic2_display_set_cgram_address 402A  
                                     ___llmod@dividend 0060  
                                               _ADRESH 000FC4  
                                               _ADRESL 000FC3  
                     __end_of__fat_offset_from_cluster 425E  
                                               _CCPR1L 000FBB  
                                               _EECON2 000FA7  
                                               _DMABCH 000F66  
                                               _DMABCL 000F67  
                                      ?_ResetSenseData 002E  
                          ??__get_available_root_entry 0095  
                                               ?_ultoa 006D  
                                           __i2c_start 4348  
                               SYSTEM_Initialize@state 0060  
                                           __i2c_write 37AC  
                                     __end_of_adc_init 3564  
                                               i2l1053 3C6E  
                                  ?_motor_items_in_cue 002E  
                                               i2l2400 BC18  
                                               i2l2403 BD78  
                                               i2l2404 BCCE  
                                               i2l2406 BDD8  
                                               i2l2531 0752  
                                               i2l2523 0762  
                                               i2l2532 075C  
                                               i2l2533 07DA  
                                               i2l2541 07CA  
                                               i2l2390 B940  
                                               i2l2542 07D4  
                                               i2l2526 0716  
                                               i2l2392 BBE0  
                                               i2l2536 078E  
                                               i2l2385 B8BA  
                                               i2l2529 073A  
                                               i2l2395 BA30  
                                               i2l2387 BE04  
                                               i2l2539 07B2  
                                               i2l2396 BA7E  
                                               i2l2388 B8BC  
                                               i2l2397 BBA0  
                                               i2l2389 B916  
                 __flash_write_page_from_buffer@buffer 0075  
                                               i2l3484 3FEE  
                                               i2l3485 3FDE  
                                               i2l3478 3180  
                                               i2l3479 3148  
                      ??_APP_DeviceCustomHIDInitialize 003A  
                             ?__fill_buffer_get_status 006B  
                                     __end_of__get_fat 3406  
                                     __end_of__get_fbr DBA0  
                                     __end_of__get_mbr 1690  
                                               _OSCCON 000FD3  
                          __flash_partial_read@address 0083  
                         ??_motor_go_to_steps_position 00A2  
                                       __CFG_WDTPS$512 000000  
                                               _RPOR21 000ED5  
                                               _RPOR23 000ED7  
                                       __CFG_WPCFG$OFF 000000  
                                __display_itoa@missing 00AB  
                               __end_of_MSDReadHandler E834  
                                    __spi_init@details 0060  
                                     __end_of___xxtofl F712  
                             i2USBTransferOnePacket@ep 0036  
                                     ??__i2c_wait_idle 0060  
                                    ??i2_USBDeviceInit 0036  
                               ?_display_get_character 0060  
                                     ?_display_prepare 002E  
                      __size_ofi2_USBTransferOnePacket 0102  
                         ?__divide_jump_size_decrement 002E  
                              ?_motor_speed_from_index 0093  
                          __flash_partial_read@command 007F  
                                       __CFG_WPDIS$OFF 000000  
                                     _configFile_write CB6A  
                                     __read_fat@offset 0093  
                                     __end_of_fat_init 42C4  
                                     __read_fat@sector 0091  
                                    _shortPacketStatus 002A  
                     __end_of_initial_speed_arc_string A249  
                                       __CFG_XINST$OFF 000000  
                                     ?_fat_modify_file 00A1  
                                  _motor_current_speed 00E9  
                                      USBDeviceTasks@i 004C  
                                          i2memcpy@tmp 0038  
                                         _CCPTMRS0bits 000F52  
                                    _motor_process_cue 2B10  
                          USBStdFeatureReqHandler@pUEP 0046  
                             USBTransferOnePacket@data 0061  
                           USBCtrlTrfInHandler@lastDTS 002F  
                                 __size_of_encoder_run 0104  
                         __end_of__flash_set_page_size 2CD6  
                                      ??_USBDeviceInit 0068  
                   __flash_copy_page_to_buffer@command 0079  
                             flash_partial_read@length 008B  
                                               ___lmul 345E  
                                               _gblCBW 0100  
                                            ??___aldiv 0068  
                                            ??___almod 0068  
                                            ??___fladd 007A  
                                   __size_of__i2c_send 000A  
                                            ??___fldiv 0076  
                                            ??___flneg 0072  
                                       __CFG_STVREN$ON 000000  
                       __read_value_from_offset@buffer 0062  
                                            ??___flmul 0076  
                                   __size_of__i2c_stop 0008  
                                            ??___fltol 0064  
                                            ??___lldiv 0068  
                                            ??___llmod 0068  
          i2SYSTEM_Initialize@pll_startup_counter_3117 0030  
            SYSTEM_Initialize@pll_startup_counter_3117 0063  
                                            ??___lwdiv 0064  
                                   ?_motor_process_cue 002E  
                         __size_of_flash_partial_write 006C  
                                           _SoftDetach 00F6  
                                            ??___lwmod 0064  
                                               _config 01A3  
                                               _buffer 0A00  
                                    _USBEnableEndpoint 3BC8  
                       __read_value_from_offset@offset 0060  
                      __size_of_USBStdGetStatusHandler 009C  
                                ?_adc_read_temperature 002E  
                                 ??_motor_items_in_cue 0060  
                                               _memcpy 3078  
                                               _memset 3EEC  
                     __end_of__sector_from_file_number 3EBC  
                                               _params 0131  
                                               clear_0 23CE  
                                               clear_1 23E0  
                                               clear_2 23EC  
                                               clear_3 23F8  
                                               clear_4 2404  
                                               clear_5 2410  
                            _ExternalFlash_SectorWrite 3D8A  
                                    api_parse@inBuffer 00BB  
                                      __CFG_CLKOEC$OFF 000000  
                                     __end_of_inq_resp A184  
                                     __motor_run@speed 0064  
                                 __end_of_encoder_init 4142  
                                               _spi_tx 32FC  
                                   ?_USBEnableEndpoint 0036  
                                   _flash_partial_read 40F8  
               __make_cluster_chain@number_of_clusters 0097  
                                               _tx_buf 0278  
                                i2c_display_init@F6908 01DE  
                                               _strlen 3B4C  
                              _motor_current_stepcount 0016  
                           __parse_command_long@length 00B0  
             i2c_display_program_custom_character@cntr 0080  
                                     __end_of_tmr0_isr 3C78  
                        __size_of_USBTransferOnePacket 0106  
                                  __size_of_USBMSDInit 010A  
                          i2c_display_write_fixed@data 0065  
                        ?_motor_divide_jump_to_nearest 002E  
                               __size_of__flash_wakeup 0058  
                                               itoa@cp 0076  
                                  ??_motor_process_cue 006B  
                        __size_of__display_signed_itoa 0044  
                           __end_of_motor_steps_lookup 982F  
                                __end_of_fat_find_file 0FAA  
                 __size_of__motor_get_speed_in_degrees 013A  
                                               ltoa@cp 0082  
                       __parse_command_long@out_buffer 00AC  
                        __size_of__parse_command_short 0182  
                     __size_of__read_value_from_offset 0048  
                         ?__divide_jump_size_increment 002E  
                  __size_of_motor_go_to_steps_position 030C  
                                         __mediumconst 9092  
                           __size_of__find_nth_cluster 00A6  
                                               tblptrh 000FF7  
                                               tblptrl 000FF6  
                                               tblptru 000FF8  
                                     __end_of_spi_init 3B0C  
                     __size_of_APP_DeviceMSDInitialize 0010  
                                      _motor_direction 00F1  
                      ??__flash_compare_page_to_buffer 0076  
                                  ??_USBEnableEndpoint 0037  
                                  ?_flash_partial_read 0087  
                                     _i2c_display_init 375C  
                                               ultoa@c 0079  
                                        spi_tx_rx@data 0064  
                    __size_of__fat_sector_from_cluster 001A  
                                               ultoa@v 0075  
                           __end_of__root_is_available 2E1C  
                            ?__fat_sector_from_cluster 0060  
                                        spi_tx_tx@data 0064  
                                          _CtrlTrfData 000D38  
                                    __system_pin_setup 2E1C  
                                            ??_strncmp 0066  
               motor_go_to_steps_position@overhead_ccw 00AE  
                                   __size_of__add_item 00E4  
                                 __size_of__write_root 004C  
                                     ?__backlight_init 002E  
                    i2ExternalFlash_MediaDetect@config 002E  
                      ExternalFlash_MediaDetect@config 0060  
                                 _controlTransferState 0029  
                           ??_APP_DeviceCustomHIDTasks 00C6  
                                 __CFG_LS48MHZ$SYS48X8 000000  
                                         ___xxtofl@arg 006A  
                                         ___xxtofl@exp 0069  
                                    _SYSTEM_Initialize 3248  
                                         ___xxtofl@val 0060  
                                fat_modify_file@length 00A5  
                                   ?__system_pin_setup 002E  
                                fat_modify_file@offset 00BB  
                                           __accesstop 0060  
                              __end_of__initialization 2416  
                       __end_of_motor_speed_from_index 428E  
                                fat_modify_file@sector 00B6  
                    MSDCheckForErrorCases@MSDErrorCase 0070  
                                           ___flneg@f1 006E  
                                      ?_MSDReadHandler 002E  
                         fat_resize_file@first_cluster 00B8  
                                 __end_of_display_init 3D1E  
                                   ?_SYSTEM_Initialize 002E  
                               __size_of__display_itoa 0224  
                                        ___rparam_used 000001  
        motor_isr@steps_until_standstill_if_accelerate 0040  
                             __size_of_USBStallHandler 0044  
                                           ___fltol@f1 0060  
                      ExternalFlash_SectorWrite@config 0084  
                      ExternalFlash_SectorWrite@buffer 008A  
                            __end_of_motor_process_cue 2B88  
                          __end_of__parse_command_long 3BC8  
                                   __size_of__get_data 002A  
                                   __size_of__get_date 000C  
                                  __size_of_USBSuspend 0030  
                                   __size_of__get_time 000C  
                                   __size_of__get_root 0198  
                                  ??__system_pin_setup 0060  
                                  _motor_maximum_speed 0162  
                                 ??_flash_partial_read 008F  
                                       __pcstackCOMRAM 002E  
                           __size_of__flash_get_status 0034  
                            __end_of_USBEnableEndpoint 3C04  
                  __size_of_ExternalFlash_CapacityRead 0014  
                                        __end_of_sd000 A2BB  
                                        __end_of_sd001 A132  
                                        __end_of_sd002 A160  
                                        __end_of_sd003 A1BB  
                                            ?_MSDTasks 002E  
                                         __pidataBANK1 3C04  
                                         __pidataBANK2 3356  
                                     ?_fat_resize_file 00AC  
                                  ??_SYSTEM_Initialize 0060  
                            __get_available_root_entry 4054  
                 ExternalFlash_SectorWrite@sector_addr 0086  
                      __end_of_bit_pattern_verticalbar A2AF  
                     __size_of_USBCtrlEPAllowDataStage 0098  
                                   __size_of__read_fat 0058  
                                      _active_protocol 01C0  
                                  i2USBStallEndpoint@p 0034  
                        __size_of_USBConfigureEndpoint 0094  
                   __size_of_ExternalFlash_MediaDetect 000A  
                          __end_of_USBCtrlTrfInHandler 1CD6  
                                        __end_of_ultoa 0AEC  
                                  display_prepare@cntr 00C9  
                                  display_prepare@temp 00BE  
                                         _gblSenseData 011F  
                          motor_change_speed@new_speed 0060  
                                      _MSDErrorHandler FF96  
                       ?_ExternalFlash_MediaInitialize 0060  
                 __sector_from_file_number@file_number 0062  
                               i2_USBTransferOnePacket 07EE  
                                   __size_of_api_parse 012A  
                                   _flash_sector_write 37FC  
                                           _dc_divide1 9F7E  
                                           _dc_divide2 9F2E  
                                   __size_of__spi_init 0038  
                                            ?i2_memcpy 002E  
                                            ?i2_memset 002E  
                              flash_sector_write@match 0083  
                __end_of_MSDProcessCommandMediaPresent C1D0  
               __size_of_MSDProcessCommandMediaPresent 03CA  
                        _MSDProcessCommandMediaPresent BE06  
                               flash_partial_read@data 008D  
                            __end_of__system_pin_setup 2E86  
                               flash_partial_read@page 0087  
                                        __get_data@idx 0060  
                             ??_USBCtrlTrfSetupHandler 004B  
                              _USBTicksSinceSuspendEnd 00FB  
                motor_nonzero_steps_from_degrees@steps 0093  
                    __flash_copy_page_to_buffer@buffer 0075  
                                     ?_USBDeviceAttach 002E  
                            __end_of_SYSTEM_Initialize 32A2  
                                    __end_of__i2c_send 432C  
                               _USBStdGetStatusHandler 22EA  
                                  ?_flash_sector_write 007F  
                                  USBStallEndpoint@dir 0060  
                                    __end_of__i2c_stop 4348  
                                          ?__i2c_start 002E  
                                              ??_ultoa 0075  
                      ?__encoder_next_divide_step_size 002E  
                     ??__encoder_next_divide_step_size 0060  
                                          ?__i2c_write 0065  
                        __read_value_from_offset@value 0067  
                                           __pbssBANK0 00E9  
                                           __pbssBANK1 0100  
                                           __pbssBANK2 0200  
                                           __pbssBANK3 0300  
                     __size_of_i2c_display_write_fixed 0054  
                                     _USBStallEndpoint 02CA  
                                           _gblNumBLKS 014A  
                                            ?_i2c_init 002E  
                            _overshoot_in_steps_string A212  
                                     _mediaInformation 01B9  
                       __size_of_fat_get_format_status 00AE  
                       fat_get_file_information@offset 0094  
                       __get_available_cluster@cluster 008F  
                        __end_of_fat_get_format_status 1EEE  
                                        __flash_wakeup 34B6  
                             __fill_buffer_get_display 1CD6  
                              ?__get_available_cluster 008B  
                          __size_of_USBWakeFromSuspend 0036  
                           ??_motor_steps_from_degrees 008B  
                                          _pBDTEntryIn 0010  
                          __size_of_i2c_display_cursor 0022  
                     __end_of_USBCtrlEPServiceComplete 0CE2  
                __end_of_APP_DeviceCustomHIDInitialize 3E5A  
               __size_of_APP_DeviceCustomHIDInitialize 0034  
                        _APP_DeviceCustomHIDInitialize 3E26  
                          MSDTransferTerminated@handle 0039  
                   __size_of__data_sector_from_cluster 0010  
                   ExternalFlash_SectorSizeRead@config 0060  
                                 USBCtrlTrfRxService@i 002E  
                                              ?___lmul 0060  
                                           ??_MSDTasks 00AC  
                               __display_itoa@decimals 0097  
                         __parse_jump_steps@out_buffer 00A0  
                               ??_adc_read_temperature 0087  
                         __end_of_encoder_statemachine B884  
                                           _fat_format E252  
                                 ??_flash_sector_write 0083  
                    __size_of__fat_offset_from_cluster 001A  
                       __flash_write_to_buffer@command 007A  
                         __size_of__flash_partial_read 007A  
                            ?__fat_offset_from_cluster 0060  
                                    __end_of__add_item 108E  
                                            MSDTasks@i 00B1  
                                              ?_memcpy 0060  
                                              ?_memset 0060  
                                           __motor_run E468  
                                       ___lmul@product 0068  
                                           _device_dsc A25B  
                  fat_get_file_information@file_number 0096  
                                     ??_display_update 0070  
                                        __get_root@idx 0060  
                                     _USBCtrlEPService 2550  
                                           _ep_data_in 015F  
                                              ?_spi_tx 0060  
                                   __display_clear@col 0063  
                                            ?_adc_init 002E  
                                   __display_clear@row 0062  
                                              ?_strlen 0060  
                                            ?__get_fat 0060  
                                            ?__get_fbr 0060  
                __data_sector_from_cluster@fat_cluster 0060  
                                            ?__get_mbr 0060  
                          __end_of_USBCtrlTrfRxService 02CA  
            __ic2_display_set_ddram_address@data_array 006B  
                                        __display_itoa E02E  
                              ?__write_value_to_offset 0060  
                                   _USBCheckStdRequest 14E8  
                                   __size_of_motor_isr 0582  
                                    _configDescriptor1 A0BE  
                 __size_of__divide_jump_size_decrement 006E  
                                              i2l12044 3FDE  
                                              i2l11520 36C4  
                                              i2l11292 16C2  
                                              i2l11524 36E2  
                                              i2l11572 1788  
                                              i2l15104 3148  
                                              i2l22518 F7E4  
                                              i2l17144 BDD8  
                                              i2l17064 B916  
                                              i2l24346 27E6  
                                              i2l24348 281A  
                              ??_MSDCheckForErrorCases 006E  
                                              i2l15866 F4C6  
                                              i2l15894 F526  
                                              i2l18960 144C  
                                            ?___xxtofl 0060  
                          __end_ofi2_SYSTEM_Initialize 370A  
                                           ??i2_memcpy 0034  
                                           ??i2_memset 0034  
                                           _flash_init 42E4  
                   __fill_buffer_get_display@outBuffer 0064  
                          __end_of_USBCtrlTrfTxService 1830  
                                    __end_of__get_data 402A  
                                    __end_of__get_date 430A  
                                  _USBStdSetCfgHandler 140C  
                                    __end_of__get_time 42FE  
                     __end_of_maximum_speed_arc_string A237  
                                    __end_of__get_root EF20  
                                   __size_of_spi_tx_rx 0098  
                                   __size_of_spi_tx_tx 0090  
                                            ?_fat_init 002E  
                                              _RPINR21 000EFC  
                                              _RPINR22 000EFD  
                                              _SSP1ADD 000FC8  
                        i2c_display_init@init_sequence 006B  
                                    __end_of_dc_manual 9E3E  
                         __end_of__display_padded_itoa 1170  
                                              _SSP1BUF 000FC9  
                                              _RXADDRH 000F68  
                                              _RXADDRL 000F69  
                           __end_ofi2_USBStallEndpoint 06EA  
                       ??_motor_divide_jump_to_nearest 00BA  
                                              _TXADDRH 000F6A  
                                              _TXADDRL 000F6B  
                                  ?_USBCheckStdRequest 002E  
                         __size_of_USBStdGetDscHandler 012C  
                                   _motor_speed_lookup 9093  
                                 __flash_set_page_size 2C68  
                                    __end_of_dc_setup1 A06E  
                                    __end_of_dc_setup2 A01E  
                                              _UIEbits 000F36  
              motor_nonzero_steps_from_degrees@degrees 008F  
                   __end_of_motor_go_to_steps_position CB6A  
                           _motor_go_to_steps_position C85E  
             __end_of_motor_nonzero_steps_from_degrees 38E4  
            __size_of_motor_nonzero_steps_from_degrees 004C  
                   ??_motor_nonzero_steps_from_degrees 0093  
                    ?_motor_nonzero_steps_from_degrees 008F  
                     _motor_nonzero_steps_from_degrees 3898  
                           __end_of_APP_DeviceMSDTasks 42B4  
                                              _UIRbits 000F62  
                                    __end_of__read_fat 345E  
          MSDCheckForErrorCases@HostMoreDataThanDevice 006E  
                    __size_of__sector_from_file_number 0030  
                __end_of__flash_compare_page_to_buffer 2A1C  
               __size_of__flash_compare_page_to_buffer 007C  
                        __flash_compare_page_to_buffer 29A0  
                                           ??_i2c_init 0060  
                                     __CFG_CFGPLLEN$ON 000000  
                             __i2c_write@slave_address 0068  
                            ?__sector_from_file_number 0060  
                                         ??_USBMSDInit 0039  
                                    __read_fat@cluster 008F  
                       __end_of__get_available_cluster 18FE  
                                       ?__flash_wakeup 002E  
             __encoder_next_arc_step_size@old_stepsize 0060  
                               fat_find_file@extension 008D  
                                    __end_of_api_parse FF96  
                                    ?i2_ResetSenseData 002E  
                                    _MSDProcessCommand FC0E  
                           __display_padded_itoa@value 0078  
                           __size_of_motor_process_cue 0078  
                             fat_find_file@file_number 0091  
                                        __i2c_send@dat 0060  
                            __flash_get_status@command 006E  
                                            ?_tmr0_isr 002E  
                                              __Hparam 0000  
                      ??_USBIncrement1msInternalTimers 002E  
                                 ?_USBStdSetCfgHandler 002E  
            __end_of__get_available_offset_from_buffer 3136  
           __size_of__get_available_offset_from_buffer 005E  
                  ??__get_available_offset_from_buffer 0064  
                   ?__get_available_offset_from_buffer 0060  
                    __get_available_offset_from_buffer 30D8  
                                    __end_of__spi_init 3CB0  
                          __size_of_USBCheckHIDRequest 00D0  
                                              __Lparam 0000  
                 __size_of__divide_jump_size_increment 0040  
                                   ??i2_ResetSenseData 002E  
                                   __display_itoa@text 0098  
                             __size_of_fat_create_file 013C  
                                    __end_of_hid_rpt01 A1A1  
                                   ?_MSDProcessCommand 002E  
                              __end_of_MSDErrorHandler 00B0  
                           _MSDTransferTerminated$2623 003B  
                           __size_of_USBEnableEndpoint 003C  
                                         ?_system_init 002E  
                             _inverse_direction_string A249  
                      motor_steps_from_degrees@degrees 0087  
                                __size_of_encoder_init 0024  
                           ??_fat_get_file_information 0091  
                                 ??_USBCheckStdRequest 004B  
                                              ___aldiv 18FE  
                                              ___almod 1EEE  
                                            ?_spi_init 002E  
                                              ___fladd C522  
                        __size_of_USBCtrlTrfOutHandler 005C  
                                   __display_itoa_long 00B0  
                i2ExternalFlash_MediaInitialize@config 002E  
                  ExternalFlash_MediaInitialize@config 0060  
                                              ___fldiv D3FA  
                                     _ToSendDataBuffer 0300  
                                              ___flneg 3EBC  
                                      __size_of___lmul 0058  
                    __end_of__data_sector_from_cluster 42D4  
                                              ___flmul C1D0  
                                              ___fltol 1250  
                                              ___lldiv 2820  
                                     ??_USBDeviceTasks 004C  
                                              ___llmod 2E86  
                                              ___lwdiv 3662  
                              ?_motor_schedule_command 0097  
                                    ??_USBStallHandler 002E  
                                              ___lwmod 3A44  
                                              _dc_arc1 9EDE  
                                              _dc_arc2 9E8E  
                          motor_schedule_command@speed 009B  
       i2c_display_program_custom_character@data_array 0074  
                                              _dc_main A06E  
               __ic2_display_set_cgram_address@address 006D  
                           __end_of_motor_change_speed 4336  
                                              _dc_zero 9E3E  
                                  __size_of__i2c_start 0008  
                              __size_of_motor_arc_move 00E0  
                                              __pcinit 2386  
                                      __size_of_memcpy 0060  
                                  __size_of__i2c_write 0050  
                                      __size_of_memset 0030  
                             __size_of_MSDWriteHandler 02DC  
                            __end_of_configDescriptor1 A0FE  
                       __end_of__write_value_to_offset 3D54  
                                  ??_MSDProcessCommand 00A7  
                                              __ramtop 0F00  
                         ExternalFlash_SectorRead@page 0093  
                                           ??_adc_init 0060  
                                              __ptext0 F856  
                                              __ptext1 0CE2  
                                              __ptext2 41F0  
                                              __ptext3 420E  
                                              __ptext4 42E4  
                                              __ptext5 3ACC  
                                              __ptext6 3C78  
                                              __ptext7 2C68  
                                              __ptext8 42B4  
                                              __ptext9 1E40  
                                       ?__display_itoa 0095  
                                              _inPipes 000A  
                                       fat_format@cntr 0084  
                    __size_of_ExternalFlash_SectorRead 0034  
                                      __size_of_spi_tx 005A  
                          _USBDeferOUTDataStagePackets 00FC  
                                            _T0CONbits 000FD5  
                                           ??__get_fat 0062  
                                           ??__get_fbr 0062  
                                  ?__display_itoa_long 00AD  
                                           ??__get_mbr 0062  
                            ?_ExternalFlash_SectorRead 008B  
              motor_divide_jump@target_divide_position 00BF  
                                 __motor_run@direction 006A  
                                      __size_of_strlen 003E  
                          __end_of__system_timer0_init 3FD4  
                              __read_value_from_offset 392E  
                                         ??_USBSuspend 0045  
                                            _T2CONbits 000FCA  
                                   __end_of_USBMSDInit 04DE  
                                     ??_ResetSenseData 0060  
                              ?__flash_write_to_buffer 0073  
                             __end_of_configFile_write CE48  
                                           ??___xxtofl 0064  
                              _APP_DeviceMSDInitialize 42D4  
                                              _msd_cbw 000D40  
                                     ___aldiv@dividend 0060  
                                              _msd_csw 000D80  
                             __offset_from_file_number 407E  
                          __display_itoa_long@decimals 00B1  
                                      i2_USBDeviceInit F488  
                                     i2USBDeviceInit@i 0036  
                           __size_of__system_pin_setup 006A  
                      ?__ic2_display_set_ddram_address 002E  
                     ??__ic2_display_set_ddram_address 006A  
                                           ??_fat_init 008F  
                   __size_of_ExternalFlash_SectorWrite 0034  
                                ?__flash_set_page_size 002E  
                                   __end_of_USB_CD_Ptr 9DEE  
                                           _msd_buffer 000600  
                           __size_of_SYSTEM_Initialize 005A  
                      __size_of_USBCtrlTrfSetupHandler 0090  
                                              main@tmp 01FB  
                                __size_of_display_init 0036  
                              __size_of__flash_is_busy 0024  
                                              _strncmp 28A4  
                                  _flash_partial_write 2D44  
                                 end_of_initialization 2416  
                  __end_of_maximum_speed_manual_string A1E8  
                          _maximum_speed_manual_string A1D3  
                              ??_display_get_character 0061  
                                _MSDTransferTerminated 3564  
                __flash_compare_page_to_buffer@command 007B  
                       ?_MSDProcessCommandMediaPresent 002E  
                                   __end_of_USB_SD_Ptr 9DEC  
                           __end_of_bit_pattern_degree A2A7  
                                              memcpy@d 0067  
                                              memcpy@n 0064  
                                              memcpy@s 0069  
              __motor_get_speed_in_degrees@speed_index 0087  
                                  _pBDTEntryEP0OutNext 001A  
                            __end_of_MSDProcessCommand FD40  
                                              itoa@buf 0070  
                                              memset@c 0062  
                                              itoa@val 0072  
                                              memset@n 0064  
                                              memset@p 0066  
                                         _encoder_init 411E  
                                      _USB1msTickCount 0152  
                                 ??__display_itoa_long 00B4  
                             __flash_partial_read@data 0079  
                                            i2u1045_40 FDB8  
                                            i2u1045_47 FDAE  
                                            i2u1046_40 FDE8  
                             ?_USBStdFeatureReqHandler 002E  
                                            i2u1046_47 FDDE  
                                            i2u1048_40 FE3E  
                             __flash_partial_read@page 0073  
                                            i2u1048_47 FE34  
                                              ltoa@buf 007A  
                                              ltoa@val 007C  
                                            i2u1385_40 316A  
                                            i2u1385_47 3160  
                                            i2u2266_40 F852  
                                            i2u1483_40 F4EA  
                                    __end_of_motor_isr BE06  
                                            i2u1486_40 F58A  
                                            i2u1662_41 B8AC  
                                            i2u1672_40 BBF4  
                                            i2u1673_40 BC14  
                                            i2u1665_41 B958  
                                            i2u1762_48 0466  
                                            i2u1667_40 BA20  
                                            i2u1762_49 047A  
                                            i2u1764_48 048C  
                                            i2u1764_49 04A2  
                                            i2u1766_44 04C0  
                                ??_USBStdSetCfgHandler 0045  
                                            i2u1766_45 04BA  
                      __parse_command_long@out_idx_ptr 00AE  
                                      ___lldiv@divisor 0064  
                                            i2u1869_40 1480  
                                            i2u1887_40 D89A  
                                           ??_tmr0_isr 002E  
                                      ___lldiv@counter 006C  
                      ?__ic2_display_set_cgram_address 002E  
                     ??__ic2_display_set_cgram_address 006A  
                                   __end_of_USBSuspend 3F4C  
                                  _motor_period_lookup 9A16  
              __fill_buffer_get_mode_details@outBuffer 0060  
                              _USBCtrlEPAllowDataStage 24B8  
                                    __end_of_spi_tx_rx 24B8  
                       __end_of_motor_schedule_command 2048  
                                    __end_of_spi_tx_tx 270A  
                             __end_of_i2c_display_init 37AC  
                                     ___aldiv@quotient 006A  
                                              postdec1 000FE5  
                                              postdec2 000FDD  
         __make_cluster_chain@different_sector_cluster 009F  
                 __end_of_ExternalFlash_SectorSizeRead 4316  
                __size_of_ExternalFlash_SectorSizeRead 000C  
                         _ExternalFlash_SectorSizeRead 430A  
                                           ??_spi_init 0063  
                                              postinc0 000FEE  
                                              postinc1 000FE6  
                                              postinc2 000FDE  
                                          ?_fat_format 002E  
                                 ?_flash_partial_write 007F  
                     __size_of__fill_buffer_get_status 01CC  
                                              utoa@buf 0067  
                                           _motor_init 41F0  
              MSDProcessCommandMediaPresent@sectorSize 009E  
                                           _motor_mode 0020  
                             _USBCtrlEPServiceComplete 0BE8  
                                              utoa@val 0069  
                                            _MSD_State 00FA  
                                           _motor_stop 3976  
              __end_of__cluster_from_sector_and_offset 40D0  
             __size_of__cluster_from_sector_and_offset 0028  
                    ??__cluster_from_sector_and_offset 0064  
                     ?__cluster_from_sector_and_offset 0060  
                      __cluster_from_sector_and_offset 40A8  
                                          ?__motor_run 0060  
                                              strlen@s 0060  
                          __size_of_USBCheckMSDRequest 00BE  
                                        ??_api_prepare 0074  
                           _USBStatusStageEnabledFlag1 0022  
                           _USBStatusStageEnabledFlag2 00FE  
                             flash_partial_write@match 0087  
                                       _bit_pattern_ae A297  
                                   USBEnableEndpoint@p 0037  
                         __size_of__make_cluster_chain 02D6  
                                            _PORTAbits 000F80  
                                            _PORTDbits 000F83  
                                            _PORTEbits 000F84  
                             flash_partial_write@start 0081  
                       __end_of__flash_write_to_buffer 375C  
                                     __CFG_DSBOREN$OFF 000000  
                                         _display_init 3CE8  
motor_divide_jump_to_nearest@nearest_position_in_steps 00BA  
                                          ___fladd@grs 0085  
                   __size_of__get_available_root_entry 002A  
                                 spi_tx_rx@data_length 0066  
                     __make_cluster_chain@next_cluster 00AA  
                               fat_modify_file@cluster 00B9  
                                          ?_flash_init 002E  
                                     __CFG_CPUDIV$OSC1 000000  
                      adc_read_temperature@temperature 008B  
                                        ___xxtofl@sign 0068  
                                            _TRISAbits 000F92  
                                            _TRISBbits 000F93  
                                            _TRISCbits 000F94  
                                   api_parse@outBuffer 00BE  
                                            _TRISDbits 000F95  
                                            _TRISEbits 000F96  
                                   _ReceivedDataBuffer 0238  
                                   _BothEP0OutUOWNsSet 0025  
                                          ___fldiv@grs 0081  
                                          ___fldiv@rem 007A  
                                        __pbssBIGRAMll 0800  
                                     ??_MSDReadHandler 0095  
                            __flash_partial_read@start 0075  
                            USBConfigureEndpoint@EPNum 0033  
                              _i2c_display_write_fixed 35BA  
                           motor_arc_move@arc_in_steps 009F  
                                    __CFG_SOSCSEL$HIGH 000000  
                           ?_USBCtrlEPAllowStatusStage 002E  
                                 _encoder_statemachine AF66  
                  USER_USB_CALLBACK_EVENT_HANDLER@size 0041  
                              __size_of__display_clear 004A  
                                            _USTATcopy 002C  
                                      ??__flash_wakeup 0068  
        MSDProcessCommandMediaPresent@NumBytesInPacket 009D  
  __step_position_from_divide_position@divide_position 0087  
                 __end_of__encoder_next_setup_stepsize 2BF8  
                __size_of__encoder_next_setup_stepsize 0070  
                         __encoder_next_setup_stepsize 2B88  
                                          ___flmul@grs 007C  
                         __end_of_USBTransferOnePacket 05E4  
                                   _motor_steps_lookup 9461  
                                          _CCP1CONbits 000FBA  
                  __end_ofi2_ExternalFlash_MediaDetect 435C  
                          i2_ExternalFlash_MediaDetect 4358  
                    __parse_jump_steps@number_of_steps 00A6  
                         __end_of__display_signed_itoa 3A00  
                     __end_of_motor_steps_from_degrees 1A96  
                  __end_of__motor_get_speed_in_degrees FC0E  
                          __motor_get_speed_in_degrees FAD4  
                               i2c_display_cursor@line 006E  
                     __fat_sector_from_cluster@cluster 0060  
                                     __CFG_IOL1WAY$OFF 000000  
                                        ??_encoder_run 002E  
                         __end_of__parse_command_short F0A2  
                       ?__flash_compare_page_to_buffer 0073  
                        __fill_buffer_get_display@cntr 006C  
                                   __root_is_available 2DB0  
                        __fill_buffer_get_display@line 006D  
                                    __CFG_WPEND$PAGE_0 000000  
                   __flash_compare_page_to_buffer@page 0073  
                                  __CFG_MSSP7B_EN$MSK7 000000  
                   __make_cluster_chain@minimum_sector 009D  
                                     ?_MSDErrorHandler 002E  
                fat_resize_file@new_number_of_clusters 00B6  
                   __find_nth_cluster@sector_in_buffer 009D  
                         fat_resize_file@new_file_size 00AC  
                                     __write_root@data 0088  
                               _USBCtrlTrfSetupHandler 270A  
                                ??_flash_partial_write 0087  
                         __write_value_to_offset@value 0064  
                                 __display_padded_itoa 108E  
                               __end_of_bit_pattern_ae A29F  
                     ExternalFlash_CapacityRead@config 0060  
                              ?i2_USBTransferOnePacket 002E  
                             __size_of_display_prepare 0C64  
                        ??__motor_get_speed_in_degrees 0089  
                                __end_of_USBDeviceInit F488  
                __end_of_USBIncrement1msInternalTimers 41F0  
               __size_of_USBIncrement1msInternalTimers 0022  
                        _USBIncrement1msInternalTimers 41CE  
                                       __end_of___lmul 34B6  
                      __sector_from_file_number@sector 0063  
                                      ??__display_itoa 009A  
                        ?_ExternalFlash_SectorSizeRead 0060  
                          __size_of_motor_items_in_cue 000C  
                            ??__read_value_from_offset 0064  
                                  ?__root_is_available 002E  
                                    __size_of_MSDTasks 025A  
                             __end_of_USBStallEndpoint 03D4  
                                            i2memcpy@d 0034  
                                            i2memcpy@n 0032  
                                    ??_fat_create_file 00B4  
                       adc_read_temperature@adc_result 0089  
                              __end_ofi2_USBDeviceInit F5CE  
                                            i2memcpy@s 0036  
                             __size_of_fat_modify_file 0234  
                            ??_APP_DeviceMSDInitialize 003C  
                                            i2memset@c 0030  
                                            i2memset@n 0032  
                                            i2memset@p 0034  
                                       __end_of_memcpy 30D8  
                                      _MSDRetryAttempt 00F7  
                                 i2USBStallEndpoint@ep 0033  
                                       __end_of_memset 3F1C  
                                     __CFG_DSWDTEN$OFF 000000  
                                    _USBBusIsSuspended 0027  
                            flash_partial_write@length 0083  
                                       __end_of_spi_tx 3356  
                __get_available_root_entry@file_number 0095  
                                  fat_modify_file@data 00A7  
                                       __end_of_strlen 3B8A  
                         __display_padded_itoa@padding 008E  
                            __flash_set_page_size@size 0077  
                                  start_initialization 2386  
                                  fat_modify_file@root 00C3  
                              ?_USBStdGetStatusHandler 002E  
                                        ??__write_root 008A  
                             i2SYSTEM_Initialize@state 0032  
                        ExternalFlash_SectorWrite@page 008D  
                        USBCtrlTrfRxService@byteToRead 002F  
                               ??__flash_set_page_size 0073  
                                 display_prepare@space 00C8  
                                    ??_MSDWriteHandler 008F  
                                  __end_of_api_prepare 140C  
                    __end_of__get_available_root_entry 407E  
                            __display_itoa_long@length 00B8  
  __step_position_from_divide_position@target_position 008B  
                           ??__fill_buffer_get_display 0067  
                                    __size_ofi2_memcpy 005C  
                           i2c_display_cursor@position 006D  
                               ?_MSDTransferTerminated 0039  
                                    __size_ofi2_memset 002C  
                                      _USBMSDOutHandle 00EF  
                         __end_of_USBConfigureEndpoint 267A  
                                ?_encoder_statemachine 002E  
                                         ??__i2c_start 0060  
                                         ??__i2c_write 0068  
                      __end_of_USBStdFeatureReqHandler D92C  
                                  __flash_partial_read 2A96  
                                    USBStallEndpoint@p 0066  
                                  __size_of_fat_format 0216  
                                        _MSDHostNoData 00F5  
                                 ??__root_is_available 008F  
                    __end_of_USBCtrlEPAllowStatusStage 1B5A  
                         ?__encoder_next_arc_step_size 0060  
                             __end_of_USBCtrlEPService 25E6  
                           __size_of_MSDProcessCommand 0132  
                                  __size_of__motor_run 01EA  
                                            __i2c_send 4322  
                                      ___llmod@divisor 0064  
                                            __i2c_stop 4340  
                        ?__encoder_next_setup_stepsize 0060  
                                      ___llmod@counter 0068  
              _ExternalFlash_MediaInitialize$intlevel0 41B2  
                                    __size_of_i2c_init 001C  
                            ??_USBCtrlEPAllowDataStage 002F  
                                _motor_cue_write_index 00F2  
                                      _configFile_name 01F0  
                      ??__fill_buffer_get_mode_details 0062  
                                       USBDeviceInit@i 0068  
                             __size_of__backlight_init 0004  
                           __flash_partial_read@length 0077  
                        __root_is_available@first_byte 0094  
                               _pBDTEntryEP0OutCurrent 001C  
                               __size_of_fat_find_file 00E8  
                     __end_of_fat_get_file_information 2A96  
                                          _DMACON1bits 000F88  
                                          _DMACON2bits 000F86  
                                  __size_of_flash_init 000E  
                              USBTransferOnePacket@dir 0060  
                              USBTransferOnePacket@len 0063  
                                        _MSDTasks$2588 00AD  
                          MSDErrorHandler@OldMSD_State 0069  
                                        _MSDTasks$2589 00AF  
                       __end_ofi2_USBTransferOnePacket 08F0  
                          __size_of_flash_partial_read 0026  
                                             ??___lmul 0068  
                                spi_init@configuration 0063  
                                ?__display_padded_itoa 0078  
                              flash_partial_read@start 0089  
                                  _USBStdGetDscHandler FD40  
                                 ?__flash_partial_read 0073  
                                          ?_motor_init 002E  
                                  __end_of_encoder_run 07EE  
                                    __CFG_ADCSEL$BIT12 000000  
                    __size_of_APP_DeviceCustomHIDTasks 00A8  
                                          __pdataBANK1 01C1  
                                          __pdataBANK2 0278  
                             motor_isr@steps_remaining 0042  
                                          ?_motor_stop 002E  
                            ?_APP_DeviceCustomHIDTasks 002E  
                                       _motor_arc_move 1170  
                    __end_of_overshoot_in_steps_string A225  
                                 __size_of_system_init 00F4  
                                             ??_memcpy 0066  
                              __size_of__i2c_wait_idle 0064  
                                             ??_memset 0066  
                         __size_of__parse_command_long 003E  
                                   __end_of__i2c_start 4350  
                                             ??_spi_tx 0064  
                                   __end_of__i2c_write 37FC  
                            __root_is_available@offset 0091  
                                             ??_strlen 0062  
                                            ___fladd@a 0076  
                                            ___fladd@b 0072  
  motor_divide_jump_to_nearest@nearest_divide_position 00BE  
                                            __add_item 0FAA  
                               _USBActiveConfiguration 002D  
                       __end_of_USBStdGetStatusHandler 2386  
                                            ___fldiv@a 0072  
                                            ___fldiv@b 006E  
                             __size_of_fat_resize_file 00FE  
                             __fat_sector_from_cluster 422A  
                          api_parse@receivedDataLength 00BD  
                                     api_parse@out_idx 00C4  
                                    __size_of_adc_init 0056  
                                            ___flmul@a 0072  
                                            ___flmul@b 006E  
                                          __pbssCOMRAM 0001  
                                    __size_of__get_fat 0058  
                                    __size_of__get_fbr 0274  
                            ??_i2c_display_write_fixed 0068  
                                        __pcstackBANK0 0060  
                                        __pcstackBANK1 01FB  
                         __size_of_USBCtrlTrfInHandler 00BE  
                                    __size_of__get_mbr 00D0  
                         ??_ExternalFlash_CapacityRead 0064  
                       __size_of_MSDCheckForErrorCases 00FC  
             __get_available_offset_from_buffer@buffer 0062  
                        __end_of_MSDCheckForErrorCases 0BE8  
                           fat_create_file@file_number 00BC  
                                    __size_of___xxtofl 0144  
                                            _gblBLKLen 0146  
             __get_available_offset_from_buffer@offset 0066  
                   __end_of_flash_command_pagesize_512 A2B7  
                           _flash_command_pagesize_512 A2B3  
                   __end_of_flash_command_pagesize_528 A2B3  
                           _flash_command_pagesize_528 A2AF  
                                       __flash_is_busy 4166  
                                 ?_USBStdGetDscHandler 002E  
         __end_of_i2c_display_program_custom_character 29A0  
        __size_of_i2c_display_program_custom_character 007C  
               ??_i2c_display_program_custom_character 0070  
                ?_i2c_display_program_custom_character 006E  
                 _i2c_display_program_custom_character 2924  
                                            __get_data 4000  
                                            __get_date 42FE  
                                    _flash_sector_read 40D0  
                                    __size_of_fat_init 0010  
                  fat_get_file_information@root_sector 0092  
                      __end_of__read_value_from_offset 3976  
                          ?_motor_go_to_steps_position 009E  
                                            __get_time 42F2  
                                            __get_root ED88  
                               flash_sector_write@data 0081  
                               flash_sector_write@page 007F  
                                  __end_of__write_root 3898  
                                            _dc_manual 9DEE  
                           __end_of_USBWakeFromSuspend 3D8A  
                                   ?_flash_sector_read 0087  
                           __end_of_i2c_display_cursor 41AC  
                  __end_of__divide_jump_size_decrement 2D44  
                          __divide_jump_size_decrement 2CD6  
                                           ?__i2c_send 002E  
                                            _dc_setup1 A01E  
                                            _dc_setup2 9FCE  
                                      _USBStallHandler 3A88  
                             __display_padded_itoa@len 008C  
                                         _pBDTEntryOut 0138  
                                           ?__i2c_stop 002E  
                           fat_modify_file@file_number 00B5  
                             __display_padded_itoa@pos 008D  
                             __display_padded_itoa@tmp 0082  
                                            __read_fat 3406  
                             __size_of_USBDeviceAttach 0032  
                     __end_of_ExternalFlash_SectorRead 3DF2  
          __end_of__step_position_from_divide_position 0EC2  
         __size_of__step_position_from_divide_position 00EC  
                ??__step_position_from_divide_position 008B  
                 ?__step_position_from_divide_position 0087  
                  __step_position_from_divide_position 0DD6  
                   __get_available_cluster@skip_sector 008D  
                                   i2_USBStallEndpoint 05E4  
                                     ___lwdiv@dividend 0060  
                                 _motor_cue_read_index 00F3  
                                _fat_get_format_status 1E40  
            motor_go_to_steps_position@target_position 009E  
                                    fat_find_file@name 008B  
                       MSDProcessCommandMediaPresent@i 00A6  
                                  ??_flash_sector_read 008B  
                                            _api_parse FE6C  
                                            __pintcode 9008  
                            fat_create_file@root_entry 00BD  
                               __end_of_motor_arc_move 1250  
                              __fill_buffer_get_status EA0E  
                                   _APP_DeviceMSDTasks 42A2  
                                        __pmediumconst 9092  
                                             ?___aldiv 0060  
                                    __size_of_tmr0_isr 003A  
                                             ?___almod 0060  
                                             ?___fladd 0072  
                                  fat_find_file@offset 0094  
                                ??__flash_partial_read 007B  
                               __parse_jump_steps@data 009E  
                                             ?___fldiv 006E  
                                            __ptext100 F5CE  
                                            __ptext101 1250  
                                            __ptext110 DBA0  
                                            __ptext102 3EBC  
                                             ?___flneg 006E  
                                            __ptext111 FC0E  
                                            __ptext103 C1D0  
                                            __ptext120 32A2  
                                            __ptext112 2F52  
                                            __ptext104 C522  
                                            __ptext121 29A0  
                                            __ptext113 BE06  
                                            __ptext105 F33E  
                                            __ptext130 4166  
                                            __ptext122 E652  
                                            __ptext114 CE48  
                                            __ptext106 3EEC  
                                            __ptext131 34B6  
                                            __ptext123 0AEC  
                                            __ptext115 4354  
                                            __ptext107 3E5A  
                                            __ptext140 219C  
                                            __ptext132 32FC  
                                            __ptext124 FF96  
                                            __ptext116 3D8A  
                                            __ptext108 3248  
                                            __ptext141 132E  
                                            __ptext133 3DF2  
                                            __ptext125 02CA  
                                            __ptext117 37FC  
                                            __ptext109 42A2  
                                            __ptext150 3B8A  
                                            __ptext142 EA0E  
                                            __ptext134 2420  
                                            __ptext126 2FB4  
                                            __ptext118 370A  
                                            __ptext151 F1F0  
                                            __ptext143 3078  
                                            __ptext135 1D8E  
                                            __ptext127 3DBE  
                                            __ptext119 267A  
                                            __ptext160 F712  
                                            __ptext152 1F9C  
                                            __ptext144 EBDA  
                                            __ptext136 430A  
                                            __ptext128 40D0  
                                            __ptext161 F488  
                                            __ptext153 4316  
                                            __ptext145 1CD6  
                                            __ptext137 428E  
                                            __ptext129 2A96  
                        ??__divide_jump_size_decrement 0060  
                                            __ptext170 24B8  
                                            __ptext162 3D54  
                                            __ptext154 E468  
                                            __ptext146 3F7A  
                                            __ptext138 41AC  
                                            __ptext171 14E8  
                                            __ptext163 3F1C  
                                            __ptext155 04DE  
                                            __ptext147 FE6C  
                                            __ptext139 4336  
                                            __ptext180 1690  
                                            __ptext172 140C  
                                            __ptext164 3A88  
                                            __ptext148 EF20  
                                            __ptext181 3564  
                                            __ptext173 3FD4  
                                            __ptext165 41CE  
                                            __ptext157 3C3E  
                                            __ptext149 C85E  
                                            __ptext190 3BC8  
                                            __ptext182 05E4  
                                            __ptext174 22EA  
                                            __ptext166 2550  
                                            __ptext158 06EA  
                                            __ptext191 25E6  
                                            __ptext183 42D4  
                                            __ptext175 FD40  
                                            __ptext167 3136  
                                            __ptext159 B884  
                                            __ptext192 3192  
                                            __ptext184 03D4  
                                            __ptext176 D6B4  
                                            __ptext168 270A  
                                            __ptext193 01BE  
                                            __ptext185 3016  
                                            __ptext177 279A  
                                            __ptext169 0BE8  
                                            __ptext194 1A96  
                                            __ptext186 425E  
                                            __ptext178 36B6  
                                            __ptext195 1C18  
                                            __ptext187 4358  
                                            __ptext179 1B5A  
                                            __ptext196 1760  
                                            __ptext188 3E26  
                                            __ptext197 0000  
                                            __ptext189 07EE  
                                             ?___flmul 006E  
                                             ?___fltol 0060  
                                  fat_find_file@sector 0092  
                                             ?___lldiv 0060  
                                             ?___llmod 0060  
                          __size_of_flash_sector_write 0050  
                                             ?___lwdiv 0060  
                                            __spi_init 3C78  
                                             ?___lwmod 0060  
                           ??__offset_from_file_number 0062  
                                            _hid_rpt01 A184  
                                  ?i2_USBStallEndpoint 002E  
                        __size_of_adc_read_temperature 01DA  
                        __parse_jump_steps@out_idx_ptr 00A2  
                                            _idle_rate 00FF  
                                   display_update@line 0070  
                                    __size_of_spi_init 0040  
                                     ___almod@dividend 0060  
                                     ?i2_USBDeviceInit 002E  
                                          _api_prepare 132E  
                            fat_modify_file@start_byte 00A1  
                                      __i2c_write@data 0065  
                                      __i2c_write@cntr 0069  
                                  fat_create_file@name 00AC  
                                  ?_APP_DeviceMSDTasks 002E  
                            __size_ofi2_ResetSenseData 0062  
                   __flash_write_to_buffer@data_length 0077  
                                  fat_create_file@size 00B0  
                                           ?__add_item 0084  
                                 _USBTransferOnePacket 04DE  
                    __size_of_motor_steps_from_degrees 00CA  
                           __make_cluster_chain@offset 00A8  
            __ic2_display_set_cgram_address@data_array 006A  
                            ?_motor_steps_from_degrees 0087  
                           ?_ExternalFlash_MediaDetect 0060  
                           __make_cluster_chain@sector 00A4  
                       ??_ExternalFlash_SectorSizeRead 0062  
                                 __display_signed_itoa 39BC  
                  __end_of__divide_jump_size_increment 3B4C  
                          __divide_jump_size_increment 3B0C  
                                    ??_display_prepare 00BC  
                                 __CFG_RTCOSC$T1OSCREF 000000  
                                 __parse_command_short EF20  
                  __fill_buffer_get_display@secondHalf 0066  
                                    ?_configFile_write 002E  
                               __end_of__flash_is_busy 418A  
                                        _fat_find_file 0EC2  
                                    __display_itoa@len 00AA  
                                    __display_itoa@pos 00AC  
                                    __display_itoa@tmp 00A0  
                         __end_of_USBCtrlTrfOutHandler 31EE  
                                    ??_fat_modify_file 00A9  
                               ??_encoder_statemachine 00C4  
                             ??_motor_speed_from_index 0095  
                            __end_of_flash_sector_read 40F8  
                                ??_USBStdGetDscHandler 002E  
                  __size_of__flash_copy_page_to_buffer 005A  
                                          _ep_data_out 015C  
                                     ___lwdiv@quotient 0065  
                                   ??_configFile_write 00E3  
                                   _motor_change_speed 432C  
                                        _MSDWriteState 0021  
                         __size_of_USBCtrlTrfRxService 010C  
                                    _ConfigFile_buffer 0800  
                        USBConfigureEndpoint@direction 002E  
                                             ?_strncmp 0060  
                                       __display_clear 38E4  
                                           ?__get_data 0060  
                                           ?__get_date 0060  
               __cluster_from_sector_and_offset@offset 0062  
                                       __size_of_ultoa 00FE  
                                 ??i2_USBStallEndpoint 002F  
               __cluster_from_sector_and_offset@sector 0060  
                                      _config_internal 0159  
                                           ?__get_time 0060  
                                           ?__get_root 0060  
                        ??__divide_jump_size_increment 0060  
                                  __size_of_motor_init 001E  
                         __size_ofi2_SYSTEM_Initialize 0054  
                                      _config_external 0156  
                                  __size_of_motor_stop 0046  
                                      ___aldiv@divisor 0064  
                         __size_of_USBCtrlTrfTxService 00D0  
                       __size_of_display_get_character 002E  
                                  __make_cluster_chain D124  
                                      ___aldiv@counter 0068  
                                 ??_APP_DeviceMSDTasks 00B2  
                        __end_of_display_get_character 3FA8  
                                             _LATAbits 000F89  
                                             _LATBbits 000F8A  
                                             _LATCbits 000F8B  
                                             _LATDbits 000F8C  
                           __end_of_USBCheckHIDRequest 1760  
                       __root_is_available@file_number 0093  
                 __flash_compare_page_to_buffer@buffer 0075  
                                  ?_motor_change_speed 0060  
                           ??_USBCtrlEPServiceComplete 002F  
                                           ?__read_fat 008F  
                                             _IPR2bits 000FA2  
                                             _PIE1bits 000F9D  
                                             _PIE2bits 000FA0  
                      motor_isr@steps_until_standstill 003E  
                                          _encoder_run 06EA  
                             __fat_offset_from_cluster 4244  
                 __flash_compare_page_to_buffer@status 0079  
                                             _PIR1bits 000F9E  
                                             _PIR2bits 000FA1  
                               ??__display_padded_itoa 007D  
                                   __end_of_dc_divide1 9FCE  
                                   __end_of_dc_divide2 9F7E  
                                             i2u928_40 1BB8  
                                             i2u961_40 181A  
                                             i2u961_47 1810  
                                             i2u959_40 17DA  
                                             _RCONbits 000FD0  
                                             i2u959_47 17D0  
                                           ?_api_parse 00BB  
                                             _UEP0bits 000F26  
                                      ?_motor_arc_move 002E  
                                             _MSDTasks DBA0  
                                            _motor_isr B884  
                           _USBDeferINDataStagePackets 00FD  
                                         ??_fat_format 0084  
                                 _active_configuration 0170  
                                    ?_i2c_display_init 002E  
                              spi_tx_rx@command_length 0062  
                              flash_partial_write@data 0085  
                                   _bit_pattern_degree A29F  
                          __size_of_USBCheckStdRequest 00D8  
                      ??_MSDProcessCommandMediaPresent 0099  
                              flash_partial_write@page 007F  
                __end_of__fill_buffer_get_mode_details ED88  
               __size_of__fill_buffer_get_mode_details 01AE  
                        __fill_buffer_get_mode_details EBDA  
                                             _UCONbits 000F65  
                                           ?__spi_init 0060  
                                 _USBConfigureEndpoint 25E6  
                                         ??__motor_run 0066  
                           ?__data_sector_from_cluster 0060  
               __ic2_display_set_ddram_address@address 006A  
                                   ??_i2c_display_init 006A  
                 __size_of__encoder_next_arc_step_size 0070  
                                    __i2c_write@length 0067  
                                    ??__backlight_init 0060  
                                            _spi_tx_rx 2420  
                                            _spi_tx_tx 267A  
                                 ?__make_cluster_chain 0095  
                      __make_cluster_chain@next_offset 009B  
                   __flash_write_page_from_buffer@page 0073  
                     __size_of_USBStdFeatureReqHandler 0278  
                                       _USBMSDInHandle 00ED  
                                           _ADCON0bits 000FC2  
                                           _ADCON1bits 000FC1  
                                flash_sector_read@data 0089  
                                ?_USBTransferOnePacket 0060  
                                flash_sector_read@page 0087  
                                 ??_motor_change_speed 0062  
                             _initial_speed_arc_string A237  
                                ?__display_signed_itoa 008F  
                  _ExternalFlash_MediaDetect$intlevel0 433C  
                                    _SYS_InterruptHigh 9008  
                                ?__parse_command_short 002E  
                            i2c_display_cursor@address 006F  
                                     __CFG_WPFP$PAGE_1 000000  
                                       ?_fat_find_file 008B  
                                         ??_flash_init 0078  
                                         _RemoteWakeup 0028  
                    __end_of_ExternalFlash_MediaDetect 4340  
                                             i2_memcpy 3136  
                                             i2_memset 3FD4  
                    MSDCheckForErrorCases@DeviceNoData 006F  
                                 spi_tx_tx@data_length 0066  
                                      ?__flash_is_busy 002E  
                     __end_of__fill_buffer_get_display 1D8E  
                                          __write_root 384C  
                                   ?_SYS_InterruptHigh 002E  
                  __fill_buffer_get_display@start_line 006E  
                               __end_of__display_clear 392E  
                    __size_of_fat_get_file_information 007A  
                                           spi_tx@data 0060  
                            ?_fat_get_file_information 008F  
               __end_of_overshoot_cost_in_steps_string A1D3  
                       _overshoot_cost_in_steps_string A1BB  
                              __end_of_USBStallHandler 3ACC  
                      motor_schedule_command@direction 009D  
                             __sector_from_file_number 3E8C  
                      ??__flash_write_page_from_buffer 0076  
                              __size_of_display_update 0038  
               motor_go_to_steps_position@distance_ccw 00B6  
                         __end_of_maximum_speed_string A289  
                         __end_of_minimum_speed_string A297  
                                    ___lmul@multiplier 0060  
                                     __add_item@buffer 008A  
                                            copy_data0 239A  
                                            copy_data1 23BA  
                         __size_of__system_timer0_init 002C  
                                    ??_fat_resize_file 00B0  
                            __display_signed_itoa@text 0091  
          __encoder_next_divide_step_size@old_stepsize 0060  
                                     __add_item@length 008E  
                          ??_USBCtrlEPAllowStatusStage 002E  
                            __find_nth_cluster@cluster 0097  
                          __end_of_USBStdSetCfgHandler 14E8  
                                   __end_of_fat_format E468  
                          __display_padded_itoa@length 007A  
                                             _i2c_init 420E  
                                  ??_SYS_InterruptHigh 004D  
                                          ??__i2c_send 0060  
                                         _MSDReadState 00F8  
                                          ??__i2c_stop 0060  
                                   __end_of__motor_run E652  
                                   __end_of_device_dsc A26D  
                          __size_of__display_itoa_long 010E  
            __encoder_next_setup_stepsize@old_stepsize 0060  
                             MSDErrorHandler@ErrorCase 0068  
                               ?_fat_get_format_status 002E  
                              ?_USBCtrlTrfSetupHandler 002E  
                                      _fat_create_file F998  
                            ??__fill_buffer_get_status 006D  
                                           _ANCON0bits 000F48  
                                           _ANCON1bits 000F49  
                              USBStdGetStatusHandler@p 002F  
                                             __Hrparam 0000  
                                  __display_itoa@value 0095  
                               _motor_prescaler_lookup 9BFD  
                                            memcpy@tmp 0066  
                                             __Lrparam 0000  
                               USBTransferOnePacket@ep 0068  
                                    __parse_jump_steps F1F0  
                                             _SetupPkt 000D30  
                                   __end_of_flash_init 42F2  
                                       _TransferLength 00EB  
                                           ?_motor_isr 002E  
                           __end_of_USBCheckMSDRequest 1C18  
                                      api_parse@in_idx 00C5  
                                ?_USBConfigureEndpoint 002E  
                                __flash_is_busy@status 0071  
                                     __size_of___aldiv 00CE  
                             _ExternalFlash_SectorRead 3DBE  
                            display_get_character@line 0063  
                                   ?__parse_jump_steps 009E  
                                     __size_of___almod 00AE  
                                     __size_of___fladd 033C  
                                    ??_USBDeviceAttach 0060  
                                       __i2c_wait_idle 2EEE  
                                      _MSDWriteHandler CE48  
                                     __size_of___fldiv 02BA  
                                     __size_of___flneg 0030  
                                     __size_of___flmul 0352  
                                     __size_of___fltol 00DE  
                         fat_create_file@first_cluster 00BA  
                                     __size_of___lldiv 0084  
                                     __size_of___llmod 0068  
                                ??__make_cluster_chain 0099  
                                     __size_of___lwdiv 0054  
                       __display_itoa_long@short_value 00B9  
                                     __size_of___lwmod 0044  
            ExternalFlash_SectorWrite@allowWriteToZero 008C  
                                           ?_spi_tx_rx 0060  
                                           ?_spi_tx_tx 0060  
                 __size_ofi2_ExternalFlash_MediaDetect 0004  
                                          _MSDCBWValid 0171  
                            __end_of_SYS_InterruptHigh 908E  
                        __display_itoa_long@last_digit 00BB  
                                    ?_USBStallEndpoint 0060  
                           i2c_display_write_fixed@pos 0068  
                                             _adc_init 350E  
                                             __get_fat 33AE  
                                             __get_fbr D92C  
                                             __get_mbr 15C0  
                                          ??__add_item 008C  
                                   ??_USBStallEndpoint 0061  
                                  ??__parse_jump_steps 00A4  
                      __flash_copy_page_to_buffer@page 0073  
                   __end_of_ExternalFlash_CapacityRead 42A2  
                           _ExternalFlash_CapacityRead 428E  
                                             ___xxtofl F5CE  
                              ??_MSDTransferTerminated 003B  
                              __size_of_USBDeviceTasks 0144  
                                      ___lwdiv@divisor 0062  
                                             _fat_init 42B4  
                                      ?__display_clear 002E  
                                      ___lwdiv@counter 0064  
                           __size_of_flash_sector_read 0028  
                             ??__get_available_cluster 008F  
                                             __ptext10 E252  
                                             __ptext11 ED88  
                                             __ptext20 4142  
                                             __ptext12 15C0  
                                             __ptext21 3CE8  
                                             __ptext13 D92C  
                                             __ptext30 CB6A  
                                             __ptext22 2924  
                                             __ptext14 33AE  
                                             __ptext31 08F0  
                                             __ptext23 402A  
                                             __ptext15 4000  
                                             __ptext40 384C  
                                             __ptext32 DDFA  
                                             __ptext24 375C  
                                             __ptext16 411E  
                                             __ptext41 2D44  
                                             __ptext33 2A1C  
                                             __ptext25 37AC  
                                             __ptext17 3CB0  
                                             __ptext50 4244  
                                             __ptext42 31EE  
                                             __ptext34 2244  
                                             __ptext26 2EEE  
                                             __ptext18 35BA  
                                             __ptext51 42F2  
                                             __ptext43 D124  
                                             __ptext35 3406  
                                             __ptext27 4340  
                                             __ptext19 418A  
                                             __ptext60 09EE  
                                             __ptext52 42FE  
                                             __ptext44 3D1E  
                                             __ptext36 42C4  
                                             __ptext28 4348  
                                             __ptext61 2E86  
                                             __ptext53 4054  
                                             __ptext45 392E  
                                             __ptext37 F998  
                                             __ptext29 4322  
                                             __ptext70 3898  
                                             __ptext62 2820  
                                             __ptext54 2DB0  
                                             __ptext46 1830  
                                             __ptext38 0EC2  
                                             __ptext71 19CC  
                                             __ptext63 350E  
                                             __ptext55 40F8  
                                             __ptext47 30D8  
                                             __ptext39 28A4  
                                             __ptext80 3B0C  
                                             __ptext72 F0A2  
                                             __ptext64 3FA8  
                                             __ptext56 3E8C  
                                             __ptext48 40A8  
                                             __ptext81 2CD6  
                                             __ptext73 2048  
                                             __ptext65 2E1C  
                                             __ptext57 407E  
                                             __ptext49 422A  
                                             __ptext90 E02E  
                                             __ptext82 A302  
                                             __ptext74 0DD6  
                                             __ptext66 4350  
                                             __ptext58 0FAA  
                                             __ptext91 3B4C  
                                             __ptext83 4278  
                                             __ptext75 432C  
                                             __ptext67 2B10  
                                             __ptext59 360E  
                                             __ptext92 3A00  
                                             __ptext84 FAD4  
                                             __ptext76 1170  
                                             __ptext68 AF66  
                                             __ptext93 20F2  
                                             __ptext85 345E  
                                             __ptext77 2B88  
                                             __ptext69 3976  
                                             __ptext94 3A44  
                                             __ptext86 D3FA  
                                             __ptext78 3F4C  
                                             __ptext95 3662  
                                             __ptext87 39BC  
                                             __ptext79 2BF8  
                                             __ptext96 1EEE  
                                             __ptext88 108E  
                                             __ptext97 18FE  
                                             __ptext89 00B0  
                                             __ptext98 38E4  
                                             __ptext99 E834  
                                         _SSP1CON1bits 000FC6  
                      __size_of_motor_speed_from_index 0016  
                                         _SSP1CON2bits 000FC5  
                         __flash_set_page_size@command 0073  
                                         _SSP2CON1bits 000F72  
                 __end_of_MSDProcessCommandMediaAbsent 2FB4  
                __size_of_MSDProcessCommandMediaAbsent 0062  
                         _MSDProcessCommandMediaAbsent 2F52  
                                      ___almod@divisor 0064  
                                          ??__get_data 0062  
                                          ??__get_date 0062  
                                __flash_wakeup@command 0068  
                                      ___almod@counter 0068  
                                          ??__get_time 0062  
                                          ??__get_root 0062  
                     __end_of_inverse_direction_string A25B  
                                     __size_of_strncmp 0080  
                                  __parse_command_long 3B8A  
                           ?_ExternalFlash_SectorWrite 0084  
                       ExternalFlash_SectorRead@config 008B  
                       ExternalFlash_SectorRead@buffer 0091  
                   __end_of__flash_copy_page_to_buffer 3248  
                           __flash_copy_page_to_buffer 31EE  
                              __size_of_ResetSenseData 0062  
                     __end_of_APP_DeviceCustomHIDTasks 2244  
                                __end_of__flash_wakeup 350E  
                       __end_of_USBCtrlTrfSetupHandler 279A  
                                        __size_of_main 0142  
                                    ?_USBCtrlEPService 002E  
                                        __size_of_itoa 0044  
                                             _inq_resp A160  
                                        __size_of_ltoa 0054  
                                        __size_of_utoa 00AA  
                                          ??__read_fat 0091  
                          __end_of_flash_partial_write 2DB0  
                                           strncmp@len 0064  
                            __end_of__parse_jump_steps F33E  
                                   ??_USBCtrlEPService 004B  
                                             _tmr0_isr 3C3E  
                                  _USBCtrlTrfInHandler 1C18  
                   _MSDProcessCommandMediaPresent$2606 009B  
                             ??__write_value_to_offset 0066  
                                          ??_api_parse 00C0  
                               __end_of__i2c_wait_idle 2F52  
                fat_resize_file@old_number_of_clusters 00B4  
                           __end_of_motor_items_in_cue 4322  
                                             _outPipes 0001  
      i2c_display_program_custom_character@bit_pattern 006E  
                                             _spi_init 3ACC  
                                 _USBCtrlTrfOutHandler 3192  
                                             int$flags 005B  
                     __end_of__offset_from_file_number 40A8  
                           ??__fat_sector_from_cluster 0062  
                            _USBCtrlEPAllowStatusStage 1A96  
                                         ??_motor_init 0060  
                                          ??__spi_init 0063  
                                         ??_motor_stop 0060  
                                 ?__parse_command_long 00AA  
                                         _SSP1STATbits 000FC7  
                               ??_USBTransferOnePacket 0064  
                          __end_of_motor_period_lookup 9BFD  
               __make_cluster_chain@remaining_clusters 00A2  
                                         _SSP2STATbits 000F73  
                               ??__display_signed_itoa 0093  
                                __end_of__display_itoa E252  
                motor_go_to_steps_position@distance_cw 00B2  
                                     i2_ResetSenseData 3016  
                       ?_APP_DeviceCustomHIDInitialize 002E  
                                      ??_fat_find_file 008F  
                               ??__parse_command_short 00BA  
                MSDProcessCommandMediaPresent@capacity 00A2  
                        display_get_character@position 0060  
                             __size_of_MSDErrorHandler 011A  
                       ?__fill_buffer_get_mode_details 0060  
                                      __add_item@value 0086  
                              _motor_postscaler_lookup 982F  
                            _USBDeferStatusStagePacket 0023  
                      __end_of__fill_buffer_get_status EBDA  
                    __fill_buffer_get_display@position 006F  
                                          _OSCTUNEbits 000F9B  
                                           _INTCONbits 000FF2  
                       __parse_jump_steps@return_value 00A5  
                                 ?_USBCtrlTrfInHandler 002E  
                                             memcpy@d1 0060  
                                             memcpy@s1 0062  
                        USBCtrlTrfTxService@byteToSend 002E  
                   __motor_get_speed_in_degrees@lookup 008F  
                            __display_padded_itoa@text 007B  
                                             itoa@base 0074  
                                             memset@p1 0060  
                                            ultoa@base 0073  
                 __end_of_MSDComputeDeviceInAndResidue 1E40  
                __size_of_MSDComputeDeviceInAndResidue 00B2  
                         _MSDComputeDeviceInAndResidue 1D8E  
                           fat_modify_file@return_code 00B8  
                                     ?_USBStallHandler 002E  
                             USBStdFeatureReqHandler@p 0049  
                           ?__get_available_root_entry 002E  
                              spi_tx_tx@command_length 0062  
                        __size_of__flash_set_page_size 006E  
                              __end_of_fat_create_file FAD4  
                                             intlevel2 0000  
                                     spi_tx_rx@command 0060  
                             __flash_get_status@status 006F  
                                             ltoa@base 0080  
                          __size_of__root_is_available 006C  
                               __size_of_USBDeviceInit 014A  
                        ?_MSDProcessCommandMediaAbsent 002E  
              __end_of_USER_USB_CALLBACK_EVENT_HANDLER 2820  
             __size_of_USER_USB_CALLBACK_EVENT_HANDLER 0086  
                    ??_USER_USB_CALLBACK_EVENT_HANDLER 0043  
                     ?_USER_USB_CALLBACK_EVENT_HANDLER 003D  
                      _USER_USB_CALLBACK_EVENT_HANDLER 279A  
              motor_schedule_command@distance_in_steps 0097  
                                   __end_of_motor_init 420E  
                                     ___lwmod@dividend 0060  
                  __end_of_full_circle_in_steps_string A212  
                          _full_circle_in_steps_string A1FD  
                         i2USBTransferOnePacket@handle 0037  
                    __end_of_ExternalFlash_SectorWrite 3DBE  
                                     ___lldiv@dividend 0060  
                                   __end_of_motor_stop 39BC  
                __end_of__flash_write_page_from_buffer 32FC  
               __size_of__flash_write_page_from_buffer 005A  
                        __flash_write_page_from_buffer 32A2  
                             ??_motor_schedule_command 009D  
               i2SYSTEM_Initialize@pll_startup_counter 002E  
                 SYSTEM_Initialize@pll_startup_counter 0061  
                             _maximum_speed_arc_string A225  
                         __end_of_beep_duration_string A27B  
                                      _display_content 0280  
                           __end_of_flash_partial_read 411E  
                              __end_of_MSDWriteHandler D124  
                                            strncmp@s1 0060  
                                            strncmp@s2 0062  
                              __write_root@file_number 008E  
                                     spi_tx_tx@command 0060  
                              __size_of_MSDReadHandler 01E2  
                                __add_item@item_string 0084  
                                  fat_resize_file@root 00BB  
                           i2USBTransferOnePacket@data 002F  
                                        ??_system_init 00E9  
                    __size_of__fill_buffer_get_display 00B8  
                             ?__read_value_from_offset 0060  
                               _motor_speed_from_index 4278  
                            ?__fill_buffer_get_display 0064  
                               ??_USBConfigureEndpoint 002F  
                                      ?__i2c_wait_idle 002E  
                                ?_USBCtrlTrfOutHandler 002E  
                                      _display_prepare A302  
                                          ??_motor_isr 002E  
                             ??__flash_write_to_buffer 007A  
                             ?_APP_DeviceMSDInitialize 002E  
                                  _USBCtrlTrfRxService 01BE  
                                   _USBWakeFromSuspend 3D54  
                                ??__parse_command_long 00B0  
                                 _maximum_speed_string A27B  
                                   _i2c_display_cursor 418A  
                                 _minimum_speed_string A289  
                              _USBStdFeatureReqHandler D6B4  
                                      _fat_modify_file DDFA  
                                  i2_SYSTEM_Initialize 36B6  
                                          ??_spi_tx_rx 0068  
                                          ??_spi_tx_tx 0068  
                                  _USBCtrlTrfTxService 1760  
                           __size_of_SYS_InterruptHigh 0086  
                                         ?_api_prepare 0070  
                    __motor_get_speed_in_degrees@speed 008B  
                __flash_write_page_from_buffer@command 0079  
                                             utoa@base 006B  
                                             ultoa@buf 006D  
                                    _motor_divide_jump 2048  
                                             ultoa@val 006F  
                                      _gblMediaPresent 0168  
                  ExternalFlash_SectorRead@sector_addr 008D  
                                    _motor_command_cue 0200  
                                  ?_USBWakeFromSuspend 002E  
                                           _PPSCONbits 000EBF  
                                     ___lldiv@quotient 0068  
                                      ___lwmod@divisor 0062  
                          ??_ExternalFlash_MediaDetect 0062  
                                  ?_i2c_display_cursor 006D  
                                ??_USBCtrlTrfInHandler 002F  
                                   ?_motor_divide_jump 002E  
                                             strlen@cp 0064  
                                _USBAlternateInterface 01BE  
                                      ___lwmod@counter 0064  
                                          _ptrNextData 016C  
                                         ___aldiv@sign 0069  
                     __make_cluster_chain@data_changed 00A1  
                            i2USBTransferOnePacket@dir 002E  
                            i2USBTransferOnePacket@len 0031  
                                  USBEnableEndpoint@ep 0039  
                                      _endpoint_number 0026  
                                       _display_update 3CB0  
                  __get_available_cluster@first_sector 008B  
                      __size_of__get_available_cluster 00CE  
                                 ?_USBCtrlTrfRxService 002E  
                                        ___fladd@signs 0082  
                         __end_of_adc_read_temperature EA0E  
                                _MSDCheckForErrorCases 0AEC  
                                  ??_motor_divide_jump 00BA  
                           ??__fat_offset_from_cluster 0062  
                        ?_MSDComputeDeviceInAndResidue 0060  
                              motor_arc_move@direction 009E  
                                 ?i2_SYSTEM_Initialize 002E  
                             ?_USBCtrlEPAllowDataStage 002E  
                                       _MSBBufferIndex 016A  
                                         ___almod@sign 0069  
                                 ?_USBCtrlTrfTxService 002E  
                      __offset_from_file_number@offset 0063  
                                         ___fladd@aexp 0083  
                                        ?_encoder_init 002E  
                                         ___fladd@bexp 0084  
                                           _USBMSDInit 03D4  
                         _USBStatusStageTimeoutCounter 0024  
                      ??_ExternalFlash_MediaInitialize 0062  
                                     ??_motor_arc_move 009E  
                                 ??_USBWakeFromSuspend 0045  
                             __display_itoa_long@value 00AD  
                          __end_of__flash_partial_read 2B10  
                            configFile_write@file_size 00E5  
                           USBTransferOnePacket@handle 0069  
                                      __backlight_init 4350  
                                 ??_i2c_display_cursor 006E  
                                         ?_encoder_run 002E  
    motor_divide_jump_to_nearest@divide_position_float 00C0  
                           __size_of__parse_jump_steps 014E  
                            __size_of_configFile_write 02DE  
                              __display_itoa_long@text 00B2  
                           fat_resize_file@file_number 00BA  
                                           _USB_CD_Ptr 9DEC  
                                          _power_state 00F4  
                                          _USBInHandle 0164  
                             _APP_DeviceCustomHIDTasks 219C  
                           __end_of_flash_sector_write 384C  
